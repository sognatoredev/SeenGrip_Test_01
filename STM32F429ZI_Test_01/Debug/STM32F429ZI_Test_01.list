
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b710  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800b8c0  0800b8c0  0000c8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b988  0800b988  0000d158  2**0
                  CONTENTS
  4 .ARM          00000008  0800b988  0800b988  0000c988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b990  0800b990  0000d158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b990  0800b990  0000c990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b994  0800b994  0000c994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800b998  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d158  2**0
                  CONTENTS
 10 .bss          000086d8  20000158  20000158  0000d158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008830  20008830  0000d158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1af  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000499c  00000000  00000000  0002a337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  0002ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001252  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a365  00000000  00000000  00031722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a6f  00000000  00000000  0005ba87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6c2e  00000000  00000000  0007c4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00163124  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a90  00000000  00000000  00163168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00169bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000158 	.word	0x20000158
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b8a8 	.word	0x0800b8a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	0800b8a8 	.word	0x0800b8a8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2010      	movs	r0, #16
 80005c4:	f001 fb05 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f001 fb1e 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2039      	movs	r0, #57	@ 0x39
 80005d4:	f001 fafd 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80005d8:	2039      	movs	r0, #57	@ 0x39
 80005da:	f001 fb16 	bl	8001c0a <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_ETH_Init+0x84>)
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <MX_ETH_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000604:	22e1      	movs	r2, #225	@ 0xe1
 8000606:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_ETH_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_ETH_Init+0x84>)
 800061c:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <MX_ETH_Init+0x8c>)
 800061e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_ETH_Init+0x84>)
 8000622:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000626:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_ETH_Init+0x84>)
 800062a:	4a14      	ldr	r2, [pc, #80]	@ (800067c <MX_ETH_Init+0x90>)
 800062c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_ETH_Init+0x84>)
 8000630:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_ETH_Init+0x94>)
 8000632:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_ETH_Init+0x84>)
 8000636:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800063a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_ETH_Init+0x84>)
 800063e:	f001 ff01 	bl	8002444 <HAL_ETH_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000648:	f000 fb3a 	bl	8000cc0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800064c:	2238      	movs	r2, #56	@ 0x38
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <MX_ETH_Init+0x98>)
 8000652:	f00a fb97 	bl	800ad84 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_ETH_Init+0x98>)
 8000658:	2221      	movs	r2, #33	@ 0x21
 800065a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_ETH_Init+0x98>)
 800065e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000662:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_ETH_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200002ec 	.word	0x200002ec
 8000674:	40028000 	.word	0x40028000
 8000678:	2000039c 	.word	0x2000039c
 800067c:	20000214 	.word	0x20000214
 8000680:	20000174 	.word	0x20000174
 8000684:	200002b4 	.word	0x200002b4

08000688 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	@ 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a55      	ldr	r2, [pc, #340]	@ (80007fc <HAL_ETH_MspInit+0x174>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 80a4 	bne.w	80007f4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
 80006b0:	4b53      	ldr	r3, [pc, #332]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	4a52      	ldr	r2, [pc, #328]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80006bc:	4b50      	ldr	r3, [pc, #320]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006c4:	623b      	str	r3, [r7, #32]
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	4b4c      	ldr	r3, [pc, #304]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	4a4b      	ldr	r2, [pc, #300]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d8:	4b49      	ldr	r3, [pc, #292]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	4b45      	ldr	r3, [pc, #276]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	4a44      	ldr	r2, [pc, #272]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f4:	4b42      	ldr	r3, [pc, #264]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	4b3e      	ldr	r3, [pc, #248]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000708:	4a3d      	ldr	r2, [pc, #244]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000710:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000724:	4a36      	ldr	r2, [pc, #216]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6313      	str	r3, [r2, #48]	@ 0x30
 800072c:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000762:	6313      	str	r3, [r2, #48]	@ 0x30
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000770:	2332      	movs	r3, #50	@ 0x32
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	@ (8000804 <HAL_ETH_MspInit+0x17c>)
 800078c:	f002 f9aa 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000790:	2386      	movs	r3, #134	@ 0x86
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4817      	ldr	r0, [pc, #92]	@ (8000808 <HAL_ETH_MspInit+0x180>)
 80007ac:	f002 f99a 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c2:	230b      	movs	r3, #11
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ca:	4619      	mov	r1, r3
 80007cc:	480f      	ldr	r0, [pc, #60]	@ (800080c <HAL_ETH_MspInit+0x184>)
 80007ce:	f002 f989 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4808      	ldr	r0, [pc, #32]	@ (8000810 <HAL_ETH_MspInit+0x188>)
 80007f0:	f002 f978 	bl	8002ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f4:	bf00      	nop
 80007f6:	3738      	adds	r7, #56	@ 0x38
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40028000 	.word	0x40028000
 8000800:	40023800 	.word	0x40023800
 8000804:	40020800 	.word	0x40020800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020400 	.word	0x40020400
 8000810:	40021800 	.word	0x40021800

08000814 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b58      	ldr	r3, [pc, #352]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a57      	ldr	r2, [pc, #348]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b55      	ldr	r3, [pc, #340]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b51      	ldr	r3, [pc, #324]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a50      	ldr	r2, [pc, #320]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b4a      	ldr	r3, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a49      	ldr	r2, [pc, #292]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b47      	ldr	r3, [pc, #284]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a42      	ldr	r2, [pc, #264]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b40      	ldr	r3, [pc, #256]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a34      	ldr	r2, [pc, #208]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008d8:	482e      	ldr	r0, [pc, #184]	@ (8000994 <MX_GPIO_Init+0x180>)
 80008da:	f002 faaf 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	482d      	ldr	r0, [pc, #180]	@ (8000998 <MX_GPIO_Init+0x184>)
 80008e4:	f002 faaa 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4827      	ldr	r0, [pc, #156]	@ (800099c <MX_GPIO_Init+0x188>)
 8000900:	f002 f8f0 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000904:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481d      	ldr	r0, [pc, #116]	@ (8000994 <MX_GPIO_Init+0x180>)
 800091e:	f002 f8e1 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000922:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000934:	2307      	movs	r3, #7
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4818      	ldr	r0, [pc, #96]	@ (80009a0 <MX_GPIO_Init+0x18c>)
 8000940:	f002 f8d0 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x184>)
 800095c:	f002 f8c2 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x184>)
 8000974:	f002 f8b6 	bl	8002ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2028      	movs	r0, #40	@ 0x28
 800097e:	f001 f928 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000982:	2028      	movs	r0, #40	@ 0x28
 8000984:	f001 f941 	bl	8001c0a <HAL_NVIC_EnableIRQ>

}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00

080009a4 <mseq_upload_master>:
MSEQ_t mseq[MAX_MSEQ];

bool flag_end;

void mseq_upload_master (uint16_t size)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	81fb      	strh	r3, [r7, #14]

    rxdataSize = size;
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	81fb      	strh	r3, [r7, #14]

    mseq[mseq_cnt].MC = uart2_rx_IDLE_buf[0];
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <mseq_upload_master+0x58>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	4619      	mov	r1, r3
 80009bc:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <mseq_upload_master+0x5c>)
 80009be:	7818      	ldrb	r0, [r3, #0]
 80009c0:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <mseq_upload_master+0x60>)
 80009c2:	460b      	mov	r3, r1
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	440b      	add	r3, r1
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	3301      	adds	r3, #1
 80009ce:	4602      	mov	r2, r0
 80009d0:	701a      	strb	r2, [r3, #0]
    mseq[mseq_cnt].CKT = uart2_rx_IDLE_buf[1];
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <mseq_upload_master+0x58>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <mseq_upload_master+0x5c>)
 80009da:	7858      	ldrb	r0, [r3, #1]
 80009dc:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <mseq_upload_master+0x60>)
 80009de:	460b      	mov	r3, r1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	440b      	add	r3, r1
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	3302      	adds	r3, #2
 80009ea:	4602      	mov	r2, r0
 80009ec:	701a      	strb	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200003b4 	.word	0x200003b4
 8000a00:	200043e8 	.word	0x200043e8
 8000a04:	200003b8 	.word	0x200003b8

08000a08 <mseq_upload_device>:

void mseq_upload_device (uint16_t size)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	81fb      	strh	r3, [r7, #14]
    uint16_t cks_offset = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	81bb      	strh	r3, [r7, #12]

    rxdataSize = size;
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	81fb      	strh	r3, [r7, #14]

    // mseq[mseq_cnt].CKS = uart3_rx_IDLE_buf[rxdataSize - 1];
    mseq[(mseq_cnt + cks_offset)].CKS = uart6_rx_IDLE_buf[rxdataSize - 1];
 8000a1e:	89fb      	ldrh	r3, [r7, #14]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <mseq_upload_device+0x54>)
 8000a24:	8812      	ldrh	r2, [r2, #0]
 8000a26:	4611      	mov	r1, r2
 8000a28:	89ba      	ldrh	r2, [r7, #12]
 8000a2a:	440a      	add	r2, r1
 8000a2c:	490c      	ldr	r1, [pc, #48]	@ (8000a60 <mseq_upload_device+0x58>)
 8000a2e:	5cc8      	ldrb	r0, [r1, r3]
 8000a30:	490c      	ldr	r1, [pc, #48]	@ (8000a64 <mseq_upload_device+0x5c>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3303      	adds	r3, #3
 8000a3e:	4602      	mov	r2, r0
 8000a40:	701a      	strb	r2, [r3, #0]

    mseq_cnt++;
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <mseq_upload_device+0x54>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <mseq_upload_device+0x54>)
 8000a4c:	801a      	strh	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	200003b4 	.word	0x200003b4
 8000a60:	20005770 	.word	0x20005770
 8000a64:	200003b8 	.word	0x200003b8

08000a68 <mseq_display>:

void mseq_display (void)
{
 8000a68:	b5b0      	push	{r4, r5, r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af02      	add	r7, sp, #8
    uint16_t i = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < mseq_cnt; ++i)
 8000a72:	2300      	movs	r3, #0
 8000a74:	80fb      	strh	r3, [r7, #6]
 8000a76:	e026      	b.n	8000ac6 <mseq_display+0x5e>
    {
        printf("%d,%d,%d,%d\r\n", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
 8000a78:	88f9      	ldrh	r1, [r7, #6]
 8000a7a:	88fa      	ldrh	r2, [r7, #6]
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <mseq_display+0x74>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4403      	add	r3, r0
 8000a88:	3301      	adds	r3, #1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461c      	mov	r4, r3
 8000a8e:	88fa      	ldrh	r2, [r7, #6]
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <mseq_display+0x74>)
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4403      	add	r3, r0
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	88fa      	ldrh	r2, [r7, #6]
 8000aa4:	480d      	ldr	r0, [pc, #52]	@ (8000adc <mseq_display+0x74>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4403      	add	r3, r0
 8000ab0:	3303      	adds	r3, #3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	4622      	mov	r2, r4
 8000aba:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <mseq_display+0x78>)
 8000abc:	f00a f81a 	bl	800aaf4 <iprintf>
    for (i = 0; i < mseq_cnt; ++i)
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <mseq_display+0x7c>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	88fa      	ldrh	r2, [r7, #6]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d3d3      	bcc.n	8000a78 <mseq_display+0x10>
        // HAL_Delay(1);
    }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200003b8 	.word	0x200003b8
 8000ae0:	0800b8c0 	.word	0x0800b8c0
 8000ae4:	200003b4 	.word	0x200003b4

08000ae8 <debug_buf_read>:

void debug_buf_read (void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  if (uart_rx_IDLE_TotalCnt >= 10000)
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <debug_buf_read+0x2c>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d90a      	bls.n	8000b0e <debug_buf_read+0x26>
  {
    uart_rx_IDLE_TotalCnt = 0;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <debug_buf_read+0x2c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	801a      	strh	r2, [r3, #0]

    mseq_display();
 8000afe:	f7ff ffb3 	bl	8000a68 <mseq_display>

    HAL_UART_DMAStop(&huart2);
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <debug_buf_read+0x30>)
 8000b04:	f004 fd7c 	bl	8005600 <HAL_UART_DMAStop>
    HAL_UART_DMAStop(&huart6);
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <debug_buf_read+0x34>)
 8000b0a:	f004 fd79 	bl	8005600 <HAL_UART_DMAStop>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20006af8 	.word	0x20006af8
 8000b18:	200032e4 	.word	0x200032e4
 8000b1c:	2000332c 	.word	0x2000332c

08000b20 <_write>:

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	461a      	mov	r2, r3
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <_write+0x24>)
 8000b36:	f000 f8e8 	bl	8000d0a <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 8000b3a:	687b      	ldr	r3, [r7, #4]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200003a4 	.word	0x200003a4

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fed0 	bl	80018f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f84c 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f7ff fe5e 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b58:	f7ff fd12 	bl	8000580 <MX_DMA_Init>
  MX_ETH_Init();
 8000b5c:	f7ff fd46 	bl	80005ec <MX_ETH_Init>
  MX_USART2_UART_Init();
 8000b60:	f000 fc94 	bl	800148c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000b64:	f000 fcbe 	bl	80014e4 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8000b68:	f009 f9c2 	bl	8009ef0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000b6c:	f000 fc16 	bl	800139c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, 2000);
 8000b70:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b74:	4914      	ldr	r1, [pc, #80]	@ (8000bc8 <main+0x80>)
 8000b76:	4815      	ldr	r0, [pc, #84]	@ (8000bcc <main+0x84>)
 8000b78:	f000 f8a8 	bl	8000ccc <Q_Init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b80:	4913      	ldr	r1, [pc, #76]	@ (8000bd0 <main+0x88>)
 8000b82:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <main+0x8c>)
 8000b84:	f004 fdbb 	bl	80056fe <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <main+0x90>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <main+0x90>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f022 0208 	bic.w	r2, r2, #8
 8000b96:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b9c:	490f      	ldr	r1, [pc, #60]	@ (8000bdc <main+0x94>)
 8000b9e:	4810      	ldr	r0, [pc, #64]	@ (8000be0 <main+0x98>)
 8000ba0:	f004 fdad 	bl	80056fe <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <main+0x9c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <main+0x9c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0208 	bic.w	r2, r2, #8
 8000bb2:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <main+0xa0>)
 8000bb6:	f004 f8ad 	bl	8004d14 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UART_RX_BufferClear();
 8000bba:	f000 fe05 	bl	80017c8 <UART_RX_BufferClear>
    debug_buf_read();
 8000bbe:	f7ff ff93 	bl	8000ae8 <debug_buf_read>
  {
 8000bc2:	bf00      	nop
 8000bc4:	e7f9      	b.n	8000bba <main+0x72>
 8000bc6:	bf00      	nop
 8000bc8:	20003c08 	.word	0x20003c08
 8000bcc:	200003a4 	.word	0x200003a4
 8000bd0:	200043e8 	.word	0x200043e8
 8000bd4:	200032e4 	.word	0x200032e4
 8000bd8:	20003374 	.word	0x20003374
 8000bdc:	20005770 	.word	0x20005770
 8000be0:	2000332c 	.word	0x2000332c
 8000be4:	200033d4 	.word	0x200033d4
 8000be8:	2000329c 	.word	0x2000329c

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	@ 0x50
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	2230      	movs	r2, #48	@ 0x30
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f00a f8c2 	bl	800ad84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	4b28      	ldr	r3, [pc, #160]	@ (8000cb8 <SystemClock_Config+0xcc>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	4a27      	ldr	r2, [pc, #156]	@ (8000cb8 <SystemClock_Config+0xcc>)
 8000c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c20:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <SystemClock_Config+0xcc>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <SystemClock_Config+0xd0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a21      	ldr	r2, [pc, #132]	@ (8000cbc <SystemClock_Config+0xd0>)
 8000c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <SystemClock_Config+0xd0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c4c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c52:	2302      	movs	r3, #2
 8000c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c60:	23a8      	movs	r3, #168	@ 0xa8
 8000c62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	4618      	mov	r0, r3
 8000c72:	f003 fb67 	bl	8004344 <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c7c:	f000 f820 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	230f      	movs	r3, #15
 8000c82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2302      	movs	r3, #2
 8000c86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c8c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fdc8 	bl	8004834 <HAL_RCC_ClockConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000caa:	f000 f809 	bl	8000cc0 <Error_Handler>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3750      	adds	r7, #80	@ 0x50
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40007000 	.word	0x40007000

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <Error_Handler+0x8>

08000ccc <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	88fa      	ldrh	r2, [r7, #6]
 8000cf6:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b088      	sub	sp, #32
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	4613      	mov	r3, r2
 8000d16:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 f8ea 	bl	8000ef6 <Q_NumEmptyBytes>
 8000d22:	4603      	mov	r3, r0
 8000d24:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	db44      	blt.n	8000db8 <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	4413      	add	r3, r2
 8000d3a:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	8afa      	ldrh	r2, [r7, #22]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d20b      	bcs.n	8000d5e <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000d50:	4413      	add	r3, r2
 8000d52:	88fa      	ldrh	r2, [r7, #6]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00a f88f 	bl	800ae7a <memcpy>
 8000d5c:	e01d      	b.n	8000d9a <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	881a      	ldrh	r2, [r3, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000d78:	4413      	add	r3, r2
 8000d7a:	8aba      	ldrh	r2, [r7, #20]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f00a f87b 	bl	800ae7a <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	68d8      	ldr	r0, [r3, #12]
 8000d88:	8abb      	ldrh	r3, [r7, #20]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	18d1      	adds	r1, r2, r3
 8000d8e:	88fa      	ldrh	r2, [r7, #6]
 8000d90:	8abb      	ldrh	r3, [r7, #20]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	f00a f870 	bl	800ae7a <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	881a      	ldrh	r2, [r3, #0]
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
 8000da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000da4:	fb01 f202 	mul.w	r2, r1, r2
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000db2:	2301      	movs	r3, #1
 8000db4:	77fb      	strb	r3, [r7, #31]
 8000db6:	e00e      	b.n	8000dd6 <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	88db      	ldrh	r3, [r3, #6]
 8000dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d004      	beq.n	8000dce <Q_Write+0xc4>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	88db      	ldrh	r3, [r3, #6]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	e001      	b.n	8000dd2 <Q_Write+0xc8>
 8000dce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	80da      	strh	r2, [r3, #6]
    return ret;    
 8000dd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	4613      	mov	r3, r2
 8000dec:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 f864 	bl	8000ebc <Q_NumContents>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d848      	bhi.n	8000e90 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	4413      	add	r3, r2
 8000e0a:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	8aba      	ldrh	r2, [r7, #20]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d20b      	bcs.n	8000e2e <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	4619      	mov	r1, r3
 8000e26:	68b8      	ldr	r0, [r7, #8]
 8000e28:	f00a f827 	bl	800ae7a <memcpy>
 8000e2c:	e01d      	b.n	8000e6a <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	881a      	ldrh	r2, [r3, #0]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	8a7a      	ldrh	r2, [r7, #18]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68b8      	ldr	r0, [r7, #8]
 8000e50:	f00a f813 	bl	800ae7a <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8000e54:	8a7b      	ldrh	r3, [r7, #18]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	18d0      	adds	r0, r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	68d9      	ldr	r1, [r3, #12]
 8000e5e:	88fa      	ldrh	r2, [r7, #6]
 8000e60:	8a7b      	ldrh	r3, [r7, #18]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	f00a f808 	bl	800ae7a <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e70:	461a      	mov	r2, r3
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	4413      	add	r3, r2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	8812      	ldrh	r2, [r2, #0]
 8000e7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e7e:	fb01 f202 	mul.w	r2, r1, r2
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	75fb      	strb	r3, [r7, #23]
 8000e8e:	e010      	b.n	8000eb2 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	891b      	ldrh	r3, [r3, #8]
 8000e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d004      	beq.n	8000ea6 <Q_Read+0xc6>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	891b      	ldrh	r3, [r3, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	e001      	b.n	8000eaa <Q_Read+0xca>
 8000ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ed8:	1a9b      	subs	r3, r3, r2
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ee2:	fb01 f202 	mul.w	r2, r1, r2
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	b29b      	uxth	r3, r3
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000ef6:	b590      	push	{r4, r7, lr}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	881c      	ldrh	r4, [r3, #0]
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffda 	bl	8000ebc <Q_NumContents>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	1ae3      	subs	r3, r4, r3
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	b29b      	uxth	r3, r3
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <MemManage_Handler+0x4>

08000f84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 fce7 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <DMA1_Stream5_IRQHandler+0x10>)
 8000fd2:	f000 ffcd 	bl	8001f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20003374 	.word	0x20003374

08000fe0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fe6:	f003 ff05 	bl	8004df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000329c 	.word	0x2000329c

08000ff4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (uart_rx_IDLE_TotalCnt < 2)
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <USART2_IRQHandler+0x64>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d823      	bhi.n	800104a <USART2_IRQHandler+0x56>
  {
    if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)))
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <USART2_IRQHandler+0x68>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b02      	cmp	r3, #2
 800100e:	d006      	beq.n	800101e <USART2_IRQHandler+0x2a>
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <USART2_IRQHandler+0x68>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b08      	cmp	r3, #8
 800101c:	d115      	bne.n	800104a <USART2_IRQHandler+0x56>
    {
      __HAL_UART_CLEAR_OREFLAG(&huart2);
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <USART2_IRQHandler+0x68>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <USART2_IRQHandler+0x68>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
      __HAL_UART_CLEAR_FEFLAG(&huart2);
 8001034:	2300      	movs	r3, #0
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <USART2_IRQHandler+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <USART2_IRQHandler+0x68>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
    //   HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
    }
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800104a:	4804      	ldr	r0, [pc, #16]	@ (800105c <USART2_IRQHandler+0x68>)
 800104c:	f004 fbb4 	bl	80057b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20006af8 	.word	0x20006af8
 800105c:	200032e4 	.word	0x200032e4

08001060 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001064:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001068:	f001 ff02 	bl	8002e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <DMA2_Stream1_IRQHandler+0x10>)
 8001076:	f000 ff7b 	bl	8001f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200033d4 	.word	0x200033d4

08001084 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <OTG_FS_IRQHandler+0x10>)
 800108a:	f002 f84d 	bl	8003128 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20007fe0 	.word	0x20007fe0

08001098 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <USART6_IRQHandler+0x10>)
 800109e:	f004 fb8b 	bl	80057b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000332c 	.word	0x2000332c

080010ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81fb      	strh	r3, [r7, #14]
  
  if ((num = Q_NumContents(&USB_TX_Q)) > 0 )
 80010b8:	4818      	ldr	r0, [pc, #96]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010ba:	f7ff feff 	bl	8000ebc <Q_NumContents>
 80010be:	4603      	mov	r3, r0
 80010c0:	81fb      	strh	r3, [r7, #14]
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d016      	beq.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 80010c8:	f009 f808 	bl	800a0dc <CDC_Transmit_Is_Busy>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d011      	beq.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010d4:	881a      	ldrh	r2, [r3, #0]
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	4413      	add	r3, r2
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010de:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 80010e0:	89fb      	ldrh	r3, [r7, #14]
 80010e2:	461a      	mov	r2, r3
 80010e4:	490f      	ldr	r1, [pc, #60]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010e6:	480d      	ldr	r0, [pc, #52]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010e8:	f7ff fe7a 	bl	8000de0 <Q_Read>

      CDC_Transmit_FS(queData, num);
 80010ec:	89fb      	ldrh	r3, [r7, #14]
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010f2:	f008 ffbb 	bl	800a06c <CDC_Transmit_FS>
    }
  }

  TIM1_CNT_1++; // LED ?���??????? 
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80010fe:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++; //
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a09      	ldr	r2, [pc, #36]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001108:	6013      	str	r3, [r2, #0]
  TIM1_CNT_3++; //
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200003a4 	.word	0x200003a4
 8001120:	20003c04 	.word	0x20003c04
 8001124:	20003434 	.word	0x20003434
 8001128:	200043d8 	.word	0x200043d8
 800112c:	200043dc 	.word	0x200043dc
 8001130:	200043e0 	.word	0x200043e0

08001134 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8001154:	4b31      	ldr	r3, [pc, #196]	@ (800121c <HAL_UARTEx_RxEventCallback+0xd4>)
 8001156:	881a      	ldrh	r2, [r3, #0]
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	4413      	add	r3, r2
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <HAL_UARTEx_RxEventCallback+0xd4>)
 8001160:	801a      	strh	r2, [r3, #0]

  if (huart->Instance == USART6)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a2e      	ldr	r2, [pc, #184]	@ (8001220 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d127      	bne.n	80011bc <HAL_UARTEx_RxEventCallback+0x74>
  {
    mseq_upload_device(Size);
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fc4a 	bl	8000a08 <mseq_upload_device>

    __HAL_DMA_DISABLE(&hdma_usart6_rx);
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <HAL_UARTEx_RxEventCallback+0xdc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800118c:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart6_rx);
 800118e:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0201 	orr.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]

    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 800119e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a2:	4921      	ldr	r1, [pc, #132]	@ (8001228 <HAL_UARTEx_RxEventCallback+0xe0>)
 80011a4:	4821      	ldr	r0, [pc, #132]	@ (800122c <HAL_UARTEx_RxEventCallback+0xe4>)
 80011a6:	f004 faaa 	bl	80056fe <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <HAL_UARTEx_RxEventCallback+0xdc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_UARTEx_RxEventCallback+0xdc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0208 	bic.w	r2, r2, #8
 80011b8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart2_rx);

    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
  }
}
 80011ba:	e02b      	b.n	8001214 <HAL_UARTEx_RxEventCallback+0xcc>
  else if (huart->Instance == USART2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001230 <HAL_UARTEx_RxEventCallback+0xe8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d126      	bne.n	8001214 <HAL_UARTEx_RxEventCallback+0xcc>
    mseq_upload_master(Size);
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fbeb 	bl	80009a4 <mseq_upload_master>
    __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_UARTEx_RxEventCallback+0xec>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_UARTEx_RxEventCallback+0xec>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_UARTEx_RxEventCallback+0xec>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e6:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart2_rx);
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_UARTEx_RxEventCallback+0xec>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_UARTEx_RxEventCallback+0xec>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 80011f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011fc:	490e      	ldr	r1, [pc, #56]	@ (8001238 <HAL_UARTEx_RxEventCallback+0xf0>)
 80011fe:	480f      	ldr	r0, [pc, #60]	@ (800123c <HAL_UARTEx_RxEventCallback+0xf4>)
 8001200:	f004 fa7d 	bl	80056fe <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_UARTEx_RxEventCallback+0xec>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_UARTEx_RxEventCallback+0xec>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0208 	bic.w	r2, r2, #8
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20006af8 	.word	0x20006af8
 8001220:	40011400 	.word	0x40011400
 8001224:	200033d4 	.word	0x200033d4
 8001228:	20005770 	.word	0x20005770
 800122c:	2000332c 	.word	0x2000332c
 8001230:	40004400 	.word	0x40004400
 8001234:	20003374 	.word	0x20003374
 8001238:	200043e8 	.word	0x200043e8
 800123c:	200032e4 	.word	0x200032e4

08001240 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001250:	d102      	bne.n	8001258 <HAL_GPIO_EXTI_Callback+0x18>
  {
    UserButton_Flag = 1;
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <HAL_GPIO_EXTI_Callback+0x24>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
  }
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	200043e4 	.word	0x200043e4

08001268 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e00a      	b.n	8001290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127a:	f3af 8000 	nop.w
 800127e:	4601      	mov	r1, r0
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	b2ca      	uxtb	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	dbf0      	blt.n	800127a <_read+0x12>
  }

  return len;
 8001298:	687b      	ldr	r3, [r7, #4]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ca:	605a      	str	r2, [r3, #4]
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_isatty>:

int _isatty(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	@ (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f009 fd70 	bl	800ae20 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20030000 	.word	0x20030000
 800136c:	00000400 	.word	0x00000400
 8001370:	20003298 	.word	0x20003298
 8001374:	20008830 	.word	0x20008830

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <MX_TIM1_Init+0x98>)
 80013ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <MX_TIM1_Init+0x9c>)
 80013bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <MX_TIM1_Init+0x98>)
 80013c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <MX_TIM1_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <MX_TIM1_Init+0x98>)
 80013ce:	22a7      	movs	r2, #167	@ 0xa7
 80013d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <MX_TIM1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <MX_TIM1_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <MX_TIM1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013e4:	4813      	ldr	r0, [pc, #76]	@ (8001434 <MX_TIM1_Init+0x98>)
 80013e6:	f003 fc45 	bl	8004c74 <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013f0:	f7ff fc66 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4619      	mov	r1, r3
 8001400:	480c      	ldr	r0, [pc, #48]	@ (8001434 <MX_TIM1_Init+0x98>)
 8001402:	f003 fde7 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800140c:	f7ff fc58 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_TIM1_Init+0x98>)
 800141e:	f004 f80f 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001428:	f7ff fc4a 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000329c 	.word	0x2000329c
 8001438:	40010000 	.word	0x40010000

0800143c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <HAL_TIM_Base_MspInit+0x48>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d115      	bne.n	800147a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HAL_TIM_Base_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <HAL_TIM_Base_MspInit+0x4c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6453      	str	r3, [r2, #68]	@ 0x44
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_TIM_Base_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2019      	movs	r0, #25
 8001470:	f000 fbaf 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001474:	2019      	movs	r0, #25
 8001476:	f000 fbc8 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010000 	.word	0x40010000
 8001488:	40023800 	.word	0x40023800

0800148c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 8001492:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <MX_USART2_UART_Init+0x54>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 8001498:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 80014a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014a4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 80014c8:	f004 f84a 	bl	8005560 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80014d2:	f7ff fbf5 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200032e4 	.word	0x200032e4
 80014e0:	40004400 	.word	0x40004400

080014e4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <MX_USART6_UART_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 80014f0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80014f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 80014f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014fc:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 8001506:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_USART6_UART_Init+0x50>)
 8001520:	f004 f81e 	bl	8005560 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 800152a:	f7ff fbc9 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000332c 	.word	0x2000332c
 8001538:	40011400 	.word	0x40011400

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a77      	ldr	r2, [pc, #476]	@ (8001738 <HAL_UART_MspInit+0x1fc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	f040 8081 	bne.w	8001662 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	4b75      	ldr	r3, [pc, #468]	@ (800173c <HAL_UART_MspInit+0x200>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	4a74      	ldr	r2, [pc, #464]	@ (800173c <HAL_UART_MspInit+0x200>)
 800156a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001570:	4b72      	ldr	r3, [pc, #456]	@ (800173c <HAL_UART_MspInit+0x200>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	4b6e      	ldr	r3, [pc, #440]	@ (800173c <HAL_UART_MspInit+0x200>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	4a6d      	ldr	r2, [pc, #436]	@ (800173c <HAL_UART_MspInit+0x200>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6313      	str	r3, [r2, #48]	@ 0x30
 800158c:	4b6b      	ldr	r3, [pc, #428]	@ (800173c <HAL_UART_MspInit+0x200>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	4b67      	ldr	r3, [pc, #412]	@ (800173c <HAL_UART_MspInit+0x200>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a0:	4a66      	ldr	r2, [pc, #408]	@ (800173c <HAL_UART_MspInit+0x200>)
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a8:	4b64      	ldr	r3, [pc, #400]	@ (800173c <HAL_UART_MspInit+0x200>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b4:	2308      	movs	r3, #8
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c4:	2307      	movs	r3, #7
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	485c      	ldr	r0, [pc, #368]	@ (8001740 <HAL_UART_MspInit+0x204>)
 80015d0:	f001 fa88 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015d4:	2320      	movs	r3, #32
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e4:	2307      	movs	r3, #7
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4855      	ldr	r0, [pc, #340]	@ (8001744 <HAL_UART_MspInit+0x208>)
 80015f0:	f001 fa78 	bl	8002ae4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015f4:	4b54      	ldr	r3, [pc, #336]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 80015f6:	4a55      	ldr	r2, [pc, #340]	@ (800174c <HAL_UART_MspInit+0x210>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015fa:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 80015fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001600:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001602:	4b51      	ldr	r3, [pc, #324]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b4f      	ldr	r3, [pc, #316]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b4e      	ldr	r3, [pc, #312]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 8001610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001614:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001616:	4b4c      	ldr	r3, [pc, #304]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161c:	4b4a      	ldr	r3, [pc, #296]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001622:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001628:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162e:	4b46      	ldr	r3, [pc, #280]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001634:	4844      	ldr	r0, [pc, #272]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 8001636:	f000 fb03 	bl	8001c40 <HAL_DMA_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001640:	f7ff fb3e 	bl	8000cc0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a40      	ldr	r2, [pc, #256]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 8001648:	63da      	str	r2, [r3, #60]	@ 0x3c
 800164a:	4a3f      	ldr	r2, [pc, #252]	@ (8001748 <HAL_UART_MspInit+0x20c>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	2026      	movs	r0, #38	@ 0x26
 8001656:	f000 fabc 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800165a:	2026      	movs	r0, #38	@ 0x26
 800165c:	f000 fad5 	bl	8001c0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001660:	e066      	b.n	8001730 <HAL_UART_MspInit+0x1f4>
  else if(uartHandle->Instance==USART6)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a3a      	ldr	r2, [pc, #232]	@ (8001750 <HAL_UART_MspInit+0x214>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d161      	bne.n	8001730 <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART6_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_UART_MspInit+0x200>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	4a31      	ldr	r2, [pc, #196]	@ (800173c <HAL_UART_MspInit+0x200>)
 8001676:	f043 0320 	orr.w	r3, r3, #32
 800167a:	6453      	str	r3, [r2, #68]	@ 0x44
 800167c:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_UART_MspInit+0x200>)
 800167e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_UART_MspInit+0x200>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	4a2a      	ldr	r2, [pc, #168]	@ (800173c <HAL_UART_MspInit+0x200>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6313      	str	r3, [r2, #48]	@ 0x30
 8001698:	4b28      	ldr	r3, [pc, #160]	@ (800173c <HAL_UART_MspInit+0x200>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a4:	23c0      	movs	r3, #192	@ 0xc0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016b4:	2308      	movs	r3, #8
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	4825      	ldr	r0, [pc, #148]	@ (8001754 <HAL_UART_MspInit+0x218>)
 80016c0:	f001 fa10 	bl	8002ae4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80016c4:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016c6:	4a25      	ldr	r2, [pc, #148]	@ (800175c <HAL_UART_MspInit+0x220>)
 80016c8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016cc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80016d0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d2:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016e4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016f8:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001704:	4814      	ldr	r0, [pc, #80]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 8001706:	f000 fa9b 	bl	8001c40 <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8001710:	f7ff fad6 	bl	8000cc0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 8001718:	63da      	str	r2, [r3, #60]	@ 0x3c
 800171a:	4a0f      	ldr	r2, [pc, #60]	@ (8001758 <HAL_UART_MspInit+0x21c>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2047      	movs	r0, #71	@ 0x47
 8001726:	f000 fa54 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800172a:	2047      	movs	r0, #71	@ 0x47
 800172c:	f000 fa6d 	bl	8001c0a <HAL_NVIC_EnableIRQ>
}
 8001730:	bf00      	nop
 8001732:	3730      	adds	r7, #48	@ 0x30
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40004400 	.word	0x40004400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000
 8001744:	40020c00 	.word	0x40020c00
 8001748:	20003374 	.word	0x20003374
 800174c:	40026088 	.word	0x40026088
 8001750:	40011400 	.word	0x40011400
 8001754:	40020800 	.word	0x40020800
 8001758:	200033d4 	.word	0x200033d4
 800175c:	40026428 	.word	0x40026428

08001760 <UserButton_BufferClear>:
extern DMA_HandleTypeDef hdma_usart6_rx;

// extern MSEQ_t mseq;

static uint8_t UserButton_BufferClear (void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
    uint8_t buttonstatus = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	71fb      	strb	r3, [r7, #7]

    if (TIM1_CNT_2 >= 100)
 800176a:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <UserButton_BufferClear+0x58>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b63      	cmp	r3, #99	@ 0x63
 8001770:	d918      	bls.n	80017a4 <UserButton_BufferClear+0x44>
    {
        TIM1_CNT_2 = 0;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <UserButton_BufferClear+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        if (UserButton_Flag == 1)
 8001778:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <UserButton_BufferClear+0x5c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d111      	bne.n	80017a4 <UserButton_BufferClear+0x44>
        {
            buttonstatus = UserButton_Flag;
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <UserButton_BufferClear+0x5c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	71fb      	strb	r3, [r7, #7]

            UserButton_Flag = 0;
 8001786:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <UserButton_BufferClear+0x5c>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]

            memset(uart2_rx_IDLE_buf, 0, UART_RX_IDLE_BUFSIZE);
 800178c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001790:	2100      	movs	r1, #0
 8001792:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <UserButton_BufferClear+0x60>)
 8001794:	f009 faf6 	bl	800ad84 <memset>
            memset(uart6_rx_IDLE_buf, 0, UART_RX_IDLE_BUFSIZE);
 8001798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179c:	2100      	movs	r1, #0
 800179e:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <UserButton_BufferClear+0x64>)
 80017a0:	f009 faf0 	bl	800ad84 <memset>
            // memset(mseq, 0, 1000);
        }
    }
    return !buttonstatus;
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf0c      	ite	eq
 80017aa:	2301      	moveq	r3, #1
 80017ac:	2300      	movne	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200043dc 	.word	0x200043dc
 80017bc:	200043e4 	.word	0x200043e4
 80017c0:	200043e8 	.word	0x200043e8
 80017c4:	20005770 	.word	0x20005770

080017c8 <UART_RX_BufferClear>:


void UART_RX_BufferClear (void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
    if(UserButton_BufferClear() == HAL_OK)
 80017cc:	f7ff ffc8 	bl	8001760 <UserButton_BufferClear>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d14e      	bne.n	8001874 <UART_RX_BufferClear+0xac>
    {
        printf("\r\nUART RX Buffer Clear.\r\n\n");
 80017d6:	4828      	ldr	r0, [pc, #160]	@ (8001878 <UART_RX_BufferClear+0xb0>)
 80017d8:	f009 f9f4 	bl	800abc4 <puts>
        
        uart_rx_IDLE_TotalCnt = 0;
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <UART_RX_BufferClear+0xb4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	801a      	strh	r2, [r3, #0]
        mseq_cnt = 0;
 80017e2:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <UART_RX_BufferClear+0xb8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	801a      	strh	r2, [r3, #0]
        
        __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80017e8:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <UART_RX_BufferClear+0xbc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <UART_RX_BufferClear+0xbc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 80017f8:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <UART_RX_BufferClear+0xbc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001800:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart2_rx);
 8001802:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <UART_RX_BufferClear+0xbc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <UART_RX_BufferClear+0xbc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	491c      	ldr	r1, [pc, #112]	@ (8001888 <UART_RX_BufferClear+0xc0>)
 8001818:	481c      	ldr	r0, [pc, #112]	@ (800188c <UART_RX_BufferClear+0xc4>)
 800181a:	f003 ff70 	bl	80056fe <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <UART_RX_BufferClear+0xbc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <UART_RX_BufferClear+0xbc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0208 	bic.w	r2, r2, #8
 800182c:	601a      	str	r2, [r3, #0]

        __HAL_DMA_DISABLE(&hdma_usart6_rx);
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <UART_RX_BufferClear+0xc8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <UART_RX_BufferClear+0xc8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
        hdma_usart6_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <UART_RX_BufferClear+0xc8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001846:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart6_rx);
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <UART_RX_BufferClear+0xc8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <UART_RX_BufferClear+0xc8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

        HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185c:	490d      	ldr	r1, [pc, #52]	@ (8001894 <UART_RX_BufferClear+0xcc>)
 800185e:	480e      	ldr	r0, [pc, #56]	@ (8001898 <UART_RX_BufferClear+0xd0>)
 8001860:	f003 ff4d 	bl	80056fe <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <UART_RX_BufferClear+0xc8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <UART_RX_BufferClear+0xc8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0208 	bic.w	r2, r2, #8
 8001872:	601a      	str	r2, [r3, #0]
        // HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);
        // HAL_UART_Receive_DMA(&huart3, uart3_rx_buf, UART_RXDATA_MAX);
    }

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	0800b8d0 	.word	0x0800b8d0
 800187c:	20006af8 	.word	0x20006af8
 8001880:	200003b4 	.word	0x200003b4
 8001884:	20003374 	.word	0x20003374
 8001888:	200043e8 	.word	0x200043e8
 800188c:	200032e4 	.word	0x200032e4
 8001890:	200033d4 	.word	0x200033d4
 8001894:	20005770 	.word	0x20005770
 8001898:	2000332c 	.word	0x2000332c

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018a0:	f7ff fd6a 	bl	8001378 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a4:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018a6:	490d      	ldr	r1, [pc, #52]	@ (80018dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018bc:	4c0a      	ldr	r4, [pc, #40]	@ (80018e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f009 faaf 	bl	800ae2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff f93b 	bl	8000b48 <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80018e0:	0800b998 	.word	0x0800b998
  ldr r2, =_sbss
 80018e4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80018e8:	20008830 	.word	0x20008830

080018ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <HAL_Init+0x40>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <HAL_Init+0x40>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	@ (8001930 <HAL_Init+0x40>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 f94f 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fafa 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f967 	bl	8001c26 <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f92f 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	@ (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000000 	.word	0x20000000
 800198c:	20000008 	.word	0x20000008
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20006afc 	.word	0x20006afc

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20006afc 	.word	0x20006afc

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	@ (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	@ (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	@ 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff3e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff8e 	bl	8001b10 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5d 	bl	8001abc <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff31 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff feb6 	bl	80019bc <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e099      	b.n	8001d90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7c:	e00f      	b.n	8001c9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7e:	f7ff fe9d 	bl	80019bc <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d908      	bls.n	8001c9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e078      	b.n	8001d90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e8      	bne.n	8001c7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_DMA_Init+0x158>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d107      	bne.n	8001d08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	4313      	orrs	r3, r2
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f023 0307 	bic.w	r3, r3, #7
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d117      	bne.n	8001d62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00e      	beq.n	8001d62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fb01 	bl	800234c <DMA_CheckFifoParam>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2240      	movs	r2, #64	@ 0x40
 8001d54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e016      	b.n	8001d90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fab8 	bl	80022e0 <DMA_CalcBaseAndBitshift>
 8001d70:	4603      	mov	r3, r0
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d78:	223f      	movs	r2, #63	@ 0x3f
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	f010803f 	.word	0xf010803f

08001d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Start_IT+0x26>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e040      	b.n	8001e44 <HAL_DMA_Start_IT+0xa8>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d12f      	bne.n	8001e36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fa4a 	bl	8002284 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df4:	223f      	movs	r2, #63	@ 0x3f
 8001df6:	409a      	lsls	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0216 	orr.w	r2, r2, #22
 8001e0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0208 	orr.w	r2, r2, #8
 8001e22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e005      	b.n	8001e42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e5a:	f7ff fdaf 	bl	80019bc <HAL_GetTick>
 8001e5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d008      	beq.n	8001e7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e052      	b.n	8001f24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0216 	bic.w	r2, r2, #22
 8001e8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <HAL_DMA_Abort+0x62>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0208 	bic.w	r2, r2, #8
 8001ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ece:	e013      	b.n	8001ef8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed0:	f7ff fd74 	bl	80019bc <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d90c      	bls.n	8001ef8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e015      	b.n	8001f24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1e4      	bne.n	8001ed0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	223f      	movs	r2, #63	@ 0x3f
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d004      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2280      	movs	r2, #128	@ 0x80
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00c      	b.n	8001f64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2205      	movs	r2, #5
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f7c:	4b8e      	ldr	r3, [pc, #568]	@ (80021b8 <HAL_DMA_IRQHandler+0x248>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a8e      	ldr	r2, [pc, #568]	@ (80021bc <HAL_DMA_IRQHandler+0x24c>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0a9b      	lsrs	r3, r3, #10
 8001f88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01a      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0204 	bic.w	r2, r2, #4
 8001fc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc8:	2208      	movs	r2, #8
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d012      	beq.n	8002012 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	2201      	movs	r2, #1
 8002000:	409a      	lsls	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	2204      	movs	r2, #4
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d012      	beq.n	8002048 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00b      	beq.n	8002048 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	2204      	movs	r2, #4
 8002036:	409a      	lsls	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002040:	f043 0204 	orr.w	r2, r3, #4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	2210      	movs	r2, #16
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d043      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03c      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206a:	2210      	movs	r2, #16
 800206c:	409a      	lsls	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d024      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
 800209e:	e01f      	b.n	80020e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
 80020b0:	e016      	b.n	80020e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0208 	bic.w	r2, r2, #8
 80020ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	2220      	movs	r2, #32
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 808f 	beq.w	8002210 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8087 	beq.w	8002210 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	2220      	movs	r2, #32
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b05      	cmp	r3, #5
 8002118:	d136      	bne.n	8002188 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0216 	bic.w	r2, r2, #22
 8002128:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002138:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <HAL_DMA_IRQHandler+0x1da>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0208 	bic.w	r2, r2, #8
 8002158:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215e:	223f      	movs	r2, #63	@ 0x3f
 8002160:	409a      	lsls	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217a:	2b00      	cmp	r3, #0
 800217c:	d07e      	beq.n	800227c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
        }
        return;
 8002186:	e079      	b.n	800227c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01d      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10d      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d031      	beq.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
 80021b4:	e02c      	b.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
 80021b6:	bf00      	nop
 80021b8:	20000000 	.word	0x20000000
 80021bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
 80021d0:	e01e      	b.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10f      	bne.n	8002200 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0210 	bic.w	r2, r2, #16
 80021ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	2b00      	cmp	r3, #0
 8002216:	d032      	beq.n	800227e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d022      	beq.n	800226a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2205      	movs	r2, #5
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	d307      	bcc.n	8002258 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f2      	bne.n	800223c <HAL_DMA_IRQHandler+0x2cc>
 8002256:	e000      	b.n	800225a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002258:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
 800227a:	e000      	b.n	800227e <HAL_DMA_IRQHandler+0x30e>
        return;
 800227c:	bf00      	nop
    }
  }
}
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b40      	cmp	r3, #64	@ 0x40
 80022b0:	d108      	bne.n	80022c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022c2:	e007      	b.n	80022d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	60da      	str	r2, [r3, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3b10      	subs	r3, #16
 80022f0:	4a14      	ldr	r2, [pc, #80]	@ (8002344 <DMA_CalcBaseAndBitshift+0x64>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fa:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <DMA_CalcBaseAndBitshift+0x68>)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d909      	bls.n	8002322 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	1d1a      	adds	r2, r3, #4
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002320:	e007      	b.n	8002332 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	aaaaaaab 	.word	0xaaaaaaab
 8002348:	0800b94c 	.word	0x0800b94c

0800234c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11f      	bne.n	80023a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d856      	bhi.n	800241a <DMA_CheckFifoParam+0xce>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <DMA_CheckFifoParam+0x28>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002385 	.word	0x08002385
 8002378:	08002397 	.word	0x08002397
 800237c:	08002385 	.word	0x08002385
 8002380:	0800241b 	.word	0x0800241b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d046      	beq.n	800241e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002394:	e043      	b.n	800241e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800239e:	d140      	bne.n	8002422 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a4:	e03d      	b.n	8002422 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ae:	d121      	bne.n	80023f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d837      	bhi.n	8002426 <DMA_CheckFifoParam+0xda>
 80023b6:	a201      	add	r2, pc, #4	@ (adr r2, 80023bc <DMA_CheckFifoParam+0x70>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	080023cd 	.word	0x080023cd
 80023c0:	080023d3 	.word	0x080023d3
 80023c4:	080023cd 	.word	0x080023cd
 80023c8:	080023e5 	.word	0x080023e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      break;
 80023d0:	e030      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d025      	beq.n	800242a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e2:	e022      	b.n	800242a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ec:	d11f      	bne.n	800242e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f2:	e01c      	b.n	800242e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d903      	bls.n	8002402 <DMA_CheckFifoParam+0xb6>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d003      	beq.n	8002408 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002400:	e018      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
      break;
 8002406:	e015      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00e      	beq.n	8002432 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      break;
 8002418:	e00b      	b.n	8002432 <DMA_CheckFifoParam+0xe6>
      break;
 800241a:	bf00      	nop
 800241c:	e00a      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e008      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e006      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e004      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e002      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;   
 800242e:	bf00      	nop
 8002430:	e000      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 8002432:	bf00      	nop
    }
  } 
  
  return status; 
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop

08002444 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e08a      	b.n	800256c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800245c:	2b00      	cmp	r3, #0
 800245e:	d106      	bne.n	800246e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2223      	movs	r2, #35	@ 0x23
 8002464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fe f90d 	bl	8000688 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	4b40      	ldr	r3, [pc, #256]	@ (8002574 <HAL_ETH_Init+0x130>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	4a3f      	ldr	r2, [pc, #252]	@ (8002574 <HAL_ETH_Init+0x130>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44
 800247e:	4b3d      	ldr	r3, [pc, #244]	@ (8002574 <HAL_ETH_Init+0x130>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800248a:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <HAL_ETH_Init+0x134>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a3a      	ldr	r2, [pc, #232]	@ (8002578 <HAL_ETH_Init+0x134>)
 8002490:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002494:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002496:	4b38      	ldr	r3, [pc, #224]	@ (8002578 <HAL_ETH_Init+0x134>)
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4936      	ldr	r1, [pc, #216]	@ (8002578 <HAL_ETH_Init+0x134>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024a4:	4b34      	ldr	r3, [pc, #208]	@ (8002578 <HAL_ETH_Init+0x134>)
 80024a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c0:	f7ff fa7c 	bl	80019bc <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024c6:	e011      	b.n	80024ec <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024c8:	f7ff fa78 	bl	80019bc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024d6:	d909      	bls.n	80024ec <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2204      	movs	r2, #4
 80024dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	22e0      	movs	r2, #224	@ 0xe0
 80024e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e03f      	b.n	800256c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e4      	bne.n	80024c8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f97a 	bl	80027f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fa25 	bl	8002954 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa7b 	bl	8002a06 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	461a      	mov	r2, r3
 8002516:	2100      	movs	r1, #0
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f9e3 	bl	80028e4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800252c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002542:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002556:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2210      	movs	r2, #16
 8002566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	40013800 	.word	0x40013800

0800257c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <ETH_SetMACConfig+0x164>)
 8002592:	4013      	ands	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7b9b      	ldrb	r3, [r3, #14]
 800259a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	7c12      	ldrb	r2, [r2, #16]
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	d102      	bne.n	80025aa <ETH_SetMACConfig+0x2e>
 80025a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025a8:	e000      	b.n	80025ac <ETH_SetMACConfig+0x30>
 80025aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	7c52      	ldrb	r2, [r2, #17]
 80025b2:	2a00      	cmp	r2, #0
 80025b4:	d102      	bne.n	80025bc <ETH_SetMACConfig+0x40>
 80025b6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025ba:	e000      	b.n	80025be <ETH_SetMACConfig+0x42>
 80025bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	7fdb      	ldrb	r3, [r3, #31]
 80025ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	7f92      	ldrb	r2, [r2, #30]
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d102      	bne.n	80025e2 <ETH_SetMACConfig+0x66>
 80025dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e0:	e000      	b.n	80025e4 <ETH_SetMACConfig+0x68>
 80025e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80025e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7f1b      	ldrb	r3, [r3, #28]
 80025ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	791b      	ldrb	r3, [r3, #4]
 80025f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002602:	2a00      	cmp	r2, #0
 8002604:	d102      	bne.n	800260c <ETH_SetMACConfig+0x90>
 8002606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800260a:	e000      	b.n	800260e <ETH_SetMACConfig+0x92>
 800260c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800260e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	7bdb      	ldrb	r3, [r3, #15]
 8002614:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002616:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800261c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002624:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002626:	4313      	orrs	r3, r2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff f9c8 	bl	80019d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800265a:	4013      	ands	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002662:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800266a:	2a00      	cmp	r2, #0
 800266c:	d101      	bne.n	8002672 <ETH_SetMACConfig+0xf6>
 800266e:	2280      	movs	r2, #128	@ 0x80
 8002670:	e000      	b.n	8002674 <ETH_SetMACConfig+0xf8>
 8002672:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002674:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800267a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002682:	2a01      	cmp	r2, #1
 8002684:	d101      	bne.n	800268a <ETH_SetMACConfig+0x10e>
 8002686:	2208      	movs	r2, #8
 8002688:	e000      	b.n	800268c <ETH_SetMACConfig+0x110>
 800268a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800268c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002694:	2a01      	cmp	r2, #1
 8002696:	d101      	bne.n	800269c <ETH_SetMACConfig+0x120>
 8002698:	2204      	movs	r2, #4
 800269a:	e000      	b.n	800269e <ETH_SetMACConfig+0x122>
 800269c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800269e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80026a6:	2a01      	cmp	r2, #1
 80026a8:	d101      	bne.n	80026ae <ETH_SetMACConfig+0x132>
 80026aa:	2202      	movs	r2, #2
 80026ac:	e000      	b.n	80026b0 <ETH_SetMACConfig+0x134>
 80026ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026b0:	4313      	orrs	r3, r2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff f983 	bl	80019d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	fd20810f 	.word	0xfd20810f

080026e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <ETH_SetDMAConfig+0x110>)
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7b1b      	ldrb	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <ETH_SetDMAConfig+0x2c>
 800270a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800270e:	e000      	b.n	8002712 <ETH_SetDMAConfig+0x2e>
 8002710:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7b5b      	ldrb	r3, [r3, #13]
 8002716:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002718:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	7f52      	ldrb	r2, [r2, #29]
 800271e:	2a00      	cmp	r2, #0
 8002720:	d102      	bne.n	8002728 <ETH_SetDMAConfig+0x44>
 8002722:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002726:	e000      	b.n	800272a <ETH_SetDMAConfig+0x46>
 8002728:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800272a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	7b9b      	ldrb	r3, [r3, #14]
 8002730:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002732:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002738:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	7f1b      	ldrb	r3, [r3, #28]
 800273e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002740:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7f9b      	ldrb	r3, [r3, #30]
 8002746:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002748:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800274e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002756:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002758:	4313      	orrs	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002768:	461a      	mov	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff f92a 	bl	80019d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	791b      	ldrb	r3, [r3, #4]
 8002792:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002798:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800279e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d8:	2001      	movs	r0, #1
 80027da:	f7ff f8fb 	bl	80019d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	f8de3f23 	.word	0xf8de3f23

080027f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0a6      	sub	sp, #152	@ 0x98
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800280c:	2300      	movs	r3, #0
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800283a:	2300      	movs	r3, #0
 800283c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002844:	2300      	movs	r3, #0
 8002846:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002860:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002864:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002866:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800286a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002872:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fe7f 	bl	800257c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800287e:	2301      	movs	r3, #1
 8002880:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002882:	2301      	movs	r3, #1
 8002884:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800288c:	2301      	movs	r3, #1
 800288e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028b8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028be:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028ce:	f107 0308 	add.w	r3, r7, #8
 80028d2:	4619      	mov	r1, r3
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff05 	bl	80026e4 <ETH_SetDMAConfig>
}
 80028da:	bf00      	nop
 80028dc:	3798      	adds	r7, #152	@ 0x98
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3305      	adds	r3, #5
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	3204      	adds	r2, #4
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <ETH_MACAddressConfig+0x68>)
 8002906:	4413      	add	r3, r2
 8002908:	461a      	mov	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3303      	adds	r3, #3
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	061a      	lsls	r2, r3, #24
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3302      	adds	r3, #2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3301      	adds	r3, #1
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	4313      	orrs	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <ETH_MACAddressConfig+0x6c>)
 8002936:	4413      	add	r3, r2
 8002938:	461a      	mov	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40028040 	.word	0x40028040
 8002950:	40028044 	.word	0x40028044

08002954 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e03e      	b.n	80029e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68d9      	ldr	r1, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	3206      	adds	r2, #6
 8002994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d80c      	bhi.n	80029c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68d9      	ldr	r1, [r3, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	e004      	b.n	80029ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3301      	adds	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d9bd      	bls.n	8002962 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f8:	611a      	str	r2, [r3, #16]
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e048      	b.n	8002aa6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6919      	ldr	r1, [r3, #16]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a50:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	3212      	adds	r2, #18
 8002a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d80c      	bhi.n	8002a96 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6919      	ldr	r1, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	e004      	b.n	8002aa0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d9b3      	bls.n	8002a14 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad6:	60da      	str	r2, [r3, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	e177      	b.n	8002df0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	f040 8166 	bne.w	8002dea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d005      	beq.n	8002b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d130      	bne.n	8002b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 0201 	and.w	r2, r3, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d017      	beq.n	8002bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d123      	bne.n	8002c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0203 	and.w	r2, r3, #3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80c0 	beq.w	8002dea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b66      	ldr	r3, [pc, #408]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	4a65      	ldr	r2, [pc, #404]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7a:	4b63      	ldr	r3, [pc, #396]	@ (8002e08 <HAL_GPIO_Init+0x324>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c86:	4a61      	ldr	r2, [pc, #388]	@ (8002e0c <HAL_GPIO_Init+0x328>)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a58      	ldr	r2, [pc, #352]	@ (8002e10 <HAL_GPIO_Init+0x32c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d037      	beq.n	8002d22 <HAL_GPIO_Init+0x23e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_GPIO_Init+0x330>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_GPIO_Init+0x23a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a56      	ldr	r2, [pc, #344]	@ (8002e18 <HAL_GPIO_Init+0x334>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02b      	beq.n	8002d1a <HAL_GPIO_Init+0x236>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a55      	ldr	r2, [pc, #340]	@ (8002e1c <HAL_GPIO_Init+0x338>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d025      	beq.n	8002d16 <HAL_GPIO_Init+0x232>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a54      	ldr	r2, [pc, #336]	@ (8002e20 <HAL_GPIO_Init+0x33c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <HAL_GPIO_Init+0x22e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a53      	ldr	r2, [pc, #332]	@ (8002e24 <HAL_GPIO_Init+0x340>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d019      	beq.n	8002d0e <HAL_GPIO_Init+0x22a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	@ (8002e28 <HAL_GPIO_Init+0x344>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x226>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a51      	ldr	r2, [pc, #324]	@ (8002e2c <HAL_GPIO_Init+0x348>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_Init+0x222>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a50      	ldr	r2, [pc, #320]	@ (8002e30 <HAL_GPIO_Init+0x34c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x21e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e34 <HAL_GPIO_Init+0x350>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_Init+0x21a>
 8002cfa:	2309      	movs	r3, #9
 8002cfc:	e012      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002cfe:	230a      	movs	r3, #10
 8002d00:	e010      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d02:	2308      	movs	r3, #8
 8002d04:	e00e      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e00c      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e00a      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x240>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d34:	4935      	ldr	r1, [pc, #212]	@ (8002e0c <HAL_GPIO_Init+0x328>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d42:	4b3d      	ldr	r3, [pc, #244]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d66:	4a34      	ldr	r2, [pc, #208]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d6c:	4b32      	ldr	r3, [pc, #200]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d90:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d96:	4b28      	ldr	r3, [pc, #160]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dba:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de4:	4a14      	ldr	r2, [pc, #80]	@ (8002e38 <HAL_GPIO_Init+0x354>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f ae84 	bls.w	8002b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020c00 	.word	0x40020c00
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40021400 	.word	0x40021400
 8002e28:	40021800 	.word	0x40021800
 8002e2c:	40021c00 	.word	0x40021c00
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40022400 	.word	0x40022400
 8002e38:	40013c00 	.word	0x40013c00

08002e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e58:	e003      	b.n	8002e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e86:	4a05      	ldr	r2, [pc, #20]	@ (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe f9d6 	bl	8001240 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40013c00 	.word	0x40013c00

08002ea0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e101      	b.n	80030b6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f007 fa2d 	bl	800a32c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ee0:	d102      	bne.n	8002ee8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fdfc 	bl	8006aea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7c1a      	ldrb	r2, [r3, #16]
 8002efa:	f88d 2000 	strb.w	r2, [sp]
 8002efe:	3304      	adds	r3, #4
 8002f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f02:	f003 fcdb 	bl	80068bc <USB_CoreInit>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0ce      	b.n	80030b6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 fdf4 	bl	8006b0c <USB_SetCurrentMode>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0bf      	b.n	80030b6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	e04a      	b.n	8002fd2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3315      	adds	r3, #21
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3314      	adds	r3, #20
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	b298      	uxth	r0, r3
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	332e      	adds	r3, #46	@ 0x2e
 8002f78:	4602      	mov	r2, r0
 8002f7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	331c      	adds	r3, #28
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3320      	adds	r3, #32
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3324      	adds	r3, #36	@ 0x24
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	791b      	ldrb	r3, [r3, #4]
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d3af      	bcc.n	8002f3c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	e044      	b.n	800306c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	3301      	adds	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3b5      	bcc.n	8002fe2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7c1a      	ldrb	r2, [r3, #16]
 800307e:	f88d 2000 	strb.w	r2, [sp]
 8003082:	3304      	adds	r3, #4
 8003084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003086:	f003 fd8d 	bl	8006ba4 <USB_DevInit>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e00c      	b.n	80030b6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 fdd7 	bl	8007c62 <USB_DevDisconnect>

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_PCD_Start+0x1c>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e022      	b.n	8003120 <HAL_PCD_Start+0x62>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d105      	bne.n	8003102 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fcde 	bl	8006ac8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f004 fd85 	bl	8007c20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b08d      	sub	sp, #52	@ 0x34
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fe43 	bl	8007dca <USB_GetMode>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 848c 	bne.w	8003a64 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f004 fda7 	bl	8007ca4 <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8482 	beq.w	8003a62 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f004 fd94 	bl	8007ca4 <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f002 0202 	and.w	r2, r2, #2
 8003194:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f004 fd82 	bl	8007ca4 <USB_ReadInterrupts>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d161      	bne.n	800326e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0210 	bic.w	r2, r2, #16
 80031b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	3304      	adds	r3, #4
 80031d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	0c5b      	lsrs	r3, r3, #17
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d124      	bne.n	8003230 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d035      	beq.n	800325e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003200:	b29b      	uxth	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	6a38      	ldr	r0, [r7, #32]
 8003206:	f004 fbb9 	bl	800797c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003216:	441a      	add	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003228:	441a      	add	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	615a      	str	r2, [r3, #20]
 800322e:	e016      	b.n	800325e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	0c5b      	lsrs	r3, r3, #17
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	2b06      	cmp	r3, #6
 800323a:	d110      	bne.n	800325e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003242:	2208      	movs	r2, #8
 8003244:	4619      	mov	r1, r3
 8003246:	6a38      	ldr	r0, [r7, #32]
 8003248:	f004 fb98 	bl	800797c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003258:	441a      	add	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0210 	orr.w	r2, r2, #16
 800326c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fd16 	bl	8007ca4 <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800327e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003282:	f040 80a7 	bne.w	80033d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f004 fd1b 	bl	8007cca <USB_ReadDevAllOutEpInterrupt>
 8003294:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003296:	e099      	b.n	80033cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 808e 	beq.w	80033c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 fd3f 	bl	8007d32 <USB_ReadDevOutEPInterrupt>
 80032b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00c      	beq.n	80032da <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032cc:	461a      	mov	r2, r3
 80032ce:	2301      	movs	r3, #1
 80032d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fea3 	bl	8004020 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00c      	beq.n	80032fe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032f0:	461a      	mov	r2, r3
 80032f2:	2308      	movs	r3, #8
 80032f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 ff79 	bl	80041f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	2310      	movs	r3, #16
 8003318:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d030      	beq.n	8003386 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332c:	2b80      	cmp	r3, #128	@ 0x80
 800332e:	d109      	bne.n	8003344 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800333e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003342:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	3304      	adds	r3, #4
 8003358:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	78db      	ldrb	r3, [r3, #3]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d108      	bne.n	8003374 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	b2db      	uxtb	r3, r3
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f007 f8f0 	bl	800a554 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003380:	461a      	mov	r2, r3
 8003382:	2302      	movs	r3, #2
 8003384:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339c:	461a      	mov	r2, r3
 800339e:	2320      	movs	r3, #32
 80033a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	3301      	adds	r3, #1
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80033c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f47f af62 	bne.w	8003298 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 fc63 	bl	8007ca4 <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033e8:	f040 80db 	bne.w	80035a2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 fc84 	bl	8007cfe <USB_ReadDevAllInEpInterrupt>
 80033f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80033fc:	e0cd      	b.n	800359a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80c2 	beq.w	800358e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f004 fcaa 	bl	8007d6e <USB_ReadDevInEPInterrupt>
 800341a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d057      	beq.n	80034d6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2201      	movs	r2, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800343a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43db      	mvns	r3, r3
 8003440:	69f9      	ldr	r1, [r7, #28]
 8003442:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003446:	4013      	ands	r3, r2
 8003448:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003456:	461a      	mov	r2, r3
 8003458:	2301      	movs	r3, #1
 800345a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	799b      	ldrb	r3, [r3, #6]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d132      	bne.n	80034ca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3320      	adds	r3, #32
 8003474:	6819      	ldr	r1, [r3, #0]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4403      	add	r3, r0
 8003484:	331c      	adds	r3, #28
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4419      	add	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4403      	add	r3, r0
 8003498:	3320      	adds	r3, #32
 800349a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d113      	bne.n	80034ca <HAL_PCD_IRQHandler+0x3a2>
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3324      	adds	r3, #36	@ 0x24
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d108      	bne.n	80034ca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034c2:	461a      	mov	r2, r3
 80034c4:	2101      	movs	r1, #1
 80034c6:	f004 fcb1 	bl	8007e2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f006 ffba 	bl	800a44a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ec:	461a      	mov	r2, r3
 80034ee:	2308      	movs	r3, #8
 80034f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003508:	461a      	mov	r2, r3
 800350a:	2310      	movs	r3, #16
 800350c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003524:	461a      	mov	r2, r3
 8003526:	2340      	movs	r3, #64	@ 0x40
 8003528:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d023      	beq.n	800357c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003536:	6a38      	ldr	r0, [r7, #32]
 8003538:	f003 fc98 	bl	8006e6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800353c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	3310      	adds	r3, #16
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	78db      	ldrb	r3, [r3, #3]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d108      	bne.n	800356a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2200      	movs	r2, #0
 800355c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f007 f807 	bl	800a578 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003576:	461a      	mov	r2, r3
 8003578:	2302      	movs	r3, #2
 800357a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003586:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fcbd 	bl	8003f08 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	3301      	adds	r3, #1
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	f47f af2e 	bne.w	80033fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 fb7c 	bl	8007ca4 <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035b6:	d122      	bne.n	80035fe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d108      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035de:	2100      	movs	r1, #0
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fea3 	bl	800432c <HAL_PCDEx_LPM_Callback>
 80035e6:	e002      	b.n	80035ee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f006 ffa5 	bl	800a538 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80035fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fb4e 	bl	8007ca4 <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003612:	d112      	bne.n	800363a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f006 ff61 	bl	800a4ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003638:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f004 fb30 	bl	8007ca4 <USB_ReadInterrupts>
 8003644:	4603      	mov	r3, r0
 8003646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800364a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800364e:	f040 80b7 	bne.w	80037c0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2110      	movs	r1, #16
 800366c:	4618      	mov	r0, r3
 800366e:	f003 fbfd 	bl	8006e6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003672:	2300      	movs	r3, #0
 8003674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003676:	e046      	b.n	8003706 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003684:	461a      	mov	r2, r3
 8003686:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800368a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800369c:	0151      	lsls	r1, r2, #5
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	440a      	add	r2, r1
 80036a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b8:	461a      	mov	r2, r3
 80036ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036d0:	0151      	lsls	r1, r2, #5
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	440a      	add	r2, r1
 80036d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	3301      	adds	r3, #1
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	791b      	ldrb	r3, [r3, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370e:	4293      	cmp	r3, r2
 8003710:	d3b2      	bcc.n	8003678 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003720:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003724:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	7bdb      	ldrb	r3, [r3, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800373e:	f043 030b 	orr.w	r3, r3, #11
 8003742:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003754:	f043 030b 	orr.w	r3, r3, #11
 8003758:	6453      	str	r3, [r2, #68]	@ 0x44
 800375a:	e015      	b.n	8003788 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800376a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800376e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003772:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003782:	f043 030b 	orr.w	r3, r3, #11
 8003786:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003796:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800379a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037aa:	461a      	mov	r2, r3
 80037ac:	f004 fb3e 	bl	8007e2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80037be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fa6d 	bl	8007ca4 <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d4:	d123      	bne.n	800381e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 fb03 	bl	8007de6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 fbba 	bl	8006f5e <USB_GetDevSpeed>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681c      	ldr	r4, [r3, #0]
 80037f6:	f001 fa09 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 80037fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003800:	461a      	mov	r2, r3
 8003802:	4620      	mov	r0, r4
 8003804:	f003 f8be 	bl	8006984 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f006 fe46 	bl	800a49a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800381c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f004 fa3e 	bl	8007ca4 <USB_ReadInterrupts>
 8003828:	4603      	mov	r3, r0
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b08      	cmp	r3, #8
 8003830:	d10a      	bne.n	8003848 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f006 fe23 	bl	800a47e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f002 0208 	and.w	r2, r2, #8
 8003846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f004 fa29 	bl	8007ca4 <USB_ReadInterrupts>
 8003852:	4603      	mov	r3, r0
 8003854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003858:	2b80      	cmp	r3, #128	@ 0x80
 800385a:	d123      	bne.n	80038a4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003868:	2301      	movs	r3, #1
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
 800386c:	e014      	b.n	8003898 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	b2db      	uxtb	r3, r3
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb0a 	bl	8003ea6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	3301      	adds	r3, #1
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	791b      	ldrb	r3, [r3, #4]
 800389c:	461a      	mov	r2, r3
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d3e4      	bcc.n	800386e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f004 f9fb 	bl	8007ca4 <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038b8:	d13c      	bne.n	8003934 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ba:	2301      	movs	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038be:	e02b      	b.n	8003918 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	3318      	adds	r3, #24
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d115      	bne.n	8003912 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da12      	bge.n	8003912 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3317      	adds	r3, #23
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003908:	b2db      	uxtb	r3, r3
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 faca 	bl	8003ea6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	3301      	adds	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	791b      	ldrb	r3, [r3, #4]
 800391c:	461a      	mov	r2, r3
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	4293      	cmp	r3, r2
 8003922:	d3cd      	bcc.n	80038c0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f004 f9b3 	bl	8007ca4 <USB_ReadInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003944:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003948:	d156      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800394a:	2301      	movs	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
 800394e:	e045      	b.n	80039dc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d12e      	bne.n	80039d6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003978:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800397a:	2b00      	cmp	r3, #0
 800397c:	da2b      	bge.n	80039d6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800398a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800398e:	429a      	cmp	r2, r3
 8003990:	d121      	bne.n	80039d6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039a4:	2201      	movs	r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039d2:	6053      	str	r3, [r2, #4]
            break;
 80039d4:	e008      	b.n	80039e8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	3301      	adds	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	791b      	ldrb	r3, [r3, #4]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d3b3      	bcc.n	8003950 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80039f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f004 f951 	bl	8007ca4 <USB_ReadInterrupts>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0c:	d10a      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f006 fdc4 	bl	800a59c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 f93b 	bl	8007ca4 <USB_ReadInterrupts>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d115      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f006 fdb4 	bl	800a5b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	e000      	b.n	8003a64 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003a62:	bf00      	nop
    }
  }
}
 8003a64:	3734      	adds	r7, #52	@ 0x34
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd90      	pop	{r4, r7, pc}

08003a6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_SetAddress+0x1a>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e012      	b.n	8003aaa <HAL_PCD_SetAddress+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 f89a 	bl	8007bd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	4608      	mov	r0, r1
 8003abc:	4611      	mov	r1, r2
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	70fb      	strb	r3, [r7, #3]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	803b      	strh	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	da0f      	bge.n	8003af8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	f003 020f 	and.w	r2, r3, #15
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	3310      	adds	r3, #16
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	3304      	adds	r3, #4
 8003aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	705a      	strb	r2, [r3, #1]
 8003af6:	e00f      	b.n	8003b18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 020f 	and.w	r2, r3, #15
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003b24:	883b      	ldrh	r3, [r7, #0]
 8003b26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	78ba      	ldrb	r2, [r7, #2]
 8003b32:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b46:	78bb      	ldrb	r3, [r7, #2]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d102      	bne.n	8003b52 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_PCD_EP_Open+0xae>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e00e      	b.n	8003b7e <HAL_PCD_EP_Open+0xcc>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68f9      	ldr	r1, [r7, #12]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fa1a 	bl	8006fa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	da0f      	bge.n	8003bba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	3310      	adds	r3, #16
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	3304      	adds	r3, #4
 8003bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	705a      	strb	r2, [r3, #1]
 8003bb8:	e00f      	b.n	8003bda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_PCD_EP_Close+0x6e>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e00e      	b.n	8003c12 <HAL_PCD_EP_Close+0x8c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 fa58 	bl	80070b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	460b      	mov	r3, r1
 8003c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
 8003c2c:	f003 020f 	and.w	r2, r3, #15
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	3304      	adds	r3, #4
 8003c42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2200      	movs	r2, #0
 8003c54:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	7afb      	ldrb	r3, [r7, #11]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	799b      	ldrb	r3, [r3, #6]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	799b      	ldrb	r3, [r3, #6]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6979      	ldr	r1, [r7, #20]
 8003c82:	f003 faf5 	bl	8007270 <USB_EPStartXfer>

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd0:	7afb      	ldrb	r3, [r7, #11]
 8003cd2:	f003 020f 	and.w	r2, r3, #15
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	3310      	adds	r3, #16
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	799b      	ldrb	r3, [r3, #6]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d102      	bne.n	8003d1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	799b      	ldrb	r3, [r3, #6]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6979      	ldr	r1, [r7, #20]
 8003d26:	f003 faa3 	bl	8007270 <USB_EPStartXfer>

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	7912      	ldrb	r2, [r2, #4]
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e04f      	b.n	8003df2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da0f      	bge.n	8003d7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	f003 020f 	and.w	r2, r3, #15
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	3310      	adds	r3, #16
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3304      	adds	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	705a      	strb	r2, [r3, #1]
 8003d78:	e00d      	b.n	8003d96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_PCD_EP_SetStall+0x82>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e01d      	b.n	8003df2 <HAL_PCD_EP_SetStall+0xbe>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 fe31 	bl	8007a2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7999      	ldrb	r1, [r3, #6]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003de2:	461a      	mov	r2, r3
 8003de4:	f004 f822 	bl	8007e2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	7912      	ldrb	r2, [r2, #4]
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e042      	b.n	8003e9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	da0f      	bge.n	8003e40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 020f 	and.w	r2, r3, #15
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	3310      	adds	r3, #16
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	3304      	adds	r3, #4
 8003e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	705a      	strb	r2, [r3, #1]
 8003e3e:	e00f      	b.n	8003e60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_PCD_EP_ClrStall+0x86>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e00e      	b.n	8003e9e <HAL_PCD_EP_ClrStall+0xa4>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68f9      	ldr	r1, [r7, #12]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 fe3a 	bl	8007b08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da0c      	bge.n	8003ed4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3310      	adds	r3, #16
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e00c      	b.n	8003eee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 020f 	and.w	r2, r3, #15
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3304      	adds	r3, #4
 8003eec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f003 fc59 	bl	80077ac <USB_EPStopXfer>
 8003efa:	4603      	mov	r3, r0
 8003efc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003efe:	7afb      	ldrb	r3, [r7, #11]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	@ 0x28
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	3310      	adds	r3, #16
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d901      	bls.n	8003f40 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e06b      	b.n	8004018 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d902      	bls.n	8003f5c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	3303      	adds	r3, #3
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f64:	e02a      	b.n	8003fbc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d902      	bls.n	8003f82 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3303      	adds	r3, #3
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68d9      	ldr	r1, [r3, #12]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	6978      	ldr	r0, [r7, #20]
 8003fa0:	f003 fcae 	bl	8007900 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	441a      	add	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d809      	bhi.n	8003fe6 <PCD_WriteEmptyTxFifo+0xde>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d203      	bcs.n	8003fe6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1bf      	bne.n	8003f66 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d811      	bhi.n	8004016 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	43db      	mvns	r3, r3
 800400c:	6939      	ldr	r1, [r7, #16]
 800400e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004012:	4013      	ands	r3, r2
 8004014:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	333c      	adds	r3, #60	@ 0x3c
 8004038:	3304      	adds	r3, #4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	799b      	ldrb	r3, [r3, #6]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d17b      	bne.n	800414e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4a61      	ldr	r2, [pc, #388]	@ (80041e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f240 80b9 	bls.w	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80b3 	beq.w	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004082:	461a      	mov	r2, r3
 8004084:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004088:	6093      	str	r3, [r2, #8]
 800408a:	e0a7      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	2320      	movs	r3, #32
 80040a6:	6093      	str	r3, [r2, #8]
 80040a8:	e098      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f040 8093 	bne.w	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	4a4b      	ldr	r2, [pc, #300]	@ (80041e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d90f      	bls.n	80040de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d4:	461a      	mov	r2, r3
 80040d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040da:	6093      	str	r3, [r2, #8]
 80040dc:	e07e      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	3304      	adds	r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	0159      	lsls	r1, r3, #5
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	440b      	add	r3, r1
 8004100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d114      	bne.n	8004140 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004128:	461a      	mov	r2, r3
 800412a:	2101      	movs	r1, #1
 800412c:	f003 fe7e 	bl	8007e2c <USB_EP0_OutStart>
 8004130:	e006      	b.n	8004140 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	441a      	add	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f006 f964 	bl	800a414 <HAL_PCD_DataOutStageCallback>
 800414c:	e046      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	4a26      	ldr	r2, [pc, #152]	@ (80041ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d124      	bne.n	80041a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416c:	461a      	mov	r2, r3
 800416e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004172:	6093      	str	r3, [r2, #8]
 8004174:	e032      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418c:	461a      	mov	r2, r3
 800418e:	2320      	movs	r3, #32
 8004190:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f006 f93b 	bl	800a414 <HAL_PCD_DataOutStageCallback>
 800419e:	e01d      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d114      	bne.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041c8:	461a      	mov	r2, r3
 80041ca:	2100      	movs	r1, #0
 80041cc:	f003 fe2e 	bl	8007e2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f006 f91c 	bl	800a414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	4f54300a 	.word	0x4f54300a
 80041ec:	4f54310a 	.word	0x4f54310a

080041f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	333c      	adds	r3, #60	@ 0x3c
 8004208:	3304      	adds	r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <PCD_EP_OutSetupPacket_int+0x88>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d90e      	bls.n	8004244 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423c:	461a      	mov	r2, r3
 800423e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004242:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f006 f8d3 	bl	800a3f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <PCD_EP_OutSetupPacket_int+0x88>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d90c      	bls.n	800426c <PCD_EP_OutSetupPacket_int+0x7c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	799b      	ldrb	r3, [r3, #6]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d108      	bne.n	800426c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004264:	461a      	mov	r2, r3
 8004266:	2101      	movs	r1, #1
 8004268:	f003 fde0 	bl	8007e2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	4f54300a 	.word	0x4f54300a

0800427c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
 8004288:	4613      	mov	r3, r2
 800428a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800429a:	883b      	ldrh	r3, [r7, #0]
 800429c:	0419      	lsls	r1, r3, #16
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80042a8:	e028      	b.n	80042fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4413      	add	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	e00d      	b.n	80042da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	3340      	adds	r3, #64	@ 0x40
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	4413      	add	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	3301      	adds	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	7bfa      	ldrb	r2, [r7, #15]
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	3b01      	subs	r3, #1
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d3ec      	bcc.n	80042be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042e4:	883b      	ldrh	r3, [r7, #0]
 80042e6:	0418      	lsls	r0, r3, #16
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	4302      	orrs	r2, r0
 80042f4:	3340      	adds	r3, #64	@ 0x40
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e267      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d075      	beq.n	800444e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004362:	4b88      	ldr	r3, [pc, #544]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b04      	cmp	r3, #4
 800436c:	d00c      	beq.n	8004388 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436e:	4b85      	ldr	r3, [pc, #532]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004376:	2b08      	cmp	r3, #8
 8004378:	d112      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437a:	4b82      	ldr	r3, [pc, #520]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004386:	d10b      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	4b7e      	ldr	r3, [pc, #504]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05b      	beq.n	800444c <HAL_RCC_OscConfig+0x108>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d157      	bne.n	800444c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e242      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a8:	d106      	bne.n	80043b8 <HAL_RCC_OscConfig+0x74>
 80043aa:	4b76      	ldr	r3, [pc, #472]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a75      	ldr	r2, [pc, #468]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e01d      	b.n	80043f4 <HAL_RCC_OscConfig+0xb0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x98>
 80043c2:	4b70      	ldr	r3, [pc, #448]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0xb0>
 80043dc:	4b69      	ldr	r3, [pc, #420]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a68      	ldr	r2, [pc, #416]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b66      	ldr	r3, [pc, #408]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a65      	ldr	r2, [pc, #404]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fd fade 	bl	80019bc <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004404:	f7fd fada 	bl	80019bc <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	@ 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e207      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b5b      	ldr	r3, [pc, #364]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0xc0>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd faca 	bl	80019bc <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442c:	f7fd fac6 	bl	80019bc <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	@ 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e1f3      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	4b51      	ldr	r3, [pc, #324]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0xe8>
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d063      	beq.n	8004522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800445a:	4b4a      	ldr	r3, [pc, #296]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004466:	4b47      	ldr	r3, [pc, #284]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800446e:	2b08      	cmp	r3, #8
 8004470:	d11c      	bne.n	80044ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004472:	4b44      	ldr	r3, [pc, #272]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	4b41      	ldr	r3, [pc, #260]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_RCC_OscConfig+0x152>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d001      	beq.n	8004496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e1c7      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	4b3b      	ldr	r3, [pc, #236]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4937      	ldr	r1, [pc, #220]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	e03a      	b.n	8004522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b4:	4b34      	ldr	r3, [pc, #208]	@ (8004588 <HAL_RCC_OscConfig+0x244>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fd fa7f 	bl	80019bc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fd fa7b 	bl	80019bc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1a8      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e0:	4b28      	ldr	r3, [pc, #160]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4925      	ldr	r1, [pc, #148]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	600b      	str	r3, [r1, #0]
 80044f4:	e015      	b.n	8004522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f6:	4b24      	ldr	r3, [pc, #144]	@ (8004588 <HAL_RCC_OscConfig+0x244>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd fa5e 	bl	80019bc <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004504:	f7fd fa5a 	bl	80019bc <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e187      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d036      	beq.n	800459c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004536:	4b15      	ldr	r3, [pc, #84]	@ (800458c <HAL_RCC_OscConfig+0x248>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453c:	f7fd fa3e 	bl	80019bc <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004544:	f7fd fa3a 	bl	80019bc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e167      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <HAL_RCC_OscConfig+0x240>)
 8004558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x200>
 8004562:	e01b      	b.n	800459c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004564:	4b09      	ldr	r3, [pc, #36]	@ (800458c <HAL_RCC_OscConfig+0x248>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456a:	f7fd fa27 	bl	80019bc <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	e00e      	b.n	8004590 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004572:	f7fd fa23 	bl	80019bc <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d907      	bls.n	8004590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e150      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
 8004584:	40023800 	.word	0x40023800
 8004588:	42470000 	.word	0x42470000
 800458c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004590:	4b88      	ldr	r3, [pc, #544]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ea      	bne.n	8004572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8097 	beq.w	80046d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045aa:	2300      	movs	r3, #0
 80045ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ae:	4b81      	ldr	r3, [pc, #516]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10f      	bne.n	80045da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	4b7d      	ldr	r3, [pc, #500]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	4a7c      	ldr	r2, [pc, #496]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ca:	4b7a      	ldr	r3, [pc, #488]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045da:	4b77      	ldr	r3, [pc, #476]	@ (80047b8 <HAL_RCC_OscConfig+0x474>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d118      	bne.n	8004618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e6:	4b74      	ldr	r3, [pc, #464]	@ (80047b8 <HAL_RCC_OscConfig+0x474>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a73      	ldr	r2, [pc, #460]	@ (80047b8 <HAL_RCC_OscConfig+0x474>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f2:	f7fd f9e3 	bl	80019bc <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fa:	f7fd f9df 	bl	80019bc <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e10c      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	4b6a      	ldr	r3, [pc, #424]	@ (80047b8 <HAL_RCC_OscConfig+0x474>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <HAL_RCC_OscConfig+0x2ea>
 8004620:	4b64      	ldr	r3, [pc, #400]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004624:	4a63      	ldr	r2, [pc, #396]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	@ 0x70
 800462c:	e01c      	b.n	8004668 <HAL_RCC_OscConfig+0x324>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b05      	cmp	r3, #5
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0x30c>
 8004636:	4b5f      	ldr	r3, [pc, #380]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	4a5e      	ldr	r2, [pc, #376]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 800463c:	f043 0304 	orr.w	r3, r3, #4
 8004640:	6713      	str	r3, [r2, #112]	@ 0x70
 8004642:	4b5c      	ldr	r3, [pc, #368]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	4a5b      	ldr	r2, [pc, #364]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6713      	str	r3, [r2, #112]	@ 0x70
 800464e:	e00b      	b.n	8004668 <HAL_RCC_OscConfig+0x324>
 8004650:	4b58      	ldr	r3, [pc, #352]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	4a57      	ldr	r2, [pc, #348]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	@ 0x70
 800465c:	4b55      	ldr	r3, [pc, #340]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004660:	4a54      	ldr	r2, [pc, #336]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004662:	f023 0304 	bic.w	r3, r3, #4
 8004666:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d015      	beq.n	800469c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fd f9a4 	bl	80019bc <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	e00a      	b.n	800468e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd f9a0 	bl	80019bc <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0cb      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468e:	4b49      	ldr	r3, [pc, #292]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ee      	beq.n	8004678 <HAL_RCC_OscConfig+0x334>
 800469a:	e014      	b.n	80046c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469c:	f7fd f98e 	bl	80019bc <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a4:	f7fd f98a 	bl	80019bc <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0b5      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ba:	4b3e      	ldr	r3, [pc, #248]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ee      	bne.n	80046a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046cc:	4b39      	ldr	r3, [pc, #228]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	4a38      	ldr	r2, [pc, #224]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 80046d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80a1 	beq.w	8004824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046e2:	4b34      	ldr	r3, [pc, #208]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d05c      	beq.n	80047a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d141      	bne.n	800477a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b31      	ldr	r3, [pc, #196]	@ (80047bc <HAL_RCC_OscConfig+0x478>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd f95e 	bl	80019bc <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fd f95a 	bl	80019bc <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e087      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	019b      	lsls	r3, r3, #6
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	3b01      	subs	r3, #1
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	061b      	lsls	r3, r3, #24
 8004746:	491b      	ldr	r1, [pc, #108]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474c:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <HAL_RCC_OscConfig+0x478>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fd f933 	bl	80019bc <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475a:	f7fd f92f 	bl	80019bc <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e05c      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x416>
 8004778:	e054      	b.n	8004824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477a:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <HAL_RCC_OscConfig+0x478>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fd f91c 	bl	80019bc <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fd f918 	bl	80019bc <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e045      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCC_OscConfig+0x470>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x444>
 80047a6:	e03d      	b.n	8004824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e038      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
 80047b4:	40023800 	.word	0x40023800
 80047b8:	40007000 	.word	0x40007000
 80047bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <HAL_RCC_OscConfig+0x4ec>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d028      	beq.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d121      	bne.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d11a      	bne.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047f0:	4013      	ands	r3, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d111      	bne.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	3b01      	subs	r3, #1
 800480a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d107      	bne.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800

08004834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0cc      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004848:	4b68      	ldr	r3, [pc, #416]	@ (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d90c      	bls.n	8004870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b65      	ldr	r3, [pc, #404]	@ (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b63      	ldr	r3, [pc, #396]	@ (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0b8      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004888:	4b59      	ldr	r3, [pc, #356]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a58      	ldr	r2, [pc, #352]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004892:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a0:	4b53      	ldr	r3, [pc, #332]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a52      	ldr	r2, [pc, #328]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ac:	4b50      	ldr	r3, [pc, #320]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	494d      	ldr	r1, [pc, #308]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d044      	beq.n	8004954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	4b47      	ldr	r3, [pc, #284]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d119      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d107      	bne.n	8004902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f2:	4b3f      	ldr	r3, [pc, #252]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e06f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	4b3b      	ldr	r3, [pc, #236]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e067      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004912:	4b37      	ldr	r3, [pc, #220]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f023 0203 	bic.w	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4934      	ldr	r1, [pc, #208]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004924:	f7fd f84a 	bl	80019bc <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	e00a      	b.n	8004942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492c:	f7fd f846 	bl	80019bc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e04f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	4b2b      	ldr	r3, [pc, #172]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 020c 	and.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	429a      	cmp	r2, r3
 8004952:	d1eb      	bne.n	800492c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004954:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d20c      	bcs.n	800497c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b22      	ldr	r3, [pc, #136]	@ (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b20      	ldr	r3, [pc, #128]	@ (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e032      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004988:	4b19      	ldr	r3, [pc, #100]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4916      	ldr	r1, [pc, #88]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a6:	4b12      	ldr	r3, [pc, #72]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	490e      	ldr	r1, [pc, #56]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ba:	f000 f821 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049be:	4602      	mov	r2, r0
 80049c0:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	490a      	ldr	r1, [pc, #40]	@ (80049f4 <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	5ccb      	ldrb	r3, [r1, r3]
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	4a09      	ldr	r2, [pc, #36]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049d6:	4b09      	ldr	r3, [pc, #36]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fc ffaa 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023c00 	.word	0x40023c00
 80049f0:	40023800 	.word	0x40023800
 80049f4:	0800b934 	.word	0x0800b934
 80049f8:	20000000 	.word	0x20000000
 80049fc:	20000004 	.word	0x20000004

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b094      	sub	sp, #80	@ 0x50
 8004a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a18:	4b79      	ldr	r3, [pc, #484]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d00d      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x40>
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	f200 80e1 	bhi.w	8004bec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x34>
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a32:	e0db      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a34:	4b73      	ldr	r3, [pc, #460]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a38:	e0db      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a3a:	4b73      	ldr	r3, [pc, #460]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a3e:	e0d8      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a40:	4b6f      	ldr	r3, [pc, #444]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d063      	beq.n	8004b1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b6a      	ldr	r3, [pc, #424]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	0159      	lsls	r1, r3, #5
 8004a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a84:	0150      	lsls	r0, r2, #5
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	1a51      	subs	r1, r2, r1
 8004a8e:	6139      	str	r1, [r7, #16]
 8004a90:	4629      	mov	r1, r5
 8004a92:	eb63 0301 	sbc.w	r3, r3, r1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	018b      	lsls	r3, r1, #6
 8004aa8:	4651      	mov	r1, sl
 8004aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aae:	4651      	mov	r1, sl
 8004ab0:	018a      	lsls	r2, r1, #6
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ab8:	4659      	mov	r1, fp
 8004aba:	eb63 0901 	sbc.w	r9, r3, r1
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ad2:	4690      	mov	r8, r2
 8004ad4:	4699      	mov	r9, r3
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	eb18 0303 	adds.w	r3, r8, r3
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	462b      	mov	r3, r5
 8004ae0:	eb49 0303 	adc.w	r3, r9, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004af2:	4629      	mov	r1, r5
 8004af4:	024b      	lsls	r3, r1, #9
 8004af6:	4621      	mov	r1, r4
 8004af8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004afc:	4621      	mov	r1, r4
 8004afe:	024a      	lsls	r2, r1, #9
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b06:	2200      	movs	r2, #0
 8004b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b10:	f7fb fbbe 	bl	8000290 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b1c:	e058      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1e:	4b38      	ldr	r3, [pc, #224]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	2200      	movs	r2, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	4611      	mov	r1, r2
 8004b2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	f04f 0000 	mov.w	r0, #0
 8004b40:	f04f 0100 	mov.w	r1, #0
 8004b44:	0159      	lsls	r1, r3, #5
 8004b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b4a:	0150      	lsls	r0, r2, #5
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4641      	mov	r1, r8
 8004b52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b56:	4649      	mov	r1, r9
 8004b58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b70:	ebb2 040a 	subs.w	r4, r2, sl
 8004b74:	eb63 050b 	sbc.w	r5, r3, fp
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	00eb      	lsls	r3, r5, #3
 8004b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b86:	00e2      	lsls	r2, r4, #3
 8004b88:	4614      	mov	r4, r2
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	464b      	mov	r3, r9
 8004b94:	eb45 0303 	adc.w	r3, r5, r3
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	028b      	lsls	r3, r1, #10
 8004baa:	4621      	mov	r1, r4
 8004bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	028a      	lsls	r2, r1, #10
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bba:	2200      	movs	r2, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	61fa      	str	r2, [r7, #28]
 8004bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc4:	f7fb fb64 	bl	8000290 <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4613      	mov	r3, r2
 8004bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bea:	e002      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3750      	adds	r7, #80	@ 0x50
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	@ (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000000 	.word	0x20000000

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a9b      	lsrs	r3, r3, #10
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4903      	ldr	r1, [pc, #12]	@ (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	0800b944 	.word	0x0800b944

08004c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c50:	f7ff ffdc 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0b5b      	lsrs	r3, r3, #13
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	@ (8004c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	0800b944 	.word	0x0800b944

08004c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e041      	b.n	8004d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fbce 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f000 fa7e 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d001      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e04e      	b.n	8004dca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a23      	ldr	r2, [pc, #140]	@ (8004dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d022      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d56:	d01d      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d018      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1c      	ldr	r2, [pc, #112]	@ (8004de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a19      	ldr	r2, [pc, #100]	@ (8004dec <HAL_TIM_Base_Start_IT+0xd8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	@ (8004df0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d111      	bne.n	8004db8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d010      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	e007      	b.n	8004dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40010400 	.word	0x40010400
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40001800 	.word	0x40001800

08004df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d020      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01b      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0202 	mvn.w	r2, #2
 8004e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f999 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004e44:	e005      	b.n	8004e52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f98b 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f99c 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d020      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01b      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0204 	mvn.w	r2, #4
 8004e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f973 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f965 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f976 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d020      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0208 	mvn.w	r2, #8
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f94d 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f93f 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f950 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d020      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01b      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0210 	mvn.w	r2, #16
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2208      	movs	r2, #8
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f927 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f919 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f92a 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0201 	mvn.w	r2, #1
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fc f8a6 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fae4 	bl	800554c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f8fb 	bl	800519e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00c      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0220 	mvn.w	r2, #32
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fab6 	bl	8005538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e0b4      	b.n	800515a <HAL_TIM_ConfigClockSource+0x186>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800500e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005028:	d03e      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0xd4>
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502e:	f200 8087 	bhi.w	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005036:	f000 8086 	beq.w	8005146 <HAL_TIM_ConfigClockSource+0x172>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	d87f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b70      	cmp	r3, #112	@ 0x70
 8005042:	d01a      	beq.n	800507a <HAL_TIM_ConfigClockSource+0xa6>
 8005044:	2b70      	cmp	r3, #112	@ 0x70
 8005046:	d87b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b60      	cmp	r3, #96	@ 0x60
 800504a:	d050      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x11a>
 800504c:	2b60      	cmp	r3, #96	@ 0x60
 800504e:	d877      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b50      	cmp	r3, #80	@ 0x50
 8005052:	d03c      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0xfa>
 8005054:	2b50      	cmp	r3, #80	@ 0x50
 8005056:	d873      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b40      	cmp	r3, #64	@ 0x40
 800505a:	d058      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x13a>
 800505c:	2b40      	cmp	r3, #64	@ 0x40
 800505e:	d86f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b30      	cmp	r3, #48	@ 0x30
 8005062:	d064      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	2b30      	cmp	r3, #48	@ 0x30
 8005066:	d86b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d060      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d867      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d05c      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b10      	cmp	r3, #16
 8005076:	d05a      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	e062      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	f000 f9b9 	bl	8005400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800509c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
      break;
 80050a6:	e04f      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050b8:	f000 f9a2 	bl	8005400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ca:	609a      	str	r2, [r3, #8]
      break;
 80050cc:	e03c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 f916 	bl	800530c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2150      	movs	r1, #80	@ 0x50
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f96f 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 80050ec:	e02c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 f935 	bl	800536a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2160      	movs	r1, #96	@ 0x60
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f95f 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 800510c:	e01c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	461a      	mov	r2, r3
 800511c:	f000 f8f6 	bl	800530c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2140      	movs	r1, #64	@ 0x40
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f94f 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 800512c:	e00c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f000 f946 	bl	80053ca <TIM_ITRx_SetConfig>
      break;
 800513e:	e003      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e000      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a46      	ldr	r2, [pc, #280]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a43      	ldr	r2, [pc, #268]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a42      	ldr	r2, [pc, #264]	@ (80052e8 <TIM_Base_SetConfig+0x134>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a41      	ldr	r2, [pc, #260]	@ (80052ec <TIM_Base_SetConfig+0x138>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a40      	ldr	r2, [pc, #256]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a35      	ldr	r2, [pc, #212]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005214:	d027      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a32      	ldr	r2, [pc, #200]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d023      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a31      	ldr	r2, [pc, #196]	@ (80052e8 <TIM_Base_SetConfig+0x134>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a30      	ldr	r2, [pc, #192]	@ (80052ec <TIM_Base_SetConfig+0x138>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2f      	ldr	r2, [pc, #188]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d017      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2e      	ldr	r2, [pc, #184]	@ (80052f4 <TIM_Base_SetConfig+0x140>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2d      	ldr	r2, [pc, #180]	@ (80052f8 <TIM_Base_SetConfig+0x144>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2c      	ldr	r2, [pc, #176]	@ (80052fc <TIM_Base_SetConfig+0x148>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2b      	ldr	r2, [pc, #172]	@ (8005300 <TIM_Base_SetConfig+0x14c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2a      	ldr	r2, [pc, #168]	@ (8005304 <TIM_Base_SetConfig+0x150>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a29      	ldr	r2, [pc, #164]	@ (8005308 <TIM_Base_SetConfig+0x154>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a12      	ldr	r2, [pc, #72]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d103      	bne.n	80052b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	611a      	str	r2, [r3, #16]
  }
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40010400 	.word	0x40010400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800
 8005300:	40001800 	.word	0x40001800
 8005304:	40001c00 	.word	0x40001c00
 8005308:	40002000 	.word	0x40002000

0800530c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f023 0201 	bic.w	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 030a 	bic.w	r3, r3, #10
 8005348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800536a:	b480      	push	{r7}
 800536c:	b087      	sub	sp, #28
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f023 0210 	bic.w	r2, r3, #16
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	031b      	lsls	r3, r3, #12
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f043 0307 	orr.w	r3, r3, #7
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800541a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	431a      	orrs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005454:	2302      	movs	r3, #2
 8005456:	e05a      	b.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a21      	ldr	r2, [pc, #132]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a4:	d01d      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1a      	ldr	r2, [pc, #104]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a18      	ldr	r2, [pc, #96]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a17      	ldr	r2, [pc, #92]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10c      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40010000 	.word	0x40010000
 8005520:	40000400 	.word	0x40000400
 8005524:	40000800 	.word	0x40000800
 8005528:	40000c00 	.word	0x40000c00
 800552c:	40010400 	.word	0x40010400
 8005530:	40014000 	.word	0x40014000
 8005534:	40001800 	.word	0x40001800

08005538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e042      	b.n	80055f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fb ffd8 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2224      	movs	r2, #36	@ 0x24
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 ff15 	bl	80063d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b090      	sub	sp, #64	@ 0x40
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005608:	2300      	movs	r3, #0
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b80      	cmp	r3, #128	@ 0x80
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b21      	cmp	r3, #33	@ 0x21
 800562c:	d128      	bne.n	8005680 <HAL_UART_DMAStop+0x80>
 800562e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d025      	beq.n	8005680 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3314      	adds	r3, #20
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	623b      	str	r3, [r7, #32]
   return(result);
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800564a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3314      	adds	r3, #20
 8005652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005654:	633a      	str	r2, [r7, #48]	@ 0x30
 8005656:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800565a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e5      	bne.n	8005634 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005674:	4618      	mov	r0, r3
 8005676:	f7fc fbe9 	bl	8001e4c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fce4 	bl	8006048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568a:	2b40      	cmp	r3, #64	@ 0x40
 800568c:	bf0c      	ite	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	2300      	movne	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b22      	cmp	r3, #34	@ 0x22
 80056a0:	d128      	bne.n	80056f4 <HAL_UART_DMAStop+0xf4>
 80056a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d025      	beq.n	80056f4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3314      	adds	r3, #20
 80056c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056c8:	61fa      	str	r2, [r7, #28]
 80056ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	617b      	str	r3, [r7, #20]
   return(result);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fc fbaf 	bl	8001e4c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fcd2 	bl	8006098 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3740      	adds	r7, #64	@ 0x40
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b08c      	sub	sp, #48	@ 0x30
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b20      	cmp	r3, #32
 8005716:	d14a      	bne.n	80057ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e043      	b.n	80057b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	461a      	mov	r2, r3
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fbea 	bl	8005f14 <UART_Start_Receive_DMA>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005746:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800574a:	2b00      	cmp	r3, #0
 800574c:	d12c      	bne.n	80057a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005752:	2b01      	cmp	r3, #1
 8005754:	d125      	bne.n	80057a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	617b      	str	r3, [r7, #20]
   return(result);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f043 0310 	orr.w	r3, r3, #16
 8005782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	330c      	adds	r3, #12
 800578a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800578c:	627a      	str	r2, [r7, #36]	@ 0x24
 800578e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6a39      	ldr	r1, [r7, #32]
 8005792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	61fb      	str	r3, [r7, #28]
   return(result);
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80057a0:	e002      	b.n	80057a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80057a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057ac:	e000      	b.n	80057b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3730      	adds	r7, #48	@ 0x30
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b0ba      	sub	sp, #232	@ 0xe8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057de:	2300      	movs	r3, #0
 80057e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10f      	bne.n	800581e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_UART_IRQHandler+0x66>
 800580a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fd1d 	bl	8006256 <UART_Receive_IT>
      return;
 800581c:	e25b      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800581e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80de 	beq.w	80059e4 <HAL_UART_IRQHandler+0x22c>
 8005828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005838:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80d1 	beq.w	80059e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_UART_IRQHandler+0xae>
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <HAL_UART_IRQHandler+0xd2>
 8005872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005882:	f043 0202 	orr.w	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <HAL_UART_IRQHandler+0xf6>
 8005896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a6:	f043 0204 	orr.w	r2, r3, #4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d011      	beq.n	80058de <HAL_UART_IRQHandler+0x126>
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	f043 0208 	orr.w	r2, r3, #8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 81f2 	beq.w	8005ccc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <HAL_UART_IRQHandler+0x14e>
 80058f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fca8 	bl	8006256 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b40      	cmp	r3, #64	@ 0x40
 8005912:	bf0c      	ite	eq
 8005914:	2301      	moveq	r3, #1
 8005916:	2300      	movne	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <HAL_UART_IRQHandler+0x17a>
 800592a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d04f      	beq.n	80059d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fbb0 	bl	8006098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005942:	2b40      	cmp	r3, #64	@ 0x40
 8005944:	d141      	bne.n	80059ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800595c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005972:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800597e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800598a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1d9      	bne.n	8005946 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d013      	beq.n	80059c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b98 <HAL_UART_IRQHandler+0x3e0>)
 80059a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc fac0 	bl	8001f2c <HAL_DMA_Abort_IT>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d016      	beq.n	80059e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059bc:	4610      	mov	r0, r2
 80059be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	e00e      	b.n	80059e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f99e 	bl	8005d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c8:	e00a      	b.n	80059e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f99a 	bl	8005d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	e006      	b.n	80059e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f996 	bl	8005d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059de:	e175      	b.n	8005ccc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	bf00      	nop
    return;
 80059e2:	e173      	b.n	8005ccc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	f040 814f 	bne.w	8005c8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8148 	beq.w	8005c8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8141 	beq.w	8005c8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b40      	cmp	r3, #64	@ 0x40
 8005a2c:	f040 80b6 	bne.w	8005b9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8145 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	f080 813e 	bcs.w	8005cd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a66:	f000 8088 	beq.w	8005b7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005aa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1d9      	bne.n	8005a6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ada:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ae2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005aec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e1      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3314      	adds	r3, #20
 8005af8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3314      	adds	r3, #20
 8005b12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e3      	bne.n	8005af2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	330c      	adds	r3, #12
 8005b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b4a:	f023 0310 	bic.w	r3, r3, #16
 8005b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e3      	bne.n	8005b38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fc f969 	bl	8001e4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fb fad9 	bl	8001148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b96:	e09b      	b.n	8005cd0 <HAL_UART_IRQHandler+0x518>
 8005b98:	0800615f 	.word	0x0800615f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 808e 	beq.w	8005cd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8089 	beq.w	8005cd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005be6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005be8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e3      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3314      	adds	r3, #20
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	623b      	str	r3, [r7, #32]
   return(result);
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e3      	bne.n	8005bfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0310 	bic.w	r3, r3, #16
 8005c56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c64:	61fa      	str	r2, [r7, #28]
 8005c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	617b      	str	r3, [r7, #20]
   return(result);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e3      	bne.n	8005c40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fb fa5f 	bl	8001148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c8a:	e023      	b.n	8005cd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_UART_IRQHandler+0x4f4>
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa6e 	bl	8006186 <UART_Transmit_IT>
    return;
 8005caa:	e014      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00e      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
 8005cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 faae 	bl	8006226 <UART_EndTransmit_IT>
    return;
 8005cca:	e004      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005cd4:	bf00      	nop
  }
}
 8005cd6:	37e8      	adds	r7, #232	@ 0xe8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b09c      	sub	sp, #112	@ 0x70
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d24:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d172      	bne.n	8005e1a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d36:	2200      	movs	r2, #0
 8005d38:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005d5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d5c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e5      	bne.n	8005d3a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3314      	adds	r3, #20
 8005d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e5      	bne.n	8005d6e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3314      	adds	r3, #20
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	623b      	str	r3, [r7, #32]
   return(result);
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005dc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e5      	bne.n	8005da2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d119      	bne.n	8005e1a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	330c      	adds	r3, #12
 8005dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f023 0310 	bic.w	r3, r3, #16
 8005dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e06:	61fa      	str	r2, [r7, #28]
 8005e08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	69b9      	ldr	r1, [r7, #24]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	617b      	str	r3, [r7, #20]
   return(result);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e5      	bne.n	8005de6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d106      	bne.n	8005e36 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e30:	f7fb f98a 	bl	8001148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e34:	e002      	b.n	8005e3c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e38:	f7fb f97c 	bl	8001134 <HAL_UART_RxCpltCallback>
}
 8005e3c:	bf00      	nop
 8005e3e:	3770      	adds	r7, #112	@ 0x70
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d108      	bne.n	8005e72 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e64:	085b      	lsrs	r3, r3, #1
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4619      	mov	r1, r3
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7fb f96c 	bl	8001148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e70:	e002      	b.n	8005e78 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff ff3c 	bl	8005cf0 <HAL_UART_RxHalfCpltCallback>
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e9c:	2b80      	cmp	r3, #128	@ 0x80
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b21      	cmp	r3, #33	@ 0x21
 8005eb2:	d108      	bne.n	8005ec6 <UART_DMAError+0x46>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005ec0:	68b8      	ldr	r0, [r7, #8]
 8005ec2:	f000 f8c1 	bl	8006048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b40      	cmp	r3, #64	@ 0x40
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b22      	cmp	r3, #34	@ 0x22
 8005ee6:	d108      	bne.n	8005efa <UART_DMAError+0x7a>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005ef4:	68b8      	ldr	r0, [r7, #8]
 8005ef6:	f000 f8cf 	bl	8006098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	f043 0210 	orr.w	r2, r3, #16
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f06:	68b8      	ldr	r0, [r7, #8]
 8005f08:	f7ff fefc 	bl	8005d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b098      	sub	sp, #96	@ 0x60
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	88fa      	ldrh	r2, [r7, #6]
 8005f2c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2222      	movs	r2, #34	@ 0x22
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f40:	4a3e      	ldr	r2, [pc, #248]	@ (800603c <UART_Start_Receive_DMA+0x128>)
 8005f42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f48:	4a3d      	ldr	r2, [pc, #244]	@ (8006040 <UART_Start_Receive_DMA+0x12c>)
 8005f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f50:	4a3c      	ldr	r2, [pc, #240]	@ (8006044 <UART_Start_Receive_DMA+0x130>)
 8005f52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f58:	2200      	movs	r2, #0
 8005f5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f5c:	f107 0308 	add.w	r3, r7, #8
 8005f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	f7fb ff12 	bl	8001d9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d019      	beq.n	8005fca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fb6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e5      	bne.n	8005f96 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3314      	adds	r3, #20
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fea:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3314      	adds	r3, #20
 8006004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	617b      	str	r3, [r7, #20]
   return(result);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006014:	653b      	str	r3, [r7, #80]	@ 0x50
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800601e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6a39      	ldr	r1, [r7, #32]
 8006024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	61fb      	str	r3, [r7, #28]
   return(result);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e5      	bne.n	8005ffe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3760      	adds	r7, #96	@ 0x60
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	08005d19 	.word	0x08005d19
 8006040:	08005e45 	.word	0x08005e45
 8006044:	08005e81 	.word	0x08005e81

08006048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	@ 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	61ba      	str	r2, [r7, #24]
 8006072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6979      	ldr	r1, [r7, #20]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	613b      	str	r3, [r7, #16]
   return(result);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e5      	bne.n	8006050 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800608c:	bf00      	nop
 800608e:	3724      	adds	r7, #36	@ 0x24
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b095      	sub	sp, #84	@ 0x54
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	330c      	adds	r3, #12
 80060be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3314      	adds	r3, #20
 80060da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f023 0301 	bic.w	r3, r3, #1
 80060ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3314      	adds	r3, #20
 80060f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e5      	bne.n	80060d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610c:	2b01      	cmp	r3, #1
 800610e:	d119      	bne.n	8006144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f023 0310 	bic.w	r3, r3, #16
 8006126:	647b      	str	r3, [r7, #68]	@ 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006130:	61ba      	str	r2, [r7, #24]
 8006132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6979      	ldr	r1, [r7, #20]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	613b      	str	r3, [r7, #16]
   return(result);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006152:	bf00      	nop
 8006154:	3754      	adds	r7, #84	@ 0x54
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff fdc3 	bl	8005d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b21      	cmp	r3, #33	@ 0x21
 8006198:	d13e      	bne.n	8006218 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a2:	d114      	bne.n	80061ce <UART_Transmit_IT+0x48>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d110      	bne.n	80061ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	1c9a      	adds	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	621a      	str	r2, [r3, #32]
 80061cc:	e008      	b.n	80061e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	1c59      	adds	r1, r3, #1
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6211      	str	r1, [r2, #32]
 80061d8:	781a      	ldrb	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	4619      	mov	r1, r3
 80061ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10f      	bne.n	8006214 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006202:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006212:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	e000      	b.n	800621a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800623c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff fd48 	bl	8005cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b08c      	sub	sp, #48	@ 0x30
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b22      	cmp	r3, #34	@ 0x22
 8006268:	f040 80ae 	bne.w	80063c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006274:	d117      	bne.n	80062a6 <UART_Receive_IT+0x50>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d113      	bne.n	80062a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006286:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006294:	b29a      	uxth	r2, r3
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629e:	1c9a      	adds	r2, r3, #2
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80062a4:	e026      	b.n	80062f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b8:	d007      	beq.n	80062ca <UART_Receive_IT+0x74>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <UART_Receive_IT+0x82>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e008      	b.n	80062ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	4619      	mov	r1, r3
 8006302:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006304:	2b00      	cmp	r3, #0
 8006306:	d15d      	bne.n	80063c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0220 	bic.w	r2, r2, #32
 8006316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634a:	2b01      	cmp	r3, #1
 800634c:	d135      	bne.n	80063ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	330c      	adds	r3, #12
 800635a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	613b      	str	r3, [r7, #16]
   return(result);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f023 0310 	bic.w	r3, r3, #16
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006374:	623a      	str	r2, [r7, #32]
 8006376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	69f9      	ldr	r1, [r7, #28]
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	61bb      	str	r3, [r7, #24]
   return(result);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	2b10      	cmp	r3, #16
 8006394:	d10a      	bne.n	80063ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fa fec8 	bl	8001148 <HAL_UARTEx_RxEventCallback>
 80063b8:	e002      	b.n	80063c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fa feba 	bl	8001134 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e002      	b.n	80063ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3730      	adds	r7, #48	@ 0x30
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d8:	b0c0      	sub	sp, #256	@ 0x100
 80063da:	af00      	add	r7, sp, #0
 80063dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	68d9      	ldr	r1, [r3, #12]
 80063f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	ea40 0301 	orr.w	r3, r0, r1
 80063fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	431a      	orrs	r2, r3
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	431a      	orrs	r2, r3
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800642c:	f021 010c 	bic.w	r1, r1, #12
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800643a:	430b      	orrs	r3, r1
 800643c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644e:	6999      	ldr	r1, [r3, #24]
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	ea40 0301 	orr.w	r3, r0, r1
 800645a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b8f      	ldr	r3, [pc, #572]	@ (80066a0 <UART_SetConfig+0x2cc>)
 8006464:	429a      	cmp	r2, r3
 8006466:	d005      	beq.n	8006474 <UART_SetConfig+0xa0>
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b8d      	ldr	r3, [pc, #564]	@ (80066a4 <UART_SetConfig+0x2d0>)
 8006470:	429a      	cmp	r2, r3
 8006472:	d104      	bne.n	800647e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006474:	f7fe fbea 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8006478:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800647c:	e003      	b.n	8006486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800647e:	f7fe fbd1 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006482:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006490:	f040 810c 	bne.w	80066ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006498:	2200      	movs	r2, #0
 800649a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800649e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064a6:	4622      	mov	r2, r4
 80064a8:	462b      	mov	r3, r5
 80064aa:	1891      	adds	r1, r2, r2
 80064ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064ae:	415b      	adcs	r3, r3
 80064b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064b6:	4621      	mov	r1, r4
 80064b8:	eb12 0801 	adds.w	r8, r2, r1
 80064bc:	4629      	mov	r1, r5
 80064be:	eb43 0901 	adc.w	r9, r3, r1
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064d6:	4690      	mov	r8, r2
 80064d8:	4699      	mov	r9, r3
 80064da:	4623      	mov	r3, r4
 80064dc:	eb18 0303 	adds.w	r3, r8, r3
 80064e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064e4:	462b      	mov	r3, r5
 80064e6:	eb49 0303 	adc.w	r3, r9, r3
 80064ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80064fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006502:	460b      	mov	r3, r1
 8006504:	18db      	adds	r3, r3, r3
 8006506:	653b      	str	r3, [r7, #80]	@ 0x50
 8006508:	4613      	mov	r3, r2
 800650a:	eb42 0303 	adc.w	r3, r2, r3
 800650e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006518:	f7f9 feba 	bl	8000290 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4b61      	ldr	r3, [pc, #388]	@ (80066a8 <UART_SetConfig+0x2d4>)
 8006522:	fba3 2302 	umull	r2, r3, r3, r2
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	011c      	lsls	r4, r3, #4
 800652a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800652e:	2200      	movs	r2, #0
 8006530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006534:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800653c:	4642      	mov	r2, r8
 800653e:	464b      	mov	r3, r9
 8006540:	1891      	adds	r1, r2, r2
 8006542:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006544:	415b      	adcs	r3, r3
 8006546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800654c:	4641      	mov	r1, r8
 800654e:	eb12 0a01 	adds.w	sl, r2, r1
 8006552:	4649      	mov	r1, r9
 8006554:	eb43 0b01 	adc.w	fp, r3, r1
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800656c:	4692      	mov	sl, r2
 800656e:	469b      	mov	fp, r3
 8006570:	4643      	mov	r3, r8
 8006572:	eb1a 0303 	adds.w	r3, sl, r3
 8006576:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800657a:	464b      	mov	r3, r9
 800657c:	eb4b 0303 	adc.w	r3, fp, r3
 8006580:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006590:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006598:	460b      	mov	r3, r1
 800659a:	18db      	adds	r3, r3, r3
 800659c:	643b      	str	r3, [r7, #64]	@ 0x40
 800659e:	4613      	mov	r3, r2
 80065a0:	eb42 0303 	adc.w	r3, r2, r3
 80065a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80065a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065ae:	f7f9 fe6f 	bl	8000290 <__aeabi_uldivmod>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4611      	mov	r1, r2
 80065b8:	4b3b      	ldr	r3, [pc, #236]	@ (80066a8 <UART_SetConfig+0x2d4>)
 80065ba:	fba3 2301 	umull	r2, r3, r3, r1
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	2264      	movs	r2, #100	@ 0x64
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	1acb      	subs	r3, r1, r3
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065ce:	4b36      	ldr	r3, [pc, #216]	@ (80066a8 <UART_SetConfig+0x2d4>)
 80065d0:	fba3 2302 	umull	r2, r3, r3, r2
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065dc:	441c      	add	r4, r3
 80065de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	1891      	adds	r1, r2, r2
 80065f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065f8:	415b      	adcs	r3, r3
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006600:	4641      	mov	r1, r8
 8006602:	1851      	adds	r1, r2, r1
 8006604:	6339      	str	r1, [r7, #48]	@ 0x30
 8006606:	4649      	mov	r1, r9
 8006608:	414b      	adcs	r3, r1
 800660a:	637b      	str	r3, [r7, #52]	@ 0x34
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006618:	4659      	mov	r1, fp
 800661a:	00cb      	lsls	r3, r1, #3
 800661c:	4651      	mov	r1, sl
 800661e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006622:	4651      	mov	r1, sl
 8006624:	00ca      	lsls	r2, r1, #3
 8006626:	4610      	mov	r0, r2
 8006628:	4619      	mov	r1, r3
 800662a:	4603      	mov	r3, r0
 800662c:	4642      	mov	r2, r8
 800662e:	189b      	adds	r3, r3, r2
 8006630:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006634:	464b      	mov	r3, r9
 8006636:	460a      	mov	r2, r1
 8006638:	eb42 0303 	adc.w	r3, r2, r3
 800663c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800664c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006654:	460b      	mov	r3, r1
 8006656:	18db      	adds	r3, r3, r3
 8006658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800665a:	4613      	mov	r3, r2
 800665c:	eb42 0303 	adc.w	r3, r2, r3
 8006660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800666a:	f7f9 fe11 	bl	8000290 <__aeabi_uldivmod>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <UART_SetConfig+0x2d4>)
 8006674:	fba3 1302 	umull	r1, r3, r3, r2
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	2164      	movs	r1, #100	@ 0x64
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	3332      	adds	r3, #50	@ 0x32
 8006686:	4a08      	ldr	r2, [pc, #32]	@ (80066a8 <UART_SetConfig+0x2d4>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	f003 0207 	and.w	r2, r3, #7
 8006692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4422      	add	r2, r4
 800669a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800669c:	e106      	b.n	80068ac <UART_SetConfig+0x4d8>
 800669e:	bf00      	nop
 80066a0:	40011000 	.word	0x40011000
 80066a4:	40011400 	.word	0x40011400
 80066a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066be:	4642      	mov	r2, r8
 80066c0:	464b      	mov	r3, r9
 80066c2:	1891      	adds	r1, r2, r2
 80066c4:	6239      	str	r1, [r7, #32]
 80066c6:	415b      	adcs	r3, r3
 80066c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066ce:	4641      	mov	r1, r8
 80066d0:	1854      	adds	r4, r2, r1
 80066d2:	4649      	mov	r1, r9
 80066d4:	eb43 0501 	adc.w	r5, r3, r1
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	00eb      	lsls	r3, r5, #3
 80066e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066e6:	00e2      	lsls	r2, r4, #3
 80066e8:	4614      	mov	r4, r2
 80066ea:	461d      	mov	r5, r3
 80066ec:	4643      	mov	r3, r8
 80066ee:	18e3      	adds	r3, r4, r3
 80066f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066f4:	464b      	mov	r3, r9
 80066f6:	eb45 0303 	adc.w	r3, r5, r3
 80066fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800670a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800671a:	4629      	mov	r1, r5
 800671c:	008b      	lsls	r3, r1, #2
 800671e:	4621      	mov	r1, r4
 8006720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006724:	4621      	mov	r1, r4
 8006726:	008a      	lsls	r2, r1, #2
 8006728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800672c:	f7f9 fdb0 	bl	8000290 <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4b60      	ldr	r3, [pc, #384]	@ (80068b8 <UART_SetConfig+0x4e4>)
 8006736:	fba3 2302 	umull	r2, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	011c      	lsls	r4, r3, #4
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006742:	2200      	movs	r2, #0
 8006744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006748:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800674c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	1891      	adds	r1, r2, r2
 8006756:	61b9      	str	r1, [r7, #24]
 8006758:	415b      	adcs	r3, r3
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006760:	4641      	mov	r1, r8
 8006762:	1851      	adds	r1, r2, r1
 8006764:	6139      	str	r1, [r7, #16]
 8006766:	4649      	mov	r1, r9
 8006768:	414b      	adcs	r3, r1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006778:	4659      	mov	r1, fp
 800677a:	00cb      	lsls	r3, r1, #3
 800677c:	4651      	mov	r1, sl
 800677e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006782:	4651      	mov	r1, sl
 8006784:	00ca      	lsls	r2, r1, #3
 8006786:	4610      	mov	r0, r2
 8006788:	4619      	mov	r1, r3
 800678a:	4603      	mov	r3, r0
 800678c:	4642      	mov	r2, r8
 800678e:	189b      	adds	r3, r3, r2
 8006790:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006794:	464b      	mov	r3, r9
 8006796:	460a      	mov	r2, r1
 8006798:	eb42 0303 	adc.w	r3, r2, r3
 800679c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067b8:	4649      	mov	r1, r9
 80067ba:	008b      	lsls	r3, r1, #2
 80067bc:	4641      	mov	r1, r8
 80067be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067c2:	4641      	mov	r1, r8
 80067c4:	008a      	lsls	r2, r1, #2
 80067c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067ca:	f7f9 fd61 	bl	8000290 <__aeabi_uldivmod>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4611      	mov	r1, r2
 80067d4:	4b38      	ldr	r3, [pc, #224]	@ (80068b8 <UART_SetConfig+0x4e4>)
 80067d6:	fba3 2301 	umull	r2, r3, r3, r1
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	2264      	movs	r2, #100	@ 0x64
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	1acb      	subs	r3, r1, r3
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	3332      	adds	r3, #50	@ 0x32
 80067e8:	4a33      	ldr	r2, [pc, #204]	@ (80068b8 <UART_SetConfig+0x4e4>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067f4:	441c      	add	r4, r3
 80067f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067fa:	2200      	movs	r2, #0
 80067fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80067fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006804:	4642      	mov	r2, r8
 8006806:	464b      	mov	r3, r9
 8006808:	1891      	adds	r1, r2, r2
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	415b      	adcs	r3, r3
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006814:	4641      	mov	r1, r8
 8006816:	1851      	adds	r1, r2, r1
 8006818:	6039      	str	r1, [r7, #0]
 800681a:	4649      	mov	r1, r9
 800681c:	414b      	adcs	r3, r1
 800681e:	607b      	str	r3, [r7, #4]
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800682c:	4659      	mov	r1, fp
 800682e:	00cb      	lsls	r3, r1, #3
 8006830:	4651      	mov	r1, sl
 8006832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006836:	4651      	mov	r1, sl
 8006838:	00ca      	lsls	r2, r1, #3
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	4603      	mov	r3, r0
 8006840:	4642      	mov	r2, r8
 8006842:	189b      	adds	r3, r3, r2
 8006844:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006846:	464b      	mov	r3, r9
 8006848:	460a      	mov	r2, r1
 800684a:	eb42 0303 	adc.w	r3, r2, r3
 800684e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	663b      	str	r3, [r7, #96]	@ 0x60
 800685a:	667a      	str	r2, [r7, #100]	@ 0x64
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006868:	4649      	mov	r1, r9
 800686a:	008b      	lsls	r3, r1, #2
 800686c:	4641      	mov	r1, r8
 800686e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006872:	4641      	mov	r1, r8
 8006874:	008a      	lsls	r2, r1, #2
 8006876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800687a:	f7f9 fd09 	bl	8000290 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <UART_SetConfig+0x4e4>)
 8006884:	fba3 1302 	umull	r1, r3, r3, r2
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	2164      	movs	r1, #100	@ 0x64
 800688c:	fb01 f303 	mul.w	r3, r1, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	3332      	adds	r3, #50	@ 0x32
 8006896:	4a08      	ldr	r2, [pc, #32]	@ (80068b8 <UART_SetConfig+0x4e4>)
 8006898:	fba2 2303 	umull	r2, r3, r2, r3
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	f003 020f 	and.w	r2, r3, #15
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4422      	add	r2, r4
 80068aa:	609a      	str	r2, [r3, #8]
}
 80068ac:	bf00      	nop
 80068ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068b2:	46bd      	mov	sp, r7
 80068b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b8:	51eb851f 	.word	0x51eb851f

080068bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068bc:	b084      	sub	sp, #16
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	f107 001c 	add.w	r0, r7, #28
 80068ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d123      	bne.n	800691e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80068ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006902:	2b01      	cmp	r3, #1
 8006904:	d105      	bne.n	8006912 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fae8 	bl	8007ee8 <USB_CoreReset>
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	e01b      	b.n	8006956 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fadc 	bl	8007ee8 <USB_CoreReset>
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006934:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006940:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	@ 0x38
 8006948:	e005      	b.n	8006956 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006956:	7fbb      	ldrb	r3, [r7, #30]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d10b      	bne.n	8006974 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f043 0206 	orr.w	r2, r3, #6
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006980:	b004      	add	sp, #16
 8006982:	4770      	bx	lr

08006984 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d165      	bne.n	8006a64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a41      	ldr	r2, [pc, #260]	@ (8006aa0 <USB_SetTurnaroundTime+0x11c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d906      	bls.n	80069ae <USB_SetTurnaroundTime+0x2a>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a40      	ldr	r2, [pc, #256]	@ (8006aa4 <USB_SetTurnaroundTime+0x120>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d202      	bcs.n	80069ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069a8:	230f      	movs	r3, #15
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e062      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a3c      	ldr	r2, [pc, #240]	@ (8006aa4 <USB_SetTurnaroundTime+0x120>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d306      	bcc.n	80069c4 <USB_SetTurnaroundTime+0x40>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a3b      	ldr	r2, [pc, #236]	@ (8006aa8 <USB_SetTurnaroundTime+0x124>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d202      	bcs.n	80069c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069be:	230e      	movs	r3, #14
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e057      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a38      	ldr	r2, [pc, #224]	@ (8006aa8 <USB_SetTurnaroundTime+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d306      	bcc.n	80069da <USB_SetTurnaroundTime+0x56>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a37      	ldr	r2, [pc, #220]	@ (8006aac <USB_SetTurnaroundTime+0x128>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d202      	bcs.n	80069da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069d4:	230d      	movs	r3, #13
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e04c      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a33      	ldr	r2, [pc, #204]	@ (8006aac <USB_SetTurnaroundTime+0x128>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d306      	bcc.n	80069f0 <USB_SetTurnaroundTime+0x6c>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4a32      	ldr	r2, [pc, #200]	@ (8006ab0 <USB_SetTurnaroundTime+0x12c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d802      	bhi.n	80069f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069ea:	230c      	movs	r3, #12
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e041      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a2f      	ldr	r2, [pc, #188]	@ (8006ab0 <USB_SetTurnaroundTime+0x12c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d906      	bls.n	8006a06 <USB_SetTurnaroundTime+0x82>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4a2e      	ldr	r2, [pc, #184]	@ (8006ab4 <USB_SetTurnaroundTime+0x130>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d802      	bhi.n	8006a06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a00:	230b      	movs	r3, #11
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e036      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab4 <USB_SetTurnaroundTime+0x130>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d906      	bls.n	8006a1c <USB_SetTurnaroundTime+0x98>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a29      	ldr	r2, [pc, #164]	@ (8006ab8 <USB_SetTurnaroundTime+0x134>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d802      	bhi.n	8006a1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a16:	230a      	movs	r3, #10
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e02b      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4a26      	ldr	r2, [pc, #152]	@ (8006ab8 <USB_SetTurnaroundTime+0x134>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d906      	bls.n	8006a32 <USB_SetTurnaroundTime+0xae>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a25      	ldr	r2, [pc, #148]	@ (8006abc <USB_SetTurnaroundTime+0x138>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d202      	bcs.n	8006a32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a2c:	2309      	movs	r3, #9
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e020      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4a21      	ldr	r2, [pc, #132]	@ (8006abc <USB_SetTurnaroundTime+0x138>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d306      	bcc.n	8006a48 <USB_SetTurnaroundTime+0xc4>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	@ (8006ac0 <USB_SetTurnaroundTime+0x13c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d802      	bhi.n	8006a48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a42:	2308      	movs	r3, #8
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e015      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac0 <USB_SetTurnaroundTime+0x13c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d906      	bls.n	8006a5e <USB_SetTurnaroundTime+0xda>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac4 <USB_SetTurnaroundTime+0x140>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d202      	bcs.n	8006a5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a58:	2307      	movs	r3, #7
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e00a      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a5e:	2306      	movs	r3, #6
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e007      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a6a:	2309      	movs	r3, #9
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e001      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a70:	2309      	movs	r3, #9
 8006a72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	029b      	lsls	r3, r3, #10
 8006a88:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	00d8acbf 	.word	0x00d8acbf
 8006aa4:	00e4e1c0 	.word	0x00e4e1c0
 8006aa8:	00f42400 	.word	0x00f42400
 8006aac:	01067380 	.word	0x01067380
 8006ab0:	011a499f 	.word	0x011a499f
 8006ab4:	01312cff 	.word	0x01312cff
 8006ab8:	014ca43f 	.word	0x014ca43f
 8006abc:	016e3600 	.word	0x016e3600
 8006ac0:	01a6ab1f 	.word	0x01a6ab1f
 8006ac4:	01e84800 	.word	0x01e84800

08006ac8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f043 0201 	orr.w	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f023 0201 	bic.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d115      	bne.n	8006b5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b3a:	200a      	movs	r0, #10
 8006b3c:	f7fa ff4a 	bl	80019d4 <HAL_Delay>
      ms += 10U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	330a      	adds	r3, #10
 8006b44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 f93f 	bl	8007dca <USB_GetMode>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d01e      	beq.n	8006b90 <USB_SetCurrentMode+0x84>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b56:	d9f0      	bls.n	8006b3a <USB_SetCurrentMode+0x2e>
 8006b58:	e01a      	b.n	8006b90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d115      	bne.n	8006b8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b6c:	200a      	movs	r0, #10
 8006b6e:	f7fa ff31 	bl	80019d4 <HAL_Delay>
      ms += 10U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	330a      	adds	r3, #10
 8006b76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f926 	bl	8007dca <USB_GetMode>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <USB_SetCurrentMode+0x84>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b88:	d9f0      	bls.n	8006b6c <USB_SetCurrentMode+0x60>
 8006b8a:	e001      	b.n	8006b90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e005      	b.n	8006b9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b94:	d101      	bne.n	8006b9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b086      	sub	sp, #24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	e009      	b.n	8006bd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3340      	adds	r3, #64	@ 0x40
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	2200      	movs	r2, #0
 8006bd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b0e      	cmp	r3, #14
 8006bdc:	d9f2      	bls.n	8006bc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d11c      	bne.n	8006c20 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bf4:	f043 0302 	orr.w	r3, r3, #2
 8006bf8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c16:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c1e:	e00b      	b.n	8006c38 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c30:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c3e:	461a      	mov	r2, r3
 8006c40:	2300      	movs	r3, #0
 8006c42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d10d      	bne.n	8006c68 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c54:	2100      	movs	r1, #0
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f968 	bl	8006f2c <USB_SetDevSpeed>
 8006c5c:	e008      	b.n	8006c70 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c5e:	2101      	movs	r1, #1
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f963 	bl	8006f2c <USB_SetDevSpeed>
 8006c66:	e003      	b.n	8006c70 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c68:	2103      	movs	r1, #3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f95e 	bl	8006f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c70:	2110      	movs	r1, #16
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8fa 	bl	8006e6c <USB_FlushTxFifo>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f924 	bl	8006ed0 <USB_FlushRxFifo>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	e043      	b.n	8006d44 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cd2:	d118      	bne.n	8006d06 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10a      	bne.n	8006cf0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e013      	b.n	8006d18 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e008      	b.n	8006d18 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d12:	461a      	mov	r2, r3
 8006d14:	2300      	movs	r3, #0
 8006d16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d24:	461a      	mov	r2, r3
 8006d26:	2300      	movs	r3, #0
 8006d28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d36:	461a      	mov	r2, r3
 8006d38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3301      	adds	r3, #1
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d48:	461a      	mov	r2, r3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d3b5      	bcc.n	8006cbc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d50:	2300      	movs	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	e043      	b.n	8006dde <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d6c:	d118      	bne.n	8006da0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d80:	461a      	mov	r2, r3
 8006d82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e013      	b.n	8006db2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d96:	461a      	mov	r2, r3
 8006d98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e008      	b.n	8006db2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dac:	461a      	mov	r2, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006de2:	461a      	mov	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d3b5      	bcc.n	8006d56 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dfc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f043 0210 	orr.w	r2, r3, #16
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	4b10      	ldr	r3, [pc, #64]	@ (8006e68 <USB_DevInit+0x2c4>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f043 0208 	orr.w	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d107      	bne.n	8006e58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e50:	f043 0304 	orr.w	r3, r3, #4
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e64:	b004      	add	sp, #16
 8006e66:	4770      	bx	lr
 8006e68:	803c3800 	.word	0x803c3800

08006e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e86:	d901      	bls.n	8006e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e01b      	b.n	8006ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	daf2      	bge.n	8006e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	019b      	lsls	r3, r3, #6
 8006e9c:	f043 0220 	orr.w	r2, r3, #32
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eb0:	d901      	bls.n	8006eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e006      	b.n	8006ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d0f0      	beq.n	8006ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ee8:	d901      	bls.n	8006eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e018      	b.n	8006f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	daf2      	bge.n	8006edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2210      	movs	r2, #16
 8006efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f0c:	d901      	bls.n	8006f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e006      	b.n	8006f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0310 	and.w	r3, r3, #16
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d0f0      	beq.n	8006f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0306 	and.w	r3, r3, #6
 8006f76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
 8006f82:	e00a      	b.n	8006f9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d002      	beq.n	8006f90 <USB_GetDevSpeed+0x32>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b06      	cmp	r3, #6
 8006f8e:	d102      	bne.n	8006f96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f90:	2302      	movs	r3, #2
 8006f92:	75fb      	strb	r3, [r7, #23]
 8006f94:	e001      	b.n	8006f9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f96:	230f      	movs	r3, #15
 8006f98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d13a      	bne.n	800703a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d155      	bne.n	80070a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	791b      	ldrb	r3, [r3, #4]
 8007016:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007018:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	059b      	lsls	r3, r3, #22
 800701e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007020:	4313      	orrs	r3, r2
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800702e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e036      	b.n	80070a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	2101      	movs	r1, #1
 800704c:	fa01 f303 	lsl.w	r3, r1, r3
 8007050:	041b      	lsls	r3, r3, #16
 8007052:	68f9      	ldr	r1, [r7, #12]
 8007054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007058:	4313      	orrs	r3, r2
 800705a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d11a      	bne.n	80070a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	791b      	ldrb	r3, [r3, #4]
 800708c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800708e:	430b      	orrs	r3, r1
 8007090:	4313      	orrs	r3, r2
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800709e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d161      	bne.n	8007198 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070ea:	d11f      	bne.n	800712c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	440a      	add	r2, r1
 8007102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007106:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800710a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	440a      	add	r2, r1
 8007122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007126:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800712a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007132:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	43db      	mvns	r3, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800714c:	4013      	ands	r3, r2
 800714e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	2101      	movs	r1, #1
 8007162:	fa01 f303 	lsl.w	r3, r1, r3
 8007166:	b29b      	uxth	r3, r3
 8007168:	43db      	mvns	r3, r3
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007170:	4013      	ands	r3, r2
 8007172:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	0159      	lsls	r1, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	440b      	add	r3, r1
 800718a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800718e:	4619      	mov	r1, r3
 8007190:	4b35      	ldr	r3, [pc, #212]	@ (8007268 <USB_DeactivateEndpoint+0x1b0>)
 8007192:	4013      	ands	r3, r2
 8007194:	600b      	str	r3, [r1, #0]
 8007196:	e060      	b.n	800725a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071ae:	d11f      	bne.n	80071f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	2101      	movs	r1, #1
 8007202:	fa01 f303 	lsl.w	r3, r1, r3
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	43db      	mvns	r3, r3
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007210:	4013      	ands	r3, r2
 8007212:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	2101      	movs	r1, #1
 8007226:	fa01 f303 	lsl.w	r3, r1, r3
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	43db      	mvns	r3, r3
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007234:	4013      	ands	r3, r2
 8007236:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	0159      	lsls	r1, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	440b      	add	r3, r1
 800724e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007252:	4619      	mov	r1, r3
 8007254:	4b05      	ldr	r3, [pc, #20]	@ (800726c <USB_DeactivateEndpoint+0x1b4>)
 8007256:	4013      	ands	r3, r2
 8007258:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	ec337800 	.word	0xec337800
 800726c:	eff37800 	.word	0xeff37800

08007270 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	@ 0x28
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b01      	cmp	r3, #1
 800728e:	f040 817f 	bne.w	8007590 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d132      	bne.n	8007300 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80072b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80072bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072f8:	0cdb      	lsrs	r3, r3, #19
 80072fa:	04db      	lsls	r3, r3, #19
 80072fc:	6113      	str	r3, [r2, #16]
 80072fe:	e097      	b.n	8007430 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	440a      	add	r2, r1
 8007316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800731a:	0cdb      	lsrs	r3, r3, #19
 800731c:	04db      	lsls	r3, r3, #19
 800731e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800733a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800733e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007342:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11a      	bne.n	8007380 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	d903      	bls.n	800735e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007378:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800737c:	6113      	str	r3, [r2, #16]
 800737e:	e044      	b.n	800740a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	4413      	add	r3, r2
 800738a:	1e5a      	subs	r2, r3, #1
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	8afb      	ldrh	r3, [r7, #22]
 80073a6:	04d9      	lsls	r1, r3, #19
 80073a8:	4ba4      	ldr	r3, [pc, #656]	@ (800763c <USB_EPStartXfer+0x3cc>)
 80073aa:	400b      	ands	r3, r1
 80073ac:	69b9      	ldr	r1, [r7, #24]
 80073ae:	0148      	lsls	r0, r1, #5
 80073b0:	69f9      	ldr	r1, [r7, #28]
 80073b2:	4401      	add	r1, r0
 80073b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80073b8:	4313      	orrs	r3, r2
 80073ba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	791b      	ldrb	r3, [r3, #4]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d122      	bne.n	800740a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073de:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80073e2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	8afb      	ldrh	r3, [r7, #22]
 80073f4:	075b      	lsls	r3, r3, #29
 80073f6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80073fa:	69b9      	ldr	r1, [r7, #24]
 80073fc:	0148      	lsls	r0, r1, #5
 80073fe:	69f9      	ldr	r1, [r7, #28]
 8007400:	4401      	add	r1, r0
 8007402:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007406:	4313      	orrs	r3, r2
 8007408:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007416:	691a      	ldr	r2, [r3, #16]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007420:	69b9      	ldr	r1, [r7, #24]
 8007422:	0148      	lsls	r0, r1, #5
 8007424:	69f9      	ldr	r1, [r7, #28]
 8007426:	4401      	add	r1, r0
 8007428:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800742c:	4313      	orrs	r3, r2
 800742e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d14b      	bne.n	80074ce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d009      	beq.n	8007452 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744a:	461a      	mov	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d128      	bne.n	80074ac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007466:	2b00      	cmp	r3, #0
 8007468:	d110      	bne.n	800748c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	440a      	add	r2, r1
 8007480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	e00f      	b.n	80074ac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074aa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	e166      	b.n	800779c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074ec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	791b      	ldrb	r3, [r3, #4]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d015      	beq.n	8007522 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 814e 	beq.w	800779c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	2101      	movs	r1, #1
 8007512:	fa01 f303 	lsl.w	r3, r1, r3
 8007516:	69f9      	ldr	r1, [r7, #28]
 8007518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800751c:	4313      	orrs	r3, r2
 800751e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007520:	e13c      	b.n	800779c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752e:	2b00      	cmp	r3, #0
 8007530:	d110      	bne.n	8007554 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	440a      	add	r2, r1
 8007548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800754c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	e00f      	b.n	8007574 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	440a      	add	r2, r1
 800756a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800756e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007572:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	68d9      	ldr	r1, [r3, #12]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	781a      	ldrb	r2, [r3, #0]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	b298      	uxth	r0, r3
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	4603      	mov	r3, r0
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f9b9 	bl	8007900 <USB_WritePacket>
 800758e:	e105      	b.n	800779c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075aa:	0cdb      	lsrs	r3, r3, #19
 80075ac:	04db      	lsls	r3, r3, #19
 80075ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80075ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80075d2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d132      	bne.n	8007640 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007608:	69b9      	ldr	r1, [r7, #24]
 800760a:	0148      	lsls	r0, r1, #5
 800760c:	69f9      	ldr	r1, [r7, #28]
 800760e:	4401      	add	r1, r0
 8007610:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007614:	4313      	orrs	r3, r2
 8007616:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	0151      	lsls	r1, r2, #5
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	440a      	add	r2, r1
 800762e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007632:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007636:	6113      	str	r3, [r2, #16]
 8007638:	e062      	b.n	8007700 <USB_EPStartXfer+0x490>
 800763a:	bf00      	nop
 800763c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d123      	bne.n	8007690 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800765e:	69b9      	ldr	r1, [r7, #24]
 8007660:	0148      	lsls	r0, r1, #5
 8007662:	69f9      	ldr	r1, [r7, #28]
 8007664:	4401      	add	r1, r0
 8007666:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800766a:	4313      	orrs	r3, r2
 800766c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007688:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800768c:	6113      	str	r3, [r2, #16]
 800768e:	e037      	b.n	8007700 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	4413      	add	r3, r2
 800769a:	1e5a      	subs	r2, r3, #1
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	8afa      	ldrh	r2, [r7, #22]
 80076ac:	fb03 f202 	mul.w	r2, r3, r2
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	8afb      	ldrh	r3, [r7, #22]
 80076c4:	04d9      	lsls	r1, r3, #19
 80076c6:	4b38      	ldr	r3, [pc, #224]	@ (80077a8 <USB_EPStartXfer+0x538>)
 80076c8:	400b      	ands	r3, r1
 80076ca:	69b9      	ldr	r1, [r7, #24]
 80076cc:	0148      	lsls	r0, r1, #5
 80076ce:	69f9      	ldr	r1, [r7, #28]
 80076d0:	4401      	add	r1, r0
 80076d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076d6:	4313      	orrs	r3, r2
 80076d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f0:	69b9      	ldr	r1, [r7, #24]
 80076f2:	0148      	lsls	r0, r1, #5
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	4401      	add	r1, r0
 80076f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076fc:	4313      	orrs	r3, r2
 80076fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d10d      	bne.n	8007722 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	68d9      	ldr	r1, [r3, #12]
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771e:	460a      	mov	r2, r1
 8007720:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d128      	bne.n	800777c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d110      	bne.n	800775c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007754:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e00f      	b.n	800777c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800777a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007796:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800779a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3720      	adds	r7, #32
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	1ff80000 	.word	0x1ff80000

080077ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d14a      	bne.n	8007860 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077e2:	f040 8086 	bne.w	80078f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	7812      	ldrb	r2, [r2, #0]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007804:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007808:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	7812      	ldrb	r2, [r2, #0]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800782c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3301      	adds	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f242 7210 	movw	r2, #10000	@ 0x2710
 800783a:	4293      	cmp	r3, r2
 800783c:	d902      	bls.n	8007844 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
          break;
 8007842:	e056      	b.n	80078f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800785c:	d0e7      	beq.n	800782e <USB_EPStopXfer+0x82>
 800785e:	e048      	b.n	80078f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007878:	d13b      	bne.n	80078f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	0151      	lsls	r1, r2, #5
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	440a      	add	r2, r1
 8007894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007898:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800789c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	7812      	ldrb	r2, [r2, #0]
 80078b2:	0151      	lsls	r1, r2, #5
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	440a      	add	r2, r1
 80078b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3301      	adds	r3, #1
 80078c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d902      	bls.n	80078d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
          break;
 80078d6:	e00c      	b.n	80078f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078f0:	d0e7      	beq.n	80078c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007900:	b480      	push	{r7}
 8007902:	b089      	sub	sp, #36	@ 0x24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4611      	mov	r1, r2
 800790c:	461a      	mov	r2, r3
 800790e:	460b      	mov	r3, r1
 8007910:	71fb      	strb	r3, [r7, #7]
 8007912:	4613      	mov	r3, r2
 8007914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800791e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d123      	bne.n	800796e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007926:	88bb      	ldrh	r3, [r7, #4]
 8007928:	3303      	adds	r3, #3
 800792a:	089b      	lsrs	r3, r3, #2
 800792c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	e018      	b.n	8007966 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	031a      	lsls	r2, r3, #12
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007940:	461a      	mov	r2, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	3301      	adds	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	3301      	adds	r3, #1
 8007952:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	3301      	adds	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	3301      	adds	r3, #1
 800795e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	3301      	adds	r3, #1
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	429a      	cmp	r2, r3
 800796c:	d3e2      	bcc.n	8007934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3724      	adds	r7, #36	@ 0x24
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800797c:	b480      	push	{r7}
 800797e:	b08b      	sub	sp, #44	@ 0x2c
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007992:	88fb      	ldrh	r3, [r7, #6]
 8007994:	089b      	lsrs	r3, r3, #2
 8007996:	b29b      	uxth	r3, r3
 8007998:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	f003 0303 	and.w	r3, r3, #3
 80079a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	623b      	str	r3, [r7, #32]
 80079a6:	e014      	b.n	80079d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b6:	3301      	adds	r3, #1
 80079b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	3301      	adds	r3, #1
 80079be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	3301      	adds	r3, #1
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	3301      	adds	r3, #1
 80079ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	3301      	adds	r3, #1
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	6a3a      	ldr	r2, [r7, #32]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d3e6      	bcc.n	80079a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079da:	8bfb      	ldrh	r3, [r7, #30]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ea:	461a      	mov	r2, r3
 80079ec:	f107 0310 	add.w	r3, r7, #16
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	701a      	strb	r2, [r3, #0]
      i++;
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	3301      	adds	r3, #1
 8007a10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007a12:	8bfb      	ldrh	r3, [r7, #30]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a18:	8bfb      	ldrh	r3, [r7, #30]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1ea      	bne.n	80079f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	372c      	adds	r7, #44	@ 0x2c
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d12c      	bne.n	8007aa2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	db12      	blt.n	8007a80 <USB_EPSetStall+0x54>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00f      	beq.n	8007a80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	440a      	add	r2, r1
 8007a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	0151      	lsls	r1, r2, #5
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	440a      	add	r2, r1
 8007a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	e02b      	b.n	8007afa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	db12      	blt.n	8007ada <USB_EPSetStall+0xae>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00f      	beq.n	8007ada <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	0151      	lsls	r1, r2, #5
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	440a      	add	r2, r1
 8007ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ad4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ad8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007af8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d128      	bne.n	8007b76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	791b      	ldrb	r3, [r3, #4]
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d003      	beq.n	8007b54 <USB_EPClearStall+0x4c>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	791b      	ldrb	r3, [r3, #4]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d138      	bne.n	8007bc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	e027      	b.n	8007bc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	791b      	ldrb	r3, [r3, #4]
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d003      	beq.n	8007ba6 <USB_EPClearStall+0x9e>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	791b      	ldrb	r3, [r3, #4]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d10f      	bne.n	8007bc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bf2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007bf6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007c08:	68f9      	ldr	r1, [r7, #12]
 8007c0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c3a:	f023 0303 	bic.w	r3, r3, #3
 8007c3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c4e:	f023 0302 	bic.w	r3, r3, #2
 8007c52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c7c:	f023 0303 	bic.w	r3, r3, #3
 8007c80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c90:	f043 0302 	orr.w	r3, r3, #2
 8007c94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	4013      	ands	r3, r2
 8007cec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	b29b      	uxth	r3, r3
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d60:	68bb      	ldr	r3, [r7, #8]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9e:	01db      	lsls	r3, r3, #7
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4013      	ands	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007e04:	f023 0307 	bic.w	r3, r3, #7
 8007e08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	460b      	mov	r3, r1
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	333c      	adds	r3, #60	@ 0x3c
 8007e42:	3304      	adds	r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4a26      	ldr	r2, [pc, #152]	@ (8007ee4 <USB_EP0_OutStart+0xb8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d90a      	bls.n	8007e66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e60:	d101      	bne.n	8007e66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e037      	b.n	8007ed6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e94:	f043 0318 	orr.w	r3, r3, #24
 8007e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007eac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d10f      	bne.n	8007ed4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ece:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007ed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	4f54300a 	.word	0x4f54300a

08007ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f00:	d901      	bls.n	8007f06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e01b      	b.n	8007f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	daf2      	bge.n	8007ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f043 0201 	orr.w	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f2a:	d901      	bls.n	8007f30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e006      	b.n	8007f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d0f0      	beq.n	8007f1e <USB_CoreReset+0x36>

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007f5c:	f002 fcc4 	bl	800a8e8 <USBD_static_malloc>
 8007f60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	32b0      	adds	r2, #176	@ 0xb0
 8007f72:	2100      	movs	r1, #0
 8007f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e0d4      	b.n	8008126 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007f7c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007f80:	2100      	movs	r1, #0
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f002 fefe 	bl	800ad84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	32b0      	adds	r2, #176	@ 0xb0
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	32b0      	adds	r2, #176	@ 0xb0
 8007fa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	7c1b      	ldrb	r3, [r3, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d138      	bne.n	8008026 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8008130 <USBD_CDC_Init+0x1e4>)
 8007fb6:	7819      	ldrb	r1, [r3, #0]
 8007fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f002 fb6f 	bl	800a6a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fc4:	4b5a      	ldr	r3, [pc, #360]	@ (8008130 <USBD_CDC_Init+0x1e4>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	3324      	adds	r3, #36	@ 0x24
 8007fda:	2201      	movs	r2, #1
 8007fdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fde:	4b55      	ldr	r3, [pc, #340]	@ (8008134 <USBD_CDC_Init+0x1e8>)
 8007fe0:	7819      	ldrb	r1, [r3, #0]
 8007fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f002 fb5a 	bl	800a6a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fee:	4b51      	ldr	r3, [pc, #324]	@ (8008134 <USBD_CDC_Init+0x1e8>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	f003 020f 	and.w	r2, r3, #15
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008006:	2201      	movs	r2, #1
 8008008:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800800a:	4b4b      	ldr	r3, [pc, #300]	@ (8008138 <USBD_CDC_Init+0x1ec>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f003 020f 	and.w	r2, r3, #15
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	3326      	adds	r3, #38	@ 0x26
 8008020:	2210      	movs	r2, #16
 8008022:	801a      	strh	r2, [r3, #0]
 8008024:	e035      	b.n	8008092 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008026:	4b42      	ldr	r3, [pc, #264]	@ (8008130 <USBD_CDC_Init+0x1e4>)
 8008028:	7819      	ldrb	r1, [r3, #0]
 800802a:	2340      	movs	r3, #64	@ 0x40
 800802c:	2202      	movs	r2, #2
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f002 fb37 	bl	800a6a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008034:	4b3e      	ldr	r3, [pc, #248]	@ (8008130 <USBD_CDC_Init+0x1e4>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 020f 	and.w	r2, r3, #15
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	440b      	add	r3, r1
 8008048:	3324      	adds	r3, #36	@ 0x24
 800804a:	2201      	movs	r2, #1
 800804c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800804e:	4b39      	ldr	r3, [pc, #228]	@ (8008134 <USBD_CDC_Init+0x1e8>)
 8008050:	7819      	ldrb	r1, [r3, #0]
 8008052:	2340      	movs	r3, #64	@ 0x40
 8008054:	2202      	movs	r2, #2
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f002 fb23 	bl	800a6a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800805c:	4b35      	ldr	r3, [pc, #212]	@ (8008134 <USBD_CDC_Init+0x1e8>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 020f 	and.w	r2, r3, #15
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008074:	2201      	movs	r2, #1
 8008076:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008078:	4b2f      	ldr	r3, [pc, #188]	@ (8008138 <USBD_CDC_Init+0x1ec>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	3326      	adds	r3, #38	@ 0x26
 800808e:	2210      	movs	r2, #16
 8008090:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008092:	4b29      	ldr	r3, [pc, #164]	@ (8008138 <USBD_CDC_Init+0x1ec>)
 8008094:	7819      	ldrb	r1, [r3, #0]
 8008096:	2308      	movs	r3, #8
 8008098:	2203      	movs	r2, #3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f002 fb01 	bl	800a6a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80080a0:	4b25      	ldr	r3, [pc, #148]	@ (8008138 <USBD_CDC_Init+0x1ec>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f003 020f 	and.w	r2, r3, #15
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	440b      	add	r3, r1
 80080b4:	3324      	adds	r3, #36	@ 0x24
 80080b6:	2201      	movs	r2, #1
 80080b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	33b0      	adds	r3, #176	@ 0xb0
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80080f0:	2302      	movs	r3, #2
 80080f2:	e018      	b.n	8008126 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7c1b      	ldrb	r3, [r3, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008134 <USBD_CDC_Init+0x1e8>)
 80080fe:	7819      	ldrb	r1, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f002 fbb8 	bl	800a880 <USBD_LL_PrepareReceive>
 8008110:	e008      	b.n	8008124 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008112:	4b08      	ldr	r3, [pc, #32]	@ (8008134 <USBD_CDC_Init+0x1e8>)
 8008114:	7819      	ldrb	r1, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800811c:	2340      	movs	r3, #64	@ 0x40
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f002 fbae 	bl	800a880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000093 	.word	0x20000093
 8008134:	20000094 	.word	0x20000094
 8008138:	20000095 	.word	0x20000095

0800813c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008148:	4b3a      	ldr	r3, [pc, #232]	@ (8008234 <USBD_CDC_DeInit+0xf8>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f002 facd 	bl	800a6ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008154:	4b37      	ldr	r3, [pc, #220]	@ (8008234 <USBD_CDC_DeInit+0xf8>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	f003 020f 	and.w	r2, r3, #15
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	440b      	add	r3, r1
 8008168:	3324      	adds	r3, #36	@ 0x24
 800816a:	2200      	movs	r2, #0
 800816c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800816e:	4b32      	ldr	r3, [pc, #200]	@ (8008238 <USBD_CDC_DeInit+0xfc>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f002 faba 	bl	800a6ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800817a:	4b2f      	ldr	r3, [pc, #188]	@ (8008238 <USBD_CDC_DeInit+0xfc>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 020f 	and.w	r2, r3, #15
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008192:	2200      	movs	r2, #0
 8008194:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008196:	4b29      	ldr	r3, [pc, #164]	@ (800823c <USBD_CDC_DeInit+0x100>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f002 faa6 	bl	800a6ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80081a2:	4b26      	ldr	r3, [pc, #152]	@ (800823c <USBD_CDC_DeInit+0x100>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 020f 	and.w	r2, r3, #15
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	3324      	adds	r3, #36	@ 0x24
 80081b8:	2200      	movs	r2, #0
 80081ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80081bc:	4b1f      	ldr	r3, [pc, #124]	@ (800823c <USBD_CDC_DeInit+0x100>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 020f 	and.w	r2, r3, #15
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	3326      	adds	r3, #38	@ 0x26
 80081d2:	2200      	movs	r2, #0
 80081d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	32b0      	adds	r2, #176	@ 0xb0
 80081e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01f      	beq.n	8008228 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	33b0      	adds	r3, #176	@ 0xb0
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	32b0      	adds	r2, #176	@ 0xb0
 8008206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820a:	4618      	mov	r0, r3
 800820c:	f002 fb7a 	bl	800a904 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	32b0      	adds	r2, #176	@ 0xb0
 800821a:	2100      	movs	r1, #0
 800821c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000093 	.word	0x20000093
 8008238:	20000094 	.word	0x20000094
 800823c:	20000095 	.word	0x20000095

08008240 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	32b0      	adds	r2, #176	@ 0xb0
 8008254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008258:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800825e:	2300      	movs	r3, #0
 8008260:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	e0bf      	b.n	80083f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008278:	2b00      	cmp	r3, #0
 800827a:	d050      	beq.n	800831e <USBD_CDC_Setup+0xde>
 800827c:	2b20      	cmp	r3, #32
 800827e:	f040 80af 	bne.w	80083e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	88db      	ldrh	r3, [r3, #6]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d03a      	beq.n	8008300 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b25b      	sxtb	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	da1b      	bge.n	80082cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	33b0      	adds	r3, #176	@ 0xb0
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80082aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	88d2      	ldrh	r2, [r2, #6]
 80082b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	88db      	ldrh	r3, [r3, #6]
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	bf28      	it	cs
 80082ba:	2307      	movcs	r3, #7
 80082bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	89fa      	ldrh	r2, [r7, #14]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 fd93 	bl	8009df0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80082ca:	e090      	b.n	80083ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	785a      	ldrb	r2, [r3, #1]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	88db      	ldrh	r3, [r3, #6]
 80082da:	2b3f      	cmp	r3, #63	@ 0x3f
 80082dc:	d803      	bhi.n	80082e6 <USBD_CDC_Setup+0xa6>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	88db      	ldrh	r3, [r3, #6]
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	e000      	b.n	80082e8 <USBD_CDC_Setup+0xa8>
 80082e6:	2240      	movs	r2, #64	@ 0x40
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80082ee:	6939      	ldr	r1, [r7, #16]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80082f6:	461a      	mov	r2, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 fda5 	bl	8009e48 <USBD_CtlPrepareRx>
      break;
 80082fe:	e076      	b.n	80083ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	33b0      	adds	r3, #176	@ 0xb0
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	7850      	ldrb	r0, [r2, #1]
 8008316:	2200      	movs	r2, #0
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	4798      	blx	r3
      break;
 800831c:	e067      	b.n	80083ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b0b      	cmp	r3, #11
 8008324:	d851      	bhi.n	80083ca <USBD_CDC_Setup+0x18a>
 8008326:	a201      	add	r2, pc, #4	@ (adr r2, 800832c <USBD_CDC_Setup+0xec>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	0800835d 	.word	0x0800835d
 8008330:	080083d9 	.word	0x080083d9
 8008334:	080083cb 	.word	0x080083cb
 8008338:	080083cb 	.word	0x080083cb
 800833c:	080083cb 	.word	0x080083cb
 8008340:	080083cb 	.word	0x080083cb
 8008344:	080083cb 	.word	0x080083cb
 8008348:	080083cb 	.word	0x080083cb
 800834c:	080083cb 	.word	0x080083cb
 8008350:	080083cb 	.word	0x080083cb
 8008354:	08008387 	.word	0x08008387
 8008358:	080083b1 	.word	0x080083b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b03      	cmp	r3, #3
 8008366:	d107      	bne.n	8008378 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008368:	f107 030a 	add.w	r3, r7, #10
 800836c:	2202      	movs	r2, #2
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 fd3d 	bl	8009df0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008376:	e032      	b.n	80083de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fcbb 	bl	8009cf6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	75fb      	strb	r3, [r7, #23]
          break;
 8008384:	e02b      	b.n	80083de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d107      	bne.n	80083a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008392:	f107 030d 	add.w	r3, r7, #13
 8008396:	2201      	movs	r2, #1
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fd28 	bl	8009df0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083a0:	e01d      	b.n	80083de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fca6 	bl	8009cf6 <USBD_CtlError>
            ret = USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	75fb      	strb	r3, [r7, #23]
          break;
 80083ae:	e016      	b.n	80083de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d00f      	beq.n	80083dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fc99 	bl	8009cf6 <USBD_CtlError>
            ret = USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083c8:	e008      	b.n	80083dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 fc92 	bl	8009cf6 <USBD_CtlError>
          ret = USBD_FAIL;
 80083d2:	2303      	movs	r3, #3
 80083d4:	75fb      	strb	r3, [r7, #23]
          break;
 80083d6:	e002      	b.n	80083de <USBD_CDC_Setup+0x19e>
          break;
 80083d8:	bf00      	nop
 80083da:	e008      	b.n	80083ee <USBD_CDC_Setup+0x1ae>
          break;
 80083dc:	bf00      	nop
      }
      break;
 80083de:	e006      	b.n	80083ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 fc87 	bl	8009cf6 <USBD_CtlError>
      ret = USBD_FAIL;
 80083e8:	2303      	movs	r3, #3
 80083ea:	75fb      	strb	r3, [r7, #23]
      break;
 80083ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800840a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32b0      	adds	r2, #176	@ 0xb0
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800841e:	2303      	movs	r3, #3
 8008420:	e065      	b.n	80084ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	32b0      	adds	r2, #176	@ 0xb0
 800842c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008430:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	440b      	add	r3, r1
 8008444:	3318      	adds	r3, #24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d02f      	beq.n	80084ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	f003 020f 	and.w	r2, r3, #15
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	3318      	adds	r3, #24
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	f003 010f 	and.w	r1, r3, #15
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	460b      	mov	r3, r1
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	440b      	add	r3, r1
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4403      	add	r3, r0
 8008474:	331c      	adds	r3, #28
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	fbb2 f1f3 	udiv	r1, r2, r3
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008482:	2b00      	cmp	r3, #0
 8008484:	d112      	bne.n	80084ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	f003 020f 	and.w	r2, r3, #15
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	440b      	add	r3, r1
 8008498:	3318      	adds	r3, #24
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800849e:	78f9      	ldrb	r1, [r7, #3]
 80084a0:	2300      	movs	r3, #0
 80084a2:	2200      	movs	r2, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f002 f9ca 	bl	800a83e <USBD_LL_Transmit>
 80084aa:	e01f      	b.n	80084ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	33b0      	adds	r3, #176	@ 0xb0
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d010      	beq.n	80084ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	33b0      	adds	r3, #176	@ 0xb0
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	32b0      	adds	r2, #176	@ 0xb0
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	32b0      	adds	r2, #176	@ 0xb0
 800851c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008524:	2303      	movs	r3, #3
 8008526:	e01a      	b.n	800855e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f002 f9c8 	bl	800a8c2 <USBD_LL_GetRxDataSize>
 8008532:	4602      	mov	r2, r0
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	33b0      	adds	r3, #176	@ 0xb0
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008558:	4611      	mov	r1, r2
 800855a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	32b0      	adds	r2, #176	@ 0xb0
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e024      	b.n	80085d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	33b0      	adds	r3, #176	@ 0xb0
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d019      	beq.n	80085d0 <USBD_CDC_EP0_RxReady+0x6a>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80085a2:	2bff      	cmp	r3, #255	@ 0xff
 80085a4:	d014      	beq.n	80085d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	33b0      	adds	r3, #176	@ 0xb0
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80085be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	22ff      	movs	r2, #255	@ 0xff
 80085cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085e4:	2182      	movs	r1, #130	@ 0x82
 80085e6:	4818      	ldr	r0, [pc, #96]	@ (8008648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085e8:	f000 fd4f 	bl	800908a <USBD_GetEpDesc>
 80085ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085ee:	2101      	movs	r1, #1
 80085f0:	4815      	ldr	r0, [pc, #84]	@ (8008648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085f2:	f000 fd4a 	bl	800908a <USBD_GetEpDesc>
 80085f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085f8:	2181      	movs	r1, #129	@ 0x81
 80085fa:	4813      	ldr	r0, [pc, #76]	@ (8008648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085fc:	f000 fd45 	bl	800908a <USBD_GetEpDesc>
 8008600:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2210      	movs	r2, #16
 800860c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2200      	movs	r2, #0
 8008618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800861c:	711a      	strb	r2, [r3, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d006      	beq.n	8008636 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008630:	711a      	strb	r2, [r3, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2243      	movs	r2, #67	@ 0x43
 800863a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800863c:	4b02      	ldr	r3, [pc, #8]	@ (8008648 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20000050 	.word	0x20000050

0800864c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008654:	2182      	movs	r1, #130	@ 0x82
 8008656:	4818      	ldr	r0, [pc, #96]	@ (80086b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008658:	f000 fd17 	bl	800908a <USBD_GetEpDesc>
 800865c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800865e:	2101      	movs	r1, #1
 8008660:	4815      	ldr	r0, [pc, #84]	@ (80086b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008662:	f000 fd12 	bl	800908a <USBD_GetEpDesc>
 8008666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008668:	2181      	movs	r1, #129	@ 0x81
 800866a:	4813      	ldr	r0, [pc, #76]	@ (80086b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800866c:	f000 fd0d 	bl	800908a <USBD_GetEpDesc>
 8008670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2210      	movs	r2, #16
 800867c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d006      	beq.n	8008692 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2200      	movs	r2, #0
 8008688:	711a      	strb	r2, [r3, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f042 0202 	orr.w	r2, r2, #2
 8008690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d006      	beq.n	80086a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	711a      	strb	r2, [r3, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f042 0202 	orr.w	r2, r2, #2
 80086a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2243      	movs	r2, #67	@ 0x43
 80086aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086ac:	4b02      	ldr	r3, [pc, #8]	@ (80086b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000050 	.word	0x20000050

080086bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086c4:	2182      	movs	r1, #130	@ 0x82
 80086c6:	4818      	ldr	r0, [pc, #96]	@ (8008728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086c8:	f000 fcdf 	bl	800908a <USBD_GetEpDesc>
 80086cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086ce:	2101      	movs	r1, #1
 80086d0:	4815      	ldr	r0, [pc, #84]	@ (8008728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086d2:	f000 fcda 	bl	800908a <USBD_GetEpDesc>
 80086d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086d8:	2181      	movs	r1, #129	@ 0x81
 80086da:	4813      	ldr	r0, [pc, #76]	@ (8008728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086dc:	f000 fcd5 	bl	800908a <USBD_GetEpDesc>
 80086e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2210      	movs	r2, #16
 80086ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d006      	beq.n	8008702 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086fc:	711a      	strb	r2, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d006      	beq.n	8008716 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008710:	711a      	strb	r2, [r3, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2243      	movs	r2, #67	@ 0x43
 800871a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800871c:	4b02      	ldr	r3, [pc, #8]	@ (8008728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000050 	.word	0x20000050

0800872c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	220a      	movs	r2, #10
 8008738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800873a:	4b03      	ldr	r3, [pc, #12]	@ (8008748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	2000000c 	.word	0x2000000c

0800874c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e009      	b.n	8008774 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	33b0      	adds	r3, #176	@ 0xb0
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	32b0      	adds	r2, #176	@ 0xb0
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e008      	b.n	80087b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	32b0      	adds	r2, #176	@ 0xb0
 80087d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e004      	b.n	80087f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	32b0      	adds	r2, #176	@ 0xb0
 8008812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008816:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008822:	2303      	movs	r3, #3
 8008824:	e025      	b.n	8008872 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800882c:	2b00      	cmp	r3, #0
 800882e:	d11f      	bne.n	8008870 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2201      	movs	r2, #1
 8008834:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008838:	4b10      	ldr	r3, [pc, #64]	@ (800887c <USBD_CDC_TransmitPacket+0x7c>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	4613      	mov	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4403      	add	r3, r0
 8008852:	3318      	adds	r3, #24
 8008854:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008856:	4b09      	ldr	r3, [pc, #36]	@ (800887c <USBD_CDC_TransmitPacket+0x7c>)
 8008858:	7819      	ldrb	r1, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 ffe9 	bl	800a83e <USBD_LL_Transmit>

    ret = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20000093 	.word	0x20000093

08008880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	32b0      	adds	r2, #176	@ 0xb0
 8008892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008896:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	32b0      	adds	r2, #176	@ 0xb0
 80088a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e018      	b.n	80088e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	7c1b      	ldrb	r3, [r3, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10a      	bne.n	80088cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088b6:	4b0c      	ldr	r3, [pc, #48]	@ (80088e8 <USBD_CDC_ReceivePacket+0x68>)
 80088b8:	7819      	ldrb	r1, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 ffdb 	bl	800a880 <USBD_LL_PrepareReceive>
 80088ca:	e008      	b.n	80088de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088cc:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <USBD_CDC_ReceivePacket+0x68>)
 80088ce:	7819      	ldrb	r1, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088d6:	2340      	movs	r3, #64	@ 0x40
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f001 ffd1 	bl	800a880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000094 	.word	0x20000094

080088ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008900:	2303      	movs	r3, #3
 8008902:	e01f      	b.n	8008944 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	79fa      	ldrb	r2, [r7, #7]
 8008936:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f001 fe4b 	bl	800a5d4 <USBD_LL_Init>
 800893e:	4603      	mov	r3, r0
 8008940:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008960:	2303      	movs	r3, #3
 8008962:	e025      	b.n	80089b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	32ae      	adds	r2, #174	@ 0xae
 8008976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00f      	beq.n	80089a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	32ae      	adds	r2, #174	@ 0xae
 800898a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008990:	f107 020e 	add.w	r2, r7, #14
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	4602      	mov	r2, r0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 fe53 	bl	800a66c <USBD_LL_Start>
 80089c6:	4603      	mov	r3, r0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	78fa      	ldrb	r2, [r7, #3]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4798      	blx	r3
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	4611      	mov	r1, r2
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a44:	2303      	movs	r3, #3
 8008a46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f001 f90c 	bl	8009c82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a78:	461a      	mov	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a86:	f003 031f 	and.w	r3, r3, #31
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d01a      	beq.n	8008ac4 <USBD_LL_SetupStage+0x72>
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d822      	bhi.n	8008ad8 <USBD_LL_SetupStage+0x86>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <USBD_LL_SetupStage+0x4a>
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d00a      	beq.n	8008ab0 <USBD_LL_SetupStage+0x5e>
 8008a9a:	e01d      	b.n	8008ad8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fb63 	bl	8009170 <USBD_StdDevReq>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
      break;
 8008aae:	e020      	b.n	8008af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fbcb 	bl	8009254 <USBD_StdItfReq>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac2:	e016      	b.n	8008af2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fc2d 	bl	800932c <USBD_StdEPReq>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad6:	e00c      	b.n	8008af2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ade:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f001 fe20 	bl	800a72c <USBD_LL_StallEP>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]
      break;
 8008af0:	bf00      	nop
  }

  return ret;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	460b      	mov	r3, r1
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b0e:	7afb      	ldrb	r3, [r7, #11]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d16e      	bne.n	8008bf2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008b1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	f040 8098 	bne.w	8008c58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d913      	bls.n	8008b5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	1ad2      	subs	r2, r2, r3
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	bf28      	it	cs
 8008b4e:	4613      	movcs	r3, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f001 f994 	bl	8009e82 <USBD_CtlContinueRx>
 8008b5a:	e07d      	b.n	8008c58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b62:	f003 031f 	and.w	r3, r3, #31
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d014      	beq.n	8008b94 <USBD_LL_DataOutStage+0x98>
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d81d      	bhi.n	8008baa <USBD_LL_DataOutStage+0xae>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <USBD_LL_DataOutStage+0x7c>
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d003      	beq.n	8008b7e <USBD_LL_DataOutStage+0x82>
 8008b76:	e018      	b.n	8008baa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b7c:	e018      	b.n	8008bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	4619      	mov	r1, r3
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fa64 	bl	8009056 <USBD_CoreFindIF>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75bb      	strb	r3, [r7, #22]
            break;
 8008b92:	e00d      	b.n	8008bb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fa66 	bl	8009070 <USBD_CoreFindEP>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ba8:	e002      	b.n	8008bb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75bb      	strb	r3, [r7, #22]
            break;
 8008bae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008bb0:	7dbb      	ldrb	r3, [r7, #22]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d119      	bne.n	8008bea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d113      	bne.n	8008bea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008bc2:	7dba      	ldrb	r2, [r7, #22]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	32ae      	adds	r2, #174	@ 0xae
 8008bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008bd2:	7dba      	ldrb	r2, [r7, #22]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bda:	7dba      	ldrb	r2, [r7, #22]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	32ae      	adds	r2, #174	@ 0xae
 8008be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f001 f95a 	bl	8009ea4 <USBD_CtlSendStatus>
 8008bf0:	e032      	b.n	8008c58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008bf2:	7afb      	ldrb	r3, [r7, #11]
 8008bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fa37 	bl	8009070 <USBD_CoreFindEP>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c06:	7dbb      	ldrb	r3, [r7, #22]
 8008c08:	2bff      	cmp	r3, #255	@ 0xff
 8008c0a:	d025      	beq.n	8008c58 <USBD_LL_DataOutStage+0x15c>
 8008c0c:	7dbb      	ldrb	r3, [r7, #22]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d122      	bne.n	8008c58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d117      	bne.n	8008c4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c1e:	7dba      	ldrb	r2, [r7, #22]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	32ae      	adds	r2, #174	@ 0xae
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00f      	beq.n	8008c4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c2e:	7dba      	ldrb	r2, [r7, #22]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c36:	7dba      	ldrb	r2, [r7, #22]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	32ae      	adds	r2, #174	@ 0xae
 8008c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	7afa      	ldrb	r2, [r7, #11]
 8008c44:	4611      	mov	r1, r2
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	4798      	blx	r3
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	e000      	b.n	8008c5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d16f      	bne.n	8008d56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3314      	adds	r3, #20
 8008c7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d15a      	bne.n	8008d3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	689a      	ldr	r2, [r3, #8]
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d914      	bls.n	8008cbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	1ad2      	subs	r2, r2, r3
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f001 f8bc 	bl	8009e26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f001 fde3 	bl	800a880 <USBD_LL_PrepareReceive>
 8008cba:	e03f      	b.n	8008d3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d11c      	bne.n	8008d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d316      	bcc.n	8008d02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d20f      	bcs.n	8008d02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f001 f89d 	bl	8009e26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f001 fdc0 	bl	800a880 <USBD_LL_PrepareReceive>
 8008d00:	e01c      	b.n	8008d3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d10f      	bne.n	8008d2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d009      	beq.n	8008d2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d2e:	2180      	movs	r1, #128	@ 0x80
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f001 fcfb 	bl	800a72c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f001 f8c7 	bl	8009eca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d03a      	beq.n	8008dbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fe42 	bl	80089d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008d54:	e032      	b.n	8008dbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d56:	7afb      	ldrb	r3, [r7, #11]
 8008d58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 f985 	bl	8009070 <USBD_CoreFindEP>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	2bff      	cmp	r3, #255	@ 0xff
 8008d6e:	d025      	beq.n	8008dbc <USBD_LL_DataInStage+0x15a>
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d122      	bne.n	8008dbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d11c      	bne.n	8008dbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d82:	7dfa      	ldrb	r2, [r7, #23]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	32ae      	adds	r2, #174	@ 0xae
 8008d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d014      	beq.n	8008dbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d92:	7dfa      	ldrb	r2, [r7, #23]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d9a:	7dfa      	ldrb	r2, [r7, #23]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	32ae      	adds	r2, #174	@ 0xae
 8008da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	7afa      	ldrb	r2, [r7, #11]
 8008da8:	4611      	mov	r1, r2
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	4798      	blx	r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008db2:	7dbb      	ldrb	r3, [r7, #22]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008db8:	7dbb      	ldrb	r3, [r7, #22]
 8008dba:	e000      	b.n	8008dbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d014      	beq.n	8008e2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00e      	beq.n	8008e2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6852      	ldr	r2, [r2, #4]
 8008e1a:	b2d2      	uxtb	r2, r2
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	4798      	blx	r3
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e2c:	2340      	movs	r3, #64	@ 0x40
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fc35 	bl	800a6a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2240      	movs	r2, #64	@ 0x40
 8008e44:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e48:	2340      	movs	r3, #64	@ 0x40
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2180      	movs	r1, #128	@ 0x80
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 fc27 	bl	800a6a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2240      	movs	r2, #64	@ 0x40
 8008e5e:	621a      	str	r2, [r3, #32]

  return ret;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d006      	beq.n	8008eac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2204      	movs	r2, #4
 8008eb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d106      	bne.n	8008ee4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d110      	bne.n	8008f28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00b      	beq.n	8008f28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	32ae      	adds	r2, #174	@ 0xae
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e01c      	b.n	8008f8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d115      	bne.n	8008f8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	32ae      	adds	r2, #174	@ 0xae
 8008f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	32ae      	adds	r2, #174	@ 0xae
 8008f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	78fa      	ldrb	r2, [r7, #3]
 8008f86:	4611      	mov	r1, r2
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32ae      	adds	r2, #174	@ 0xae
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e01c      	b.n	8008ff2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d115      	bne.n	8008ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	32ae      	adds	r2, #174	@ 0xae
 8008fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	32ae      	adds	r2, #174	@ 0xae
 8008fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	4611      	mov	r1, r2
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00e      	beq.n	800904c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6852      	ldr	r2, [r2, #4]
 800903a:	b2d2      	uxtb	r2, r2
 800903c:	4611      	mov	r1, r2
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	4798      	blx	r3
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009048:	2303      	movs	r3, #3
 800904a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	460b      	mov	r3, r1
 8009060:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009062:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800907c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b086      	sub	sp, #24
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	885b      	ldrh	r3, [r3, #2]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d91f      	bls.n	80090f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80090b6:	e013      	b.n	80090e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80090b8:	f107 030a 	add.w	r3, r7, #10
 80090bc:	4619      	mov	r1, r3
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f000 f81b 	bl	80090fa <USBD_GetNextDesc>
 80090c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b05      	cmp	r3, #5
 80090cc:	d108      	bne.n	80090e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	789b      	ldrb	r3, [r3, #2]
 80090d6:	78fa      	ldrb	r2, [r7, #3]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d008      	beq.n	80090ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	885b      	ldrh	r3, [r3, #2]
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	897b      	ldrh	r3, [r7, #10]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d8e5      	bhi.n	80090b8 <USBD_GetEpDesc+0x2e>
 80090ec:	e000      	b.n	80090f0 <USBD_GetEpDesc+0x66>
          break;
 80090ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090f0:	693b      	ldr	r3, [r7, #16]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	4413      	add	r3, r2
 8009112:	b29a      	uxth	r2, r3
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4413      	add	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009124:	68fb      	ldr	r3, [r7, #12]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009132:	b480      	push	{r7}
 8009134:	b087      	sub	sp, #28
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	3301      	adds	r3, #1
 8009148:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009150:	8a3b      	ldrh	r3, [r7, #16]
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	b21a      	sxth	r2, r3
 8009156:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800915a:	4313      	orrs	r3, r2
 800915c:	b21b      	sxth	r3, r3
 800915e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009160:	89fb      	ldrh	r3, [r7, #14]
}
 8009162:	4618      	mov	r0, r3
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
	...

08009170 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009186:	2b40      	cmp	r3, #64	@ 0x40
 8009188:	d005      	beq.n	8009196 <USBD_StdDevReq+0x26>
 800918a:	2b40      	cmp	r3, #64	@ 0x40
 800918c:	d857      	bhi.n	800923e <USBD_StdDevReq+0xce>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00f      	beq.n	80091b2 <USBD_StdDevReq+0x42>
 8009192:	2b20      	cmp	r3, #32
 8009194:	d153      	bne.n	800923e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	32ae      	adds	r2, #174	@ 0xae
 80091a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	4798      	blx	r3
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
      break;
 80091b0:	e04a      	b.n	8009248 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	2b09      	cmp	r3, #9
 80091b8:	d83b      	bhi.n	8009232 <USBD_StdDevReq+0xc2>
 80091ba:	a201      	add	r2, pc, #4	@ (adr r2, 80091c0 <USBD_StdDevReq+0x50>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	08009215 	.word	0x08009215
 80091c4:	08009229 	.word	0x08009229
 80091c8:	08009233 	.word	0x08009233
 80091cc:	0800921f 	.word	0x0800921f
 80091d0:	08009233 	.word	0x08009233
 80091d4:	080091f3 	.word	0x080091f3
 80091d8:	080091e9 	.word	0x080091e9
 80091dc:	08009233 	.word	0x08009233
 80091e0:	0800920b 	.word	0x0800920b
 80091e4:	080091fd 	.word	0x080091fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa3c 	bl	8009668 <USBD_GetDescriptor>
          break;
 80091f0:	e024      	b.n	800923c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fba1 	bl	800993c <USBD_SetAddress>
          break;
 80091fa:	e01f      	b.n	800923c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fbe0 	bl	80099c4 <USBD_SetConfig>
 8009204:	4603      	mov	r3, r0
 8009206:	73fb      	strb	r3, [r7, #15]
          break;
 8009208:	e018      	b.n	800923c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fc83 	bl	8009b18 <USBD_GetConfig>
          break;
 8009212:	e013      	b.n	800923c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fcb4 	bl	8009b84 <USBD_GetStatus>
          break;
 800921c:	e00e      	b.n	800923c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fce3 	bl	8009bec <USBD_SetFeature>
          break;
 8009226:	e009      	b.n	800923c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fd07 	bl	8009c3e <USBD_ClrFeature>
          break;
 8009230:	e004      	b.n	800923c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fd5e 	bl	8009cf6 <USBD_CtlError>
          break;
 800923a:	bf00      	nop
      }
      break;
 800923c:	e004      	b.n	8009248 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fd58 	bl	8009cf6 <USBD_CtlError>
      break;
 8009246:	bf00      	nop
  }

  return ret;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop

08009254 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800926a:	2b40      	cmp	r3, #64	@ 0x40
 800926c:	d005      	beq.n	800927a <USBD_StdItfReq+0x26>
 800926e:	2b40      	cmp	r3, #64	@ 0x40
 8009270:	d852      	bhi.n	8009318 <USBD_StdItfReq+0xc4>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <USBD_StdItfReq+0x26>
 8009276:	2b20      	cmp	r3, #32
 8009278:	d14e      	bne.n	8009318 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009280:	b2db      	uxtb	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	2b02      	cmp	r3, #2
 8009286:	d840      	bhi.n	800930a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	889b      	ldrh	r3, [r3, #4]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b01      	cmp	r3, #1
 8009290:	d836      	bhi.n	8009300 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	889b      	ldrh	r3, [r3, #4]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff fedb 	bl	8009056 <USBD_CoreFindIF>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	2bff      	cmp	r3, #255	@ 0xff
 80092a8:	d01d      	beq.n	80092e6 <USBD_StdItfReq+0x92>
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d11a      	bne.n	80092e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80092b0:	7bba      	ldrb	r2, [r7, #14]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	32ae      	adds	r2, #174	@ 0xae
 80092b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00f      	beq.n	80092e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80092c0:	7bba      	ldrb	r2, [r7, #14]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092c8:	7bba      	ldrb	r2, [r7, #14]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	32ae      	adds	r2, #174	@ 0xae
 80092ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	4798      	blx	r3
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092de:	e004      	b.n	80092ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092e4:	e001      	b.n	80092ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092e6:	2303      	movs	r3, #3
 80092e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	88db      	ldrh	r3, [r3, #6]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d110      	bne.n	8009314 <USBD_StdItfReq+0xc0>
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10d      	bne.n	8009314 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fdd3 	bl	8009ea4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092fe:	e009      	b.n	8009314 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fcf7 	bl	8009cf6 <USBD_CtlError>
          break;
 8009308:	e004      	b.n	8009314 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fcf2 	bl	8009cf6 <USBD_CtlError>
          break;
 8009312:	e000      	b.n	8009316 <USBD_StdItfReq+0xc2>
          break;
 8009314:	bf00      	nop
      }
      break;
 8009316:	e004      	b.n	8009322 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fceb 	bl	8009cf6 <USBD_CtlError>
      break;
 8009320:	bf00      	nop
  }

  return ret;
 8009322:	7bfb      	ldrb	r3, [r7, #15]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	889b      	ldrh	r3, [r3, #4]
 800933e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009348:	2b40      	cmp	r3, #64	@ 0x40
 800934a:	d007      	beq.n	800935c <USBD_StdEPReq+0x30>
 800934c:	2b40      	cmp	r3, #64	@ 0x40
 800934e:	f200 817f 	bhi.w	8009650 <USBD_StdEPReq+0x324>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d02a      	beq.n	80093ac <USBD_StdEPReq+0x80>
 8009356:	2b20      	cmp	r3, #32
 8009358:	f040 817a 	bne.w	8009650 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff fe85 	bl	8009070 <USBD_CoreFindEP>
 8009366:	4603      	mov	r3, r0
 8009368:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800936a:	7b7b      	ldrb	r3, [r7, #13]
 800936c:	2bff      	cmp	r3, #255	@ 0xff
 800936e:	f000 8174 	beq.w	800965a <USBD_StdEPReq+0x32e>
 8009372:	7b7b      	ldrb	r3, [r7, #13]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f040 8170 	bne.w	800965a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800937a:	7b7a      	ldrb	r2, [r7, #13]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009382:	7b7a      	ldrb	r2, [r7, #13]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	32ae      	adds	r2, #174	@ 0xae
 8009388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 8163 	beq.w	800965a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009394:	7b7a      	ldrb	r2, [r7, #13]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	32ae      	adds	r2, #174	@ 0xae
 800939a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	4798      	blx	r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093aa:	e156      	b.n	800965a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d008      	beq.n	80093c6 <USBD_StdEPReq+0x9a>
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	f300 8145 	bgt.w	8009644 <USBD_StdEPReq+0x318>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 809b 	beq.w	80094f6 <USBD_StdEPReq+0x1ca>
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d03c      	beq.n	800943e <USBD_StdEPReq+0x112>
 80093c4:	e13e      	b.n	8009644 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d002      	beq.n	80093d8 <USBD_StdEPReq+0xac>
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d016      	beq.n	8009404 <USBD_StdEPReq+0xd8>
 80093d6:	e02c      	b.n	8009432 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00d      	beq.n	80093fa <USBD_StdEPReq+0xce>
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b80      	cmp	r3, #128	@ 0x80
 80093e2:	d00a      	beq.n	80093fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f99f 	bl	800a72c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ee:	2180      	movs	r1, #128	@ 0x80
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 f99b 	bl	800a72c <USBD_LL_StallEP>
 80093f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093f8:	e020      	b.n	800943c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fc7a 	bl	8009cf6 <USBD_CtlError>
              break;
 8009402:	e01b      	b.n	800943c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	885b      	ldrh	r3, [r3, #2]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10e      	bne.n	800942a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00b      	beq.n	800942a <USBD_StdEPReq+0xfe>
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b80      	cmp	r3, #128	@ 0x80
 8009416:	d008      	beq.n	800942a <USBD_StdEPReq+0xfe>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	88db      	ldrh	r3, [r3, #6]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d104      	bne.n	800942a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 f981 	bl	800a72c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fd3a 	bl	8009ea4 <USBD_CtlSendStatus>

              break;
 8009430:	e004      	b.n	800943c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fc5e 	bl	8009cf6 <USBD_CtlError>
              break;
 800943a:	bf00      	nop
          }
          break;
 800943c:	e107      	b.n	800964e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b02      	cmp	r3, #2
 8009448:	d002      	beq.n	8009450 <USBD_StdEPReq+0x124>
 800944a:	2b03      	cmp	r3, #3
 800944c:	d016      	beq.n	800947c <USBD_StdEPReq+0x150>
 800944e:	e04b      	b.n	80094e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00d      	beq.n	8009472 <USBD_StdEPReq+0x146>
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	2b80      	cmp	r3, #128	@ 0x80
 800945a:	d00a      	beq.n	8009472 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 f963 	bl	800a72c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009466:	2180      	movs	r1, #128	@ 0x80
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 f95f 	bl	800a72c <USBD_LL_StallEP>
 800946e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009470:	e040      	b.n	80094f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fc3e 	bl	8009cf6 <USBD_CtlError>
              break;
 800947a:	e03b      	b.n	80094f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	885b      	ldrh	r3, [r3, #2]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d136      	bne.n	80094f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800948a:	2b00      	cmp	r3, #0
 800948c:	d004      	beq.n	8009498 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 f969 	bl	800a76a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fd03 	bl	8009ea4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff fde4 	bl	8009070 <USBD_CoreFindEP>
 80094a8:	4603      	mov	r3, r0
 80094aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094ac:	7b7b      	ldrb	r3, [r7, #13]
 80094ae:	2bff      	cmp	r3, #255	@ 0xff
 80094b0:	d01f      	beq.n	80094f2 <USBD_StdEPReq+0x1c6>
 80094b2:	7b7b      	ldrb	r3, [r7, #13]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d11c      	bne.n	80094f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80094b8:	7b7a      	ldrb	r2, [r7, #13]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80094c0:	7b7a      	ldrb	r2, [r7, #13]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	32ae      	adds	r2, #174	@ 0xae
 80094c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d010      	beq.n	80094f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094d0:	7b7a      	ldrb	r2, [r7, #13]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	32ae      	adds	r2, #174	@ 0xae
 80094d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	4798      	blx	r3
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094e6:	e004      	b.n	80094f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fc03 	bl	8009cf6 <USBD_CtlError>
              break;
 80094f0:	e000      	b.n	80094f4 <USBD_StdEPReq+0x1c8>
              break;
 80094f2:	bf00      	nop
          }
          break;
 80094f4:	e0ab      	b.n	800964e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d002      	beq.n	8009508 <USBD_StdEPReq+0x1dc>
 8009502:	2b03      	cmp	r3, #3
 8009504:	d032      	beq.n	800956c <USBD_StdEPReq+0x240>
 8009506:	e097      	b.n	8009638 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <USBD_StdEPReq+0x1f2>
 800950e:	7bbb      	ldrb	r3, [r7, #14]
 8009510:	2b80      	cmp	r3, #128	@ 0x80
 8009512:	d004      	beq.n	800951e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fbed 	bl	8009cf6 <USBD_CtlError>
                break;
 800951c:	e091      	b.n	8009642 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800951e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009522:	2b00      	cmp	r3, #0
 8009524:	da0b      	bge.n	800953e <USBD_StdEPReq+0x212>
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	3310      	adds	r3, #16
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	4413      	add	r3, r2
 800953a:	3304      	adds	r3, #4
 800953c:	e00b      	b.n	8009556 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	4413      	add	r3, r2
 8009554:	3304      	adds	r3, #4
 8009556:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2202      	movs	r2, #2
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fc43 	bl	8009df0 <USBD_CtlSendData>
              break;
 800956a:	e06a      	b.n	8009642 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800956c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	da11      	bge.n	8009598 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	f003 020f 	and.w	r2, r3, #15
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	3324      	adds	r3, #36	@ 0x24
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d117      	bne.n	80095be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fbb0 	bl	8009cf6 <USBD_CtlError>
                  break;
 8009596:	e054      	b.n	8009642 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	f003 020f 	and.w	r2, r3, #15
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	4613      	mov	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	440b      	add	r3, r1
 80095aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d104      	bne.n	80095be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fb9d 	bl	8009cf6 <USBD_CtlError>
                  break;
 80095bc:	e041      	b.n	8009642 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da0b      	bge.n	80095de <USBD_StdEPReq+0x2b2>
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095cc:	4613      	mov	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	3310      	adds	r3, #16
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	4413      	add	r3, r2
 80095da:	3304      	adds	r3, #4
 80095dc:	e00b      	b.n	80095f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	4413      	add	r3, r2
 80095f4:	3304      	adds	r3, #4
 80095f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <USBD_StdEPReq+0x2d8>
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b80      	cmp	r3, #128	@ 0x80
 8009602:	d103      	bne.n	800960c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	e00e      	b.n	800962a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800960c:	7bbb      	ldrb	r3, [r7, #14]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f8c9 	bl	800a7a8 <USBD_LL_IsStallEP>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2201      	movs	r2, #1
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	e002      	b.n	800962a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2202      	movs	r2, #2
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fbdd 	bl	8009df0 <USBD_CtlSendData>
              break;
 8009636:	e004      	b.n	8009642 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fb5b 	bl	8009cf6 <USBD_CtlError>
              break;
 8009640:	bf00      	nop
          }
          break;
 8009642:	e004      	b.n	800964e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fb55 	bl	8009cf6 <USBD_CtlError>
          break;
 800964c:	bf00      	nop
      }
      break;
 800964e:	e005      	b.n	800965c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fb4f 	bl	8009cf6 <USBD_CtlError>
      break;
 8009658:	e000      	b.n	800965c <USBD_StdEPReq+0x330>
      break;
 800965a:	bf00      	nop
  }

  return ret;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009672:	2300      	movs	r3, #0
 8009674:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	885b      	ldrh	r3, [r3, #2]
 8009682:	0a1b      	lsrs	r3, r3, #8
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	2b06      	cmp	r3, #6
 800968a:	f200 8128 	bhi.w	80098de <USBD_GetDescriptor+0x276>
 800968e:	a201      	add	r2, pc, #4	@ (adr r2, 8009694 <USBD_GetDescriptor+0x2c>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096b1 	.word	0x080096b1
 8009698:	080096c9 	.word	0x080096c9
 800969c:	08009709 	.word	0x08009709
 80096a0:	080098df 	.word	0x080098df
 80096a4:	080098df 	.word	0x080098df
 80096a8:	0800987f 	.word	0x0800987f
 80096ac:	080098ab 	.word	0x080098ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
      break;
 80096c6:	e112      	b.n	80098ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	7c1b      	ldrb	r3, [r3, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10d      	bne.n	80096ec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d8:	f107 0208 	add.w	r2, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	2202      	movs	r2, #2
 80096e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096ea:	e100      	b.n	80098ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f4:	f107 0208 	add.w	r2, r7, #8
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
 80096fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3301      	adds	r3, #1
 8009702:	2202      	movs	r2, #2
 8009704:	701a      	strb	r2, [r3, #0]
      break;
 8009706:	e0f2      	b.n	80098ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	885b      	ldrh	r3, [r3, #2]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b05      	cmp	r3, #5
 8009710:	f200 80ac 	bhi.w	800986c <USBD_GetDescriptor+0x204>
 8009714:	a201      	add	r2, pc, #4	@ (adr r2, 800971c <USBD_GetDescriptor+0xb4>)
 8009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971a:	bf00      	nop
 800971c:	08009735 	.word	0x08009735
 8009720:	08009769 	.word	0x08009769
 8009724:	0800979d 	.word	0x0800979d
 8009728:	080097d1 	.word	0x080097d1
 800972c:	08009805 	.word	0x08009805
 8009730:	08009839 	.word	0x08009839
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00b      	beq.n	8009758 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	7c12      	ldrb	r2, [r2, #16]
 800974c:	f107 0108 	add.w	r1, r7, #8
 8009750:	4610      	mov	r0, r2
 8009752:	4798      	blx	r3
 8009754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009756:	e091      	b.n	800987c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 facb 	bl	8009cf6 <USBD_CtlError>
            err++;
 8009760:	7afb      	ldrb	r3, [r7, #11]
 8009762:	3301      	adds	r3, #1
 8009764:	72fb      	strb	r3, [r7, #11]
          break;
 8009766:	e089      	b.n	800987c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	7c12      	ldrb	r2, [r2, #16]
 8009780:	f107 0108 	add.w	r1, r7, #8
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
 8009788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800978a:	e077      	b.n	800987c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fab1 	bl	8009cf6 <USBD_CtlError>
            err++;
 8009794:	7afb      	ldrb	r3, [r7, #11]
 8009796:	3301      	adds	r3, #1
 8009798:	72fb      	strb	r3, [r7, #11]
          break;
 800979a:	e06f      	b.n	800987c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	7c12      	ldrb	r2, [r2, #16]
 80097b4:	f107 0108 	add.w	r1, r7, #8
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
 80097bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097be:	e05d      	b.n	800987c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa97 	bl	8009cf6 <USBD_CtlError>
            err++;
 80097c8:	7afb      	ldrb	r3, [r7, #11]
 80097ca:	3301      	adds	r3, #1
 80097cc:	72fb      	strb	r3, [r7, #11]
          break;
 80097ce:	e055      	b.n	800987c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	7c12      	ldrb	r2, [r2, #16]
 80097e8:	f107 0108 	add.w	r1, r7, #8
 80097ec:	4610      	mov	r0, r2
 80097ee:	4798      	blx	r3
 80097f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097f2:	e043      	b.n	800987c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fa7d 	bl	8009cf6 <USBD_CtlError>
            err++;
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	3301      	adds	r3, #1
 8009800:	72fb      	strb	r3, [r7, #11]
          break;
 8009802:	e03b      	b.n	800987c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7c12      	ldrb	r2, [r2, #16]
 800981c:	f107 0108 	add.w	r1, r7, #8
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3
 8009824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009826:	e029      	b.n	800987c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa63 	bl	8009cf6 <USBD_CtlError>
            err++;
 8009830:	7afb      	ldrb	r3, [r7, #11]
 8009832:	3301      	adds	r3, #1
 8009834:	72fb      	strb	r3, [r7, #11]
          break;
 8009836:	e021      	b.n	800987c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	7c12      	ldrb	r2, [r2, #16]
 8009850:	f107 0108 	add.w	r1, r7, #8
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
 8009858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800985a:	e00f      	b.n	800987c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa49 	bl	8009cf6 <USBD_CtlError>
            err++;
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	3301      	adds	r3, #1
 8009868:	72fb      	strb	r3, [r7, #11]
          break;
 800986a:	e007      	b.n	800987c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa41 	bl	8009cf6 <USBD_CtlError>
          err++;
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	3301      	adds	r3, #1
 8009878:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800987a:	bf00      	nop
      }
      break;
 800987c:	e037      	b.n	80098ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7c1b      	ldrb	r3, [r3, #16]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d109      	bne.n	800989a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800988c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800988e:	f107 0208 	add.w	r2, r7, #8
 8009892:	4610      	mov	r0, r2
 8009894:	4798      	blx	r3
 8009896:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009898:	e029      	b.n	80098ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fa2a 	bl	8009cf6 <USBD_CtlError>
        err++;
 80098a2:	7afb      	ldrb	r3, [r7, #11]
 80098a4:	3301      	adds	r3, #1
 80098a6:	72fb      	strb	r3, [r7, #11]
      break;
 80098a8:	e021      	b.n	80098ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	7c1b      	ldrb	r3, [r3, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10d      	bne.n	80098ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ba:	f107 0208 	add.w	r2, r7, #8
 80098be:	4610      	mov	r0, r2
 80098c0:	4798      	blx	r3
 80098c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3301      	adds	r3, #1
 80098c8:	2207      	movs	r2, #7
 80098ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098cc:	e00f      	b.n	80098ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fa10 	bl	8009cf6 <USBD_CtlError>
        err++;
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	3301      	adds	r3, #1
 80098da:	72fb      	strb	r3, [r7, #11]
      break;
 80098dc:	e007      	b.n	80098ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098de:	6839      	ldr	r1, [r7, #0]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fa08 	bl	8009cf6 <USBD_CtlError>
      err++;
 80098e6:	7afb      	ldrb	r3, [r7, #11]
 80098e8:	3301      	adds	r3, #1
 80098ea:	72fb      	strb	r3, [r7, #11]
      break;
 80098ec:	bf00      	nop
  }

  if (err != 0U)
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d11e      	bne.n	8009932 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	88db      	ldrh	r3, [r3, #6]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d016      	beq.n	800992a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098fc:	893b      	ldrh	r3, [r7, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00e      	beq.n	8009920 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	88da      	ldrh	r2, [r3, #6]
 8009906:	893b      	ldrh	r3, [r7, #8]
 8009908:	4293      	cmp	r3, r2
 800990a:	bf28      	it	cs
 800990c:	4613      	movcs	r3, r2
 800990e:	b29b      	uxth	r3, r3
 8009910:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009912:	893b      	ldrh	r3, [r7, #8]
 8009914:	461a      	mov	r2, r3
 8009916:	68f9      	ldr	r1, [r7, #12]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fa69 	bl	8009df0 <USBD_CtlSendData>
 800991e:	e009      	b.n	8009934 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f9e7 	bl	8009cf6 <USBD_CtlError>
 8009928:	e004      	b.n	8009934 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 faba 	bl	8009ea4 <USBD_CtlSendStatus>
 8009930:	e000      	b.n	8009934 <USBD_GetDescriptor+0x2cc>
    return;
 8009932:	bf00      	nop
  }
}
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop

0800993c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	889b      	ldrh	r3, [r3, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d131      	bne.n	80099b2 <USBD_SetAddress+0x76>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	88db      	ldrh	r3, [r3, #6]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d12d      	bne.n	80099b2 <USBD_SetAddress+0x76>
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	885b      	ldrh	r3, [r3, #2]
 800995a:	2b7f      	cmp	r3, #127	@ 0x7f
 800995c:	d829      	bhi.n	80099b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	885b      	ldrh	r3, [r3, #2]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009968:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b03      	cmp	r3, #3
 8009974:	d104      	bne.n	8009980 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f9bc 	bl	8009cf6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997e:	e01d      	b.n	80099bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	7bfa      	ldrb	r2, [r7, #15]
 8009984:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 ff37 	bl	800a800 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa86 	bl	8009ea4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d004      	beq.n	80099a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a6:	e009      	b.n	80099bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b0:	e004      	b.n	80099bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f99e 	bl	8009cf6 <USBD_CtlError>
  }
}
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	4b4e      	ldr	r3, [pc, #312]	@ (8009b14 <USBD_SetConfig+0x150>)
 80099da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099dc:	4b4d      	ldr	r3, [pc, #308]	@ (8009b14 <USBD_SetConfig+0x150>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d905      	bls.n	80099f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f985 	bl	8009cf6 <USBD_CtlError>
    return USBD_FAIL;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e08c      	b.n	8009b0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d002      	beq.n	8009a02 <USBD_SetConfig+0x3e>
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d029      	beq.n	8009a54 <USBD_SetConfig+0x90>
 8009a00:	e075      	b.n	8009aee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a02:	4b44      	ldr	r3, [pc, #272]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d020      	beq.n	8009a4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a0a:	4b42      	ldr	r3, [pc, #264]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a14:	4b3f      	ldr	r3, [pc, #252]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7fe ffe3 	bl	80089e6 <USBD_SetClassConfig>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d008      	beq.n	8009a3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f962 	bl	8009cf6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2202      	movs	r2, #2
 8009a36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a3a:	e065      	b.n	8009b08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa31 	bl	8009ea4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2203      	movs	r2, #3
 8009a46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a4a:	e05d      	b.n	8009b08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fa29 	bl	8009ea4 <USBD_CtlSendStatus>
      break;
 8009a52:	e059      	b.n	8009b08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a54:	4b2f      	ldr	r3, [pc, #188]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d112      	bne.n	8009a82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a64:	4b2b      	ldr	r3, [pc, #172]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a6e:	4b29      	ldr	r3, [pc, #164]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fe ffd2 	bl	8008a1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fa12 	bl	8009ea4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a80:	e042      	b.n	8009b08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a82:	4b24      	ldr	r3, [pc, #144]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d02a      	beq.n	8009ae6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7fe ffc0 	bl	8008a1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fe ff99 	bl	80089e6 <USBD_SetClassConfig>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00f      	beq.n	8009ade <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f918 	bl	8009cf6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7fe ffa5 	bl	8008a1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009adc:	e014      	b.n	8009b08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f9e0 	bl	8009ea4 <USBD_CtlSendStatus>
      break;
 8009ae4:	e010      	b.n	8009b08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9dc 	bl	8009ea4 <USBD_CtlSendStatus>
      break;
 8009aec:	e00c      	b.n	8009b08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f900 	bl	8009cf6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009af6:	4b07      	ldr	r3, [pc, #28]	@ (8009b14 <USBD_SetConfig+0x150>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7fe ff8e 	bl	8008a1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b02:	2303      	movs	r3, #3
 8009b04:	73fb      	strb	r3, [r7, #15]
      break;
 8009b06:	bf00      	nop
  }

  return ret;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20006b00 	.word	0x20006b00

08009b18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	88db      	ldrh	r3, [r3, #6]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d004      	beq.n	8009b34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8e2 	bl	8009cf6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b32:	e023      	b.n	8009b7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	dc02      	bgt.n	8009b46 <USBD_GetConfig+0x2e>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc03      	bgt.n	8009b4c <USBD_GetConfig+0x34>
 8009b44:	e015      	b.n	8009b72 <USBD_GetConfig+0x5a>
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d00b      	beq.n	8009b62 <USBD_GetConfig+0x4a>
 8009b4a:	e012      	b.n	8009b72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3308      	adds	r3, #8
 8009b56:	2201      	movs	r2, #1
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f948 	bl	8009df0 <USBD_CtlSendData>
        break;
 8009b60:	e00c      	b.n	8009b7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	3304      	adds	r3, #4
 8009b66:	2201      	movs	r2, #1
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f940 	bl	8009df0 <USBD_CtlSendData>
        break;
 8009b70:	e004      	b.n	8009b7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f8be 	bl	8009cf6 <USBD_CtlError>
        break;
 8009b7a:	bf00      	nop
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d81e      	bhi.n	8009bda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	88db      	ldrh	r3, [r3, #6]
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d004      	beq.n	8009bae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f8a5 	bl	8009cf6 <USBD_CtlError>
        break;
 8009bac:	e01a      	b.n	8009be4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d005      	beq.n	8009bca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f043 0202 	orr.w	r2, r3, #2
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	330c      	adds	r3, #12
 8009bce:	2202      	movs	r2, #2
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f90c 	bl	8009df0 <USBD_CtlSendData>
      break;
 8009bd8:	e004      	b.n	8009be4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f88a 	bl	8009cf6 <USBD_CtlError>
      break;
 8009be2:	bf00      	nop
  }
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	885b      	ldrh	r3, [r3, #2]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d107      	bne.n	8009c0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f94c 	bl	8009ea4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c0c:	e013      	b.n	8009c36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	885b      	ldrh	r3, [r3, #2]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d10b      	bne.n	8009c2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	889b      	ldrh	r3, [r3, #4]
 8009c1a:	0a1b      	lsrs	r3, r3, #8
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f93c 	bl	8009ea4 <USBD_CtlSendStatus>
}
 8009c2c:	e003      	b.n	8009c36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f860 	bl	8009cf6 <USBD_CtlError>
}
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	3b01      	subs	r3, #1
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d80b      	bhi.n	8009c6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	885b      	ldrh	r3, [r3, #2]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d10c      	bne.n	8009c78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f91c 	bl	8009ea4 <USBD_CtlSendStatus>
      }
      break;
 8009c6c:	e004      	b.n	8009c78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f840 	bl	8009cf6 <USBD_CtlError>
      break;
 8009c76:	e000      	b.n	8009c7a <USBD_ClrFeature+0x3c>
      break;
 8009c78:	bf00      	nop
  }
}
 8009c7a:	bf00      	nop
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	781a      	ldrb	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff fa40 	bl	8009132 <SWAPBYTE>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff fa33 	bl	8009132 <SWAPBYTE>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	461a      	mov	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7ff fa26 	bl	8009132 <SWAPBYTE>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	461a      	mov	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	80da      	strh	r2, [r3, #6]
}
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b082      	sub	sp, #8
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d00:	2180      	movs	r1, #128	@ 0x80
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fd12 	bl	800a72c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d08:	2100      	movs	r1, #0
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fd0e 	bl	800a72c <USBD_LL_StallEP>
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d042      	beq.n	8009db4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009d32:	6938      	ldr	r0, [r7, #16]
 8009d34:	f000 f842 	bl	8009dbc <USBD_GetLen>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d42:	d808      	bhi.n	8009d56 <USBD_GetString+0x3e>
 8009d44:	6938      	ldr	r0, [r7, #16]
 8009d46:	f000 f839 	bl	8009dbc <USBD_GetLen>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	e001      	b.n	8009d5a <USBD_GetString+0x42>
 8009d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	4413      	add	r3, r2
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	7812      	ldrb	r2, [r2, #0]
 8009d68:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	4413      	add	r3, r2
 8009d76:	2203      	movs	r2, #3
 8009d78:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d80:	e013      	b.n	8009daa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	4413      	add	r3, r2
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	7812      	ldrb	r2, [r2, #0]
 8009d8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	3301      	adds	r3, #1
 8009d92:	613b      	str	r3, [r7, #16]
    idx++;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	3301      	adds	r3, #1
 8009d98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	4413      	add	r3, r2
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
    idx++;
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	3301      	adds	r3, #1
 8009da8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e7      	bne.n	8009d82 <USBD_GetString+0x6a>
 8009db2:	e000      	b.n	8009db6 <USBD_GetString+0x9e>
    return;
 8009db4:	bf00      	nop
  }
}
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009dcc:	e005      	b.n	8009dda <USBD_GetLen+0x1e>
  {
    len++;
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1f5      	bne.n	8009dce <USBD_GetLen+0x12>
  }

  return len;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	2100      	movs	r1, #0
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 fd11 	bl	800a83e <USBD_LL_Transmit>

  return USBD_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	2100      	movs	r1, #0
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 fd00 	bl	800a83e <USBD_LL_Transmit>

  return USBD_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2203      	movs	r2, #3
 8009e58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	2100      	movs	r1, #0
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f000 fd04 	bl	800a880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	2100      	movs	r1, #0
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f000 fcf3 	bl	800a880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2204      	movs	r2, #4
 8009eb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	2100      	movs	r1, #0
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fcbf 	bl	800a83e <USBD_LL_Transmit>

  return USBD_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2205      	movs	r2, #5
 8009ed6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009eda:	2300      	movs	r3, #0
 8009edc:	2200      	movs	r2, #0
 8009ede:	2100      	movs	r1, #0
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fccd 	bl	800a880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4912      	ldr	r1, [pc, #72]	@ (8009f40 <MX_USB_DEVICE_Init+0x50>)
 8009ef8:	4812      	ldr	r0, [pc, #72]	@ (8009f44 <MX_USB_DEVICE_Init+0x54>)
 8009efa:	f7fe fcf7 	bl	80088ec <USBD_Init>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f04:	f7f6 fedc 	bl	8000cc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f08:	490f      	ldr	r1, [pc, #60]	@ (8009f48 <MX_USB_DEVICE_Init+0x58>)
 8009f0a:	480e      	ldr	r0, [pc, #56]	@ (8009f44 <MX_USB_DEVICE_Init+0x54>)
 8009f0c:	f7fe fd1e 	bl	800894c <USBD_RegisterClass>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f16:	f7f6 fed3 	bl	8000cc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f1a:	490c      	ldr	r1, [pc, #48]	@ (8009f4c <MX_USB_DEVICE_Init+0x5c>)
 8009f1c:	4809      	ldr	r0, [pc, #36]	@ (8009f44 <MX_USB_DEVICE_Init+0x54>)
 8009f1e:	f7fe fc15 	bl	800874c <USBD_CDC_RegisterInterface>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f28:	f7f6 feca 	bl	8000cc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f2c:	4805      	ldr	r0, [pc, #20]	@ (8009f44 <MX_USB_DEVICE_Init+0x54>)
 8009f2e:	f7fe fd43 	bl	80089b8 <USBD_Start>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f38:	f7f6 fec2 	bl	8000cc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f3c:	bf00      	nop
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	200000ac 	.word	0x200000ac
 8009f44:	20006b04 	.word	0x20006b04
 8009f48:	20000018 	.word	0x20000018
 8009f4c:	20000098 	.word	0x20000098

08009f50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f54:	2200      	movs	r2, #0
 8009f56:	4905      	ldr	r1, [pc, #20]	@ (8009f6c <CDC_Init_FS+0x1c>)
 8009f58:	4805      	ldr	r0, [pc, #20]	@ (8009f70 <CDC_Init_FS+0x20>)
 8009f5a:	f7fe fc11 	bl	8008780 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f5e:	4905      	ldr	r1, [pc, #20]	@ (8009f74 <CDC_Init_FS+0x24>)
 8009f60:	4803      	ldr	r0, [pc, #12]	@ (8009f70 <CDC_Init_FS+0x20>)
 8009f62:	f7fe fc2f 	bl	80087c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	200075e0 	.word	0x200075e0
 8009f70:	20006b04 	.word	0x20006b04
 8009f74:	20006de0 	.word	0x20006de0

08009f78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	4603      	mov	r3, r0
 8009f90:	6039      	str	r1, [r7, #0]
 8009f92:	71fb      	strb	r3, [r7, #7]
 8009f94:	4613      	mov	r3, r2
 8009f96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	2b23      	cmp	r3, #35	@ 0x23
 8009f9c:	d84a      	bhi.n	800a034 <CDC_Control_FS+0xac>
 8009f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa4 <CDC_Control_FS+0x1c>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	0800a035 	.word	0x0800a035
 8009fa8:	0800a035 	.word	0x0800a035
 8009fac:	0800a035 	.word	0x0800a035
 8009fb0:	0800a035 	.word	0x0800a035
 8009fb4:	0800a035 	.word	0x0800a035
 8009fb8:	0800a035 	.word	0x0800a035
 8009fbc:	0800a035 	.word	0x0800a035
 8009fc0:	0800a035 	.word	0x0800a035
 8009fc4:	0800a035 	.word	0x0800a035
 8009fc8:	0800a035 	.word	0x0800a035
 8009fcc:	0800a035 	.word	0x0800a035
 8009fd0:	0800a035 	.word	0x0800a035
 8009fd4:	0800a035 	.word	0x0800a035
 8009fd8:	0800a035 	.word	0x0800a035
 8009fdc:	0800a035 	.word	0x0800a035
 8009fe0:	0800a035 	.word	0x0800a035
 8009fe4:	0800a035 	.word	0x0800a035
 8009fe8:	0800a035 	.word	0x0800a035
 8009fec:	0800a035 	.word	0x0800a035
 8009ff0:	0800a035 	.word	0x0800a035
 8009ff4:	0800a035 	.word	0x0800a035
 8009ff8:	0800a035 	.word	0x0800a035
 8009ffc:	0800a035 	.word	0x0800a035
 800a000:	0800a035 	.word	0x0800a035
 800a004:	0800a035 	.word	0x0800a035
 800a008:	0800a035 	.word	0x0800a035
 800a00c:	0800a035 	.word	0x0800a035
 800a010:	0800a035 	.word	0x0800a035
 800a014:	0800a035 	.word	0x0800a035
 800a018:	0800a035 	.word	0x0800a035
 800a01c:	0800a035 	.word	0x0800a035
 800a020:	0800a035 	.word	0x0800a035
 800a024:	0800a035 	.word	0x0800a035
 800a028:	0800a035 	.word	0x0800a035
 800a02c:	0800a035 	.word	0x0800a035
 800a030:	0800a035 	.word	0x0800a035
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a034:	bf00      	nop
  }

  return (USBD_OK);
 800a036:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	4805      	ldr	r0, [pc, #20]	@ (800a068 <CDC_Receive_FS+0x24>)
 800a052:	f7fe fbb7 	bl	80087c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a056:	4804      	ldr	r0, [pc, #16]	@ (800a068 <CDC_Receive_FS+0x24>)
 800a058:	f7fe fc12 	bl	8008880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a05c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20006b04 	.word	0x20006b04

0800a06c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a07c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b4 <CDC_Transmit_FS+0x48>)
 800a07e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a082:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a08e:	2301      	movs	r3, #1
 800a090:	e00b      	b.n	800a0aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a092:	887b      	ldrh	r3, [r7, #2]
 800a094:	461a      	mov	r2, r3
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	4806      	ldr	r0, [pc, #24]	@ (800a0b4 <CDC_Transmit_FS+0x48>)
 800a09a:	f7fe fb71 	bl	8008780 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a09e:	4805      	ldr	r0, [pc, #20]	@ (800a0b4 <CDC_Transmit_FS+0x48>)
 800a0a0:	f7fe fbae 	bl	8008800 <USBD_CDC_TransmitPacket>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20006b04 	.word	0x20006b04

0800a0b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void){
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a0e2:	4b09      	ldr	r3, [pc, #36]	@ (800a108 <CDC_Transmit_Is_Busy+0x2c>)
 800a0e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0e8:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <CDC_Transmit_Is_Busy+0x1c>
    return USBD_BUSY;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e000      	b.n	800a0fa <CDC_Transmit_Is_Busy+0x1e>
  else
    return USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	20006b04 	.word	0x20006b04

0800a10c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	4603      	mov	r3, r0
 800a114:	6039      	str	r1, [r7, #0]
 800a116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2212      	movs	r2, #18
 800a11c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a11e:	4b03      	ldr	r3, [pc, #12]	@ (800a12c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	200000c8 	.word	0x200000c8

0800a130 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	6039      	str	r1, [r7, #0]
 800a13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2204      	movs	r2, #4
 800a140:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a142:	4b03      	ldr	r3, [pc, #12]	@ (800a150 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	200000dc 	.word	0x200000dc

0800a154 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	6039      	str	r1, [r7, #0]
 800a15e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a160:	79fb      	ldrb	r3, [r7, #7]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d105      	bne.n	800a172 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	4907      	ldr	r1, [pc, #28]	@ (800a188 <USBD_FS_ProductStrDescriptor+0x34>)
 800a16a:	4808      	ldr	r0, [pc, #32]	@ (800a18c <USBD_FS_ProductStrDescriptor+0x38>)
 800a16c:	f7ff fdd4 	bl	8009d18 <USBD_GetString>
 800a170:	e004      	b.n	800a17c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	4904      	ldr	r1, [pc, #16]	@ (800a188 <USBD_FS_ProductStrDescriptor+0x34>)
 800a176:	4805      	ldr	r0, [pc, #20]	@ (800a18c <USBD_FS_ProductStrDescriptor+0x38>)
 800a178:	f7ff fdce 	bl	8009d18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a17c:	4b02      	ldr	r3, [pc, #8]	@ (800a188 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	20007de0 	.word	0x20007de0
 800a18c:	0800b8ec 	.word	0x0800b8ec

0800a190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	4603      	mov	r3, r0
 800a198:	6039      	str	r1, [r7, #0]
 800a19a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	4904      	ldr	r1, [pc, #16]	@ (800a1b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1a0:	4804      	ldr	r0, [pc, #16]	@ (800a1b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1a2:	f7ff fdb9 	bl	8009d18 <USBD_GetString>
  return USBD_StrDesc;
 800a1a6:	4b02      	ldr	r3, [pc, #8]	@ (800a1b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20007de0 	.word	0x20007de0
 800a1b4:	0800b904 	.word	0x0800b904

0800a1b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	6039      	str	r1, [r7, #0]
 800a1c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	221a      	movs	r2, #26
 800a1c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1ca:	f000 f843 	bl	800a254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1ce:	4b02      	ldr	r3, [pc, #8]	@ (800a1d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	200000e0 	.word	0x200000e0

0800a1dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	6039      	str	r1, [r7, #0]
 800a1e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d105      	bne.n	800a1fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	4907      	ldr	r1, [pc, #28]	@ (800a210 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1f2:	4808      	ldr	r0, [pc, #32]	@ (800a214 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1f4:	f7ff fd90 	bl	8009d18 <USBD_GetString>
 800a1f8:	e004      	b.n	800a204 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	4904      	ldr	r1, [pc, #16]	@ (800a210 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1fe:	4805      	ldr	r0, [pc, #20]	@ (800a214 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a200:	f7ff fd8a 	bl	8009d18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a204:	4b02      	ldr	r3, [pc, #8]	@ (800a210 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20007de0 	.word	0x20007de0
 800a214:	0800b918 	.word	0x0800b918

0800a218 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	6039      	str	r1, [r7, #0]
 800a222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d105      	bne.n	800a236 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	4907      	ldr	r1, [pc, #28]	@ (800a24c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a22e:	4808      	ldr	r0, [pc, #32]	@ (800a250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a230:	f7ff fd72 	bl	8009d18 <USBD_GetString>
 800a234:	e004      	b.n	800a240 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	4904      	ldr	r1, [pc, #16]	@ (800a24c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a23a:	4805      	ldr	r0, [pc, #20]	@ (800a250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a23c:	f7ff fd6c 	bl	8009d18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a240:	4b02      	ldr	r3, [pc, #8]	@ (800a24c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20007de0 	.word	0x20007de0
 800a250:	0800b924 	.word	0x0800b924

0800a254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a25a:	4b0f      	ldr	r3, [pc, #60]	@ (800a298 <Get_SerialNum+0x44>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a260:	4b0e      	ldr	r3, [pc, #56]	@ (800a29c <Get_SerialNum+0x48>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a266:	4b0e      	ldr	r3, [pc, #56]	@ (800a2a0 <Get_SerialNum+0x4c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d009      	beq.n	800a28e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a27a:	2208      	movs	r2, #8
 800a27c:	4909      	ldr	r1, [pc, #36]	@ (800a2a4 <Get_SerialNum+0x50>)
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 f814 	bl	800a2ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a284:	2204      	movs	r2, #4
 800a286:	4908      	ldr	r1, [pc, #32]	@ (800a2a8 <Get_SerialNum+0x54>)
 800a288:	68b8      	ldr	r0, [r7, #8]
 800a28a:	f000 f80f 	bl	800a2ac <IntToUnicode>
  }
}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	1fff7a10 	.word	0x1fff7a10
 800a29c:	1fff7a14 	.word	0x1fff7a14
 800a2a0:	1fff7a18 	.word	0x1fff7a18
 800a2a4:	200000e2 	.word	0x200000e2
 800a2a8:	200000f2 	.word	0x200000f2

0800a2ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2be:	2300      	movs	r3, #0
 800a2c0:	75fb      	strb	r3, [r7, #23]
 800a2c2:	e027      	b.n	800a314 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	0f1b      	lsrs	r3, r3, #28
 800a2c8:	2b09      	cmp	r3, #9
 800a2ca:	d80b      	bhi.n	800a2e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	0f1b      	lsrs	r3, r3, #28
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	440b      	add	r3, r1
 800a2dc:	3230      	adds	r2, #48	@ 0x30
 800a2de:	b2d2      	uxtb	r2, r2
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	e00a      	b.n	800a2fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	0f1b      	lsrs	r3, r3, #28
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	7dfb      	ldrb	r3, [r7, #23]
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	440b      	add	r3, r1
 800a2f4:	3237      	adds	r2, #55	@ 0x37
 800a2f6:	b2d2      	uxtb	r2, r2
 800a2f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	011b      	lsls	r3, r3, #4
 800a2fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	3301      	adds	r3, #1
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	4413      	add	r3, r2
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
 800a310:	3301      	adds	r3, #1
 800a312:	75fb      	strb	r3, [r7, #23]
 800a314:	7dfa      	ldrb	r2, [r7, #23]
 800a316:	79fb      	ldrb	r3, [r7, #7]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d3d3      	bcc.n	800a2c4 <IntToUnicode+0x18>
  }
}
 800a31c:	bf00      	nop
 800a31e:	bf00      	nop
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
	...

0800a32c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08a      	sub	sp, #40	@ 0x28
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a334:	f107 0314 	add.w	r3, r7, #20
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	605a      	str	r2, [r3, #4]
 800a33e:	609a      	str	r2, [r3, #8]
 800a340:	60da      	str	r2, [r3, #12]
 800a342:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a34c:	d147      	bne.n	800a3de <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a34e:	2300      	movs	r3, #0
 800a350:	613b      	str	r3, [r7, #16]
 800a352:	4b25      	ldr	r3, [pc, #148]	@ (800a3e8 <HAL_PCD_MspInit+0xbc>)
 800a354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a356:	4a24      	ldr	r2, [pc, #144]	@ (800a3e8 <HAL_PCD_MspInit+0xbc>)
 800a358:	f043 0301 	orr.w	r3, r3, #1
 800a35c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a35e:	4b22      	ldr	r3, [pc, #136]	@ (800a3e8 <HAL_PCD_MspInit+0xbc>)
 800a360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	613b      	str	r3, [r7, #16]
 800a368:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a36a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800a36e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a370:	2302      	movs	r3, #2
 800a372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a374:	2300      	movs	r3, #0
 800a376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a378:	2303      	movs	r3, #3
 800a37a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a37c:	230a      	movs	r3, #10
 800a37e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a380:	f107 0314 	add.w	r3, r7, #20
 800a384:	4619      	mov	r1, r3
 800a386:	4819      	ldr	r0, [pc, #100]	@ (800a3ec <HAL_PCD_MspInit+0xc0>)
 800a388:	f7f8 fbac 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a38c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a392:	2300      	movs	r3, #0
 800a394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a396:	2300      	movs	r3, #0
 800a398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a39a:	f107 0314 	add.w	r3, r7, #20
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4812      	ldr	r0, [pc, #72]	@ (800a3ec <HAL_PCD_MspInit+0xc0>)
 800a3a2:	f7f8 fb9f 	bl	8002ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3a6:	4b10      	ldr	r3, [pc, #64]	@ (800a3e8 <HAL_PCD_MspInit+0xbc>)
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3aa:	4a0f      	ldr	r2, [pc, #60]	@ (800a3e8 <HAL_PCD_MspInit+0xbc>)
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b0:	6353      	str	r3, [r2, #52]	@ 0x34
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e8 <HAL_PCD_MspInit+0xbc>)
 800a3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ba:	4a0b      	ldr	r2, [pc, #44]	@ (800a3e8 <HAL_PCD_MspInit+0xbc>)
 800a3bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3c0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a3c2:	4b09      	ldr	r3, [pc, #36]	@ (800a3e8 <HAL_PCD_MspInit+0xbc>)
 800a3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	2043      	movs	r0, #67	@ 0x43
 800a3d4:	f7f7 fbfd 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3d8:	2043      	movs	r0, #67	@ 0x43
 800a3da:	f7f7 fc16 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3de:	bf00      	nop
 800a3e0:	3728      	adds	r7, #40	@ 0x28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	40023800 	.word	0x40023800
 800a3ec:	40020000 	.word	0x40020000

0800a3f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f7fe fb23 	bl	8008a52 <USBD_LL_SetupStage>
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	460b      	mov	r3, r1
 800a41e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	00db      	lsls	r3, r3, #3
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	440b      	add	r3, r1
 800a434:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	78fb      	ldrb	r3, [r7, #3]
 800a43c:	4619      	mov	r1, r3
 800a43e:	f7fe fb5d 	bl	8008afc <USBD_LL_DataOutStage>
}
 800a442:	bf00      	nop
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a45c:	78fa      	ldrb	r2, [r7, #3]
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	4613      	mov	r3, r2
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	440b      	add	r3, r1
 800a46a:	3320      	adds	r3, #32
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	4619      	mov	r1, r3
 800a472:	f7fe fbf6 	bl	8008c62 <USBD_LL_DataInStage>
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe fd30 	bl	8008ef2 <USBD_LL_SOF>
}
 800a492:	bf00      	nop
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	79db      	ldrb	r3, [r3, #7]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
 800a4b2:	e008      	b.n	800a4c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	79db      	ldrb	r3, [r3, #7]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d102      	bne.n	800a4c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
 800a4c0:	e001      	b.n	800a4c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a4c2:	f7f6 fbfd 	bl	8000cc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4cc:	7bfa      	ldrb	r2, [r7, #15]
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe fcca 	bl	8008e6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fc72 	bl	8008dc6 <USBD_LL_Reset>
}
 800a4e2:	bf00      	nop
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fcc5 	bl	8008e8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6812      	ldr	r2, [r2, #0]
 800a50e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a512:	f043 0301 	orr.w	r3, r3, #1
 800a516:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	7adb      	ldrb	r3, [r3, #11]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d005      	beq.n	800a52c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a520:	4b04      	ldr	r3, [pc, #16]	@ (800a534 <HAL_PCD_SuspendCallback+0x48>)
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	4a03      	ldr	r2, [pc, #12]	@ (800a534 <HAL_PCD_SuspendCallback+0x48>)
 800a526:	f043 0306 	orr.w	r3, r3, #6
 800a52a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a52c:	bf00      	nop
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	e000ed00 	.word	0xe000ed00

0800a538 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a546:	4618      	mov	r0, r3
 800a548:	f7fe fcbb 	bl	8008ec2 <USBD_LL_Resume>
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a566:	78fa      	ldrb	r2, [r7, #3]
 800a568:	4611      	mov	r1, r2
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fd13 	bl	8008f96 <USBD_LL_IsoOUTIncomplete>
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a58a:	78fa      	ldrb	r2, [r7, #3]
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fe fccf 	bl	8008f32 <USBD_LL_IsoINIncomplete>
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe fd25 	bl	8008ffa <USBD_LL_DevConnected>
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe fd22 	bl	8009010 <USBD_LL_DevDisconnected>
}
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d13c      	bne.n	800a65e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a5e4:	4a20      	ldr	r2, [pc, #128]	@ (800a668 <USBD_LL_Init+0x94>)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a1e      	ldr	r2, [pc, #120]	@ (800a668 <USBD_LL_Init+0x94>)
 800a5f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a668 <USBD_LL_Init+0x94>)
 800a5f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a5fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a668 <USBD_LL_Init+0x94>)
 800a5fe:	2204      	movs	r2, #4
 800a600:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a602:	4b19      	ldr	r3, [pc, #100]	@ (800a668 <USBD_LL_Init+0x94>)
 800a604:	2202      	movs	r2, #2
 800a606:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a608:	4b17      	ldr	r3, [pc, #92]	@ (800a668 <USBD_LL_Init+0x94>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a60e:	4b16      	ldr	r3, [pc, #88]	@ (800a668 <USBD_LL_Init+0x94>)
 800a610:	2202      	movs	r2, #2
 800a612:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a614:	4b14      	ldr	r3, [pc, #80]	@ (800a668 <USBD_LL_Init+0x94>)
 800a616:	2201      	movs	r2, #1
 800a618:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a61a:	4b13      	ldr	r3, [pc, #76]	@ (800a668 <USBD_LL_Init+0x94>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a620:	4b11      	ldr	r3, [pc, #68]	@ (800a668 <USBD_LL_Init+0x94>)
 800a622:	2200      	movs	r2, #0
 800a624:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a626:	4b10      	ldr	r3, [pc, #64]	@ (800a668 <USBD_LL_Init+0x94>)
 800a628:	2201      	movs	r2, #1
 800a62a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a62c:	4b0e      	ldr	r3, [pc, #56]	@ (800a668 <USBD_LL_Init+0x94>)
 800a62e:	2200      	movs	r2, #0
 800a630:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a632:	480d      	ldr	r0, [pc, #52]	@ (800a668 <USBD_LL_Init+0x94>)
 800a634:	f7f8 fc34 	bl	8002ea0 <HAL_PCD_Init>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a63e:	f7f6 fb3f 	bl	8000cc0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a642:	2180      	movs	r1, #128	@ 0x80
 800a644:	4808      	ldr	r0, [pc, #32]	@ (800a668 <USBD_LL_Init+0x94>)
 800a646:	f7f9 fe60 	bl	800430a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a64a:	2240      	movs	r2, #64	@ 0x40
 800a64c:	2100      	movs	r1, #0
 800a64e:	4806      	ldr	r0, [pc, #24]	@ (800a668 <USBD_LL_Init+0x94>)
 800a650:	f7f9 fe14 	bl	800427c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a654:	2280      	movs	r2, #128	@ 0x80
 800a656:	2101      	movs	r1, #1
 800a658:	4803      	ldr	r0, [pc, #12]	@ (800a668 <USBD_LL_Init+0x94>)
 800a65a:	f7f9 fe0f 	bl	800427c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	20007fe0 	.word	0x20007fe0

0800a66c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a682:	4618      	mov	r0, r3
 800a684:	f7f8 fd1b 	bl	80030be <HAL_PCD_Start>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 f942 	bl	800a918 <USBD_Get_USB_Status>
 800a694:	4603      	mov	r3, r0
 800a696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a698:	7bbb      	ldrb	r3, [r7, #14]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	4608      	mov	r0, r1
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	70fb      	strb	r3, [r7, #3]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70bb      	strb	r3, [r7, #2]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a6ca:	78bb      	ldrb	r3, [r7, #2]
 800a6cc:	883a      	ldrh	r2, [r7, #0]
 800a6ce:	78f9      	ldrb	r1, [r7, #3]
 800a6d0:	f7f9 f9ef 	bl	8003ab2 <HAL_PCD_EP_Open>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f91c 	bl	800a918 <USBD_Get_USB_Status>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a708:	78fa      	ldrb	r2, [r7, #3]
 800a70a:	4611      	mov	r1, r2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7f9 fa3a 	bl	8003b86 <HAL_PCD_EP_Close>
 800a712:	4603      	mov	r3, r0
 800a714:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 f8fd 	bl	800a918 <USBD_Get_USB_Status>
 800a71e:	4603      	mov	r3, r0
 800a720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a722:	7bbb      	ldrb	r3, [r7, #14]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a746:	78fa      	ldrb	r2, [r7, #3]
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7f9 faf2 	bl	8003d34 <HAL_PCD_EP_SetStall>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 f8de 	bl	800a918 <USBD_Get_USB_Status>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a760:	7bbb      	ldrb	r3, [r7, #14]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a784:	78fa      	ldrb	r2, [r7, #3]
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7f9 fb36 	bl	8003dfa <HAL_PCD_EP_ClrStall>
 800a78e:	4603      	mov	r3, r0
 800a790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	4618      	mov	r0, r3
 800a796:	f000 f8bf 	bl	800a918 <USBD_Get_USB_Status>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	da0b      	bge.n	800a7dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7ca:	68f9      	ldr	r1, [r7, #12]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	440b      	add	r3, r1
 800a7d6:	3316      	adds	r3, #22
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	e00b      	b.n	800a7f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7dc:	78fb      	ldrb	r3, [r7, #3]
 800a7de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7e2:	68f9      	ldr	r1, [r7, #12]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	4413      	add	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	440b      	add	r3, r1
 800a7ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a7f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a81a:	78fa      	ldrb	r2, [r7, #3]
 800a81c:	4611      	mov	r1, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f7f9 f923 	bl	8003a6a <HAL_PCD_SetAddress>
 800a824:	4603      	mov	r3, r0
 800a826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 f874 	bl	800a918 <USBD_Get_USB_Status>
 800a830:	4603      	mov	r3, r0
 800a832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a834:	7bbb      	ldrb	r3, [r7, #14]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
 800a84a:	460b      	mov	r3, r1
 800a84c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a85c:	7af9      	ldrb	r1, [r7, #11]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	f7f9 fa2d 	bl	8003cc0 <HAL_PCD_EP_Transmit>
 800a866:	4603      	mov	r3, r0
 800a868:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 f853 	bl	800a918 <USBD_Get_USB_Status>
 800a872:	4603      	mov	r3, r0
 800a874:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a876:	7dbb      	ldrb	r3, [r7, #22]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	603b      	str	r3, [r7, #0]
 800a88c:	460b      	mov	r3, r1
 800a88e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a89e:	7af9      	ldrb	r1, [r7, #11]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	f7f9 f9b9 	bl	8003c1a <HAL_PCD_EP_Receive>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ac:	7dfb      	ldrb	r3, [r7, #23]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 f832 	bl	800a918 <USBD_Get_USB_Status>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8d4:	78fa      	ldrb	r2, [r7, #3]
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7f9 f9d9 	bl	8003c90 <HAL_PCD_EP_GetRxCount>
 800a8de:	4603      	mov	r3, r0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8f0:	4b03      	ldr	r3, [pc, #12]	@ (800a900 <USBD_static_malloc+0x18>)
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	370c      	adds	r7, #12
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	200084c4 	.word	0x200084c4

0800a904 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]

}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d817      	bhi.n	800a95c <USBD_Get_USB_Status+0x44>
 800a92c:	a201      	add	r2, pc, #4	@ (adr r2, 800a934 <USBD_Get_USB_Status+0x1c>)
 800a92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a932:	bf00      	nop
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a94b 	.word	0x0800a94b
 800a93c:	0800a951 	.word	0x0800a951
 800a940:	0800a957 	.word	0x0800a957
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	73fb      	strb	r3, [r7, #15]
    break;
 800a948:	e00b      	b.n	800a962 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a94a:	2303      	movs	r3, #3
 800a94c:	73fb      	strb	r3, [r7, #15]
    break;
 800a94e:	e008      	b.n	800a962 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a950:	2301      	movs	r3, #1
 800a952:	73fb      	strb	r3, [r7, #15]
    break;
 800a954:	e005      	b.n	800a962 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a956:	2303      	movs	r3, #3
 800a958:	73fb      	strb	r3, [r7, #15]
    break;
 800a95a:	e002      	b.n	800a962 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a95c:	2303      	movs	r3, #3
 800a95e:	73fb      	strb	r3, [r7, #15]
    break;
 800a960:	bf00      	nop
  }
  return usb_status;
 800a962:	7bfb      	ldrb	r3, [r7, #15]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <std>:
 800a970:	2300      	movs	r3, #0
 800a972:	b510      	push	{r4, lr}
 800a974:	4604      	mov	r4, r0
 800a976:	e9c0 3300 	strd	r3, r3, [r0]
 800a97a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a97e:	6083      	str	r3, [r0, #8]
 800a980:	8181      	strh	r1, [r0, #12]
 800a982:	6643      	str	r3, [r0, #100]	@ 0x64
 800a984:	81c2      	strh	r2, [r0, #14]
 800a986:	6183      	str	r3, [r0, #24]
 800a988:	4619      	mov	r1, r3
 800a98a:	2208      	movs	r2, #8
 800a98c:	305c      	adds	r0, #92	@ 0x5c
 800a98e:	f000 f9f9 	bl	800ad84 <memset>
 800a992:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c8 <std+0x58>)
 800a994:	6263      	str	r3, [r4, #36]	@ 0x24
 800a996:	4b0d      	ldr	r3, [pc, #52]	@ (800a9cc <std+0x5c>)
 800a998:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a99a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9d0 <std+0x60>)
 800a99c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a99e:	4b0d      	ldr	r3, [pc, #52]	@ (800a9d4 <std+0x64>)
 800a9a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9d8 <std+0x68>)
 800a9a4:	6224      	str	r4, [r4, #32]
 800a9a6:	429c      	cmp	r4, r3
 800a9a8:	d006      	beq.n	800a9b8 <std+0x48>
 800a9aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9ae:	4294      	cmp	r4, r2
 800a9b0:	d002      	beq.n	800a9b8 <std+0x48>
 800a9b2:	33d0      	adds	r3, #208	@ 0xd0
 800a9b4:	429c      	cmp	r4, r3
 800a9b6:	d105      	bne.n	800a9c4 <std+0x54>
 800a9b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9c0:	f000 ba58 	b.w	800ae74 <__retarget_lock_init_recursive>
 800a9c4:	bd10      	pop	{r4, pc}
 800a9c6:	bf00      	nop
 800a9c8:	0800abd5 	.word	0x0800abd5
 800a9cc:	0800abf7 	.word	0x0800abf7
 800a9d0:	0800ac2f 	.word	0x0800ac2f
 800a9d4:	0800ac53 	.word	0x0800ac53
 800a9d8:	200086e4 	.word	0x200086e4

0800a9dc <stdio_exit_handler>:
 800a9dc:	4a02      	ldr	r2, [pc, #8]	@ (800a9e8 <stdio_exit_handler+0xc>)
 800a9de:	4903      	ldr	r1, [pc, #12]	@ (800a9ec <stdio_exit_handler+0x10>)
 800a9e0:	4803      	ldr	r0, [pc, #12]	@ (800a9f0 <stdio_exit_handler+0x14>)
 800a9e2:	f000 b869 	b.w	800aab8 <_fwalk_sglue>
 800a9e6:	bf00      	nop
 800a9e8:	200000fc 	.word	0x200000fc
 800a9ec:	0800b731 	.word	0x0800b731
 800a9f0:	2000010c 	.word	0x2000010c

0800a9f4 <cleanup_stdio>:
 800a9f4:	6841      	ldr	r1, [r0, #4]
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	@ (800aa28 <cleanup_stdio+0x34>)
 800a9f8:	4299      	cmp	r1, r3
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	d001      	beq.n	800aa04 <cleanup_stdio+0x10>
 800aa00:	f000 fe96 	bl	800b730 <_fflush_r>
 800aa04:	68a1      	ldr	r1, [r4, #8]
 800aa06:	4b09      	ldr	r3, [pc, #36]	@ (800aa2c <cleanup_stdio+0x38>)
 800aa08:	4299      	cmp	r1, r3
 800aa0a:	d002      	beq.n	800aa12 <cleanup_stdio+0x1e>
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f000 fe8f 	bl	800b730 <_fflush_r>
 800aa12:	68e1      	ldr	r1, [r4, #12]
 800aa14:	4b06      	ldr	r3, [pc, #24]	@ (800aa30 <cleanup_stdio+0x3c>)
 800aa16:	4299      	cmp	r1, r3
 800aa18:	d004      	beq.n	800aa24 <cleanup_stdio+0x30>
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa20:	f000 be86 	b.w	800b730 <_fflush_r>
 800aa24:	bd10      	pop	{r4, pc}
 800aa26:	bf00      	nop
 800aa28:	200086e4 	.word	0x200086e4
 800aa2c:	2000874c 	.word	0x2000874c
 800aa30:	200087b4 	.word	0x200087b4

0800aa34 <global_stdio_init.part.0>:
 800aa34:	b510      	push	{r4, lr}
 800aa36:	4b0b      	ldr	r3, [pc, #44]	@ (800aa64 <global_stdio_init.part.0+0x30>)
 800aa38:	4c0b      	ldr	r4, [pc, #44]	@ (800aa68 <global_stdio_init.part.0+0x34>)
 800aa3a:	4a0c      	ldr	r2, [pc, #48]	@ (800aa6c <global_stdio_init.part.0+0x38>)
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	2200      	movs	r2, #0
 800aa42:	2104      	movs	r1, #4
 800aa44:	f7ff ff94 	bl	800a970 <std>
 800aa48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	2109      	movs	r1, #9
 800aa50:	f7ff ff8e 	bl	800a970 <std>
 800aa54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa58:	2202      	movs	r2, #2
 800aa5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa5e:	2112      	movs	r1, #18
 800aa60:	f7ff bf86 	b.w	800a970 <std>
 800aa64:	2000881c 	.word	0x2000881c
 800aa68:	200086e4 	.word	0x200086e4
 800aa6c:	0800a9dd 	.word	0x0800a9dd

0800aa70 <__sfp_lock_acquire>:
 800aa70:	4801      	ldr	r0, [pc, #4]	@ (800aa78 <__sfp_lock_acquire+0x8>)
 800aa72:	f000 ba00 	b.w	800ae76 <__retarget_lock_acquire_recursive>
 800aa76:	bf00      	nop
 800aa78:	20008825 	.word	0x20008825

0800aa7c <__sfp_lock_release>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	@ (800aa84 <__sfp_lock_release+0x8>)
 800aa7e:	f000 b9fb 	b.w	800ae78 <__retarget_lock_release_recursive>
 800aa82:	bf00      	nop
 800aa84:	20008825 	.word	0x20008825

0800aa88 <__sinit>:
 800aa88:	b510      	push	{r4, lr}
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	f7ff fff0 	bl	800aa70 <__sfp_lock_acquire>
 800aa90:	6a23      	ldr	r3, [r4, #32]
 800aa92:	b11b      	cbz	r3, 800aa9c <__sinit+0x14>
 800aa94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa98:	f7ff bff0 	b.w	800aa7c <__sfp_lock_release>
 800aa9c:	4b04      	ldr	r3, [pc, #16]	@ (800aab0 <__sinit+0x28>)
 800aa9e:	6223      	str	r3, [r4, #32]
 800aaa0:	4b04      	ldr	r3, [pc, #16]	@ (800aab4 <__sinit+0x2c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1f5      	bne.n	800aa94 <__sinit+0xc>
 800aaa8:	f7ff ffc4 	bl	800aa34 <global_stdio_init.part.0>
 800aaac:	e7f2      	b.n	800aa94 <__sinit+0xc>
 800aaae:	bf00      	nop
 800aab0:	0800a9f5 	.word	0x0800a9f5
 800aab4:	2000881c 	.word	0x2000881c

0800aab8 <_fwalk_sglue>:
 800aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aabc:	4607      	mov	r7, r0
 800aabe:	4688      	mov	r8, r1
 800aac0:	4614      	mov	r4, r2
 800aac2:	2600      	movs	r6, #0
 800aac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aac8:	f1b9 0901 	subs.w	r9, r9, #1
 800aacc:	d505      	bpl.n	800aada <_fwalk_sglue+0x22>
 800aace:	6824      	ldr	r4, [r4, #0]
 800aad0:	2c00      	cmp	r4, #0
 800aad2:	d1f7      	bne.n	800aac4 <_fwalk_sglue+0xc>
 800aad4:	4630      	mov	r0, r6
 800aad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aada:	89ab      	ldrh	r3, [r5, #12]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d907      	bls.n	800aaf0 <_fwalk_sglue+0x38>
 800aae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aae4:	3301      	adds	r3, #1
 800aae6:	d003      	beq.n	800aaf0 <_fwalk_sglue+0x38>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4638      	mov	r0, r7
 800aaec:	47c0      	blx	r8
 800aaee:	4306      	orrs	r6, r0
 800aaf0:	3568      	adds	r5, #104	@ 0x68
 800aaf2:	e7e9      	b.n	800aac8 <_fwalk_sglue+0x10>

0800aaf4 <iprintf>:
 800aaf4:	b40f      	push	{r0, r1, r2, r3}
 800aaf6:	b507      	push	{r0, r1, r2, lr}
 800aaf8:	4906      	ldr	r1, [pc, #24]	@ (800ab14 <iprintf+0x20>)
 800aafa:	ab04      	add	r3, sp, #16
 800aafc:	6808      	ldr	r0, [r1, #0]
 800aafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab02:	6881      	ldr	r1, [r0, #8]
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	f000 fae9 	bl	800b0dc <_vfiprintf_r>
 800ab0a:	b003      	add	sp, #12
 800ab0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab10:	b004      	add	sp, #16
 800ab12:	4770      	bx	lr
 800ab14:	20000108 	.word	0x20000108

0800ab18 <_puts_r>:
 800ab18:	6a03      	ldr	r3, [r0, #32]
 800ab1a:	b570      	push	{r4, r5, r6, lr}
 800ab1c:	6884      	ldr	r4, [r0, #8]
 800ab1e:	4605      	mov	r5, r0
 800ab20:	460e      	mov	r6, r1
 800ab22:	b90b      	cbnz	r3, 800ab28 <_puts_r+0x10>
 800ab24:	f7ff ffb0 	bl	800aa88 <__sinit>
 800ab28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab2a:	07db      	lsls	r3, r3, #31
 800ab2c:	d405      	bmi.n	800ab3a <_puts_r+0x22>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	0598      	lsls	r0, r3, #22
 800ab32:	d402      	bmi.n	800ab3a <_puts_r+0x22>
 800ab34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab36:	f000 f99e 	bl	800ae76 <__retarget_lock_acquire_recursive>
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	0719      	lsls	r1, r3, #28
 800ab3e:	d502      	bpl.n	800ab46 <_puts_r+0x2e>
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d135      	bne.n	800abb2 <_puts_r+0x9a>
 800ab46:	4621      	mov	r1, r4
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f000 f8c5 	bl	800acd8 <__swsetup_r>
 800ab4e:	b380      	cbz	r0, 800abb2 <_puts_r+0x9a>
 800ab50:	f04f 35ff 	mov.w	r5, #4294967295
 800ab54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab56:	07da      	lsls	r2, r3, #31
 800ab58:	d405      	bmi.n	800ab66 <_puts_r+0x4e>
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	059b      	lsls	r3, r3, #22
 800ab5e:	d402      	bmi.n	800ab66 <_puts_r+0x4e>
 800ab60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab62:	f000 f989 	bl	800ae78 <__retarget_lock_release_recursive>
 800ab66:	4628      	mov	r0, r5
 800ab68:	bd70      	pop	{r4, r5, r6, pc}
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	da04      	bge.n	800ab78 <_puts_r+0x60>
 800ab6e:	69a2      	ldr	r2, [r4, #24]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	dc17      	bgt.n	800aba4 <_puts_r+0x8c>
 800ab74:	290a      	cmp	r1, #10
 800ab76:	d015      	beq.n	800aba4 <_puts_r+0x8c>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	6022      	str	r2, [r4, #0]
 800ab7e:	7019      	strb	r1, [r3, #0]
 800ab80:	68a3      	ldr	r3, [r4, #8]
 800ab82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab86:	3b01      	subs	r3, #1
 800ab88:	60a3      	str	r3, [r4, #8]
 800ab8a:	2900      	cmp	r1, #0
 800ab8c:	d1ed      	bne.n	800ab6a <_puts_r+0x52>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	da11      	bge.n	800abb6 <_puts_r+0x9e>
 800ab92:	4622      	mov	r2, r4
 800ab94:	210a      	movs	r1, #10
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 f85f 	bl	800ac5a <__swbuf_r>
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	d0d7      	beq.n	800ab50 <_puts_r+0x38>
 800aba0:	250a      	movs	r5, #10
 800aba2:	e7d7      	b.n	800ab54 <_puts_r+0x3c>
 800aba4:	4622      	mov	r2, r4
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 f857 	bl	800ac5a <__swbuf_r>
 800abac:	3001      	adds	r0, #1
 800abae:	d1e7      	bne.n	800ab80 <_puts_r+0x68>
 800abb0:	e7ce      	b.n	800ab50 <_puts_r+0x38>
 800abb2:	3e01      	subs	r6, #1
 800abb4:	e7e4      	b.n	800ab80 <_puts_r+0x68>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	6022      	str	r2, [r4, #0]
 800abbc:	220a      	movs	r2, #10
 800abbe:	701a      	strb	r2, [r3, #0]
 800abc0:	e7ee      	b.n	800aba0 <_puts_r+0x88>
	...

0800abc4 <puts>:
 800abc4:	4b02      	ldr	r3, [pc, #8]	@ (800abd0 <puts+0xc>)
 800abc6:	4601      	mov	r1, r0
 800abc8:	6818      	ldr	r0, [r3, #0]
 800abca:	f7ff bfa5 	b.w	800ab18 <_puts_r>
 800abce:	bf00      	nop
 800abd0:	20000108 	.word	0x20000108

0800abd4 <__sread>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	460c      	mov	r4, r1
 800abd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abdc:	f000 f8fc 	bl	800add8 <_read_r>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	bfab      	itete	ge
 800abe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abe6:	89a3      	ldrhlt	r3, [r4, #12]
 800abe8:	181b      	addge	r3, r3, r0
 800abea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abee:	bfac      	ite	ge
 800abf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abf2:	81a3      	strhlt	r3, [r4, #12]
 800abf4:	bd10      	pop	{r4, pc}

0800abf6 <__swrite>:
 800abf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfa:	461f      	mov	r7, r3
 800abfc:	898b      	ldrh	r3, [r1, #12]
 800abfe:	05db      	lsls	r3, r3, #23
 800ac00:	4605      	mov	r5, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	4616      	mov	r6, r2
 800ac06:	d505      	bpl.n	800ac14 <__swrite+0x1e>
 800ac08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f000 f8d0 	bl	800adb4 <_lseek_r>
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac1e:	81a3      	strh	r3, [r4, #12]
 800ac20:	4632      	mov	r2, r6
 800ac22:	463b      	mov	r3, r7
 800ac24:	4628      	mov	r0, r5
 800ac26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	f000 b8e7 	b.w	800adfc <_write_r>

0800ac2e <__sseek>:
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	460c      	mov	r4, r1
 800ac32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac36:	f000 f8bd 	bl	800adb4 <_lseek_r>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	bf15      	itete	ne
 800ac40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac4a:	81a3      	strheq	r3, [r4, #12]
 800ac4c:	bf18      	it	ne
 800ac4e:	81a3      	strhne	r3, [r4, #12]
 800ac50:	bd10      	pop	{r4, pc}

0800ac52 <__sclose>:
 800ac52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac56:	f000 b89d 	b.w	800ad94 <_close_r>

0800ac5a <__swbuf_r>:
 800ac5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5c:	460e      	mov	r6, r1
 800ac5e:	4614      	mov	r4, r2
 800ac60:	4605      	mov	r5, r0
 800ac62:	b118      	cbz	r0, 800ac6c <__swbuf_r+0x12>
 800ac64:	6a03      	ldr	r3, [r0, #32]
 800ac66:	b90b      	cbnz	r3, 800ac6c <__swbuf_r+0x12>
 800ac68:	f7ff ff0e 	bl	800aa88 <__sinit>
 800ac6c:	69a3      	ldr	r3, [r4, #24]
 800ac6e:	60a3      	str	r3, [r4, #8]
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	071a      	lsls	r2, r3, #28
 800ac74:	d501      	bpl.n	800ac7a <__swbuf_r+0x20>
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	b943      	cbnz	r3, 800ac8c <__swbuf_r+0x32>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f000 f82b 	bl	800acd8 <__swsetup_r>
 800ac82:	b118      	cbz	r0, 800ac8c <__swbuf_r+0x32>
 800ac84:	f04f 37ff 	mov.w	r7, #4294967295
 800ac88:	4638      	mov	r0, r7
 800ac8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	6922      	ldr	r2, [r4, #16]
 800ac90:	1a98      	subs	r0, r3, r2
 800ac92:	6963      	ldr	r3, [r4, #20]
 800ac94:	b2f6      	uxtb	r6, r6
 800ac96:	4283      	cmp	r3, r0
 800ac98:	4637      	mov	r7, r6
 800ac9a:	dc05      	bgt.n	800aca8 <__swbuf_r+0x4e>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 fd46 	bl	800b730 <_fflush_r>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d1ed      	bne.n	800ac84 <__swbuf_r+0x2a>
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	3b01      	subs	r3, #1
 800acac:	60a3      	str	r3, [r4, #8]
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	6022      	str	r2, [r4, #0]
 800acb4:	701e      	strb	r6, [r3, #0]
 800acb6:	6962      	ldr	r2, [r4, #20]
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	429a      	cmp	r2, r3
 800acbc:	d004      	beq.n	800acc8 <__swbuf_r+0x6e>
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	07db      	lsls	r3, r3, #31
 800acc2:	d5e1      	bpl.n	800ac88 <__swbuf_r+0x2e>
 800acc4:	2e0a      	cmp	r6, #10
 800acc6:	d1df      	bne.n	800ac88 <__swbuf_r+0x2e>
 800acc8:	4621      	mov	r1, r4
 800acca:	4628      	mov	r0, r5
 800accc:	f000 fd30 	bl	800b730 <_fflush_r>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d0d9      	beq.n	800ac88 <__swbuf_r+0x2e>
 800acd4:	e7d6      	b.n	800ac84 <__swbuf_r+0x2a>
	...

0800acd8 <__swsetup_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4b29      	ldr	r3, [pc, #164]	@ (800ad80 <__swsetup_r+0xa8>)
 800acdc:	4605      	mov	r5, r0
 800acde:	6818      	ldr	r0, [r3, #0]
 800ace0:	460c      	mov	r4, r1
 800ace2:	b118      	cbz	r0, 800acec <__swsetup_r+0x14>
 800ace4:	6a03      	ldr	r3, [r0, #32]
 800ace6:	b90b      	cbnz	r3, 800acec <__swsetup_r+0x14>
 800ace8:	f7ff fece 	bl	800aa88 <__sinit>
 800acec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf0:	0719      	lsls	r1, r3, #28
 800acf2:	d422      	bmi.n	800ad3a <__swsetup_r+0x62>
 800acf4:	06da      	lsls	r2, r3, #27
 800acf6:	d407      	bmi.n	800ad08 <__swsetup_r+0x30>
 800acf8:	2209      	movs	r2, #9
 800acfa:	602a      	str	r2, [r5, #0]
 800acfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad00:	81a3      	strh	r3, [r4, #12]
 800ad02:	f04f 30ff 	mov.w	r0, #4294967295
 800ad06:	e033      	b.n	800ad70 <__swsetup_r+0x98>
 800ad08:	0758      	lsls	r0, r3, #29
 800ad0a:	d512      	bpl.n	800ad32 <__swsetup_r+0x5a>
 800ad0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad0e:	b141      	cbz	r1, 800ad22 <__swsetup_r+0x4a>
 800ad10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad14:	4299      	cmp	r1, r3
 800ad16:	d002      	beq.n	800ad1e <__swsetup_r+0x46>
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f000 f8bd 	bl	800ae98 <_free_r>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad28:	81a3      	strh	r3, [r4, #12]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	6063      	str	r3, [r4, #4]
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	f043 0308 	orr.w	r3, r3, #8
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	6923      	ldr	r3, [r4, #16]
 800ad3c:	b94b      	cbnz	r3, 800ad52 <__swsetup_r+0x7a>
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad48:	d003      	beq.n	800ad52 <__swsetup_r+0x7a>
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f000 fd3d 	bl	800b7cc <__smakebuf_r>
 800ad52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad56:	f013 0201 	ands.w	r2, r3, #1
 800ad5a:	d00a      	beq.n	800ad72 <__swsetup_r+0x9a>
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	60a2      	str	r2, [r4, #8]
 800ad60:	6962      	ldr	r2, [r4, #20]
 800ad62:	4252      	negs	r2, r2
 800ad64:	61a2      	str	r2, [r4, #24]
 800ad66:	6922      	ldr	r2, [r4, #16]
 800ad68:	b942      	cbnz	r2, 800ad7c <__swsetup_r+0xa4>
 800ad6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad6e:	d1c5      	bne.n	800acfc <__swsetup_r+0x24>
 800ad70:	bd38      	pop	{r3, r4, r5, pc}
 800ad72:	0799      	lsls	r1, r3, #30
 800ad74:	bf58      	it	pl
 800ad76:	6962      	ldrpl	r2, [r4, #20]
 800ad78:	60a2      	str	r2, [r4, #8]
 800ad7a:	e7f4      	b.n	800ad66 <__swsetup_r+0x8e>
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	e7f7      	b.n	800ad70 <__swsetup_r+0x98>
 800ad80:	20000108 	.word	0x20000108

0800ad84 <memset>:
 800ad84:	4402      	add	r2, r0
 800ad86:	4603      	mov	r3, r0
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d100      	bne.n	800ad8e <memset+0xa>
 800ad8c:	4770      	bx	lr
 800ad8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad92:	e7f9      	b.n	800ad88 <memset+0x4>

0800ad94 <_close_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d06      	ldr	r5, [pc, #24]	@ (800adb0 <_close_r+0x1c>)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	602b      	str	r3, [r5, #0]
 800ada0:	f7f6 fa7f 	bl	80012a2 <_close>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_close_r+0x1a>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_close_r+0x1a>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	20008820 	.word	0x20008820

0800adb4 <_lseek_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d07      	ldr	r5, [pc, #28]	@ (800add4 <_lseek_r+0x20>)
 800adb8:	4604      	mov	r4, r0
 800adba:	4608      	mov	r0, r1
 800adbc:	4611      	mov	r1, r2
 800adbe:	2200      	movs	r2, #0
 800adc0:	602a      	str	r2, [r5, #0]
 800adc2:	461a      	mov	r2, r3
 800adc4:	f7f6 fa94 	bl	80012f0 <_lseek>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d102      	bne.n	800add2 <_lseek_r+0x1e>
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	b103      	cbz	r3, 800add2 <_lseek_r+0x1e>
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	20008820 	.word	0x20008820

0800add8 <_read_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4d07      	ldr	r5, [pc, #28]	@ (800adf8 <_read_r+0x20>)
 800addc:	4604      	mov	r4, r0
 800adde:	4608      	mov	r0, r1
 800ade0:	4611      	mov	r1, r2
 800ade2:	2200      	movs	r2, #0
 800ade4:	602a      	str	r2, [r5, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	f7f6 fa3e 	bl	8001268 <_read>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d102      	bne.n	800adf6 <_read_r+0x1e>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	b103      	cbz	r3, 800adf6 <_read_r+0x1e>
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	20008820 	.word	0x20008820

0800adfc <_write_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d07      	ldr	r5, [pc, #28]	@ (800ae1c <_write_r+0x20>)
 800ae00:	4604      	mov	r4, r0
 800ae02:	4608      	mov	r0, r1
 800ae04:	4611      	mov	r1, r2
 800ae06:	2200      	movs	r2, #0
 800ae08:	602a      	str	r2, [r5, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f7f5 fe88 	bl	8000b20 <_write>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_write_r+0x1e>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_write_r+0x1e>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20008820 	.word	0x20008820

0800ae20 <__errno>:
 800ae20:	4b01      	ldr	r3, [pc, #4]	@ (800ae28 <__errno+0x8>)
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	20000108 	.word	0x20000108

0800ae2c <__libc_init_array>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	4d0d      	ldr	r5, [pc, #52]	@ (800ae64 <__libc_init_array+0x38>)
 800ae30:	4c0d      	ldr	r4, [pc, #52]	@ (800ae68 <__libc_init_array+0x3c>)
 800ae32:	1b64      	subs	r4, r4, r5
 800ae34:	10a4      	asrs	r4, r4, #2
 800ae36:	2600      	movs	r6, #0
 800ae38:	42a6      	cmp	r6, r4
 800ae3a:	d109      	bne.n	800ae50 <__libc_init_array+0x24>
 800ae3c:	4d0b      	ldr	r5, [pc, #44]	@ (800ae6c <__libc_init_array+0x40>)
 800ae3e:	4c0c      	ldr	r4, [pc, #48]	@ (800ae70 <__libc_init_array+0x44>)
 800ae40:	f000 fd32 	bl	800b8a8 <_init>
 800ae44:	1b64      	subs	r4, r4, r5
 800ae46:	10a4      	asrs	r4, r4, #2
 800ae48:	2600      	movs	r6, #0
 800ae4a:	42a6      	cmp	r6, r4
 800ae4c:	d105      	bne.n	800ae5a <__libc_init_array+0x2e>
 800ae4e:	bd70      	pop	{r4, r5, r6, pc}
 800ae50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae54:	4798      	blx	r3
 800ae56:	3601      	adds	r6, #1
 800ae58:	e7ee      	b.n	800ae38 <__libc_init_array+0xc>
 800ae5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae5e:	4798      	blx	r3
 800ae60:	3601      	adds	r6, #1
 800ae62:	e7f2      	b.n	800ae4a <__libc_init_array+0x1e>
 800ae64:	0800b990 	.word	0x0800b990
 800ae68:	0800b990 	.word	0x0800b990
 800ae6c:	0800b990 	.word	0x0800b990
 800ae70:	0800b994 	.word	0x0800b994

0800ae74 <__retarget_lock_init_recursive>:
 800ae74:	4770      	bx	lr

0800ae76 <__retarget_lock_acquire_recursive>:
 800ae76:	4770      	bx	lr

0800ae78 <__retarget_lock_release_recursive>:
 800ae78:	4770      	bx	lr

0800ae7a <memcpy>:
 800ae7a:	440a      	add	r2, r1
 800ae7c:	4291      	cmp	r1, r2
 800ae7e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae82:	d100      	bne.n	800ae86 <memcpy+0xc>
 800ae84:	4770      	bx	lr
 800ae86:	b510      	push	{r4, lr}
 800ae88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae90:	4291      	cmp	r1, r2
 800ae92:	d1f9      	bne.n	800ae88 <memcpy+0xe>
 800ae94:	bd10      	pop	{r4, pc}
	...

0800ae98 <_free_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	d041      	beq.n	800af24 <_free_r+0x8c>
 800aea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea4:	1f0c      	subs	r4, r1, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfb8      	it	lt
 800aeaa:	18e4      	addlt	r4, r4, r3
 800aeac:	f000 f8e0 	bl	800b070 <__malloc_lock>
 800aeb0:	4a1d      	ldr	r2, [pc, #116]	@ (800af28 <_free_r+0x90>)
 800aeb2:	6813      	ldr	r3, [r2, #0]
 800aeb4:	b933      	cbnz	r3, 800aec4 <_free_r+0x2c>
 800aeb6:	6063      	str	r3, [r4, #4]
 800aeb8:	6014      	str	r4, [r2, #0]
 800aeba:	4628      	mov	r0, r5
 800aebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aec0:	f000 b8dc 	b.w	800b07c <__malloc_unlock>
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	d908      	bls.n	800aeda <_free_r+0x42>
 800aec8:	6820      	ldr	r0, [r4, #0]
 800aeca:	1821      	adds	r1, r4, r0
 800aecc:	428b      	cmp	r3, r1
 800aece:	bf01      	itttt	eq
 800aed0:	6819      	ldreq	r1, [r3, #0]
 800aed2:	685b      	ldreq	r3, [r3, #4]
 800aed4:	1809      	addeq	r1, r1, r0
 800aed6:	6021      	streq	r1, [r4, #0]
 800aed8:	e7ed      	b.n	800aeb6 <_free_r+0x1e>
 800aeda:	461a      	mov	r2, r3
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	b10b      	cbz	r3, 800aee4 <_free_r+0x4c>
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	d9fa      	bls.n	800aeda <_free_r+0x42>
 800aee4:	6811      	ldr	r1, [r2, #0]
 800aee6:	1850      	adds	r0, r2, r1
 800aee8:	42a0      	cmp	r0, r4
 800aeea:	d10b      	bne.n	800af04 <_free_r+0x6c>
 800aeec:	6820      	ldr	r0, [r4, #0]
 800aeee:	4401      	add	r1, r0
 800aef0:	1850      	adds	r0, r2, r1
 800aef2:	4283      	cmp	r3, r0
 800aef4:	6011      	str	r1, [r2, #0]
 800aef6:	d1e0      	bne.n	800aeba <_free_r+0x22>
 800aef8:	6818      	ldr	r0, [r3, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	6053      	str	r3, [r2, #4]
 800aefe:	4408      	add	r0, r1
 800af00:	6010      	str	r0, [r2, #0]
 800af02:	e7da      	b.n	800aeba <_free_r+0x22>
 800af04:	d902      	bls.n	800af0c <_free_r+0x74>
 800af06:	230c      	movs	r3, #12
 800af08:	602b      	str	r3, [r5, #0]
 800af0a:	e7d6      	b.n	800aeba <_free_r+0x22>
 800af0c:	6820      	ldr	r0, [r4, #0]
 800af0e:	1821      	adds	r1, r4, r0
 800af10:	428b      	cmp	r3, r1
 800af12:	bf04      	itt	eq
 800af14:	6819      	ldreq	r1, [r3, #0]
 800af16:	685b      	ldreq	r3, [r3, #4]
 800af18:	6063      	str	r3, [r4, #4]
 800af1a:	bf04      	itt	eq
 800af1c:	1809      	addeq	r1, r1, r0
 800af1e:	6021      	streq	r1, [r4, #0]
 800af20:	6054      	str	r4, [r2, #4]
 800af22:	e7ca      	b.n	800aeba <_free_r+0x22>
 800af24:	bd38      	pop	{r3, r4, r5, pc}
 800af26:	bf00      	nop
 800af28:	2000882c 	.word	0x2000882c

0800af2c <sbrk_aligned>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	4e0f      	ldr	r6, [pc, #60]	@ (800af6c <sbrk_aligned+0x40>)
 800af30:	460c      	mov	r4, r1
 800af32:	6831      	ldr	r1, [r6, #0]
 800af34:	4605      	mov	r5, r0
 800af36:	b911      	cbnz	r1, 800af3e <sbrk_aligned+0x12>
 800af38:	f000 fca6 	bl	800b888 <_sbrk_r>
 800af3c:	6030      	str	r0, [r6, #0]
 800af3e:	4621      	mov	r1, r4
 800af40:	4628      	mov	r0, r5
 800af42:	f000 fca1 	bl	800b888 <_sbrk_r>
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	d103      	bne.n	800af52 <sbrk_aligned+0x26>
 800af4a:	f04f 34ff 	mov.w	r4, #4294967295
 800af4e:	4620      	mov	r0, r4
 800af50:	bd70      	pop	{r4, r5, r6, pc}
 800af52:	1cc4      	adds	r4, r0, #3
 800af54:	f024 0403 	bic.w	r4, r4, #3
 800af58:	42a0      	cmp	r0, r4
 800af5a:	d0f8      	beq.n	800af4e <sbrk_aligned+0x22>
 800af5c:	1a21      	subs	r1, r4, r0
 800af5e:	4628      	mov	r0, r5
 800af60:	f000 fc92 	bl	800b888 <_sbrk_r>
 800af64:	3001      	adds	r0, #1
 800af66:	d1f2      	bne.n	800af4e <sbrk_aligned+0x22>
 800af68:	e7ef      	b.n	800af4a <sbrk_aligned+0x1e>
 800af6a:	bf00      	nop
 800af6c:	20008828 	.word	0x20008828

0800af70 <_malloc_r>:
 800af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af74:	1ccd      	adds	r5, r1, #3
 800af76:	f025 0503 	bic.w	r5, r5, #3
 800af7a:	3508      	adds	r5, #8
 800af7c:	2d0c      	cmp	r5, #12
 800af7e:	bf38      	it	cc
 800af80:	250c      	movcc	r5, #12
 800af82:	2d00      	cmp	r5, #0
 800af84:	4606      	mov	r6, r0
 800af86:	db01      	blt.n	800af8c <_malloc_r+0x1c>
 800af88:	42a9      	cmp	r1, r5
 800af8a:	d904      	bls.n	800af96 <_malloc_r+0x26>
 800af8c:	230c      	movs	r3, #12
 800af8e:	6033      	str	r3, [r6, #0]
 800af90:	2000      	movs	r0, #0
 800af92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b06c <_malloc_r+0xfc>
 800af9a:	f000 f869 	bl	800b070 <__malloc_lock>
 800af9e:	f8d8 3000 	ldr.w	r3, [r8]
 800afa2:	461c      	mov	r4, r3
 800afa4:	bb44      	cbnz	r4, 800aff8 <_malloc_r+0x88>
 800afa6:	4629      	mov	r1, r5
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff ffbf 	bl	800af2c <sbrk_aligned>
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	4604      	mov	r4, r0
 800afb2:	d158      	bne.n	800b066 <_malloc_r+0xf6>
 800afb4:	f8d8 4000 	ldr.w	r4, [r8]
 800afb8:	4627      	mov	r7, r4
 800afba:	2f00      	cmp	r7, #0
 800afbc:	d143      	bne.n	800b046 <_malloc_r+0xd6>
 800afbe:	2c00      	cmp	r4, #0
 800afc0:	d04b      	beq.n	800b05a <_malloc_r+0xea>
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	4639      	mov	r1, r7
 800afc6:	4630      	mov	r0, r6
 800afc8:	eb04 0903 	add.w	r9, r4, r3
 800afcc:	f000 fc5c 	bl	800b888 <_sbrk_r>
 800afd0:	4581      	cmp	r9, r0
 800afd2:	d142      	bne.n	800b05a <_malloc_r+0xea>
 800afd4:	6821      	ldr	r1, [r4, #0]
 800afd6:	1a6d      	subs	r5, r5, r1
 800afd8:	4629      	mov	r1, r5
 800afda:	4630      	mov	r0, r6
 800afdc:	f7ff ffa6 	bl	800af2c <sbrk_aligned>
 800afe0:	3001      	adds	r0, #1
 800afe2:	d03a      	beq.n	800b05a <_malloc_r+0xea>
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	442b      	add	r3, r5
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	f8d8 3000 	ldr.w	r3, [r8]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	bb62      	cbnz	r2, 800b04c <_malloc_r+0xdc>
 800aff2:	f8c8 7000 	str.w	r7, [r8]
 800aff6:	e00f      	b.n	800b018 <_malloc_r+0xa8>
 800aff8:	6822      	ldr	r2, [r4, #0]
 800affa:	1b52      	subs	r2, r2, r5
 800affc:	d420      	bmi.n	800b040 <_malloc_r+0xd0>
 800affe:	2a0b      	cmp	r2, #11
 800b000:	d917      	bls.n	800b032 <_malloc_r+0xc2>
 800b002:	1961      	adds	r1, r4, r5
 800b004:	42a3      	cmp	r3, r4
 800b006:	6025      	str	r5, [r4, #0]
 800b008:	bf18      	it	ne
 800b00a:	6059      	strne	r1, [r3, #4]
 800b00c:	6863      	ldr	r3, [r4, #4]
 800b00e:	bf08      	it	eq
 800b010:	f8c8 1000 	streq.w	r1, [r8]
 800b014:	5162      	str	r2, [r4, r5]
 800b016:	604b      	str	r3, [r1, #4]
 800b018:	4630      	mov	r0, r6
 800b01a:	f000 f82f 	bl	800b07c <__malloc_unlock>
 800b01e:	f104 000b 	add.w	r0, r4, #11
 800b022:	1d23      	adds	r3, r4, #4
 800b024:	f020 0007 	bic.w	r0, r0, #7
 800b028:	1ac2      	subs	r2, r0, r3
 800b02a:	bf1c      	itt	ne
 800b02c:	1a1b      	subne	r3, r3, r0
 800b02e:	50a3      	strne	r3, [r4, r2]
 800b030:	e7af      	b.n	800af92 <_malloc_r+0x22>
 800b032:	6862      	ldr	r2, [r4, #4]
 800b034:	42a3      	cmp	r3, r4
 800b036:	bf0c      	ite	eq
 800b038:	f8c8 2000 	streq.w	r2, [r8]
 800b03c:	605a      	strne	r2, [r3, #4]
 800b03e:	e7eb      	b.n	800b018 <_malloc_r+0xa8>
 800b040:	4623      	mov	r3, r4
 800b042:	6864      	ldr	r4, [r4, #4]
 800b044:	e7ae      	b.n	800afa4 <_malloc_r+0x34>
 800b046:	463c      	mov	r4, r7
 800b048:	687f      	ldr	r7, [r7, #4]
 800b04a:	e7b6      	b.n	800afba <_malloc_r+0x4a>
 800b04c:	461a      	mov	r2, r3
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	42a3      	cmp	r3, r4
 800b052:	d1fb      	bne.n	800b04c <_malloc_r+0xdc>
 800b054:	2300      	movs	r3, #0
 800b056:	6053      	str	r3, [r2, #4]
 800b058:	e7de      	b.n	800b018 <_malloc_r+0xa8>
 800b05a:	230c      	movs	r3, #12
 800b05c:	6033      	str	r3, [r6, #0]
 800b05e:	4630      	mov	r0, r6
 800b060:	f000 f80c 	bl	800b07c <__malloc_unlock>
 800b064:	e794      	b.n	800af90 <_malloc_r+0x20>
 800b066:	6005      	str	r5, [r0, #0]
 800b068:	e7d6      	b.n	800b018 <_malloc_r+0xa8>
 800b06a:	bf00      	nop
 800b06c:	2000882c 	.word	0x2000882c

0800b070 <__malloc_lock>:
 800b070:	4801      	ldr	r0, [pc, #4]	@ (800b078 <__malloc_lock+0x8>)
 800b072:	f7ff bf00 	b.w	800ae76 <__retarget_lock_acquire_recursive>
 800b076:	bf00      	nop
 800b078:	20008824 	.word	0x20008824

0800b07c <__malloc_unlock>:
 800b07c:	4801      	ldr	r0, [pc, #4]	@ (800b084 <__malloc_unlock+0x8>)
 800b07e:	f7ff befb 	b.w	800ae78 <__retarget_lock_release_recursive>
 800b082:	bf00      	nop
 800b084:	20008824 	.word	0x20008824

0800b088 <__sfputc_r>:
 800b088:	6893      	ldr	r3, [r2, #8]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	b410      	push	{r4}
 800b090:	6093      	str	r3, [r2, #8]
 800b092:	da08      	bge.n	800b0a6 <__sfputc_r+0x1e>
 800b094:	6994      	ldr	r4, [r2, #24]
 800b096:	42a3      	cmp	r3, r4
 800b098:	db01      	blt.n	800b09e <__sfputc_r+0x16>
 800b09a:	290a      	cmp	r1, #10
 800b09c:	d103      	bne.n	800b0a6 <__sfputc_r+0x1e>
 800b09e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a2:	f7ff bdda 	b.w	800ac5a <__swbuf_r>
 800b0a6:	6813      	ldr	r3, [r2, #0]
 800b0a8:	1c58      	adds	r0, r3, #1
 800b0aa:	6010      	str	r0, [r2, #0]
 800b0ac:	7019      	strb	r1, [r3, #0]
 800b0ae:	4608      	mov	r0, r1
 800b0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <__sfputs_r>:
 800b0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	460f      	mov	r7, r1
 800b0bc:	4614      	mov	r4, r2
 800b0be:	18d5      	adds	r5, r2, r3
 800b0c0:	42ac      	cmp	r4, r5
 800b0c2:	d101      	bne.n	800b0c8 <__sfputs_r+0x12>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	e007      	b.n	800b0d8 <__sfputs_r+0x22>
 800b0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0cc:	463a      	mov	r2, r7
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f7ff ffda 	bl	800b088 <__sfputc_r>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d1f3      	bne.n	800b0c0 <__sfputs_r+0xa>
 800b0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0dc <_vfiprintf_r>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	b09d      	sub	sp, #116	@ 0x74
 800b0e4:	4614      	mov	r4, r2
 800b0e6:	4698      	mov	r8, r3
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	b118      	cbz	r0, 800b0f4 <_vfiprintf_r+0x18>
 800b0ec:	6a03      	ldr	r3, [r0, #32]
 800b0ee:	b90b      	cbnz	r3, 800b0f4 <_vfiprintf_r+0x18>
 800b0f0:	f7ff fcca 	bl	800aa88 <__sinit>
 800b0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d405      	bmi.n	800b106 <_vfiprintf_r+0x2a>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_vfiprintf_r+0x2a>
 800b100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b102:	f7ff feb8 	bl	800ae76 <__retarget_lock_acquire_recursive>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	071b      	lsls	r3, r3, #28
 800b10a:	d501      	bpl.n	800b110 <_vfiprintf_r+0x34>
 800b10c:	692b      	ldr	r3, [r5, #16]
 800b10e:	b99b      	cbnz	r3, 800b138 <_vfiprintf_r+0x5c>
 800b110:	4629      	mov	r1, r5
 800b112:	4630      	mov	r0, r6
 800b114:	f7ff fde0 	bl	800acd8 <__swsetup_r>
 800b118:	b170      	cbz	r0, 800b138 <_vfiprintf_r+0x5c>
 800b11a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b11c:	07dc      	lsls	r4, r3, #31
 800b11e:	d504      	bpl.n	800b12a <_vfiprintf_r+0x4e>
 800b120:	f04f 30ff 	mov.w	r0, #4294967295
 800b124:	b01d      	add	sp, #116	@ 0x74
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	0598      	lsls	r0, r3, #22
 800b12e:	d4f7      	bmi.n	800b120 <_vfiprintf_r+0x44>
 800b130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b132:	f7ff fea1 	bl	800ae78 <__retarget_lock_release_recursive>
 800b136:	e7f3      	b.n	800b120 <_vfiprintf_r+0x44>
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b142:	f8cd 800c 	str.w	r8, [sp, #12]
 800b146:	2330      	movs	r3, #48	@ 0x30
 800b148:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2f8 <_vfiprintf_r+0x21c>
 800b14c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b150:	f04f 0901 	mov.w	r9, #1
 800b154:	4623      	mov	r3, r4
 800b156:	469a      	mov	sl, r3
 800b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15c:	b10a      	cbz	r2, 800b162 <_vfiprintf_r+0x86>
 800b15e:	2a25      	cmp	r2, #37	@ 0x25
 800b160:	d1f9      	bne.n	800b156 <_vfiprintf_r+0x7a>
 800b162:	ebba 0b04 	subs.w	fp, sl, r4
 800b166:	d00b      	beq.n	800b180 <_vfiprintf_r+0xa4>
 800b168:	465b      	mov	r3, fp
 800b16a:	4622      	mov	r2, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ffa1 	bl	800b0b6 <__sfputs_r>
 800b174:	3001      	adds	r0, #1
 800b176:	f000 80a7 	beq.w	800b2c8 <_vfiprintf_r+0x1ec>
 800b17a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b17c:	445a      	add	r2, fp
 800b17e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b180:	f89a 3000 	ldrb.w	r3, [sl]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 809f 	beq.w	800b2c8 <_vfiprintf_r+0x1ec>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4853      	ldr	r0, [pc, #332]	@ (800b2f8 <_vfiprintf_r+0x21c>)
 800b1ac:	f7f5 f820 	bl	80001f0 <memchr>
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	b9d8      	cbnz	r0, 800b1ec <_vfiprintf_r+0x110>
 800b1b4:	06d1      	lsls	r1, r2, #27
 800b1b6:	bf44      	itt	mi
 800b1b8:	2320      	movmi	r3, #32
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1be:	0713      	lsls	r3, r2, #28
 800b1c0:	bf44      	itt	mi
 800b1c2:	232b      	movmi	r3, #43	@ 0x2b
 800b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ce:	d015      	beq.n	800b1fc <_vfiprintf_r+0x120>
 800b1d0:	9a07      	ldr	r2, [sp, #28]
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f04f 0c0a 	mov.w	ip, #10
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e0:	3b30      	subs	r3, #48	@ 0x30
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	d94b      	bls.n	800b27e <_vfiprintf_r+0x1a2>
 800b1e6:	b1b0      	cbz	r0, 800b216 <_vfiprintf_r+0x13a>
 800b1e8:	9207      	str	r2, [sp, #28]
 800b1ea:	e014      	b.n	800b216 <_vfiprintf_r+0x13a>
 800b1ec:	eba0 0308 	sub.w	r3, r0, r8
 800b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	46a2      	mov	sl, r4
 800b1fa:	e7d2      	b.n	800b1a2 <_vfiprintf_r+0xc6>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9103      	str	r1, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbb      	ittet	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	f042 0202 	orrlt.w	r2, r2, #2
 800b20e:	9307      	strge	r3, [sp, #28]
 800b210:	9307      	strlt	r3, [sp, #28]
 800b212:	bfb8      	it	lt
 800b214:	9204      	strlt	r2, [sp, #16]
 800b216:	7823      	ldrb	r3, [r4, #0]
 800b218:	2b2e      	cmp	r3, #46	@ 0x2e
 800b21a:	d10a      	bne.n	800b232 <_vfiprintf_r+0x156>
 800b21c:	7863      	ldrb	r3, [r4, #1]
 800b21e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b220:	d132      	bne.n	800b288 <_vfiprintf_r+0x1ac>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	1d1a      	adds	r2, r3, #4
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	9203      	str	r2, [sp, #12]
 800b22a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b22e:	3402      	adds	r4, #2
 800b230:	9305      	str	r3, [sp, #20]
 800b232:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b308 <_vfiprintf_r+0x22c>
 800b236:	7821      	ldrb	r1, [r4, #0]
 800b238:	2203      	movs	r2, #3
 800b23a:	4650      	mov	r0, sl
 800b23c:	f7f4 ffd8 	bl	80001f0 <memchr>
 800b240:	b138      	cbz	r0, 800b252 <_vfiprintf_r+0x176>
 800b242:	9b04      	ldr	r3, [sp, #16]
 800b244:	eba0 000a 	sub.w	r0, r0, sl
 800b248:	2240      	movs	r2, #64	@ 0x40
 800b24a:	4082      	lsls	r2, r0
 800b24c:	4313      	orrs	r3, r2
 800b24e:	3401      	adds	r4, #1
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b256:	4829      	ldr	r0, [pc, #164]	@ (800b2fc <_vfiprintf_r+0x220>)
 800b258:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b25c:	2206      	movs	r2, #6
 800b25e:	f7f4 ffc7 	bl	80001f0 <memchr>
 800b262:	2800      	cmp	r0, #0
 800b264:	d03f      	beq.n	800b2e6 <_vfiprintf_r+0x20a>
 800b266:	4b26      	ldr	r3, [pc, #152]	@ (800b300 <_vfiprintf_r+0x224>)
 800b268:	bb1b      	cbnz	r3, 800b2b2 <_vfiprintf_r+0x1d6>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	3307      	adds	r3, #7
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	3308      	adds	r3, #8
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b278:	443b      	add	r3, r7
 800b27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b27c:	e76a      	b.n	800b154 <_vfiprintf_r+0x78>
 800b27e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b282:	460c      	mov	r4, r1
 800b284:	2001      	movs	r0, #1
 800b286:	e7a8      	b.n	800b1da <_vfiprintf_r+0xfe>
 800b288:	2300      	movs	r3, #0
 800b28a:	3401      	adds	r4, #1
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	4619      	mov	r1, r3
 800b290:	f04f 0c0a 	mov.w	ip, #10
 800b294:	4620      	mov	r0, r4
 800b296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b29a:	3a30      	subs	r2, #48	@ 0x30
 800b29c:	2a09      	cmp	r2, #9
 800b29e:	d903      	bls.n	800b2a8 <_vfiprintf_r+0x1cc>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0c6      	beq.n	800b232 <_vfiprintf_r+0x156>
 800b2a4:	9105      	str	r1, [sp, #20]
 800b2a6:	e7c4      	b.n	800b232 <_vfiprintf_r+0x156>
 800b2a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e7f0      	b.n	800b294 <_vfiprintf_r+0x1b8>
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4b12      	ldr	r3, [pc, #72]	@ (800b304 <_vfiprintf_r+0x228>)
 800b2ba:	a904      	add	r1, sp, #16
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f3af 8000 	nop.w
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	1c78      	adds	r0, r7, #1
 800b2c6:	d1d6      	bne.n	800b276 <_vfiprintf_r+0x19a>
 800b2c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2ca:	07d9      	lsls	r1, r3, #31
 800b2cc:	d405      	bmi.n	800b2da <_vfiprintf_r+0x1fe>
 800b2ce:	89ab      	ldrh	r3, [r5, #12]
 800b2d0:	059a      	lsls	r2, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <_vfiprintf_r+0x1fe>
 800b2d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2d6:	f7ff fdcf 	bl	800ae78 <__retarget_lock_release_recursive>
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	065b      	lsls	r3, r3, #25
 800b2de:	f53f af1f 	bmi.w	800b120 <_vfiprintf_r+0x44>
 800b2e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2e4:	e71e      	b.n	800b124 <_vfiprintf_r+0x48>
 800b2e6:	ab03      	add	r3, sp, #12
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	4b05      	ldr	r3, [pc, #20]	@ (800b304 <_vfiprintf_r+0x228>)
 800b2ee:	a904      	add	r1, sp, #16
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	f000 f879 	bl	800b3e8 <_printf_i>
 800b2f6:	e7e4      	b.n	800b2c2 <_vfiprintf_r+0x1e6>
 800b2f8:	0800b954 	.word	0x0800b954
 800b2fc:	0800b95e 	.word	0x0800b95e
 800b300:	00000000 	.word	0x00000000
 800b304:	0800b0b7 	.word	0x0800b0b7
 800b308:	0800b95a 	.word	0x0800b95a

0800b30c <_printf_common>:
 800b30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b310:	4616      	mov	r6, r2
 800b312:	4698      	mov	r8, r3
 800b314:	688a      	ldr	r2, [r1, #8]
 800b316:	690b      	ldr	r3, [r1, #16]
 800b318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b31c:	4293      	cmp	r3, r2
 800b31e:	bfb8      	it	lt
 800b320:	4613      	movlt	r3, r2
 800b322:	6033      	str	r3, [r6, #0]
 800b324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b328:	4607      	mov	r7, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	b10a      	cbz	r2, 800b332 <_printf_common+0x26>
 800b32e:	3301      	adds	r3, #1
 800b330:	6033      	str	r3, [r6, #0]
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	0699      	lsls	r1, r3, #26
 800b336:	bf42      	ittt	mi
 800b338:	6833      	ldrmi	r3, [r6, #0]
 800b33a:	3302      	addmi	r3, #2
 800b33c:	6033      	strmi	r3, [r6, #0]
 800b33e:	6825      	ldr	r5, [r4, #0]
 800b340:	f015 0506 	ands.w	r5, r5, #6
 800b344:	d106      	bne.n	800b354 <_printf_common+0x48>
 800b346:	f104 0a19 	add.w	sl, r4, #25
 800b34a:	68e3      	ldr	r3, [r4, #12]
 800b34c:	6832      	ldr	r2, [r6, #0]
 800b34e:	1a9b      	subs	r3, r3, r2
 800b350:	42ab      	cmp	r3, r5
 800b352:	dc26      	bgt.n	800b3a2 <_printf_common+0x96>
 800b354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b358:	6822      	ldr	r2, [r4, #0]
 800b35a:	3b00      	subs	r3, #0
 800b35c:	bf18      	it	ne
 800b35e:	2301      	movne	r3, #1
 800b360:	0692      	lsls	r2, r2, #26
 800b362:	d42b      	bmi.n	800b3bc <_printf_common+0xb0>
 800b364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b368:	4641      	mov	r1, r8
 800b36a:	4638      	mov	r0, r7
 800b36c:	47c8      	blx	r9
 800b36e:	3001      	adds	r0, #1
 800b370:	d01e      	beq.n	800b3b0 <_printf_common+0xa4>
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	6922      	ldr	r2, [r4, #16]
 800b376:	f003 0306 	and.w	r3, r3, #6
 800b37a:	2b04      	cmp	r3, #4
 800b37c:	bf02      	ittt	eq
 800b37e:	68e5      	ldreq	r5, [r4, #12]
 800b380:	6833      	ldreq	r3, [r6, #0]
 800b382:	1aed      	subeq	r5, r5, r3
 800b384:	68a3      	ldr	r3, [r4, #8]
 800b386:	bf0c      	ite	eq
 800b388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b38c:	2500      	movne	r5, #0
 800b38e:	4293      	cmp	r3, r2
 800b390:	bfc4      	itt	gt
 800b392:	1a9b      	subgt	r3, r3, r2
 800b394:	18ed      	addgt	r5, r5, r3
 800b396:	2600      	movs	r6, #0
 800b398:	341a      	adds	r4, #26
 800b39a:	42b5      	cmp	r5, r6
 800b39c:	d11a      	bne.n	800b3d4 <_printf_common+0xc8>
 800b39e:	2000      	movs	r0, #0
 800b3a0:	e008      	b.n	800b3b4 <_printf_common+0xa8>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4652      	mov	r2, sl
 800b3a6:	4641      	mov	r1, r8
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	47c8      	blx	r9
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	d103      	bne.n	800b3b8 <_printf_common+0xac>
 800b3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	e7c6      	b.n	800b34a <_printf_common+0x3e>
 800b3bc:	18e1      	adds	r1, r4, r3
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	2030      	movs	r0, #48	@ 0x30
 800b3c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3c6:	4422      	add	r2, r4
 800b3c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3d0:	3302      	adds	r3, #2
 800b3d2:	e7c7      	b.n	800b364 <_printf_common+0x58>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4622      	mov	r2, r4
 800b3d8:	4641      	mov	r1, r8
 800b3da:	4638      	mov	r0, r7
 800b3dc:	47c8      	blx	r9
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d0e6      	beq.n	800b3b0 <_printf_common+0xa4>
 800b3e2:	3601      	adds	r6, #1
 800b3e4:	e7d9      	b.n	800b39a <_printf_common+0x8e>
	...

0800b3e8 <_printf_i>:
 800b3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ec:	7e0f      	ldrb	r7, [r1, #24]
 800b3ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3f0:	2f78      	cmp	r7, #120	@ 0x78
 800b3f2:	4691      	mov	r9, r2
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	469a      	mov	sl, r3
 800b3fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3fe:	d807      	bhi.n	800b410 <_printf_i+0x28>
 800b400:	2f62      	cmp	r7, #98	@ 0x62
 800b402:	d80a      	bhi.n	800b41a <_printf_i+0x32>
 800b404:	2f00      	cmp	r7, #0
 800b406:	f000 80d2 	beq.w	800b5ae <_printf_i+0x1c6>
 800b40a:	2f58      	cmp	r7, #88	@ 0x58
 800b40c:	f000 80b9 	beq.w	800b582 <_printf_i+0x19a>
 800b410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b418:	e03a      	b.n	800b490 <_printf_i+0xa8>
 800b41a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b41e:	2b15      	cmp	r3, #21
 800b420:	d8f6      	bhi.n	800b410 <_printf_i+0x28>
 800b422:	a101      	add	r1, pc, #4	@ (adr r1, 800b428 <_printf_i+0x40>)
 800b424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b428:	0800b481 	.word	0x0800b481
 800b42c:	0800b495 	.word	0x0800b495
 800b430:	0800b411 	.word	0x0800b411
 800b434:	0800b411 	.word	0x0800b411
 800b438:	0800b411 	.word	0x0800b411
 800b43c:	0800b411 	.word	0x0800b411
 800b440:	0800b495 	.word	0x0800b495
 800b444:	0800b411 	.word	0x0800b411
 800b448:	0800b411 	.word	0x0800b411
 800b44c:	0800b411 	.word	0x0800b411
 800b450:	0800b411 	.word	0x0800b411
 800b454:	0800b595 	.word	0x0800b595
 800b458:	0800b4bf 	.word	0x0800b4bf
 800b45c:	0800b54f 	.word	0x0800b54f
 800b460:	0800b411 	.word	0x0800b411
 800b464:	0800b411 	.word	0x0800b411
 800b468:	0800b5b7 	.word	0x0800b5b7
 800b46c:	0800b411 	.word	0x0800b411
 800b470:	0800b4bf 	.word	0x0800b4bf
 800b474:	0800b411 	.word	0x0800b411
 800b478:	0800b411 	.word	0x0800b411
 800b47c:	0800b557 	.word	0x0800b557
 800b480:	6833      	ldr	r3, [r6, #0]
 800b482:	1d1a      	adds	r2, r3, #4
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6032      	str	r2, [r6, #0]
 800b488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b48c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b490:	2301      	movs	r3, #1
 800b492:	e09d      	b.n	800b5d0 <_printf_i+0x1e8>
 800b494:	6833      	ldr	r3, [r6, #0]
 800b496:	6820      	ldr	r0, [r4, #0]
 800b498:	1d19      	adds	r1, r3, #4
 800b49a:	6031      	str	r1, [r6, #0]
 800b49c:	0606      	lsls	r6, r0, #24
 800b49e:	d501      	bpl.n	800b4a4 <_printf_i+0xbc>
 800b4a0:	681d      	ldr	r5, [r3, #0]
 800b4a2:	e003      	b.n	800b4ac <_printf_i+0xc4>
 800b4a4:	0645      	lsls	r5, r0, #25
 800b4a6:	d5fb      	bpl.n	800b4a0 <_printf_i+0xb8>
 800b4a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4ac:	2d00      	cmp	r5, #0
 800b4ae:	da03      	bge.n	800b4b8 <_printf_i+0xd0>
 800b4b0:	232d      	movs	r3, #45	@ 0x2d
 800b4b2:	426d      	negs	r5, r5
 800b4b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4b8:	4859      	ldr	r0, [pc, #356]	@ (800b620 <_printf_i+0x238>)
 800b4ba:	230a      	movs	r3, #10
 800b4bc:	e011      	b.n	800b4e2 <_printf_i+0xfa>
 800b4be:	6821      	ldr	r1, [r4, #0]
 800b4c0:	6833      	ldr	r3, [r6, #0]
 800b4c2:	0608      	lsls	r0, r1, #24
 800b4c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4c8:	d402      	bmi.n	800b4d0 <_printf_i+0xe8>
 800b4ca:	0649      	lsls	r1, r1, #25
 800b4cc:	bf48      	it	mi
 800b4ce:	b2ad      	uxthmi	r5, r5
 800b4d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4d2:	4853      	ldr	r0, [pc, #332]	@ (800b620 <_printf_i+0x238>)
 800b4d4:	6033      	str	r3, [r6, #0]
 800b4d6:	bf14      	ite	ne
 800b4d8:	230a      	movne	r3, #10
 800b4da:	2308      	moveq	r3, #8
 800b4dc:	2100      	movs	r1, #0
 800b4de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4e2:	6866      	ldr	r6, [r4, #4]
 800b4e4:	60a6      	str	r6, [r4, #8]
 800b4e6:	2e00      	cmp	r6, #0
 800b4e8:	bfa2      	ittt	ge
 800b4ea:	6821      	ldrge	r1, [r4, #0]
 800b4ec:	f021 0104 	bicge.w	r1, r1, #4
 800b4f0:	6021      	strge	r1, [r4, #0]
 800b4f2:	b90d      	cbnz	r5, 800b4f8 <_printf_i+0x110>
 800b4f4:	2e00      	cmp	r6, #0
 800b4f6:	d04b      	beq.n	800b590 <_printf_i+0x1a8>
 800b4f8:	4616      	mov	r6, r2
 800b4fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4fe:	fb03 5711 	mls	r7, r3, r1, r5
 800b502:	5dc7      	ldrb	r7, [r0, r7]
 800b504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b508:	462f      	mov	r7, r5
 800b50a:	42bb      	cmp	r3, r7
 800b50c:	460d      	mov	r5, r1
 800b50e:	d9f4      	bls.n	800b4fa <_printf_i+0x112>
 800b510:	2b08      	cmp	r3, #8
 800b512:	d10b      	bne.n	800b52c <_printf_i+0x144>
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	07df      	lsls	r7, r3, #31
 800b518:	d508      	bpl.n	800b52c <_printf_i+0x144>
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	6861      	ldr	r1, [r4, #4]
 800b51e:	4299      	cmp	r1, r3
 800b520:	bfde      	ittt	le
 800b522:	2330      	movle	r3, #48	@ 0x30
 800b524:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b52c:	1b92      	subs	r2, r2, r6
 800b52e:	6122      	str	r2, [r4, #16]
 800b530:	f8cd a000 	str.w	sl, [sp]
 800b534:	464b      	mov	r3, r9
 800b536:	aa03      	add	r2, sp, #12
 800b538:	4621      	mov	r1, r4
 800b53a:	4640      	mov	r0, r8
 800b53c:	f7ff fee6 	bl	800b30c <_printf_common>
 800b540:	3001      	adds	r0, #1
 800b542:	d14a      	bne.n	800b5da <_printf_i+0x1f2>
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	b004      	add	sp, #16
 800b54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	f043 0320 	orr.w	r3, r3, #32
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	4833      	ldr	r0, [pc, #204]	@ (800b624 <_printf_i+0x23c>)
 800b558:	2778      	movs	r7, #120	@ 0x78
 800b55a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	6831      	ldr	r1, [r6, #0]
 800b562:	061f      	lsls	r7, r3, #24
 800b564:	f851 5b04 	ldr.w	r5, [r1], #4
 800b568:	d402      	bmi.n	800b570 <_printf_i+0x188>
 800b56a:	065f      	lsls	r7, r3, #25
 800b56c:	bf48      	it	mi
 800b56e:	b2ad      	uxthmi	r5, r5
 800b570:	6031      	str	r1, [r6, #0]
 800b572:	07d9      	lsls	r1, r3, #31
 800b574:	bf44      	itt	mi
 800b576:	f043 0320 	orrmi.w	r3, r3, #32
 800b57a:	6023      	strmi	r3, [r4, #0]
 800b57c:	b11d      	cbz	r5, 800b586 <_printf_i+0x19e>
 800b57e:	2310      	movs	r3, #16
 800b580:	e7ac      	b.n	800b4dc <_printf_i+0xf4>
 800b582:	4827      	ldr	r0, [pc, #156]	@ (800b620 <_printf_i+0x238>)
 800b584:	e7e9      	b.n	800b55a <_printf_i+0x172>
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	f023 0320 	bic.w	r3, r3, #32
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	e7f6      	b.n	800b57e <_printf_i+0x196>
 800b590:	4616      	mov	r6, r2
 800b592:	e7bd      	b.n	800b510 <_printf_i+0x128>
 800b594:	6833      	ldr	r3, [r6, #0]
 800b596:	6825      	ldr	r5, [r4, #0]
 800b598:	6961      	ldr	r1, [r4, #20]
 800b59a:	1d18      	adds	r0, r3, #4
 800b59c:	6030      	str	r0, [r6, #0]
 800b59e:	062e      	lsls	r6, r5, #24
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	d501      	bpl.n	800b5a8 <_printf_i+0x1c0>
 800b5a4:	6019      	str	r1, [r3, #0]
 800b5a6:	e002      	b.n	800b5ae <_printf_i+0x1c6>
 800b5a8:	0668      	lsls	r0, r5, #25
 800b5aa:	d5fb      	bpl.n	800b5a4 <_printf_i+0x1bc>
 800b5ac:	8019      	strh	r1, [r3, #0]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	6123      	str	r3, [r4, #16]
 800b5b2:	4616      	mov	r6, r2
 800b5b4:	e7bc      	b.n	800b530 <_printf_i+0x148>
 800b5b6:	6833      	ldr	r3, [r6, #0]
 800b5b8:	1d1a      	adds	r2, r3, #4
 800b5ba:	6032      	str	r2, [r6, #0]
 800b5bc:	681e      	ldr	r6, [r3, #0]
 800b5be:	6862      	ldr	r2, [r4, #4]
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7f4 fe14 	bl	80001f0 <memchr>
 800b5c8:	b108      	cbz	r0, 800b5ce <_printf_i+0x1e6>
 800b5ca:	1b80      	subs	r0, r0, r6
 800b5cc:	6060      	str	r0, [r4, #4]
 800b5ce:	6863      	ldr	r3, [r4, #4]
 800b5d0:	6123      	str	r3, [r4, #16]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5d8:	e7aa      	b.n	800b530 <_printf_i+0x148>
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	4632      	mov	r2, r6
 800b5de:	4649      	mov	r1, r9
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	47d0      	blx	sl
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	d0ad      	beq.n	800b544 <_printf_i+0x15c>
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	079b      	lsls	r3, r3, #30
 800b5ec:	d413      	bmi.n	800b616 <_printf_i+0x22e>
 800b5ee:	68e0      	ldr	r0, [r4, #12]
 800b5f0:	9b03      	ldr	r3, [sp, #12]
 800b5f2:	4298      	cmp	r0, r3
 800b5f4:	bfb8      	it	lt
 800b5f6:	4618      	movlt	r0, r3
 800b5f8:	e7a6      	b.n	800b548 <_printf_i+0x160>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	4649      	mov	r1, r9
 800b600:	4640      	mov	r0, r8
 800b602:	47d0      	blx	sl
 800b604:	3001      	adds	r0, #1
 800b606:	d09d      	beq.n	800b544 <_printf_i+0x15c>
 800b608:	3501      	adds	r5, #1
 800b60a:	68e3      	ldr	r3, [r4, #12]
 800b60c:	9903      	ldr	r1, [sp, #12]
 800b60e:	1a5b      	subs	r3, r3, r1
 800b610:	42ab      	cmp	r3, r5
 800b612:	dcf2      	bgt.n	800b5fa <_printf_i+0x212>
 800b614:	e7eb      	b.n	800b5ee <_printf_i+0x206>
 800b616:	2500      	movs	r5, #0
 800b618:	f104 0619 	add.w	r6, r4, #25
 800b61c:	e7f5      	b.n	800b60a <_printf_i+0x222>
 800b61e:	bf00      	nop
 800b620:	0800b965 	.word	0x0800b965
 800b624:	0800b976 	.word	0x0800b976

0800b628 <__sflush_r>:
 800b628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b630:	0716      	lsls	r6, r2, #28
 800b632:	4605      	mov	r5, r0
 800b634:	460c      	mov	r4, r1
 800b636:	d454      	bmi.n	800b6e2 <__sflush_r+0xba>
 800b638:	684b      	ldr	r3, [r1, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	dc02      	bgt.n	800b644 <__sflush_r+0x1c>
 800b63e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b640:	2b00      	cmp	r3, #0
 800b642:	dd48      	ble.n	800b6d6 <__sflush_r+0xae>
 800b644:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b646:	2e00      	cmp	r6, #0
 800b648:	d045      	beq.n	800b6d6 <__sflush_r+0xae>
 800b64a:	2300      	movs	r3, #0
 800b64c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b650:	682f      	ldr	r7, [r5, #0]
 800b652:	6a21      	ldr	r1, [r4, #32]
 800b654:	602b      	str	r3, [r5, #0]
 800b656:	d030      	beq.n	800b6ba <__sflush_r+0x92>
 800b658:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	0759      	lsls	r1, r3, #29
 800b65e:	d505      	bpl.n	800b66c <__sflush_r+0x44>
 800b660:	6863      	ldr	r3, [r4, #4]
 800b662:	1ad2      	subs	r2, r2, r3
 800b664:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b666:	b10b      	cbz	r3, 800b66c <__sflush_r+0x44>
 800b668:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b66a:	1ad2      	subs	r2, r2, r3
 800b66c:	2300      	movs	r3, #0
 800b66e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b670:	6a21      	ldr	r1, [r4, #32]
 800b672:	4628      	mov	r0, r5
 800b674:	47b0      	blx	r6
 800b676:	1c43      	adds	r3, r0, #1
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	d106      	bne.n	800b68a <__sflush_r+0x62>
 800b67c:	6829      	ldr	r1, [r5, #0]
 800b67e:	291d      	cmp	r1, #29
 800b680:	d82b      	bhi.n	800b6da <__sflush_r+0xb2>
 800b682:	4a2a      	ldr	r2, [pc, #168]	@ (800b72c <__sflush_r+0x104>)
 800b684:	410a      	asrs	r2, r1
 800b686:	07d6      	lsls	r6, r2, #31
 800b688:	d427      	bmi.n	800b6da <__sflush_r+0xb2>
 800b68a:	2200      	movs	r2, #0
 800b68c:	6062      	str	r2, [r4, #4]
 800b68e:	04d9      	lsls	r1, r3, #19
 800b690:	6922      	ldr	r2, [r4, #16]
 800b692:	6022      	str	r2, [r4, #0]
 800b694:	d504      	bpl.n	800b6a0 <__sflush_r+0x78>
 800b696:	1c42      	adds	r2, r0, #1
 800b698:	d101      	bne.n	800b69e <__sflush_r+0x76>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	b903      	cbnz	r3, 800b6a0 <__sflush_r+0x78>
 800b69e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6a2:	602f      	str	r7, [r5, #0]
 800b6a4:	b1b9      	cbz	r1, 800b6d6 <__sflush_r+0xae>
 800b6a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6aa:	4299      	cmp	r1, r3
 800b6ac:	d002      	beq.n	800b6b4 <__sflush_r+0x8c>
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7ff fbf2 	bl	800ae98 <_free_r>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6b8:	e00d      	b.n	800b6d6 <__sflush_r+0xae>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b0      	blx	r6
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	1c50      	adds	r0, r2, #1
 800b6c4:	d1c9      	bne.n	800b65a <__sflush_r+0x32>
 800b6c6:	682b      	ldr	r3, [r5, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0c6      	beq.n	800b65a <__sflush_r+0x32>
 800b6cc:	2b1d      	cmp	r3, #29
 800b6ce:	d001      	beq.n	800b6d4 <__sflush_r+0xac>
 800b6d0:	2b16      	cmp	r3, #22
 800b6d2:	d11e      	bne.n	800b712 <__sflush_r+0xea>
 800b6d4:	602f      	str	r7, [r5, #0]
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	e022      	b.n	800b720 <__sflush_r+0xf8>
 800b6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6de:	b21b      	sxth	r3, r3
 800b6e0:	e01b      	b.n	800b71a <__sflush_r+0xf2>
 800b6e2:	690f      	ldr	r7, [r1, #16]
 800b6e4:	2f00      	cmp	r7, #0
 800b6e6:	d0f6      	beq.n	800b6d6 <__sflush_r+0xae>
 800b6e8:	0793      	lsls	r3, r2, #30
 800b6ea:	680e      	ldr	r6, [r1, #0]
 800b6ec:	bf08      	it	eq
 800b6ee:	694b      	ldreq	r3, [r1, #20]
 800b6f0:	600f      	str	r7, [r1, #0]
 800b6f2:	bf18      	it	ne
 800b6f4:	2300      	movne	r3, #0
 800b6f6:	eba6 0807 	sub.w	r8, r6, r7
 800b6fa:	608b      	str	r3, [r1, #8]
 800b6fc:	f1b8 0f00 	cmp.w	r8, #0
 800b700:	dde9      	ble.n	800b6d6 <__sflush_r+0xae>
 800b702:	6a21      	ldr	r1, [r4, #32]
 800b704:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b706:	4643      	mov	r3, r8
 800b708:	463a      	mov	r2, r7
 800b70a:	4628      	mov	r0, r5
 800b70c:	47b0      	blx	r6
 800b70e:	2800      	cmp	r0, #0
 800b710:	dc08      	bgt.n	800b724 <__sflush_r+0xfc>
 800b712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b71a:	81a3      	strh	r3, [r4, #12]
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b724:	4407      	add	r7, r0
 800b726:	eba8 0800 	sub.w	r8, r8, r0
 800b72a:	e7e7      	b.n	800b6fc <__sflush_r+0xd4>
 800b72c:	dfbffffe 	.word	0xdfbffffe

0800b730 <_fflush_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	690b      	ldr	r3, [r1, #16]
 800b734:	4605      	mov	r5, r0
 800b736:	460c      	mov	r4, r1
 800b738:	b913      	cbnz	r3, 800b740 <_fflush_r+0x10>
 800b73a:	2500      	movs	r5, #0
 800b73c:	4628      	mov	r0, r5
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	b118      	cbz	r0, 800b74a <_fflush_r+0x1a>
 800b742:	6a03      	ldr	r3, [r0, #32]
 800b744:	b90b      	cbnz	r3, 800b74a <_fflush_r+0x1a>
 800b746:	f7ff f99f 	bl	800aa88 <__sinit>
 800b74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0f3      	beq.n	800b73a <_fflush_r+0xa>
 800b752:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b754:	07d0      	lsls	r0, r2, #31
 800b756:	d404      	bmi.n	800b762 <_fflush_r+0x32>
 800b758:	0599      	lsls	r1, r3, #22
 800b75a:	d402      	bmi.n	800b762 <_fflush_r+0x32>
 800b75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b75e:	f7ff fb8a 	bl	800ae76 <__retarget_lock_acquire_recursive>
 800b762:	4628      	mov	r0, r5
 800b764:	4621      	mov	r1, r4
 800b766:	f7ff ff5f 	bl	800b628 <__sflush_r>
 800b76a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b76c:	07da      	lsls	r2, r3, #31
 800b76e:	4605      	mov	r5, r0
 800b770:	d4e4      	bmi.n	800b73c <_fflush_r+0xc>
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	059b      	lsls	r3, r3, #22
 800b776:	d4e1      	bmi.n	800b73c <_fflush_r+0xc>
 800b778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b77a:	f7ff fb7d 	bl	800ae78 <__retarget_lock_release_recursive>
 800b77e:	e7dd      	b.n	800b73c <_fflush_r+0xc>

0800b780 <__swhatbuf_r>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	460c      	mov	r4, r1
 800b784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b788:	2900      	cmp	r1, #0
 800b78a:	b096      	sub	sp, #88	@ 0x58
 800b78c:	4615      	mov	r5, r2
 800b78e:	461e      	mov	r6, r3
 800b790:	da0d      	bge.n	800b7ae <__swhatbuf_r+0x2e>
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b798:	f04f 0100 	mov.w	r1, #0
 800b79c:	bf14      	ite	ne
 800b79e:	2340      	movne	r3, #64	@ 0x40
 800b7a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	6031      	str	r1, [r6, #0]
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	b016      	add	sp, #88	@ 0x58
 800b7ac:	bd70      	pop	{r4, r5, r6, pc}
 800b7ae:	466a      	mov	r2, sp
 800b7b0:	f000 f848 	bl	800b844 <_fstat_r>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	dbec      	blt.n	800b792 <__swhatbuf_r+0x12>
 800b7b8:	9901      	ldr	r1, [sp, #4]
 800b7ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7c2:	4259      	negs	r1, r3
 800b7c4:	4159      	adcs	r1, r3
 800b7c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7ca:	e7eb      	b.n	800b7a4 <__swhatbuf_r+0x24>

0800b7cc <__smakebuf_r>:
 800b7cc:	898b      	ldrh	r3, [r1, #12]
 800b7ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7d0:	079d      	lsls	r5, r3, #30
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	d507      	bpl.n	800b7e8 <__smakebuf_r+0x1c>
 800b7d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	6123      	str	r3, [r4, #16]
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	6163      	str	r3, [r4, #20]
 800b7e4:	b003      	add	sp, #12
 800b7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e8:	ab01      	add	r3, sp, #4
 800b7ea:	466a      	mov	r2, sp
 800b7ec:	f7ff ffc8 	bl	800b780 <__swhatbuf_r>
 800b7f0:	9f00      	ldr	r7, [sp, #0]
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f7ff fbba 	bl	800af70 <_malloc_r>
 800b7fc:	b948      	cbnz	r0, 800b812 <__smakebuf_r+0x46>
 800b7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b802:	059a      	lsls	r2, r3, #22
 800b804:	d4ee      	bmi.n	800b7e4 <__smakebuf_r+0x18>
 800b806:	f023 0303 	bic.w	r3, r3, #3
 800b80a:	f043 0302 	orr.w	r3, r3, #2
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	e7e2      	b.n	800b7d8 <__smakebuf_r+0xc>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	6020      	str	r0, [r4, #0]
 800b816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b81a:	81a3      	strh	r3, [r4, #12]
 800b81c:	9b01      	ldr	r3, [sp, #4]
 800b81e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b822:	b15b      	cbz	r3, 800b83c <__smakebuf_r+0x70>
 800b824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f81d 	bl	800b868 <_isatty_r>
 800b82e:	b128      	cbz	r0, 800b83c <__smakebuf_r+0x70>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f023 0303 	bic.w	r3, r3, #3
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	431d      	orrs	r5, r3
 800b840:	81a5      	strh	r5, [r4, #12]
 800b842:	e7cf      	b.n	800b7e4 <__smakebuf_r+0x18>

0800b844 <_fstat_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d07      	ldr	r5, [pc, #28]	@ (800b864 <_fstat_r+0x20>)
 800b848:	2300      	movs	r3, #0
 800b84a:	4604      	mov	r4, r0
 800b84c:	4608      	mov	r0, r1
 800b84e:	4611      	mov	r1, r2
 800b850:	602b      	str	r3, [r5, #0]
 800b852:	f7f5 fd32 	bl	80012ba <_fstat>
 800b856:	1c43      	adds	r3, r0, #1
 800b858:	d102      	bne.n	800b860 <_fstat_r+0x1c>
 800b85a:	682b      	ldr	r3, [r5, #0]
 800b85c:	b103      	cbz	r3, 800b860 <_fstat_r+0x1c>
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	bd38      	pop	{r3, r4, r5, pc}
 800b862:	bf00      	nop
 800b864:	20008820 	.word	0x20008820

0800b868 <_isatty_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d06      	ldr	r5, [pc, #24]	@ (800b884 <_isatty_r+0x1c>)
 800b86c:	2300      	movs	r3, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	602b      	str	r3, [r5, #0]
 800b874:	f7f5 fd31 	bl	80012da <_isatty>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_isatty_r+0x1a>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_isatty_r+0x1a>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	20008820 	.word	0x20008820

0800b888 <_sbrk_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d06      	ldr	r5, [pc, #24]	@ (800b8a4 <_sbrk_r+0x1c>)
 800b88c:	2300      	movs	r3, #0
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	602b      	str	r3, [r5, #0]
 800b894:	f7f5 fd3a 	bl	800130c <_sbrk>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_sbrk_r+0x1a>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_sbrk_r+0x1a>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	20008820 	.word	0x20008820

0800b8a8 <_init>:
 800b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8aa:	bf00      	nop
 800b8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ae:	bc08      	pop	{r3}
 800b8b0:	469e      	mov	lr, r3
 800b8b2:	4770      	bx	lr

0800b8b4 <_fini>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	bf00      	nop
 800b8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ba:	bc08      	pop	{r3}
 800b8bc:	469e      	mov	lr, r3
 800b8be:	4770      	bx	lr
