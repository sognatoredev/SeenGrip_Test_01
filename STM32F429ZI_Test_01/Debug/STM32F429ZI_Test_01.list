
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800aaa8  0800aaa8  0000baa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad74  0800ad74  0000c14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad74  0800ad74  0000bd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad7c  0800ad7c  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad7c  0800ad7c  0000bd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad80  0800ad80  0000bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800ad84  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c14c  2**0
                  CONTENTS
 10 .bss          00003044  2000014c  2000014c  0000c14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003190  20003190  0000c14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018fff  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041f6  00000000  00000000  0002517b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  00029378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff5  00000000  00000000  0002a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028867  00000000  00000000  0002b855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e654  00000000  00000000  000540bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dece3  00000000  00000000  00072710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001513f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a28  00000000  00000000  00151438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00156e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aa90 	.word	0x0800aa90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000150 	.word	0x20000150
 80001ec:	0800aa90 	.word	0x0800aa90

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_DMA_Init+0x78>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a1a      	ldr	r2, [pc, #104]	@ (8000608 <MX_DMA_Init+0x78>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_DMA_Init+0x78>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_DMA_Init+0x78>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 fa41 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005d8:	200c      	movs	r0, #12
 80005da:	f001 fa5a 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2010      	movs	r0, #16
 80005e4:	f001 fa39 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f001 fa52 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	203a      	movs	r0, #58	@ 0x3a
 80005f4:	f001 fa31 	bl	8001a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f001 fa4a 	bl	8001a92 <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a2f      	ldr	r2, [pc, #188]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a28      	ldr	r2, [pc, #160]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000698:	481b      	ldr	r0, [pc, #108]	@ (8000708 <MX_GPIO_Init+0xfc>)
 800069a:	f001 ffc7 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800069e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <MX_GPIO_Init+0x100>)
 80006b6:	f001 fe0d 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80006ba:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <MX_GPIO_Init+0xfc>)
 80006d4:	f001 fdfe 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_GPIO_Init+0x100>)
 80006f6:	f001 fded 	bl	80022d4 <HAL_GPIO_Init>

}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	@ 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400
 800070c:	40020800 	.word	0x40020800

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f001 f81a 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f866 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff76 	bl	800060c <MX_GPIO_Init>
  MX_DMA_Init();
 8000720:	f7ff ff36 	bl	8000590 <MX_DMA_Init>
  MX_TIM1_Init();
 8000724:	f000 fa9a 	bl	8000c5c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000728:	f000 fc12 	bl	8000f50 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800072c:	f000 fc3c 	bl	8000fa8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000730:	f008 ffb8 	bl	80096a4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000734:	f000 fbe0 	bl	8000ef8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000738:	f000 fae0 	bl	8000cfc <MX_TIM2_Init>
  MX_TIM8_Init();
 800073c:	f000 fb2a 	bl	8000d94 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buffer, UART_RX_BUFFER_MAX_SIZE);
 8000740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000744:	4920      	ldr	r1, [pc, #128]	@ (80007c8 <main+0xb8>)
 8000746:	4821      	ldr	r0, [pc, #132]	@ (80007cc <main+0xbc>)
 8000748:	f004 fbba 	bl	8004ec0 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_buffer, UART_RX_BUFFER_MAX_SIZE);
 800074c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000750:	491f      	ldr	r1, [pc, #124]	@ (80007d0 <main+0xc0>)
 8000752:	4820      	ldr	r0, [pc, #128]	@ (80007d4 <main+0xc4>)
 8000754:	f004 fbb4 	bl	8004ec0 <HAL_UARTEx_ReceiveToIdle_DMA>
  // __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <main+0xc8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <main+0xc8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f022 0208 	bic.w	r2, r2, #8
 8000766:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_TC);
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <main+0xc8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <main+0xc8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f022 0210 	bic.w	r2, r2, #16
 8000776:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <main+0xcc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <main+0xcc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f022 0208 	bic.w	r2, r2, #8
 8000786:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <main+0xcc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <main+0xcc>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f022 0210 	bic.w	r2, r2, #16
 8000796:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 8000798:	4811      	ldr	r0, [pc, #68]	@ (80007e0 <main+0xd0>)
 800079a:	f003 ff1b 	bl	80045d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800079e:	4811      	ldr	r0, [pc, #68]	@ (80007e4 <main+0xd4>)
 80007a0:	f003 ff18 	bl	80045d4 <HAL_TIM_Base_Start_IT>
  
  HAL_Delay(50);
 80007a4:	2032      	movs	r0, #50	@ 0x32
 80007a6:	f001 f843 	bl	8001830 <HAL_Delay>
  //HAL_Delay(3000);
  BootMessagePrint();
 80007aa:	f000 fd83 	bl	80012b4 <BootMessagePrint>
  GetClockSourcePrint();
 80007ae:	f000 fdef 	bl	8001390 <GetClockSourcePrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 80007b2:	f000 fe93 	bl	80014dc <GPIO_Proc>
    USB_CDC_Proc();
 80007b6:	f000 fef9 	bl	80015ac <USB_CDC_Proc>
    USB_CDC_RX_Proc();
 80007ba:	f000 ff09 	bl	80015d0 <USB_CDC_RX_Proc>
    UART1_RX_Proc();
 80007be:	f000 fe93 	bl	80014e8 <UART1_RX_Proc>
  {
 80007c2:	bf00      	nop
 80007c4:	e7f5      	b.n	80007b2 <main+0xa2>
 80007c6:	bf00      	nop
 80007c8:	20001058 	.word	0x20001058
 80007cc:	2000028c 	.word	0x2000028c
 80007d0:	20000c58 	.word	0x20000c58
 80007d4:	20000244 	.word	0x20000244
 80007d8:	2000037c 	.word	0x2000037c
 80007dc:	2000031c 	.word	0x2000031c
 80007e0:	2000016c 	.word	0x2000016c
 80007e4:	200001fc 	.word	0x200001fc

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	@ 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	@ 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f009 fca4 	bl	800a144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <SystemClock_Config+0xd8>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	4a2a      	ldr	r2, [pc, #168]	@ (80008c0 <SystemClock_Config+0xd8>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	@ 0x40
 800081c:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <SystemClock_Config+0xd8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <SystemClock_Config+0xdc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a24      	ldr	r2, [pc, #144]	@ (80008c4 <SystemClock_Config+0xdc>)
 8000832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b22      	ldr	r3, [pc, #136]	@ (80008c4 <SystemClock_Config+0xdc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800085c:	23a8      	movs	r3, #168	@ 0xa8
 800085e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000864:	2307      	movs	r3, #7
 8000866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f003 f961 	bl	8003b34 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000878:	f000 f826 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2302      	movs	r3, #2
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000888:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800088e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2105      	movs	r1, #5
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fbc2 	bl	8004024 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008a6:	f000 f80f 	bl	80008c8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80008b0:	2001      	movs	r0, #1
 80008b2:	f003 fc9d 	bl	80041f0 <HAL_RCC_MCOConfig>
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	@ 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <Error_Handler+0x8>

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <HAL_MspInit+0x4c>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	@ 0x40
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <NMI_Handler+0x4>

0800092c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <MemManage_Handler+0x4>

0800093c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <UsageFault_Handler+0x4>

0800094c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 ff39 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <DMA1_Stream1_IRQHandler+0x10>)
 800098a:	f001 fa39 	bl	8001e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200003dc 	.word	0x200003dc

08000998 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <DMA1_Stream5_IRQHandler+0x10>)
 800099e:	f001 fa2f 	bl	8001e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000037c 	.word	0x2000037c

080009ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009b2:	f003 fe7f 	bl	80046b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000016c 	.word	0x2000016c

080009c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <TIM2_IRQHandler+0x10>)
 80009c6:	f003 fe75 	bl	80046b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200001b4 	.word	0x200001b4

080009d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <USART1_IRQHandler+0x10>)
 80009da:	f004 facf 	bl	8004f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000244 	.word	0x20000244

080009e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <USART2_IRQHandler+0x10>)
 80009ee:	f004 fac5 	bl	8004f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000028c 	.word	0x2000028c

080009fc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000a00:	4802      	ldr	r0, [pc, #8]	@ (8000a0c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000a02:	f003 fe57 	bl	80046b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200001fc 	.word	0x200001fc

08000a10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <DMA2_Stream2_IRQHandler+0x10>)
 8000a16:	f001 f9f3 	bl	8001e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000031c 	.word	0x2000031c

08000a24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <OTG_FS_IRQHandler+0x10>)
 8000a2a:	f001 ff76 	bl	800291a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20002944 	.word	0x20002944

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  if (htim->Instance == TIM1) // 1ms
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10a      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
    TIM1_CNT_1++;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a52:	6013      	str	r3, [r2, #0]
    TIM1_CNT_2++;
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	4a16      	ldr	r2, [pc, #88]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a5c:	6013      	str	r3, [r2, #0]
  else if (htim->Instance == TIM8)
  {
    TIM8_CNT_1++;
    TIM8_CNT_2++;
  }
}
 8000a5e:	e01e      	b.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x66>
  else if (htim->Instance == TIM2) // 100us
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a68:	d10a      	bne.n	8000a80 <HAL_TIM_PeriodElapsedCallback+0x48>
    TIM2_CNT_1++;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a11      	ldr	r2, [pc, #68]	@ (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a72:	6013      	str	r3, [r2, #0]
    TIM2_CNT_2++;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4a10      	ldr	r2, [pc, #64]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a7c:	6013      	str	r3, [r2, #0]
}
 8000a7e:	e00e      	b.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x66>
  else if (htim->Instance == TIM8)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d109      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x66>
    TIM8_CNT_1++;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a92:	6013      	str	r3, [r2, #0]
    TIM8_CNT_2++;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a9c:	6013      	str	r3, [r2, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	2000043c 	.word	0x2000043c
 8000ab4:	20000440 	.word	0x20000440
 8000ab8:	20000444 	.word	0x20000444
 8000abc:	20000448 	.word	0x20000448
 8000ac0:	40010400 	.word	0x40010400
 8000ac4:	2000044c 	.word	0x2000044c
 8000ac8:	20000450 	.word	0x20000450

08000acc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b093      	sub	sp, #76	@ 0x4c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  UNUSED(Size);
  uint16_t tmp_cnt = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

  // Uart_Rx_IdlelineSize = Size;

  Uart_Rx_IdlelineIT_Flag = 0x01;
 8000ade:	4b34      	ldr	r3, [pc, #208]	@ (8000bb0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]

  if (huart->Instance == USART1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a32      	ldr	r2, [pc, #200]	@ (8000bb4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12a      	bne.n	8000b44 <HAL_UARTEx_RxEventCallback+0x78>
  {
    Uart1_Rx_IdlelineSize = Size;
 8000aee:	4a32      	ldr	r2, [pc, #200]	@ (8000bb8 <HAL_UARTEx_RxEventCallback+0xec>)
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	8013      	strh	r3, [r2, #0]
    uart1_rx_flag = 1;
 8000af4:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <HAL_UARTEx_RxEventCallback+0xf0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
    
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_buffer, UART_RX_BUFFER_MAX_SIZE);

		// __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
		// __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    // __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	330c      	adds	r3, #12
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b1a:	e853 3f00 	ldrex	r3, [r3]
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8000b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	330c      	adds	r3, #12
 8000b2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000b30:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b34:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000b36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b38:	e841 2300 	strex	r3, r2, [r1]
 8000b3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8000b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e5      	bne.n	8000b10 <HAL_UARTEx_RxEventCallback+0x44>
  }
  if (huart->Instance == USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc0 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12a      	bne.n	8000ba4 <HAL_UARTEx_RxEventCallback+0xd8>
  {
    Uart2_Rx_IdlelineSize = Size;
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc4 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	8013      	strh	r3, [r2, #0]
    uart2_rx_flag = 1;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
    
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buffer, UART_RX_BUFFER_MAX_SIZE);

		// __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    // __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	330c      	adds	r3, #12
 8000b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	e853 3f00 	ldrex	r3, [r3]
 8000b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	330c      	adds	r3, #12
 8000b8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b90:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b94:	6a39      	ldr	r1, [r7, #32]
 8000b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b98:	e841 2300 	strex	r3, r2, [r1]
 8000b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1e5      	bne.n	8000b70 <HAL_UARTEx_RxEventCallback+0xa4>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	374c      	adds	r7, #76	@ 0x4c
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	2000145e 	.word	0x2000145e
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	2000145a 	.word	0x2000145a
 8000bbc:	20001458 	.word	0x20001458
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	2000145c 	.word	0x2000145c
 8000bc8:	20001459 	.word	0x20001459

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f009 fad0 	bl	800a1a0 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20030000 	.word	0x20030000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	20000168 	.word	0x20000168
 8000c34:	20003190 	.word	0x20003190

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf8 <MX_TIM1_Init+0x9c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c8e:	22a7      	movs	r2, #167	@ 0xa7
 8000c90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c98:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca4:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000ca6:	f003 fc45 	bl	8004534 <HAL_TIM_Base_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cb0:	f7ff fe0a 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000cc2:	f003 fde7 	bl	8004894 <HAL_TIM_ConfigClockSource>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ccc:	f7ff fdfc 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000cde:	f004 f80f 	bl	8004d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ce8:	f7ff fdee 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000016c 	.word	0x2000016c
 8000cf8:	40010000 	.word	0x40010000

08000cfc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d22:	2263      	movs	r2, #99	@ 0x63
 8000d24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84-1;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d2e:	2253      	movs	r2, #83	@ 0x53
 8000d30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d3e:	4814      	ldr	r0, [pc, #80]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d40:	f003 fbf8 	bl	8004534 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f7ff fdbd 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d5c:	f003 fd9a 	bl	8004894 <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000d66:	f7ff fdaf 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d78:	f003 ffc2 	bl	8004d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000d82:	f7ff fda1 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001b4 	.word	0x200001b4

08000d94 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000db2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e30 <MX_TIM8_Init+0x9c>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 100-1;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000db8:	2263      	movs	r2, #99	@ 0x63
 8000dba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 168-1;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000dc4:	22a7      	movs	r2, #167	@ 0xa7
 8000dc6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dda:	4814      	ldr	r0, [pc, #80]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000ddc:	f003 fbaa 	bl	8004534 <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 8000de6:	f7ff fd6f 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000df8:	f003 fd4c 	bl	8004894 <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 8000e02:	f7ff fd61 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <MX_TIM8_Init+0x98>)
 8000e14:	f003 ff74 	bl	8004d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000e1e:	f7ff fd53 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200001fc 	.word	0x200001fc
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a2a      	ldr	r2, [pc, #168]	@ (8000eec <HAL_TIM_Base_MspInit+0xb8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d116      	bne.n	8000e74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b29      	ldr	r3, [pc, #164]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	4a28      	ldr	r2, [pc, #160]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e56:	4b26      	ldr	r3, [pc, #152]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2019      	movs	r0, #25
 8000e68:	f000 fdf7 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e6c:	2019      	movs	r0, #25
 8000e6e:	f000 fe10 	bl	8001a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000e72:	e036      	b.n	8000ee2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e7c:	d116      	bne.n	8000eac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	201c      	movs	r0, #28
 8000ea0:	f000 fddb 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ea4:	201c      	movs	r0, #28
 8000ea6:	f000 fdf4 	bl	8001a92 <HAL_NVIC_EnableIRQ>
}
 8000eaa:	e01a      	b.n	8000ee2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM8)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a10      	ldr	r2, [pc, #64]	@ (8000ef4 <HAL_TIM_Base_MspInit+0xc0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d115      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	202c      	movs	r0, #44	@ 0x2c
 8000ed8:	f000 fdbf 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000edc:	202c      	movs	r0, #44	@ 0x2c
 8000ede:	f000 fdd8 	bl	8001a92 <HAL_NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000efe:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <MX_USART1_UART_Init+0x54>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f04:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000f08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f10:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f34:	f003 ff74 	bl	8004e20 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000f3e:	f7ff fcc3 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000244 	.word	0x20000244
 8000f4c:	40011000 	.word	0x40011000

08000f50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f56:	4a13      	ldr	r2, [pc, #76]	@ (8000fa4 <MX_USART2_UART_Init+0x54>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f5c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f68:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f8c:	f003 ff48 	bl	8004e20 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000f96:	f7ff fc97 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000028c 	.word	0x2000028c
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <MX_USART3_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	f003 ff1e 	bl	8004e20 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f7ff fc6d 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002d4 	.word	0x200002d4
 8000ff8:	40004800 	.word	0x40004800

08000ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	@ 0x38
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a9a      	ldr	r2, [pc, #616]	@ (8001284 <HAL_UART_MspInit+0x288>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d164      	bne.n	80010e8 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
 8001022:	4b99      	ldr	r3, [pc, #612]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a98      	ldr	r2, [pc, #608]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b96      	ldr	r3, [pc, #600]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	4b92      	ldr	r3, [pc, #584]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a91      	ldr	r2, [pc, #580]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b8f      	ldr	r3, [pc, #572]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001056:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001068:	2307      	movs	r3, #7
 800106a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4886      	ldr	r0, [pc, #536]	@ (800128c <HAL_UART_MspInit+0x290>)
 8001074:	f001 f92e 	bl	80022d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001078:	4b85      	ldr	r3, [pc, #532]	@ (8001290 <HAL_UART_MspInit+0x294>)
 800107a:	4a86      	ldr	r2, [pc, #536]	@ (8001294 <HAL_UART_MspInit+0x298>)
 800107c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800107e:	4b84      	ldr	r3, [pc, #528]	@ (8001290 <HAL_UART_MspInit+0x294>)
 8001080:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001084:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001086:	4b82      	ldr	r3, [pc, #520]	@ (8001290 <HAL_UART_MspInit+0x294>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b80      	ldr	r3, [pc, #512]	@ (8001290 <HAL_UART_MspInit+0x294>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b7f      	ldr	r3, [pc, #508]	@ (8001290 <HAL_UART_MspInit+0x294>)
 8001094:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001098:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109a:	4b7d      	ldr	r3, [pc, #500]	@ (8001290 <HAL_UART_MspInit+0x294>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a0:	4b7b      	ldr	r3, [pc, #492]	@ (8001290 <HAL_UART_MspInit+0x294>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001290 <HAL_UART_MspInit+0x294>)
 80010a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ae:	4b78      	ldr	r3, [pc, #480]	@ (8001290 <HAL_UART_MspInit+0x294>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b4:	4b76      	ldr	r3, [pc, #472]	@ (8001290 <HAL_UART_MspInit+0x294>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010ba:	4875      	ldr	r0, [pc, #468]	@ (8001290 <HAL_UART_MspInit+0x294>)
 80010bc:	f000 fd08 	bl	8001ad0 <HAL_DMA_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010c6:	f7ff fbff 	bl	80008c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a70      	ldr	r2, [pc, #448]	@ (8001290 <HAL_UART_MspInit+0x294>)
 80010ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010d0:	4a6f      	ldr	r2, [pc, #444]	@ (8001290 <HAL_UART_MspInit+0x294>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2025      	movs	r0, #37	@ 0x25
 80010dc:	f000 fcbd 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e0:	2025      	movs	r0, #37	@ 0x25
 80010e2:	f000 fcd6 	bl	8001a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010e6:	e0c8      	b.n	800127a <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001298 <HAL_UART_MspInit+0x29c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d163      	bne.n	80011ba <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	4b64      	ldr	r3, [pc, #400]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	4a63      	ldr	r2, [pc, #396]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001100:	6413      	str	r3, [r2, #64]	@ 0x40
 8001102:	4b61      	ldr	r3, [pc, #388]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	4b5d      	ldr	r3, [pc, #372]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a5c      	ldr	r2, [pc, #368]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b5a      	ldr	r3, [pc, #360]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800112a:	230c      	movs	r3, #12
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113a:	2307      	movs	r3, #7
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	4851      	ldr	r0, [pc, #324]	@ (800128c <HAL_UART_MspInit+0x290>)
 8001146:	f001 f8c5 	bl	80022d4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800114a:	4b54      	ldr	r3, [pc, #336]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 800114c:	4a54      	ldr	r2, [pc, #336]	@ (80012a0 <HAL_UART_MspInit+0x2a4>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001150:	4b52      	ldr	r3, [pc, #328]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 8001152:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001156:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001158:	4b50      	ldr	r3, [pc, #320]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800115e:	4b4f      	ldr	r3, [pc, #316]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001164:	4b4d      	ldr	r3, [pc, #308]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 8001166:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800116a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116c:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001172:	4b4a      	ldr	r3, [pc, #296]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001178:	4b48      	ldr	r3, [pc, #288]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 800117a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800117e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b46      	ldr	r3, [pc, #280]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001186:	4b45      	ldr	r3, [pc, #276]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800118c:	4843      	ldr	r0, [pc, #268]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 800118e:	f000 fc9f 	bl	8001ad0 <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001198:	f7ff fb96 	bl	80008c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a3f      	ldr	r2, [pc, #252]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 80011a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011a2:	4a3e      	ldr	r2, [pc, #248]	@ (800129c <HAL_UART_MspInit+0x2a0>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2026      	movs	r0, #38	@ 0x26
 80011ae:	f000 fc54 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b2:	2026      	movs	r0, #38	@ 0x26
 80011b4:	f000 fc6d 	bl	8001a92 <HAL_NVIC_EnableIRQ>
}
 80011b8:	e05f      	b.n	800127a <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a39      	ldr	r2, [pc, #228]	@ (80012a4 <HAL_UART_MspInit+0x2a8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d15a      	bne.n	800127a <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 80011ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e8:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <HAL_UART_MspInit+0x28c>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800120e:	2307      	movs	r3, #7
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4823      	ldr	r0, [pc, #140]	@ (80012a8 <HAL_UART_MspInit+0x2ac>)
 800121a:	f001 f85b 	bl	80022d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001220:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <HAL_UART_MspInit+0x2b4>)
 8001222:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001224:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001226:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800122a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 800123a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800123e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800125e:	4813      	ldr	r0, [pc, #76]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001260:	f000 fc36 	bl	8001ad0 <HAL_DMA_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_UART_MspInit+0x272>
      Error_Handler();
 800126a:	f7ff fb2d 	bl	80008c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a0e      	ldr	r2, [pc, #56]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001272:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <HAL_UART_MspInit+0x2b0>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800127a:	bf00      	nop
 800127c:	3738      	adds	r7, #56	@ 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40011000 	.word	0x40011000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	2000031c 	.word	0x2000031c
 8001294:	40026440 	.word	0x40026440
 8001298:	40004400 	.word	0x40004400
 800129c:	2000037c 	.word	0x2000037c
 80012a0:	40026088 	.word	0x40026088
 80012a4:	40004800 	.word	0x40004800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	200003dc 	.word	0x200003dc
 80012b0:	40026028 	.word	0x40026028

080012b4 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 80012b8:	492a      	ldr	r1, [pc, #168]	@ (8001364 <BootMessagePrint+0xb0>)
 80012ba:	482b      	ldr	r0, [pc, #172]	@ (8001368 <BootMessagePrint+0xb4>)
 80012bc:	f008 ff22 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80012c0:	4829      	ldr	r0, [pc, #164]	@ (8001368 <BootMessagePrint+0xb4>)
 80012c2:	f7fe ff95 	bl	80001f0 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	4826      	ldr	r0, [pc, #152]	@ (8001368 <BootMessagePrint+0xb4>)
 80012ce:	f000 f8df 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " Project Name        : %s\r\n", PROJECT_NAME );
 80012d2:	4a26      	ldr	r2, [pc, #152]	@ (800136c <BootMessagePrint+0xb8>)
 80012d4:	4926      	ldr	r1, [pc, #152]	@ (8001370 <BootMessagePrint+0xbc>)
 80012d6:	4824      	ldr	r0, [pc, #144]	@ (8001368 <BootMessagePrint+0xb4>)
 80012d8:	f008 ff14 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80012dc:	4822      	ldr	r0, [pc, #136]	@ (8001368 <BootMessagePrint+0xb4>)
 80012de:	f7fe ff87 	bl	80001f0 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	481f      	ldr	r0, [pc, #124]	@ (8001368 <BootMessagePrint+0xb4>)
 80012ea:	f000 f8d1 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HW VERSION        : %s\r\n", STR_HW_VER );
 80012ee:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <BootMessagePrint+0xc0>)
 80012f0:	4921      	ldr	r1, [pc, #132]	@ (8001378 <BootMessagePrint+0xc4>)
 80012f2:	481d      	ldr	r0, [pc, #116]	@ (8001368 <BootMessagePrint+0xb4>)
 80012f4:	f008 ff06 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80012f8:	481b      	ldr	r0, [pc, #108]	@ (8001368 <BootMessagePrint+0xb4>)
 80012fa:	f7fe ff79 	bl	80001f0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29b      	uxth	r3, r3
 8001302:	4619      	mov	r1, r3
 8001304:	4818      	ldr	r0, [pc, #96]	@ (8001368 <BootMessagePrint+0xb4>)
 8001306:	f000 f8c3 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - FW VERSION        : %s\r\n", STR_FW_VER );
 800130a:	4a1c      	ldr	r2, [pc, #112]	@ (800137c <BootMessagePrint+0xc8>)
 800130c:	491c      	ldr	r1, [pc, #112]	@ (8001380 <BootMessagePrint+0xcc>)
 800130e:	4816      	ldr	r0, [pc, #88]	@ (8001368 <BootMessagePrint+0xb4>)
 8001310:	f008 fef8 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001314:	4814      	ldr	r0, [pc, #80]	@ (8001368 <BootMessagePrint+0xb4>)
 8001316:	f7fe ff6b 	bl	80001f0 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	b29b      	uxth	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	4811      	ldr	r0, [pc, #68]	@ (8001368 <BootMessagePrint+0xb4>)
 8001322:	f000 f8b5 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <BootMessagePrint+0xd0>)
 8001328:	4a17      	ldr	r2, [pc, #92]	@ (8001388 <BootMessagePrint+0xd4>)
 800132a:	4918      	ldr	r1, [pc, #96]	@ (800138c <BootMessagePrint+0xd8>)
 800132c:	480e      	ldr	r0, [pc, #56]	@ (8001368 <BootMessagePrint+0xb4>)
 800132e:	f008 fee9 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <BootMessagePrint+0xb4>)
 8001334:	f7fe ff5c 	bl	80001f0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29b      	uxth	r3, r3
 800133c:	4619      	mov	r1, r3
 800133e:	480a      	ldr	r0, [pc, #40]	@ (8001368 <BootMessagePrint+0xb4>)
 8001340:	f000 f8a6 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 8001344:	4907      	ldr	r1, [pc, #28]	@ (8001364 <BootMessagePrint+0xb0>)
 8001346:	4808      	ldr	r0, [pc, #32]	@ (8001368 <BootMessagePrint+0xb4>)
 8001348:	f008 fedc 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800134c:	4806      	ldr	r0, [pc, #24]	@ (8001368 <BootMessagePrint+0xb4>)
 800134e:	f7fe ff4f 	bl	80001f0 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29b      	uxth	r3, r3
 8001356:	4619      	mov	r1, r3
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <BootMessagePrint+0xb4>)
 800135a:	f000 f899 	bl	8001490 <User_CDC_Transmit_FS>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	0800aaa8 	.word	0x0800aaa8
 8001368:	20000854 	.word	0x20000854
 800136c:	0800aad8 	.word	0x0800aad8
 8001370:	0800aaec 	.word	0x0800aaec
 8001374:	0800ab08 	.word	0x0800ab08
 8001378:	0800ab10 	.word	0x0800ab10
 800137c:	0800ab2c 	.word	0x0800ab2c
 8001380:	0800ab40 	.word	0x0800ab40
 8001384:	0800ab5c 	.word	0x0800ab5c
 8001388:	0800ab68 	.word	0x0800ab68
 800138c:	0800ab74 	.word	0x0800ab74

08001390 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 8001394:	4937      	ldr	r1, [pc, #220]	@ (8001474 <GetClockSourcePrint+0xe4>)
 8001396:	4838      	ldr	r0, [pc, #224]	@ (8001478 <GetClockSourcePrint+0xe8>)
 8001398:	f008 feb4 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800139c:	4836      	ldr	r0, [pc, #216]	@ (8001478 <GetClockSourcePrint+0xe8>)
 800139e:	f7fe ff27 	bl	80001f0 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	4833      	ldr	r0, [pc, #204]	@ (8001478 <GetClockSourcePrint+0xe8>)
 80013aa:	f000 f871 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 80013ae:	f002 ff87 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a31      	ldr	r2, [pc, #196]	@ (800147c <GetClockSourcePrint+0xec>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	461a      	mov	r2, r3
 80013be:	4930      	ldr	r1, [pc, #192]	@ (8001480 <GetClockSourcePrint+0xf0>)
 80013c0:	482d      	ldr	r0, [pc, #180]	@ (8001478 <GetClockSourcePrint+0xe8>)
 80013c2:	f008 fe9f 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80013c6:	482c      	ldr	r0, [pc, #176]	@ (8001478 <GetClockSourcePrint+0xe8>)
 80013c8:	f7fe ff12 	bl	80001f0 <strlen>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4619      	mov	r1, r3
 80013d2:	4829      	ldr	r0, [pc, #164]	@ (8001478 <GetClockSourcePrint+0xe8>)
 80013d4:	f000 f85c 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80013d8:	f003 f878 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 80013dc:	4603      	mov	r3, r0
 80013de:	4a27      	ldr	r2, [pc, #156]	@ (800147c <GetClockSourcePrint+0xec>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	461a      	mov	r2, r3
 80013e8:	4926      	ldr	r1, [pc, #152]	@ (8001484 <GetClockSourcePrint+0xf4>)
 80013ea:	4823      	ldr	r0, [pc, #140]	@ (8001478 <GetClockSourcePrint+0xe8>)
 80013ec:	f008 fe8a 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80013f0:	4821      	ldr	r0, [pc, #132]	@ (8001478 <GetClockSourcePrint+0xe8>)
 80013f2:	f7fe fefd 	bl	80001f0 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	481e      	ldr	r0, [pc, #120]	@ (8001478 <GetClockSourcePrint+0xe8>)
 80013fe:	f000 f847 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001402:	f003 f86f 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 8001406:	4603      	mov	r3, r0
 8001408:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <GetClockSourcePrint+0xec>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	461a      	mov	r2, r3
 8001412:	491d      	ldr	r1, [pc, #116]	@ (8001488 <GetClockSourcePrint+0xf8>)
 8001414:	4818      	ldr	r0, [pc, #96]	@ (8001478 <GetClockSourcePrint+0xe8>)
 8001416:	f008 fe75 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800141a:	4817      	ldr	r0, [pc, #92]	@ (8001478 <GetClockSourcePrint+0xe8>)
 800141c:	f7fe fee8 	bl	80001f0 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29b      	uxth	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	4814      	ldr	r0, [pc, #80]	@ (8001478 <GetClockSourcePrint+0xe8>)
 8001428:	f000 f832 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800142c:	f003 f86e 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8001430:	4603      	mov	r3, r0
 8001432:	4a12      	ldr	r2, [pc, #72]	@ (800147c <GetClockSourcePrint+0xec>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	0c9b      	lsrs	r3, r3, #18
 800143a:	461a      	mov	r2, r3
 800143c:	4913      	ldr	r1, [pc, #76]	@ (800148c <GetClockSourcePrint+0xfc>)
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <GetClockSourcePrint+0xe8>)
 8001440:	f008 fe60 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <GetClockSourcePrint+0xe8>)
 8001446:	f7fe fed3 	bl	80001f0 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29b      	uxth	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <GetClockSourcePrint+0xe8>)
 8001452:	f000 f81d 	bl	8001490 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 8001456:	4907      	ldr	r1, [pc, #28]	@ (8001474 <GetClockSourcePrint+0xe4>)
 8001458:	4807      	ldr	r0, [pc, #28]	@ (8001478 <GetClockSourcePrint+0xe8>)
 800145a:	f008 fe53 	bl	800a104 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <GetClockSourcePrint+0xe8>)
 8001460:	f7fe fec6 	bl	80001f0 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29b      	uxth	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <GetClockSourcePrint+0xe8>)
 800146c:	f000 f810 	bl	8001490 <User_CDC_Transmit_FS>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0800aaa8 	.word	0x0800aaa8
 8001478:	20000854 	.word	0x20000854
 800147c:	431bde83 	.word	0x431bde83
 8001480:	0800ab94 	.word	0x0800ab94
 8001484:	0800abc4 	.word	0x0800abc4
 8001488:	0800abf4 	.word	0x0800abf4
 800148c:	0800ac24 	.word	0x0800ac24

08001490 <User_CDC_Transmit_FS>:

void User_CDC_Transmit_FS(uint8_t * pdata, uint16_t datalength)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
    // while(CDC_Transmit_FS((uint8_t *) pdata, datalength) == USBD_BUSY);
    CDC_Transmit_FS((uint8_t *) pdata, datalength);
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f008 f9cb 	bl	800983c <CDC_Transmit_FS>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <LED_Proc+0x24>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014bc:	d307      	bcc.n	80014ce <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 80014be:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <LED_Proc+0x24>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 80014c4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80014c8:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <LED_Proc+0x28>)
 80014ca:	f001 f8c8 	bl	800265e <HAL_GPIO_TogglePin>
    }    
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000043c 	.word	0x2000043c
 80014d8:	40020400 	.word	0x40020400

080014dc <GPIO_Proc>:

void GPIO_Proc (void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
    LED_Proc();
 80014e0:	f7ff ffe6 	bl	80014b0 <LED_Proc>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <UART1_RX_Proc>:
        Uart_Rx_IdlelineIT_Flag = NULL;
    }
}
#else
void UART1_RX_Proc (void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
    // if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)))
    if ( Uart_Rx_IdlelineIT_Flag != NULL )
 80014ec:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <UART1_RX_Proc+0xa0>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d047      	beq.n	8001584 <UART1_RX_Proc+0x9c>
    {
        #if 1
        if (uart1_rx_flag != NULL)
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <UART1_RX_Proc+0xa4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01e      	beq.n	800153a <UART1_RX_Proc+0x52>
        {
            uart1_rx_flag = NULL;
 80014fc:	4b23      	ldr	r3, [pc, #140]	@ (800158c <UART1_RX_Proc+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]

            __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8001502:	4b23      	ldr	r3, [pc, #140]	@ (8001590 <UART1_RX_Proc+0xa8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <UART1_RX_Proc+0xa8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
            hdma_usart1_rx.Instance->NDTR = UART_RX_BUFFER_MAX_SIZE; // rx buff index init
 8001512:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <UART1_RX_Proc+0xa8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151a:	605a      	str	r2, [r3, #4]
            __HAL_DMA_ENABLE(&hdma_usart1_rx);
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <UART1_RX_Proc+0xa8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <UART1_RX_Proc+0xa8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

            // sprintf(USB_CdcTxBuffer_FS, &uart1_rx_buffer);
            User_CDC_Transmit_FS((uint8_t *) uart1_rx_buffer, Uart1_Rx_IdlelineSize);
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <UART1_RX_Proc+0xac>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4819      	ldr	r0, [pc, #100]	@ (8001598 <UART1_RX_Proc+0xb0>)
 8001534:	f7ff ffac 	bl	8001490 <User_CDC_Transmit_FS>
 8001538:	e021      	b.n	800157e <UART1_RX_Proc+0x96>
            // User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));

            // memset(uart2_rx_buffer, 0, Uart_Rx_IdlelineSize);
            // Uart_Rx_IdlelineSize = 0;
        }
        else if ( uart2_rx_flag != NULL)
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <UART1_RX_Proc+0xb4>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01d      	beq.n	800157e <UART1_RX_Proc+0x96>
        {
            uart2_rx_flag = NULL;
 8001542:	4b16      	ldr	r3, [pc, #88]	@ (800159c <UART1_RX_Proc+0xb4>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]

            __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <UART1_RX_Proc+0xb8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <UART1_RX_Proc+0xb8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
            hdma_usart2_rx.Instance->NDTR = UART_RX_BUFFER_MAX_SIZE; // rx buff index init
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <UART1_RX_Proc+0xb8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001560:	605a      	str	r2, [r3, #4]
            __HAL_DMA_ENABLE(&hdma_usart2_rx);
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <UART1_RX_Proc+0xb8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <UART1_RX_Proc+0xb8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]

            // sprintf(USB_CdcTxBuffer_FS, &uart2_rx_buffer);
            // memcpy(USB_CdcTxBuffer_FS, uart2_rx_buffer, Uart_Rx_IdlelineSize);
            // User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, Uart_Rx_IdlelineSize);
            User_CDC_Transmit_FS((uint8_t *) uart2_rx_buffer, Uart2_Rx_IdlelineSize);
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <UART1_RX_Proc+0xbc>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	480b      	ldr	r0, [pc, #44]	@ (80015a8 <UART1_RX_Proc+0xc0>)
 800157a:	f7ff ff89 	bl	8001490 <User_CDC_Transmit_FS>
        
        }
        #else
        #endif

        Uart_Rx_IdlelineIT_Flag = NULL;
 800157e:	4b02      	ldr	r3, [pc, #8]	@ (8001588 <UART1_RX_Proc+0xa0>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    }
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000145e 	.word	0x2000145e
 800158c:	20001458 	.word	0x20001458
 8001590:	2000031c 	.word	0x2000031c
 8001594:	2000145a 	.word	0x2000145a
 8001598:	20000c58 	.word	0x20000c58
 800159c:	20001459 	.word	0x20001459
 80015a0:	2000037c 	.word	0x2000037c
 80015a4:	2000145c 	.word	0x2000145c
 80015a8:	20001058 	.word	0x20001058

080015ac <USB_CDC_Proc>:
/*----------------------------------------------------------------------------*/
static uint16_t count = 0;

/* USER CODE BEGIN 1 */
void USB_CDC_Proc (void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
    #if 1
    if (TIM1_CNT_2 >= 1000)
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <USB_CDC_Proc+0x20>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015b8:	d302      	bcc.n	80015c0 <USB_CDC_Proc+0x14>
    {
        TIM1_CNT_2 = 0;
 80015ba:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <USB_CDC_Proc+0x20>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
        CDC_Transmit_FS(USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
    }
    #endif
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000440 	.word	0x20000440

080015d0 <USB_CDC_RX_Proc>:

void USB_CDC_RX_Proc(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    if (USB_CdcRxBuffer_FS_cnt != NULL)
 80015d4:	4b3d      	ldr	r3, [pc, #244]	@ (80016cc <USB_CDC_RX_Proc+0xfc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d075      	beq.n	80016c8 <USB_CDC_RX_Proc+0xf8>
    {
        if (!strncmp("RXBUF ALL PRINT", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 80015dc:	4b3b      	ldr	r3, [pc, #236]	@ (80016cc <USB_CDC_RX_Proc+0xfc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3b02      	subs	r3, #2
 80015e2:	461a      	mov	r2, r3
 80015e4:	493a      	ldr	r1, [pc, #232]	@ (80016d0 <USB_CDC_RX_Proc+0x100>)
 80015e6:	483b      	ldr	r0, [pc, #236]	@ (80016d4 <USB_CDC_RX_Proc+0x104>)
 80015e8:	f008 fdb4 	bl	800a154 <strncmp>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <USB_CDC_RX_Proc+0x3e>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB ALL\r\n");
 80015f2:	4939      	ldr	r1, [pc, #228]	@ (80016d8 <USB_CDC_RX_Proc+0x108>)
 80015f4:	4839      	ldr	r0, [pc, #228]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 80015f6:	f008 fd85 	bl	800a104 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80015fa:	4838      	ldr	r0, [pc, #224]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 80015fc:	f7fe fdf8 	bl	80001f0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29b      	uxth	r3, r3
 8001604:	4619      	mov	r1, r3
 8001606:	4835      	ldr	r0, [pc, #212]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 8001608:	f7ff ff42 	bl	8001490 <User_CDC_Transmit_FS>
 800160c:	e052      	b.n	80016b4 <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("RXBUF CLEAR", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 800160e:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <USB_CDC_RX_Proc+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3b02      	subs	r3, #2
 8001614:	461a      	mov	r2, r3
 8001616:	492e      	ldr	r1, [pc, #184]	@ (80016d0 <USB_CDC_RX_Proc+0x100>)
 8001618:	4831      	ldr	r0, [pc, #196]	@ (80016e0 <USB_CDC_RX_Proc+0x110>)
 800161a:	f008 fd9b 	bl	800a154 <strncmp>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10d      	bne.n	8001640 <USB_CDC_RX_Proc+0x70>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB RX Buffer Clear\r\n");
 8001624:	492f      	ldr	r1, [pc, #188]	@ (80016e4 <USB_CDC_RX_Proc+0x114>)
 8001626:	482d      	ldr	r0, [pc, #180]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 8001628:	f008 fd6c 	bl	800a104 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800162c:	482b      	ldr	r0, [pc, #172]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 800162e:	f7fe fddf 	bl	80001f0 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	b29b      	uxth	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	4828      	ldr	r0, [pc, #160]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 800163a:	f7ff ff29 	bl	8001490 <User_CDC_Transmit_FS>
 800163e:	e039      	b.n	80016b4 <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("SYSTEM RESET", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <USB_CDC_RX_Proc+0xfc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3b02      	subs	r3, #2
 8001646:	461a      	mov	r2, r3
 8001648:	4921      	ldr	r1, [pc, #132]	@ (80016d0 <USB_CDC_RX_Proc+0x100>)
 800164a:	4827      	ldr	r0, [pc, #156]	@ (80016e8 <USB_CDC_RX_Proc+0x118>)
 800164c:	f008 fd82 	bl	800a154 <strncmp>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d112      	bne.n	800167c <USB_CDC_RX_Proc+0xac>
        {
            sprintf(USB_CdcTxBuffer_FS, "SYSTEM Reset\r\n");
 8001656:	4925      	ldr	r1, [pc, #148]	@ (80016ec <USB_CDC_RX_Proc+0x11c>)
 8001658:	4820      	ldr	r0, [pc, #128]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 800165a:	f008 fd53 	bl	800a104 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800165e:	481f      	ldr	r0, [pc, #124]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 8001660:	f7fe fdc6 	bl	80001f0 <strlen>
 8001664:	4603      	mov	r3, r0
 8001666:	b29b      	uxth	r3, r3
 8001668:	4619      	mov	r1, r3
 800166a:	481c      	ldr	r0, [pc, #112]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 800166c:	f7ff ff10 	bl	8001490 <User_CDC_Transmit_FS>
            HAL_Delay(100);
 8001670:	2064      	movs	r0, #100	@ 0x64
 8001672:	f000 f8dd 	bl	8001830 <HAL_Delay>
            HAL_NVIC_SystemReset();
 8001676:	f000 fa1a 	bl	8001aae <HAL_NVIC_SystemReset>
 800167a:	e01b      	b.n	80016b4 <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("SYSTEM INFO", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <USB_CDC_RX_Proc+0xfc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3b02      	subs	r3, #2
 8001682:	461a      	mov	r2, r3
 8001684:	4912      	ldr	r1, [pc, #72]	@ (80016d0 <USB_CDC_RX_Proc+0x100>)
 8001686:	481a      	ldr	r0, [pc, #104]	@ (80016f0 <USB_CDC_RX_Proc+0x120>)
 8001688:	f008 fd64 	bl	800a154 <strncmp>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d110      	bne.n	80016b4 <USB_CDC_RX_Proc+0xe4>
        {
            sprintf(USB_CdcTxBuffer_FS, "[ System Infomation ]\r\n");
 8001692:	4918      	ldr	r1, [pc, #96]	@ (80016f4 <USB_CDC_RX_Proc+0x124>)
 8001694:	4811      	ldr	r0, [pc, #68]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 8001696:	f008 fd35 	bl	800a104 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800169a:	4810      	ldr	r0, [pc, #64]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 800169c:	f7fe fda8 	bl	80001f0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <USB_CDC_RX_Proc+0x10c>)
 80016a8:	f7ff fef2 	bl	8001490 <User_CDC_Transmit_FS>

            BootMessagePrint();
 80016ac:	f7ff fe02 	bl	80012b4 <BootMessagePrint>
            GetClockSourcePrint();
 80016b0:	f7ff fe6e 	bl	8001390 <GetClockSourcePrint>
        }

        memset(USB_CdcRxBuffer_FS, 0, USB_CdcRxBuffer_FS_cnt);
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <USB_CDC_RX_Proc+0xfc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <USB_CDC_RX_Proc+0x100>)
 80016be:	f008 fd41 	bl	800a144 <memset>
        USB_CdcRxBuffer_FS_cnt = NULL;
 80016c2:	4b02      	ldr	r3, [pc, #8]	@ (80016cc <USB_CDC_RX_Proc+0xfc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
    }
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000c54 	.word	0x20000c54
 80016d0:	20000454 	.word	0x20000454
 80016d4:	0800ac54 	.word	0x0800ac54
 80016d8:	0800ac64 	.word	0x0800ac64
 80016dc:	20000854 	.word	0x20000854
 80016e0:	0800ac70 	.word	0x0800ac70
 80016e4:	0800ac7c 	.word	0x0800ac7c
 80016e8:	0800ac94 	.word	0x0800ac94
 80016ec:	0800aca4 	.word	0x0800aca4
 80016f0:	0800acb4 	.word	0x0800acb4
 80016f4:	0800acc0 	.word	0x0800acc0

080016f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001730 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016fc:	f7ff fa9c 	bl	8000c38 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	@ (8001738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	@ (8001744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001726:	f008 fd41 	bl	800a1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172a:	f7fe fff1 	bl	8000710 <main>
  bx  lr    
 800172e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001730:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 800173c:	0800ad84 	.word	0x0800ad84
  ldr r2, =_sbss
 8001740:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001744:	20003190 	.word	0x20003190

08001748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <HAL_Init+0x40>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800175c:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_Init+0x40>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	@ (800178c <HAL_Init+0x40>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f965 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff f8a8 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f981 	bl	8001ab6 <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f945 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	20001460 	.word	0x20001460

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20001460 	.word	0x20001460

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff ffee 	bl	8001818 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d005      	beq.n	8001856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_Delay+0x44>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001856:	bf00      	nop
 8001858:	f7ff ffde 	bl	8001818 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8f7      	bhi.n	8001858 <HAL_Delay+0x28>
  {
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	@ (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	@ (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	@ (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	@ 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80019d8:	f3bf 8f4f 	dsb	sy
}
 80019dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <__NVIC_SystemReset+0x24>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019e6:	4904      	ldr	r1, [pc, #16]	@ (80019f8 <__NVIC_SystemReset+0x24>)
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <__NVIC_SystemReset+0x28>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ee:	f3bf 8f4f 	dsb	sy
}
 80019f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <__NVIC_SystemReset+0x20>
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	05fa0004 	.word	0x05fa0004

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff78 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff13 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff28 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff78 	bl	800196c <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff47 	bl	8001918 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff1b 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001ab2:	f7ff ff8f 	bl	80019d4 <__NVIC_SystemReset>

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff9e 	bl	8001a00 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fe9c 	bl	8001818 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e099      	b.n	8001c20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0c:	e00f      	b.n	8001b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0e:	f7ff fe83 	bl	8001818 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d908      	bls.n	8001b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e078      	b.n	8001c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e8      	bne.n	8001b0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_DMA_Init+0x158>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d107      	bne.n	8001b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b90:	4313      	orrs	r3, r2
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f023 0307 	bic.w	r3, r3, #7
 8001bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d117      	bne.n	8001bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fb01 	bl	80021dc <DMA_CheckFifoParam>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e016      	b.n	8001c20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fab8 	bl	8002170 <DMA_CalcBaseAndBitshift>
 8001c00:	4603      	mov	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	223f      	movs	r2, #63	@ 0x3f
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	f010803f 	.word	0xf010803f

08001c2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_DMA_Start_IT+0x26>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e040      	b.n	8001cd4 <HAL_DMA_Start_IT+0xa8>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d12f      	bne.n	8001cc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fa4a 	bl	8002114 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c84:	223f      	movs	r2, #63	@ 0x3f
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0216 	orr.w	r2, r2, #22
 8001c9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0208 	orr.w	r2, r2, #8
 8001cb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e005      	b.n	8001cd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cea:	f7ff fd95 	bl	8001818 <HAL_GetTick>
 8001cee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d008      	beq.n	8001d0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2280      	movs	r2, #128	@ 0x80
 8001d00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e052      	b.n	8001db4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0216 	bic.w	r2, r2, #22
 8001d1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <HAL_DMA_Abort+0x62>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0208 	bic.w	r2, r2, #8
 8001d4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5e:	e013      	b.n	8001d88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d60:	f7ff fd5a 	bl	8001818 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d90c      	bls.n	8001d88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2203      	movs	r2, #3
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e015      	b.n	8001db4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e4      	bne.n	8001d60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9a:	223f      	movs	r2, #63	@ 0x3f
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d004      	beq.n	8001dda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2280      	movs	r2, #128	@ 0x80
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00c      	b.n	8001df4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2205      	movs	r2, #5
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002048 <HAL_DMA_IRQHandler+0x248>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a8e      	ldr	r2, [pc, #568]	@ (800204c <HAL_DMA_IRQHandler+0x24c>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0a9b      	lsrs	r3, r3, #10
 8001e18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01a      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0204 	bic.w	r2, r2, #4
 8001e52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e58:	2208      	movs	r2, #8
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	2201      	movs	r2, #1
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8e:	2201      	movs	r2, #1
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d012      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00b      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	f043 0204 	orr.w	r2, r3, #4
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001edc:	2210      	movs	r2, #16
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d043      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03c      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efa:	2210      	movs	r2, #16
 8001efc:	409a      	lsls	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d018      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d108      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d024      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
 8001f2e:	e01f      	b.n	8001f70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01b      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
 8001f40:	e016      	b.n	8001f70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d107      	bne.n	8001f60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0208 	bic.w	r2, r2, #8
 8001f5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f74:	2220      	movs	r2, #32
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 808f 	beq.w	80020a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8087 	beq.w	80020a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	2220      	movs	r2, #32
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b05      	cmp	r3, #5
 8001fa8:	d136      	bne.n	8002018 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0216 	bic.w	r2, r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_DMA_IRQHandler+0x1da>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0208 	bic.w	r2, r2, #8
 8001fe8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fee:	223f      	movs	r2, #63	@ 0x3f
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800200a:	2b00      	cmp	r3, #0
 800200c:	d07e      	beq.n	800210c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
        }
        return;
 8002016:	e079      	b.n	800210c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01d      	beq.n	8002062 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10d      	bne.n	8002050 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	2b00      	cmp	r3, #0
 800203a:	d031      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
 8002044:	e02c      	b.n	80020a0 <HAL_DMA_IRQHandler+0x2a0>
 8002046:	bf00      	nop
 8002048:	20000000 	.word	0x20000000
 800204c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d023      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e01e      	b.n	80020a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10f      	bne.n	8002090 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0210 	bic.w	r2, r2, #16
 800207e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d032      	beq.n	800210e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d022      	beq.n	80020fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2205      	movs	r2, #5
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	3301      	adds	r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d307      	bcc.n	80020e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f2      	bne.n	80020cc <HAL_DMA_IRQHandler+0x2cc>
 80020e6:	e000      	b.n	80020ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
 800210a:	e000      	b.n	800210e <HAL_DMA_IRQHandler+0x30e>
        return;
 800210c:	bf00      	nop
    }
  }
}
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002130:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b40      	cmp	r3, #64	@ 0x40
 8002140:	d108      	bne.n	8002154 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002152:	e007      	b.n	8002164 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	60da      	str	r2, [r3, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3b10      	subs	r3, #16
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800218a:	4a13      	ldr	r2, [pc, #76]	@ (80021d8 <DMA_CalcBaseAndBitshift+0x68>)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d909      	bls.n	80021b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	1d1a      	adds	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80021b0:	e007      	b.n	80021c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	aaaaaaab 	.word	0xaaaaaaab
 80021d8:	0800ad38 	.word	0x0800ad38

080021dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11f      	bne.n	8002236 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d856      	bhi.n	80022aa <DMA_CheckFifoParam+0xce>
 80021fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <DMA_CheckFifoParam+0x28>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002215 	.word	0x08002215
 8002208:	08002227 	.word	0x08002227
 800220c:	08002215 	.word	0x08002215
 8002210:	080022ab 	.word	0x080022ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d046      	beq.n	80022ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002224:	e043      	b.n	80022ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800222e:	d140      	bne.n	80022b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002234:	e03d      	b.n	80022b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800223e:	d121      	bne.n	8002284 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d837      	bhi.n	80022b6 <DMA_CheckFifoParam+0xda>
 8002246:	a201      	add	r2, pc, #4	@ (adr r2, 800224c <DMA_CheckFifoParam+0x70>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	0800225d 	.word	0x0800225d
 8002250:	08002263 	.word	0x08002263
 8002254:	0800225d 	.word	0x0800225d
 8002258:	08002275 	.word	0x08002275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      break;
 8002260:	e030      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d025      	beq.n	80022ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002272:	e022      	b.n	80022ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800227c:	d11f      	bne.n	80022be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002282:	e01c      	b.n	80022be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d903      	bls.n	8002292 <DMA_CheckFifoParam+0xb6>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d003      	beq.n	8002298 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002290:	e018      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      break;
 8002296:	e015      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      break;
 80022a8:	e00b      	b.n	80022c2 <DMA_CheckFifoParam+0xe6>
      break;
 80022aa:	bf00      	nop
 80022ac:	e00a      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e008      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
 80022b4:	e006      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e004      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e002      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022be:	bf00      	nop
 80022c0:	e000      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
    }
  } 
  
  return status; 
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e177      	b.n	80025e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	f040 8166 	bne.w	80025da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d005      	beq.n	8002326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	2b02      	cmp	r3, #2
 8002324:	d130      	bne.n	8002388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 0201 	and.w	r2, r3, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b03      	cmp	r3, #3
 8002392:	d017      	beq.n	80023c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d123      	bne.n	8002418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	08da      	lsrs	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3208      	adds	r2, #8
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0203 	and.w	r2, r3, #3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80c0 	beq.w	80025da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <HAL_GPIO_Init+0x324>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	4a65      	ldr	r2, [pc, #404]	@ (80025f8 <HAL_GPIO_Init+0x324>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002468:	6453      	str	r3, [r2, #68]	@ 0x44
 800246a:	4b63      	ldr	r3, [pc, #396]	@ (80025f8 <HAL_GPIO_Init+0x324>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002476:	4a61      	ldr	r2, [pc, #388]	@ (80025fc <HAL_GPIO_Init+0x328>)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a58      	ldr	r2, [pc, #352]	@ (8002600 <HAL_GPIO_Init+0x32c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d037      	beq.n	8002512 <HAL_GPIO_Init+0x23e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a57      	ldr	r2, [pc, #348]	@ (8002604 <HAL_GPIO_Init+0x330>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d031      	beq.n	800250e <HAL_GPIO_Init+0x23a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a56      	ldr	r2, [pc, #344]	@ (8002608 <HAL_GPIO_Init+0x334>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d02b      	beq.n	800250a <HAL_GPIO_Init+0x236>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a55      	ldr	r2, [pc, #340]	@ (800260c <HAL_GPIO_Init+0x338>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d025      	beq.n	8002506 <HAL_GPIO_Init+0x232>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a54      	ldr	r2, [pc, #336]	@ (8002610 <HAL_GPIO_Init+0x33c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01f      	beq.n	8002502 <HAL_GPIO_Init+0x22e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a53      	ldr	r2, [pc, #332]	@ (8002614 <HAL_GPIO_Init+0x340>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d019      	beq.n	80024fe <HAL_GPIO_Init+0x22a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_GPIO_Init+0x344>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x226>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a51      	ldr	r2, [pc, #324]	@ (800261c <HAL_GPIO_Init+0x348>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x222>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a50      	ldr	r2, [pc, #320]	@ (8002620 <HAL_GPIO_Init+0x34c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x21e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002624 <HAL_GPIO_Init+0x350>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x21a>
 80024ea:	2309      	movs	r3, #9
 80024ec:	e012      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024ee:	230a      	movs	r3, #10
 80024f0:	e010      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024f2:	2308      	movs	r3, #8
 80024f4:	e00e      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e00c      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024fa:	2306      	movs	r3, #6
 80024fc:	e00a      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024fe:	2305      	movs	r3, #5
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002502:	2304      	movs	r3, #4
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x240>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x240>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	@ (80025fc <HAL_GPIO_Init+0x328>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b3d      	ldr	r3, [pc, #244]	@ (8002628 <HAL_GPIO_Init+0x354>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a34      	ldr	r2, [pc, #208]	@ (8002628 <HAL_GPIO_Init+0x354>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b32      	ldr	r3, [pc, #200]	@ (8002628 <HAL_GPIO_Init+0x354>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a29      	ldr	r2, [pc, #164]	@ (8002628 <HAL_GPIO_Init+0x354>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <HAL_GPIO_Init+0x354>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002628 <HAL_GPIO_Init+0x354>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_GPIO_Init+0x354>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <HAL_GPIO_Init+0x354>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f ae84 	bls.w	80022f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	@ 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40021400 	.word	0x40021400
 8002618:	40021800 	.word	0x40021800
 800261c:	40021c00 	.word	0x40021c00
 8002620:	40022000 	.word	0x40022000
 8002624:	40022400 	.word	0x40022400
 8002628:	40013c00 	.word	0x40013c00

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002648:	e003      	b.n	8002652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002670:	887a      	ldrh	r2, [r7, #2]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4013      	ands	r3, r2
 8002676:	041a      	lsls	r2, r3, #16
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43d9      	mvns	r1, r3
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	400b      	ands	r3, r1
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	619a      	str	r2, [r3, #24]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af02      	add	r7, sp, #8
 8002698:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e101      	b.n	80028a8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f007 fa0c 	bl	8009adc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2203      	movs	r2, #3
 80026c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d2:	d102      	bne.n	80026da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fdef 	bl	80062c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7c1a      	ldrb	r2, [r3, #16]
 80026ec:	f88d 2000 	strb.w	r2, [sp]
 80026f0:	3304      	adds	r3, #4
 80026f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f4:	f003 fcce 	bl	8006094 <USB_CoreInit>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0ce      	b.n	80028a8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fde7 	bl	80062e4 <USB_SetCurrentMode>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0bf      	b.n	80028a8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e04a      	b.n	80027c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	3315      	adds	r3, #21
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3314      	adds	r3, #20
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	b298      	uxth	r0, r3
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	332e      	adds	r3, #46	@ 0x2e
 800276a:	4602      	mov	r2, r0
 800276c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3318      	adds	r3, #24
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	331c      	adds	r3, #28
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3320      	adds	r3, #32
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	3324      	adds	r3, #36	@ 0x24
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	3301      	adds	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	791b      	ldrb	r3, [r3, #4]
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3af      	bcc.n	800272e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e044      	b.n	800285e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	3301      	adds	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	791b      	ldrb	r3, [r3, #4]
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	429a      	cmp	r2, r3
 8002866:	d3b5      	bcc.n	80027d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7c1a      	ldrb	r2, [r3, #16]
 8002870:	f88d 2000 	strb.w	r2, [sp]
 8002874:	3304      	adds	r3, #4
 8002876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002878:	f003 fd80 	bl	800637c <USB_DevInit>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e00c      	b.n	80028a8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f004 fdc4 	bl	800742e <USB_DevDisconnect>

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_PCD_Start+0x1c>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e022      	b.n	8002912 <HAL_PCD_Start+0x62>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fcd1 	bl	80062a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f004 fd72 	bl	80073ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800291a:	b590      	push	{r4, r7, lr}
 800291c:	b08d      	sub	sp, #52	@ 0x34
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f004 fe30 	bl	8007596 <USB_GetMode>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 848c 	bne.w	8003256 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f004 fd94 	bl	8007470 <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8482 	beq.w	8003254 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f004 fd81 	bl	8007470 <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b02      	cmp	r3, #2
 8002976:	d107      	bne.n	8002988 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f002 0202 	and.w	r2, r2, #2
 8002986:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f004 fd6f 	bl	8007470 <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b10      	cmp	r3, #16
 800299a:	d161      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0210 	bic.w	r2, r2, #16
 80029aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	0c5b      	lsrs	r3, r3, #17
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d124      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d035      	beq.n	8002a50 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	6a38      	ldr	r0, [r7, #32]
 80029f8:	f004 fba6 	bl	8007148 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a08:	441a      	add	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a1a:	441a      	add	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	e016      	b.n	8002a50 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	0c5b      	lsrs	r3, r3, #17
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d110      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a34:	2208      	movs	r2, #8
 8002a36:	4619      	mov	r1, r3
 8002a38:	6a38      	ldr	r0, [r7, #32]
 8002a3a:	f004 fb85 	bl	8007148 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4a:	441a      	add	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0210 	orr.w	r2, r2, #16
 8002a5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 fd03 	bl	8007470 <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a74:	f040 80a7 	bne.w	8002bc6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f004 fd08 	bl	8007496 <USB_ReadDevAllOutEpInterrupt>
 8002a86:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a88:	e099      	b.n	8002bbe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 808e 	beq.w	8002bb2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 fd2c 	bl	80074fe <USB_ReadDevOutEPInterrupt>
 8002aa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ac4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fea2 	bl	8003810 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00c      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 ff78 	bl	80039e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b06:	461a      	mov	r2, r3
 8002b08:	2310      	movs	r3, #16
 8002b0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d030      	beq.n	8002b78 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	2b80      	cmp	r3, #128	@ 0x80
 8002b20:	d109      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b34:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	78db      	ldrb	r3, [r3, #3]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d108      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f007 f8c1 	bl	8009ce8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b72:	461a      	mov	r2, r3
 8002b74:	2302      	movs	r3, #2
 8002b76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2320      	movs	r3, #32
 8002b92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002baa:	461a      	mov	r2, r3
 8002bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f af62 	bne.w	8002a8a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 fc50 	bl	8007470 <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bda:	f040 80db 	bne.w	8002d94 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 fc71 	bl	80074ca <USB_ReadDevAllInEpInterrupt>
 8002be8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002bee:	e0cd      	b.n	8002d8c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80c2 	beq.w	8002d80 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 fc97 	bl	800753a <USB_ReadDevInEPInterrupt>
 8002c0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d057      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	2201      	movs	r2, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69f9      	ldr	r1, [r7, #28]
 8002c34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c38:	4013      	ands	r3, r2
 8002c3a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	799b      	ldrb	r3, [r3, #6]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d132      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3320      	adds	r3, #32
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4403      	add	r3, r0
 8002c76:	331c      	adds	r3, #28
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4419      	add	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4403      	add	r3, r0
 8002c8a:	3320      	adds	r3, #32
 8002c8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d113      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x3a2>
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3324      	adds	r3, #36	@ 0x24
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d108      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	f004 fc9e 	bl	80075f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f006 ff8b 	bl	8009bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d16:	461a      	mov	r2, r3
 8002d18:	2340      	movs	r3, #64	@ 0x40
 8002d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d023      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d28:	6a38      	ldr	r0, [r7, #32]
 8002d2a:	f003 fc8b 	bl	8006644 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	3310      	adds	r3, #16
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	78db      	ldrb	r3, [r3, #3]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d108      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f006 ffd8 	bl	8009d0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fcbb 	bl	80036f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f af2e 	bne.w	8002bf0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fb69 	bl	8007470 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002da4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002da8:	d122      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d108      	bne.n	8002dda <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fea2 	bl	8003b1c <HAL_PCDEx_LPM_Callback>
 8002dd8:	e002      	b.n	8002de0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f006 ff76 	bl	8009ccc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 fb3b 	bl	8007470 <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e04:	d112      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f006 ff32 	bl	8009c80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e2a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f004 fb1d 	bl	8007470 <USB_ReadInterrupts>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e40:	f040 80b7 	bne.w	8002fb2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fbf0 	bl	8006644 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e68:	e046      	b.n	8002ef8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e76:	461a      	mov	r2, r3
 8002e78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e8e:	0151      	lsls	r1, r2, #5
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	440a      	add	r2, r1
 8002e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002eb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ec2:	0151      	lsls	r1, r2, #5
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ecc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ed0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee2:	0151      	lsls	r1, r2, #5
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	440a      	add	r2, r1
 8002ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002eec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ef0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	791b      	ldrb	r3, [r3, #4]
 8002efc:	461a      	mov	r2, r3
 8002efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d3b2      	bcc.n	8002e6a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f12:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002f16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7bdb      	ldrb	r3, [r3, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d016      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f30:	f043 030b 	orr.w	r3, r3, #11
 8002f34:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f46:	f043 030b 	orr.w	r3, r3, #11
 8002f4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f4c:	e015      	b.n	8002f7a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f60:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f74:	f043 030b 	orr.w	r3, r3, #11
 8002f78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f88:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f004 fb2b 	bl	80075f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 fa5a 	bl	8007470 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc6:	d123      	bne.n	8003010 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 faf0 	bl	80075b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fbad 	bl	8006736 <USB_GetDevSpeed>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681c      	ldr	r4, [r3, #0]
 8002fe8:	f001 fa70 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 8002fec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f003 f8b1 	bl	800615c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f006 fe17 	bl	8009c2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800300e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f004 fa2b 	bl	8007470 <USB_ReadInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b08      	cmp	r3, #8
 8003022:	d10a      	bne.n	800303a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f006 fdf4 	bl	8009c12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f002 0208 	and.w	r2, r2, #8
 8003038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f004 fa16 	bl	8007470 <USB_ReadInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	2b80      	cmp	r3, #128	@ 0x80
 800304c:	d123      	bne.n	8003096 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305a:	2301      	movs	r3, #1
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
 800305e:	e014      	b.n	800308a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	b2db      	uxtb	r3, r3
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fb08 	bl	8003694 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	3301      	adds	r3, #1
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	791b      	ldrb	r3, [r3, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	4293      	cmp	r3, r2
 8003094:	d3e4      	bcc.n	8003060 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f004 f9e8 	bl	8007470 <USB_ReadInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030aa:	d13c      	bne.n	8003126 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ac:	2301      	movs	r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b0:	e02b      	b.n	800310a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3318      	adds	r3, #24
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d115      	bne.n	8003104 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da12      	bge.n	8003104 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3317      	adds	r3, #23
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fac8 	bl	8003694 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	3301      	adds	r3, #1
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	791b      	ldrb	r3, [r3, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	4293      	cmp	r3, r2
 8003114:	d3cd      	bcc.n	80030b2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f004 f9a0 	bl	8007470 <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003136:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800313a:	d156      	bne.n	80031ea <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003140:	e045      	b.n	80031ce <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d12e      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800316a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	da2b      	bge.n	80031c8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800317c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003180:	429a      	cmp	r2, r3
 8003182:	d121      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10a      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031c4:	6053      	str	r3, [r2, #4]
            break;
 80031c6:	e008      	b.n	80031da <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	3301      	adds	r3, #1
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	791b      	ldrb	r3, [r3, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d3b3      	bcc.n	8003142 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80031e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 f93e 	bl	8007470 <USB_ReadInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fe:	d10a      	bne.n	8003216 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f006 fd95 	bl	8009d30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f004 f928 	bl	8007470 <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b04      	cmp	r3, #4
 8003228:	d115      	bne.n	8003256 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f006 fd85 	bl	8009d4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	e000      	b.n	8003256 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003254:	bf00      	nop
    }
  }
}
 8003256:	3734      	adds	r7, #52	@ 0x34
 8003258:	46bd      	mov	sp, r7
 800325a:	bd90      	pop	{r4, r7, pc}

0800325c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_PCD_SetAddress+0x1a>
 8003272:	2302      	movs	r3, #2
 8003274:	e012      	b.n	800329c <HAL_PCD_SetAddress+0x40>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f004 f887 	bl	80073a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	4608      	mov	r0, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	461a      	mov	r2, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	70fb      	strb	r3, [r7, #3]
 80032b6:	460b      	mov	r3, r1
 80032b8:	803b      	strh	r3, [r7, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da0f      	bge.n	80032ea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 020f 	and.w	r2, r3, #15
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	3310      	adds	r3, #16
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	705a      	strb	r2, [r3, #1]
 80032e8:	e00f      	b.n	800330a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 020f 	and.w	r2, r3, #15
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003316:	883a      	ldrh	r2, [r7, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	78ba      	ldrb	r2, [r7, #2]
 8003320:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	785b      	ldrb	r3, [r3, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003334:	78bb      	ldrb	r3, [r7, #2]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d102      	bne.n	8003340 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_PCD_EP_Open+0xaa>
 800334a:	2302      	movs	r3, #2
 800334c:	e00e      	b.n	800336c <HAL_PCD_EP_Open+0xc8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fa0f 	bl	8006780 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800336a:	7afb      	ldrb	r3, [r7, #11]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003384:	2b00      	cmp	r3, #0
 8003386:	da0f      	bge.n	80033a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 020f 	and.w	r2, r3, #15
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	3310      	adds	r3, #16
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	705a      	strb	r2, [r3, #1]
 80033a6:	e00f      	b.n	80033c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 020f 	and.w	r2, r3, #15
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	3304      	adds	r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_PCD_EP_Close+0x6e>
 80033de:	2302      	movs	r3, #2
 80033e0:	e00e      	b.n	8003400 <HAL_PCD_EP_Close+0x8c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fa4d 	bl	8006890 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	f003 020f 	and.w	r2, r3, #15
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	799b      	ldrb	r3, [r3, #6]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	799b      	ldrb	r3, [r3, #6]
 800346c:	461a      	mov	r2, r3
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	f003 faea 	bl	8006a48 <USB_EPStartXfer>

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 020f 	and.w	r2, r3, #15
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80034a0:	681b      	ldr	r3, [r3, #0]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	460b      	mov	r3, r1
 80034bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	3310      	adds	r3, #16
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4413      	add	r3, r2
 80034d2:	3304      	adds	r3, #4
 80034d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2201      	movs	r2, #1
 80034ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	799b      	ldrb	r3, [r3, #6]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d102      	bne.n	8003508 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	799b      	ldrb	r3, [r3, #6]
 8003510:	461a      	mov	r2, r3
 8003512:	6979      	ldr	r1, [r7, #20]
 8003514:	f003 fa98 	bl	8006a48 <USB_EPStartXfer>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	7912      	ldrb	r2, [r2, #4]
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e04f      	b.n	80035e0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	da0f      	bge.n	8003568 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 020f 	and.w	r2, r3, #15
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	3310      	adds	r3, #16
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	705a      	strb	r2, [r3, #1]
 8003566:	e00d      	b.n	8003584 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_PCD_EP_SetStall+0x82>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e01d      	b.n	80035e0 <HAL_PCD_EP_SetStall+0xbe>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 fe20 	bl	80071f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7999      	ldrb	r1, [r3, #6]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035d0:	461a      	mov	r2, r3
 80035d2:	f004 f811 	bl	80075f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	7912      	ldrb	r2, [r2, #4]
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e042      	b.n	800368c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360a:	2b00      	cmp	r3, #0
 800360c:	da0f      	bge.n	800362e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	3310      	adds	r3, #16
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	705a      	strb	r2, [r3, #1]
 800362c:	e00f      	b.n	800364e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	3304      	adds	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_PCD_EP_ClrStall+0x86>
 800366a:	2302      	movs	r3, #2
 800366c:	e00e      	b.n	800368c <HAL_PCD_EP_ClrStall+0xa4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 fe29 	bl	80072d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	da0c      	bge.n	80036c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	f003 020f 	and.w	r2, r3, #15
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	3310      	adds	r3, #16
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e00c      	b.n	80036dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	f003 020f 	and.w	r2, r3, #15
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	3304      	adds	r3, #4
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68f9      	ldr	r1, [r7, #12]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f003 fc48 	bl	8006f78 <USB_EPStopXfer>
 80036e8:	4603      	mov	r3, r0
 80036ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036ec:	7afb      	ldrb	r3, [r7, #11]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b08a      	sub	sp, #40	@ 0x28
 80036fa:	af02      	add	r7, sp, #8
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	3310      	adds	r3, #16
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	3304      	adds	r3, #4
 800371c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	429a      	cmp	r2, r3
 8003728:	d901      	bls.n	800372e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e06b      	b.n	8003806 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	429a      	cmp	r2, r3
 8003742:	d902      	bls.n	800374a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3303      	adds	r3, #3
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003752:	e02a      	b.n	80037aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	429a      	cmp	r2, r3
 8003768:	d902      	bls.n	8003770 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	3303      	adds	r3, #3
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68d9      	ldr	r1, [r3, #12]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4603      	mov	r3, r0
 800378c:	6978      	ldr	r0, [r7, #20]
 800378e:	f003 fc9d 	bl	80070cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	441a      	add	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	441a      	add	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d809      	bhi.n	80037d4 <PCD_WriteEmptyTxFifo+0xde>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d203      	bcs.n	80037d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1bf      	bne.n	8003754 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d811      	bhi.n	8003804 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	2201      	movs	r2, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	6939      	ldr	r1, [r7, #16]
 80037fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003800:	4013      	ands	r3, r2
 8003802:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	333c      	adds	r3, #60	@ 0x3c
 8003828:	3304      	adds	r3, #4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	799b      	ldrb	r3, [r3, #6]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d17b      	bne.n	800393e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4a61      	ldr	r2, [pc, #388]	@ (80039d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	f240 80b9 	bls.w	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80b3 	beq.w	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003878:	6093      	str	r3, [r2, #8]
 800387a:	e0a7      	b.n	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003892:	461a      	mov	r2, r3
 8003894:	2320      	movs	r3, #32
 8003896:	6093      	str	r3, [r2, #8]
 8003898:	e098      	b.n	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 8093 	bne.w	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	4a4b      	ldr	r2, [pc, #300]	@ (80039d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d90f      	bls.n	80038ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ca:	6093      	str	r3, [r2, #8]
 80038cc:	e07e      	b.n	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	3304      	adds	r3, #4
 80038e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a1a      	ldr	r2, [r3, #32]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	0159      	lsls	r1, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	440b      	add	r3, r1
 80038f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	1ad2      	subs	r2, r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d114      	bne.n	8003930 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003918:	461a      	mov	r2, r3
 800391a:	2101      	movs	r1, #1
 800391c:	f003 fe6c 	bl	80075f8 <USB_EP0_OutStart>
 8003920:	e006      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	441a      	add	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f006 f936 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
 800393c:	e046      	b.n	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	4a26      	ldr	r2, [pc, #152]	@ (80039dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d124      	bne.n	8003990 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395c:	461a      	mov	r2, r3
 800395e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003962:	6093      	str	r3, [r2, #8]
 8003964:	e032      	b.n	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397c:	461a      	mov	r2, r3
 800397e:	2320      	movs	r3, #32
 8003980:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f006 f90d 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
 800398e:	e01d      	b.n	80039cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d114      	bne.n	80039c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039b8:	461a      	mov	r2, r3
 80039ba:	2100      	movs	r1, #0
 80039bc:	f003 fe1c 	bl	80075f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	4619      	mov	r1, r3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f006 f8ee 	bl	8009ba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	4f54300a 	.word	0x4f54300a
 80039dc:	4f54310a 	.word	0x4f54310a

080039e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	333c      	adds	r3, #60	@ 0x3c
 80039f8:	3304      	adds	r3, #4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a15      	ldr	r2, [pc, #84]	@ (8003a68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d90e      	bls.n	8003a34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f006 f8a5 	bl	8009b84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d90c      	bls.n	8003a5c <PCD_EP_OutSetupPacket_int+0x7c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	799b      	ldrb	r3, [r3, #6]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d108      	bne.n	8003a5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a54:	461a      	mov	r2, r3
 8003a56:	2101      	movs	r1, #1
 8003a58:	f003 fdce 	bl	80075f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	4f54300a 	.word	0x4f54300a

08003a6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	70fb      	strb	r3, [r7, #3]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d107      	bne.n	8003a9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a8a:	883b      	ldrh	r3, [r7, #0]
 8003a8c:	0419      	lsls	r1, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a98:	e028      	b.n	8003aec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e00d      	b.n	8003aca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	3340      	adds	r3, #64	@ 0x40
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3ec      	bcc.n	8003aae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ad4:	883b      	ldrh	r3, [r7, #0]
 8003ad6:	0418      	lsls	r0, r3, #16
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	4302      	orrs	r2, r0
 8003ae4:	3340      	adds	r3, #64	@ 0x40
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e267      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d075      	beq.n	8003c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	4b88      	ldr	r3, [pc, #544]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d00c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5e:	4b85      	ldr	r3, [pc, #532]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d112      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b82      	ldr	r3, [pc, #520]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b76:	d10b      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	4b7e      	ldr	r3, [pc, #504]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05b      	beq.n	8003c3c <HAL_RCC_OscConfig+0x108>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d157      	bne.n	8003c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e242      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x74>
 8003b9a:	4b76      	ldr	r3, [pc, #472]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a75      	ldr	r2, [pc, #468]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e01d      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x98>
 8003bb2:	4b70      	ldr	r3, [pc, #448]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6f      	ldr	r2, [pc, #444]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6c      	ldr	r2, [pc, #432]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0xb0>
 8003bcc:	4b69      	ldr	r3, [pc, #420]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a68      	ldr	r2, [pc, #416]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b66      	ldr	r3, [pc, #408]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a65      	ldr	r2, [pc, #404]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fd fe14 	bl	8001818 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fd fe10 	bl	8001818 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	@ 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e207      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	4b5b      	ldr	r3, [pc, #364]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xc0>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fd fe00 	bl	8001818 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fd fdfc 	bl	8001818 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	@ 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1f3      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	4b51      	ldr	r3, [pc, #324]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0xe8>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d063      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c56:	4b47      	ldr	r3, [pc, #284]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d11c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b44      	ldr	r3, [pc, #272]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d116      	bne.n	8003c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	4b41      	ldr	r3, [pc, #260]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e1c7      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b3b      	ldr	r3, [pc, #236]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4937      	ldr	r1, [pc, #220]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	e03a      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca4:	4b34      	ldr	r3, [pc, #208]	@ (8003d78 <HAL_RCC_OscConfig+0x244>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fd fdb5 	bl	8001818 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fd fdb1 	bl	8001818 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e1a8      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b28      	ldr	r3, [pc, #160]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4925      	ldr	r1, [pc, #148]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce6:	4b24      	ldr	r3, [pc, #144]	@ (8003d78 <HAL_RCC_OscConfig+0x244>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fd fd94 	bl	8001818 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf4:	f7fd fd90 	bl	8001818 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e187      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d036      	beq.n	8003d8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4b15      	ldr	r3, [pc, #84]	@ (8003d7c <HAL_RCC_OscConfig+0x248>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fd74 	bl	8001818 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fd fd70 	bl	8001818 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e167      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_RCC_OscConfig+0x240>)
 8003d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x200>
 8003d52:	e01b      	b.n	8003d8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d54:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <HAL_RCC_OscConfig+0x248>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fd fd5d 	bl	8001818 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	e00e      	b.n	8003d80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d62:	f7fd fd59 	bl	8001818 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d907      	bls.n	8003d80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e150      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
 8003d74:	40023800 	.word	0x40023800
 8003d78:	42470000 	.word	0x42470000
 8003d7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	4b88      	ldr	r3, [pc, #544]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ea      	bne.n	8003d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8097 	beq.w	8003ec8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9e:	4b81      	ldr	r3, [pc, #516]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dba:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b77      	ldr	r3, [pc, #476]	@ (8003fa8 <HAL_RCC_OscConfig+0x474>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d118      	bne.n	8003e08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd6:	4b74      	ldr	r3, [pc, #464]	@ (8003fa8 <HAL_RCC_OscConfig+0x474>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a73      	ldr	r2, [pc, #460]	@ (8003fa8 <HAL_RCC_OscConfig+0x474>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de2:	f7fd fd19 	bl	8001818 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dea:	f7fd fd15 	bl	8001818 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e10c      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa8 <HAL_RCC_OscConfig+0x474>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2ea>
 8003e10:	4b64      	ldr	r3, [pc, #400]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e14:	4a63      	ldr	r2, [pc, #396]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCC_OscConfig+0x324>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x30c>
 8003e26:	4b5f      	ldr	r3, [pc, #380]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e32:	4b5c      	ldr	r3, [pc, #368]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e36:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCC_OscConfig+0x324>
 8003e40:	4b58      	ldr	r3, [pc, #352]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4a57      	ldr	r2, [pc, #348]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4c:	4b55      	ldr	r3, [pc, #340]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	4a54      	ldr	r2, [pc, #336]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 0304 	bic.w	r3, r3, #4
 8003e56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fd fcda 	bl	8001818 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fd fcd6 	bl	8001818 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e0cb      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	4b49      	ldr	r3, [pc, #292]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0ee      	beq.n	8003e68 <HAL_RCC_OscConfig+0x334>
 8003e8a:	e014      	b.n	8003eb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8c:	f7fd fcc4 	bl	8001818 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fd fcc0 	bl	8001818 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0b5      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ee      	bne.n	8003e94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebc:	4b39      	ldr	r3, [pc, #228]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	4a38      	ldr	r2, [pc, #224]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80a1 	beq.w	8004014 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed2:	4b34      	ldr	r3, [pc, #208]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d05c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d141      	bne.n	8003f6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b31      	ldr	r3, [pc, #196]	@ (8003fac <HAL_RCC_OscConfig+0x478>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fd fc94 	bl	8001818 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fd fc90 	bl	8001818 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e087      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	4b27      	ldr	r3, [pc, #156]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	019b      	lsls	r3, r3, #6
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	491b      	ldr	r1, [pc, #108]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fac <HAL_RCC_OscConfig+0x478>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fd fc69 	bl	8001818 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fd fc65 	bl	8001818 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e05c      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5c:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x416>
 8003f68:	e054      	b.n	8004014 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <HAL_RCC_OscConfig+0x478>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fd fc52 	bl	8001818 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fd fc4e 	bl	8001818 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e045      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x444>
 8003f96:	e03d      	b.n	8004014 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e038      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <HAL_RCC_OscConfig+0x4ec>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d028      	beq.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d121      	bne.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d11a      	bne.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d111      	bne.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800

08004024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0cc      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004038:	4b68      	ldr	r3, [pc, #416]	@ (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d90c      	bls.n	8004060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b65      	ldr	r3, [pc, #404]	@ (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b63      	ldr	r3, [pc, #396]	@ (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0b8      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004078:	4b59      	ldr	r3, [pc, #356]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a58      	ldr	r2, [pc, #352]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004082:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004090:	4b53      	ldr	r3, [pc, #332]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a52      	ldr	r2, [pc, #328]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800409a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409c:	4b50      	ldr	r3, [pc, #320]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	494d      	ldr	r1, [pc, #308]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d044      	beq.n	8004144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	4b47      	ldr	r3, [pc, #284]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d119      	bne.n	8004102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e07f      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e2:	4b3f      	ldr	r3, [pc, #252]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e06f      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f2:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e067      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004102:	4b37      	ldr	r3, [pc, #220]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 0203 	bic.w	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4934      	ldr	r1, [pc, #208]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004114:	f7fd fb80 	bl	8001818 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411a:	e00a      	b.n	8004132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411c:	f7fd fb7c 	bl	8001818 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e04f      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004132:	4b2b      	ldr	r3, [pc, #172]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 020c 	and.w	r2, r3, #12
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	429a      	cmp	r2, r3
 8004142:	d1eb      	bne.n	800411c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004144:	4b25      	ldr	r3, [pc, #148]	@ (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d20c      	bcs.n	800416c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b20      	ldr	r3, [pc, #128]	@ (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e032      	b.n	80041d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004178:	4b19      	ldr	r3, [pc, #100]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4916      	ldr	r1, [pc, #88]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004196:	4b12      	ldr	r3, [pc, #72]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	490e      	ldr	r1, [pc, #56]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041aa:	f000 f889 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b0b      	ldr	r3, [pc, #44]	@ (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	490a      	ldr	r1, [pc, #40]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c0>)
 80041bc:	5ccb      	ldrb	r3, [r1, r3]
 80041be:	fa22 f303 	lsr.w	r3, r2, r3
 80041c2:	4a09      	ldr	r2, [pc, #36]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041c6:	4b09      	ldr	r3, [pc, #36]	@ (80041ec <HAL_RCC_ClockConfig+0x1c8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd fae0 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40023c00 	.word	0x40023c00
 80041e0:	40023800 	.word	0x40023800
 80041e4:	0800ad20 	.word	0x0800ad20
 80041e8:	20000000 	.word	0x20000000
 80041ec:	20000004 	.word	0x20000004

080041f0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08c      	sub	sp, #48	@ 0x30
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d129      	bne.n	8004256 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	4b2b      	ldr	r3, [pc, #172]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	4a2a      	ldr	r2, [pc, #168]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6313      	str	r3, [r2, #48]	@ 0x30
 8004212:	4b28      	ldr	r3, [pc, #160]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800421e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004224:	2302      	movs	r3, #2
 8004226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004228:	2303      	movs	r3, #3
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004230:	2300      	movs	r3, #0
 8004232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004234:	f107 031c 	add.w	r3, r7, #28
 8004238:	4619      	mov	r1, r3
 800423a:	481f      	ldr	r0, [pc, #124]	@ (80042b8 <HAL_RCC_MCOConfig+0xc8>)
 800423c:	f7fe f84a 	bl	80022d4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004240:	4b1c      	ldr	r3, [pc, #112]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	430b      	orrs	r3, r1
 800424e:	4919      	ldr	r1, [pc, #100]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004254:	e029      	b.n	80042aa <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	4a15      	ldr	r2, [pc, #84]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 8004260:	f043 0304 	orr.w	r3, r3, #4
 8004264:	6313      	str	r3, [r2, #48]	@ 0x30
 8004266:	4b13      	ldr	r3, [pc, #76]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004272:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427c:	2303      	movs	r3, #3
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	2300      	movs	r3, #0
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004284:	2300      	movs	r3, #0
 8004286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004288:	f107 031c 	add.w	r3, r7, #28
 800428c:	4619      	mov	r1, r3
 800428e:	480b      	ldr	r0, [pc, #44]	@ (80042bc <HAL_RCC_MCOConfig+0xcc>)
 8004290:	f7fe f820 	bl	80022d4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004294:	4b07      	ldr	r3, [pc, #28]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	00d9      	lsls	r1, r3, #3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	430b      	orrs	r3, r1
 80042a4:	4903      	ldr	r1, [pc, #12]	@ (80042b4 <HAL_RCC_MCOConfig+0xc4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
}
 80042aa:	bf00      	nop
 80042ac:	3730      	adds	r7, #48	@ 0x30
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40020000 	.word	0x40020000
 80042bc:	40020800 	.word	0x40020800

080042c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c4:	b094      	sub	sp, #80	@ 0x50
 80042c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80042cc:	2300      	movs	r3, #0
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d0:	2300      	movs	r3, #0
 80042d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d8:	4b79      	ldr	r3, [pc, #484]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d00d      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x40>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	f200 80e1 	bhi.w	80044ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x34>
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d003      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x3a>
 80042f2:	e0db      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b73      	ldr	r3, [pc, #460]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80042f8:	e0db      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042fa:	4b73      	ldr	r3, [pc, #460]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80042fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042fe:	e0d8      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004300:	4b6f      	ldr	r3, [pc, #444]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004308:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800430a:	4b6d      	ldr	r3, [pc, #436]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d063      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b6a      	ldr	r3, [pc, #424]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	2200      	movs	r2, #0
 800431e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004320:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30
 800432a:	2300      	movs	r3, #0
 800432c:	637b      	str	r3, [r7, #52]	@ 0x34
 800432e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004332:	4622      	mov	r2, r4
 8004334:	462b      	mov	r3, r5
 8004336:	f04f 0000 	mov.w	r0, #0
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	0159      	lsls	r1, r3, #5
 8004340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004344:	0150      	lsls	r0, r2, #5
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4621      	mov	r1, r4
 800434c:	1a51      	subs	r1, r2, r1
 800434e:	6139      	str	r1, [r7, #16]
 8004350:	4629      	mov	r1, r5
 8004352:	eb63 0301 	sbc.w	r3, r3, r1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004364:	4659      	mov	r1, fp
 8004366:	018b      	lsls	r3, r1, #6
 8004368:	4651      	mov	r1, sl
 800436a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800436e:	4651      	mov	r1, sl
 8004370:	018a      	lsls	r2, r1, #6
 8004372:	4651      	mov	r1, sl
 8004374:	ebb2 0801 	subs.w	r8, r2, r1
 8004378:	4659      	mov	r1, fp
 800437a:	eb63 0901 	sbc.w	r9, r3, r1
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800438a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004392:	4690      	mov	r8, r2
 8004394:	4699      	mov	r9, r3
 8004396:	4623      	mov	r3, r4
 8004398:	eb18 0303 	adds.w	r3, r8, r3
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	462b      	mov	r3, r5
 80043a0:	eb49 0303 	adc.w	r3, r9, r3
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043b2:	4629      	mov	r1, r5
 80043b4:	024b      	lsls	r3, r1, #9
 80043b6:	4621      	mov	r1, r4
 80043b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043bc:	4621      	mov	r1, r4
 80043be:	024a      	lsls	r2, r1, #9
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043c6:	2200      	movs	r2, #0
 80043c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043d0:	f7fb ff66 	bl	80002a0 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4613      	mov	r3, r2
 80043da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043dc:	e058      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043de:	4b38      	ldr	r3, [pc, #224]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	099b      	lsrs	r3, r3, #6
 80043e4:	2200      	movs	r2, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	4611      	mov	r1, r2
 80043ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	f04f 0000 	mov.w	r0, #0
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	0159      	lsls	r1, r3, #5
 8004406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800440a:	0150      	lsls	r0, r2, #5
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4641      	mov	r1, r8
 8004412:	ebb2 0a01 	subs.w	sl, r2, r1
 8004416:	4649      	mov	r1, r9
 8004418:	eb63 0b01 	sbc.w	fp, r3, r1
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800442c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004430:	ebb2 040a 	subs.w	r4, r2, sl
 8004434:	eb63 050b 	sbc.w	r5, r3, fp
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	00eb      	lsls	r3, r5, #3
 8004442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004446:	00e2      	lsls	r2, r4, #3
 8004448:	4614      	mov	r4, r2
 800444a:	461d      	mov	r5, r3
 800444c:	4643      	mov	r3, r8
 800444e:	18e3      	adds	r3, r4, r3
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	464b      	mov	r3, r9
 8004454:	eb45 0303 	adc.w	r3, r5, r3
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004466:	4629      	mov	r1, r5
 8004468:	028b      	lsls	r3, r1, #10
 800446a:	4621      	mov	r1, r4
 800446c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004470:	4621      	mov	r1, r4
 8004472:	028a      	lsls	r2, r1, #10
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800447a:	2200      	movs	r2, #0
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	61fa      	str	r2, [r7, #28]
 8004480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004484:	f7fb ff0c 	bl	80002a0 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4613      	mov	r3, r2
 800448e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	3301      	adds	r3, #1
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80044a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3750      	adds	r7, #80	@ 0x50
 80044b8:	46bd      	mov	sp, r7
 80044ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	007a1200 	.word	0x007a1200

080044cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d0:	4b03      	ldr	r3, [pc, #12]	@ (80044e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000000 	.word	0x20000000

080044e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044e8:	f7ff fff0 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0a9b      	lsrs	r3, r3, #10
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	@ (8004508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	0800ad30 	.word	0x0800ad30

0800450c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004510:	f7ff ffdc 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b05      	ldr	r3, [pc, #20]	@ (800452c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0b5b      	lsrs	r3, r3, #13
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4903      	ldr	r1, [pc, #12]	@ (8004530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	0800ad30 	.word	0x0800ad30

08004534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e041      	b.n	80045ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fc6a 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 fa7e 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e04e      	b.n	800468a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a23      	ldr	r2, [pc, #140]	@ (8004698 <HAL_TIM_Base_Start_IT+0xc4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d022      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004616:	d01d      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1f      	ldr	r2, [pc, #124]	@ (800469c <HAL_TIM_Base_Start_IT+0xc8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1e      	ldr	r2, [pc, #120]	@ (80046a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1c      	ldr	r2, [pc, #112]	@ (80046a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1b      	ldr	r2, [pc, #108]	@ (80046a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a19      	ldr	r2, [pc, #100]	@ (80046ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a18      	ldr	r2, [pc, #96]	@ (80046b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d111      	bne.n	8004678 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b06      	cmp	r3, #6
 8004664:	d010      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004676:	e007      	b.n	8004688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40010400 	.word	0x40010400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40001800 	.word	0x40001800

080046b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d020      	beq.n	8004718 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01b      	beq.n	8004718 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0202 	mvn.w	r2, #2
 80046e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f999 	bl	8004a36 <HAL_TIM_IC_CaptureCallback>
 8004704:	e005      	b.n	8004712 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f98b 	bl	8004a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f99c 	bl	8004a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d020      	beq.n	8004764 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01b      	beq.n	8004764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0204 	mvn.w	r2, #4
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f973 	bl	8004a36 <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f965 	bl	8004a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f976 	bl	8004a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d020      	beq.n	80047b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01b      	beq.n	80047b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0208 	mvn.w	r2, #8
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2204      	movs	r2, #4
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f94d 	bl	8004a36 <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f93f 	bl	8004a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f950 	bl	8004a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d020      	beq.n	80047fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01b      	beq.n	80047fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0210 	mvn.w	r2, #16
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2208      	movs	r2, #8
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f927 	bl	8004a36 <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f919 	bl	8004a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f92a 	bl	8004a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00c      	beq.n	8004820 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0201 	mvn.w	r2, #1
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc f90c 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00c      	beq.n	8004844 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800483c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fae4 	bl	8004e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00c      	beq.n	8004868 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8fb 	bl	8004a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00c      	beq.n	800488c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0220 	mvn.w	r2, #32
 8004884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fab6 	bl	8004df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIM_ConfigClockSource+0x1c>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e0b4      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x186>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e8:	d03e      	beq.n	8004968 <HAL_TIM_ConfigClockSource+0xd4>
 80048ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ee:	f200 8087 	bhi.w	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f6:	f000 8086 	beq.w	8004a06 <HAL_TIM_ConfigClockSource+0x172>
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048fe:	d87f      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b70      	cmp	r3, #112	@ 0x70
 8004902:	d01a      	beq.n	800493a <HAL_TIM_ConfigClockSource+0xa6>
 8004904:	2b70      	cmp	r3, #112	@ 0x70
 8004906:	d87b      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b60      	cmp	r3, #96	@ 0x60
 800490a:	d050      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x11a>
 800490c:	2b60      	cmp	r3, #96	@ 0x60
 800490e:	d877      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b50      	cmp	r3, #80	@ 0x50
 8004912:	d03c      	beq.n	800498e <HAL_TIM_ConfigClockSource+0xfa>
 8004914:	2b50      	cmp	r3, #80	@ 0x50
 8004916:	d873      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b40      	cmp	r3, #64	@ 0x40
 800491a:	d058      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x13a>
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	d86f      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b30      	cmp	r3, #48	@ 0x30
 8004922:	d064      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x15a>
 8004924:	2b30      	cmp	r3, #48	@ 0x30
 8004926:	d86b      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004928:	2b20      	cmp	r3, #32
 800492a:	d060      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x15a>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d867      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d05c      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x15a>
 8004934:	2b10      	cmp	r3, #16
 8004936:	d05a      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x15a>
 8004938:	e062      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800494a:	f000 f9b9 	bl	8004cc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800495c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	609a      	str	r2, [r3, #8]
      break;
 8004966:	e04f      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004978:	f000 f9a2 	bl	8004cc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800498a:	609a      	str	r2, [r3, #8]
      break;
 800498c:	e03c      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	461a      	mov	r2, r3
 800499c:	f000 f916 	bl	8004bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2150      	movs	r1, #80	@ 0x50
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f96f 	bl	8004c8a <TIM_ITRx_SetConfig>
      break;
 80049ac:	e02c      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ba:	461a      	mov	r2, r3
 80049bc:	f000 f935 	bl	8004c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2160      	movs	r1, #96	@ 0x60
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f95f 	bl	8004c8a <TIM_ITRx_SetConfig>
      break;
 80049cc:	e01c      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049da:	461a      	mov	r2, r3
 80049dc:	f000 f8f6 	bl	8004bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2140      	movs	r1, #64	@ 0x40
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f94f 	bl	8004c8a <TIM_ITRx_SetConfig>
      break;
 80049ec:	e00c      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f000 f946 	bl	8004c8a <TIM_ITRx_SetConfig>
      break;
 80049fe:	e003      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      break;
 8004a04:	e000      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a46      	ldr	r2, [pc, #280]	@ (8004ba0 <TIM_Base_SetConfig+0x12c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a92:	d00f      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a43      	ldr	r2, [pc, #268]	@ (8004ba4 <TIM_Base_SetConfig+0x130>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00b      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a42      	ldr	r2, [pc, #264]	@ (8004ba8 <TIM_Base_SetConfig+0x134>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a41      	ldr	r2, [pc, #260]	@ (8004bac <TIM_Base_SetConfig+0x138>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a40      	ldr	r2, [pc, #256]	@ (8004bb0 <TIM_Base_SetConfig+0x13c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a35      	ldr	r2, [pc, #212]	@ (8004ba0 <TIM_Base_SetConfig+0x12c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d02b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad4:	d027      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a32      	ldr	r2, [pc, #200]	@ (8004ba4 <TIM_Base_SetConfig+0x130>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d023      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a31      	ldr	r2, [pc, #196]	@ (8004ba8 <TIM_Base_SetConfig+0x134>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a30      	ldr	r2, [pc, #192]	@ (8004bac <TIM_Base_SetConfig+0x138>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb0 <TIM_Base_SetConfig+0x13c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d017      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb4 <TIM_Base_SetConfig+0x140>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb8 <TIM_Base_SetConfig+0x144>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2c      	ldr	r2, [pc, #176]	@ (8004bbc <TIM_Base_SetConfig+0x148>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc0 <TIM_Base_SetConfig+0x14c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc4 <TIM_Base_SetConfig+0x150>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a29      	ldr	r2, [pc, #164]	@ (8004bc8 <TIM_Base_SetConfig+0x154>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ba0 <TIM_Base_SetConfig+0x12c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0xf8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a12      	ldr	r2, [pc, #72]	@ (8004bb0 <TIM_Base_SetConfig+0x13c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d103      	bne.n	8004b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d105      	bne.n	8004b92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f023 0201 	bic.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]
  }
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40010400 	.word	0x40010400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800
 8004bc0:	40001800 	.word	0x40001800
 8004bc4:	40001c00 	.word	0x40001c00
 8004bc8:	40002000 	.word	0x40002000

08004bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f023 030a 	bic.w	r3, r3, #10
 8004c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b087      	sub	sp, #28
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f023 0210 	bic.w	r2, r3, #16
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	031b      	lsls	r3, r3, #12
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f043 0307 	orr.w	r3, r3, #7
 8004cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	021a      	lsls	r2, r3, #8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e05a      	b.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a21      	ldr	r2, [pc, #132]	@ (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d022      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d64:	d01d      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d018      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1b      	ldr	r2, [pc, #108]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a18      	ldr	r2, [pc, #96]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a17      	ldr	r2, [pc, #92]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a15      	ldr	r2, [pc, #84]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10c      	bne.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40001800 	.word	0x40001800

08004df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e042      	b.n	8004eb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc f8d8 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	@ 0x24
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fea1 	bl	8005bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	@ 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d14a      	bne.n	8004f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004ee0:	88fb      	ldrh	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e043      	b.n	8004f72 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fbf5 	bl	80056ec <UART_Start_Receive_DMA>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004f08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d12c      	bne.n	8004f6a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d125      	bne.n	8004f64 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f043 0310 	orr.w	r3, r3, #16
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6a39      	ldr	r1, [r7, #32]
 8004f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004f62:	e002      	b.n	8004f6a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f6e:	e000      	b.n	8004f72 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3730      	adds	r7, #48	@ 0x30
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b0ba      	sub	sp, #232	@ 0xe8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x66>
 8004fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fd27 	bl	8005a2e <UART_Receive_IT>
      return;
 8004fe0:	e25b      	b.n	800549a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80de 	beq.w	80051a8 <HAL_UART_IRQHandler+0x22c>
 8004fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d106      	bne.n	8005006 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ffc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80d1 	beq.w	80051a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <HAL_UART_IRQHandler+0xae>
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_UART_IRQHandler+0xd2>
 8005036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	f043 0202 	orr.w	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00b      	beq.n	8005072 <HAL_UART_IRQHandler+0xf6>
 800505a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	f043 0204 	orr.w	r2, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d011      	beq.n	80050a2 <HAL_UART_IRQHandler+0x126>
 800507e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d105      	bne.n	8005096 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800508a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f043 0208 	orr.w	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 81f2 	beq.w	8005490 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_UART_IRQHandler+0x14e>
 80050b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fcb2 	bl	8005a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d4:	2b40      	cmp	r3, #64	@ 0x40
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_UART_IRQHandler+0x17a>
 80050ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d04f      	beq.n	8005196 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fbba 	bl	8005870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005106:	2b40      	cmp	r3, #64	@ 0x40
 8005108:	d141      	bne.n	800518e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005120:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005136:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800513a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800514e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1d9      	bne.n	800510a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d013      	beq.n	8005186 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005162:	4a7e      	ldr	r2, [pc, #504]	@ (800535c <HAL_UART_IRQHandler+0x3e0>)
 8005164:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516a:	4618      	mov	r0, r3
 800516c:	f7fc fe26 	bl	8001dbc <HAL_DMA_Abort_IT>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e00e      	b.n	80051a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9a8 	bl	80054dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	e00a      	b.n	80051a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9a4 	bl	80054dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	e006      	b.n	80051a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9a0 	bl	80054dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051a2:	e175      	b.n	8005490 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	bf00      	nop
    return;
 80051a6:	e173      	b.n	8005490 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 814f 	bne.w	8005450 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8148 	beq.w	8005450 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8141 	beq.w	8005450 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ee:	2b40      	cmp	r3, #64	@ 0x40
 80051f0:	f040 80b6 	bne.w	8005360 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8145 	beq.w	8005494 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800520e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005212:	429a      	cmp	r2, r3
 8005214:	f080 813e 	bcs.w	8005494 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800521e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522a:	f000 8088 	beq.w	800533e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800525a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800525e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005266:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1d9      	bne.n	800522e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3314      	adds	r3, #20
 8005280:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800528a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800529e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e1      	bne.n	800527a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e3      	bne.n	80052b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800530c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005320:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005322:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005326:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800532e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e3      	bne.n	80052fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005338:	4618      	mov	r0, r3
 800533a:	f7fc fccf 	bl	8001cdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800534c:	b29b      	uxth	r3, r3
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	b29b      	uxth	r3, r3
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fb fbb9 	bl	8000acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800535a:	e09b      	b.n	8005494 <HAL_UART_IRQHandler+0x518>
 800535c:	08005937 	.word	0x08005937
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005368:	b29b      	uxth	r3, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 808e 	beq.w	8005498 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800537c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8089 	beq.w	8005498 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800539c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80053ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e3      	bne.n	8005386 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3314      	adds	r3, #20
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	623b      	str	r3, [r7, #32]
   return(result);
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3314      	adds	r3, #20
 80053de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80053e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e3      	bne.n	80053be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	60fb      	str	r3, [r7, #12]
   return(result);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0310 	bic.w	r3, r3, #16
 800541a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	330c      	adds	r3, #12
 8005424:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005428:	61fa      	str	r2, [r7, #28]
 800542a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	69b9      	ldr	r1, [r7, #24]
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	617b      	str	r3, [r7, #20]
   return(result);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e3      	bne.n	8005404 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005442:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fb fb3f 	bl	8000acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800544e:	e023      	b.n	8005498 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <HAL_UART_IRQHandler+0x4f4>
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa78 	bl	800595e <UART_Transmit_IT>
    return;
 800546e:	e014      	b.n	800549a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00e      	beq.n	800549a <HAL_UART_IRQHandler+0x51e>
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fab8 	bl	80059fe <UART_EndTransmit_IT>
    return;
 800548e:	e004      	b.n	800549a <HAL_UART_IRQHandler+0x51e>
    return;
 8005490:	bf00      	nop
 8005492:	e002      	b.n	800549a <HAL_UART_IRQHandler+0x51e>
      return;
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <HAL_UART_IRQHandler+0x51e>
      return;
 8005498:	bf00      	nop
  }
}
 800549a:	37e8      	adds	r7, #232	@ 0xe8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b09c      	sub	sp, #112	@ 0x70
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d172      	bne.n	80055f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800550c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800550e:	2200      	movs	r2, #0
 8005510:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800552a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005532:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005534:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005538:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	667b      	str	r3, [r7, #100]	@ 0x64
 800555e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3314      	adds	r3, #20
 8005564:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005566:	647a      	str	r2, [r7, #68]	@ 0x44
 8005568:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800556c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	623b      	str	r3, [r7, #32]
   return(result);
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005590:	663b      	str	r3, [r7, #96]	@ 0x60
 8005592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3314      	adds	r3, #20
 8005598:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800559a:	633a      	str	r2, [r7, #48]	@ 0x30
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e5      	bne.n	800557a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d119      	bne.n	80055f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f023 0310 	bic.w	r3, r3, #16
 80055d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055de:	61fa      	str	r2, [r7, #28]
 80055e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	69b9      	ldr	r1, [r7, #24]
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	617b      	str	r3, [r7, #20]
   return(result);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e5      	bne.n	80055be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f4:	2200      	movs	r2, #0
 80055f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d106      	bne.n	800560e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005602:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005604:	4619      	mov	r1, r3
 8005606:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005608:	f7fb fa60 	bl	8000acc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800560c:	e002      	b.n	8005614 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800560e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005610:	f7ff ff50 	bl	80054b4 <HAL_UART_RxCpltCallback>
}
 8005614:	bf00      	nop
 8005616:	3770      	adds	r7, #112	@ 0x70
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005634:	2b01      	cmp	r3, #1
 8005636:	d108      	bne.n	800564a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	b29b      	uxth	r3, r3
 8005640:	4619      	mov	r1, r3
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7fb fa42 	bl	8000acc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005648:	e002      	b.n	8005650 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff ff3c 	bl	80054c8 <HAL_UART_RxHalfCpltCallback>
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005674:	2b80      	cmp	r3, #128	@ 0x80
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b21      	cmp	r3, #33	@ 0x21
 800568a:	d108      	bne.n	800569e <UART_DMAError+0x46>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2200      	movs	r2, #0
 8005696:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005698:	68b8      	ldr	r0, [r7, #8]
 800569a:	f000 f8c1 	bl	8005820 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a8:	2b40      	cmp	r3, #64	@ 0x40
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b22      	cmp	r3, #34	@ 0x22
 80056be:	d108      	bne.n	80056d2 <UART_DMAError+0x7a>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2200      	movs	r2, #0
 80056ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80056cc:	68b8      	ldr	r0, [r7, #8]
 80056ce:	f000 f8cf 	bl	8005870 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d6:	f043 0210 	orr.w	r2, r3, #16
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056de:	68b8      	ldr	r0, [r7, #8]
 80056e0:	f7ff fefc 	bl	80054dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b098      	sub	sp, #96	@ 0x60
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	4613      	mov	r3, r2
 80056f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2222      	movs	r2, #34	@ 0x22
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005718:	4a3e      	ldr	r2, [pc, #248]	@ (8005814 <UART_Start_Receive_DMA+0x128>)
 800571a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	4a3d      	ldr	r2, [pc, #244]	@ (8005818 <UART_Start_Receive_DMA+0x12c>)
 8005722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005728:	4a3c      	ldr	r2, [pc, #240]	@ (800581c <UART_Start_Receive_DMA+0x130>)
 800572a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005730:	2200      	movs	r2, #0
 8005732:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	f7fc fa6e 	bl	8001c2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005750:	2300      	movs	r3, #0
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d019      	beq.n	80057a2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	330c      	adds	r3, #12
 8005774:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800577e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005784:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800578e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005790:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005794:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800579c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e5      	bne.n	800576e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3314      	adds	r3, #20
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3314      	adds	r3, #20
 80057c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e5      	bne.n	80057a2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80057f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80057f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6a39      	ldr	r1, [r7, #32]
 80057fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	61fb      	str	r3, [r7, #28]
   return(result);
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e5      	bne.n	80057d6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3760      	adds	r7, #96	@ 0x60
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	080054f1 	.word	0x080054f1
 8005818:	0800561d 	.word	0x0800561d
 800581c:	08005659 	.word	0x08005659

08005820 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b089      	sub	sp, #36	@ 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	60bb      	str	r3, [r7, #8]
   return(result);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	61ba      	str	r2, [r7, #24]
 800584a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6979      	ldr	r1, [r7, #20]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	613b      	str	r3, [r7, #16]
   return(result);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e5      	bne.n	8005828 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005864:	bf00      	nop
 8005866:	3724      	adds	r7, #36	@ 0x24
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b095      	sub	sp, #84	@ 0x54
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800588e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005898:	643a      	str	r2, [r7, #64]	@ 0x40
 800589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800589e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e5      	bne.n	8005878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3314      	adds	r3, #20
 80058ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e5      	bne.n	80058ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d119      	bne.n	800591c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f023 0310 	bic.w	r3, r3, #16
 80058fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005908:	61ba      	str	r2, [r7, #24]
 800590a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	613b      	str	r3, [r7, #16]
   return(result);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e5      	bne.n	80058e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800592a:	bf00      	nop
 800592c:	3754      	adds	r7, #84	@ 0x54
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff fdc3 	bl	80054dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800595e:	b480      	push	{r7}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b21      	cmp	r3, #33	@ 0x21
 8005970:	d13e      	bne.n	80059f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800597a:	d114      	bne.n	80059a6 <UART_Transmit_IT+0x48>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d110      	bne.n	80059a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	1c9a      	adds	r2, r3, #2
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	621a      	str	r2, [r3, #32]
 80059a4:	e008      	b.n	80059b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6211      	str	r1, [r2, #32]
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4619      	mov	r1, r3
 80059c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10f      	bne.n	80059ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fd3e 	bl	80054a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b08c      	sub	sp, #48	@ 0x30
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b22      	cmp	r3, #34	@ 0x22
 8005a40:	f040 80ae 	bne.w	8005ba0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a4c:	d117      	bne.n	8005a7e <UART_Receive_IT+0x50>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d113      	bne.n	8005a7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	1c9a      	adds	r2, r3, #2
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a7c:	e026      	b.n	8005acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a90:	d007      	beq.n	8005aa2 <UART_Receive_IT+0x74>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <UART_Receive_IT+0x82>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e008      	b.n	8005ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d15d      	bne.n	8005b9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0220 	bic.w	r2, r2, #32
 8005aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695a      	ldr	r2, [r3, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0201 	bic.w	r2, r2, #1
 8005b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d135      	bne.n	8005b92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f023 0310 	bic.w	r3, r3, #16
 8005b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4c:	623a      	str	r2, [r7, #32]
 8005b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	69f9      	ldr	r1, [r7, #28]
 8005b52:	6a3a      	ldr	r2, [r7, #32]
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d10a      	bne.n	8005b84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fa ff9e 	bl	8000acc <HAL_UARTEx_RxEventCallback>
 8005b90:	e002      	b.n	8005b98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fc8e 	bl	80054b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e002      	b.n	8005ba2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3730      	adds	r7, #48	@ 0x30
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb0:	b0c0      	sub	sp, #256	@ 0x100
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	68d9      	ldr	r1, [r3, #12]
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	ea40 0301 	orr.w	r3, r0, r1
 8005bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c04:	f021 010c 	bic.w	r1, r1, #12
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c12:	430b      	orrs	r3, r1
 8005c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c26:	6999      	ldr	r1, [r3, #24]
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	ea40 0301 	orr.w	r3, r0, r1
 8005c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005e78 <UART_SetConfig+0x2cc>)
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d005      	beq.n	8005c4c <UART_SetConfig+0xa0>
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b8d      	ldr	r3, [pc, #564]	@ (8005e7c <UART_SetConfig+0x2d0>)
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d104      	bne.n	8005c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fe fc5e 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8005c50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c54:	e003      	b.n	8005c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c56:	f7fe fc45 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 8005c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c68:	f040 810c 	bne.w	8005e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c7e:	4622      	mov	r2, r4
 8005c80:	462b      	mov	r3, r5
 8005c82:	1891      	adds	r1, r2, r2
 8005c84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c86:	415b      	adcs	r3, r3
 8005c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c8e:	4621      	mov	r1, r4
 8005c90:	eb12 0801 	adds.w	r8, r2, r1
 8005c94:	4629      	mov	r1, r5
 8005c96:	eb43 0901 	adc.w	r9, r3, r1
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cae:	4690      	mov	r8, r2
 8005cb0:	4699      	mov	r9, r3
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	eb18 0303 	adds.w	r3, r8, r3
 8005cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	eb49 0303 	adc.w	r3, r9, r3
 8005cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cda:	460b      	mov	r3, r1
 8005cdc:	18db      	adds	r3, r3, r3
 8005cde:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	eb42 0303 	adc.w	r3, r2, r3
 8005ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cf0:	f7fa fad6 	bl	80002a0 <__aeabi_uldivmod>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4b61      	ldr	r3, [pc, #388]	@ (8005e80 <UART_SetConfig+0x2d4>)
 8005cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	011c      	lsls	r4, r3, #4
 8005d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	1891      	adds	r1, r2, r2
 8005d1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d1c:	415b      	adcs	r3, r3
 8005d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d24:	4641      	mov	r1, r8
 8005d26:	eb12 0a01 	adds.w	sl, r2, r1
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d44:	4692      	mov	sl, r2
 8005d46:	469b      	mov	fp, r3
 8005d48:	4643      	mov	r3, r8
 8005d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d52:	464b      	mov	r3, r9
 8005d54:	eb4b 0303 	adc.w	r3, fp, r3
 8005d58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d70:	460b      	mov	r3, r1
 8005d72:	18db      	adds	r3, r3, r3
 8005d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d76:	4613      	mov	r3, r2
 8005d78:	eb42 0303 	adc.w	r3, r2, r3
 8005d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d86:	f7fa fa8b 	bl	80002a0 <__aeabi_uldivmod>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4b3b      	ldr	r3, [pc, #236]	@ (8005e80 <UART_SetConfig+0x2d4>)
 8005d92:	fba3 2301 	umull	r2, r3, r3, r1
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2264      	movs	r2, #100	@ 0x64
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	1acb      	subs	r3, r1, r3
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005da6:	4b36      	ldr	r3, [pc, #216]	@ (8005e80 <UART_SetConfig+0x2d4>)
 8005da8:	fba3 2302 	umull	r2, r3, r3, r2
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005db4:	441c      	add	r4, r3
 8005db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005dc8:	4642      	mov	r2, r8
 8005dca:	464b      	mov	r3, r9
 8005dcc:	1891      	adds	r1, r2, r2
 8005dce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005dd0:	415b      	adcs	r3, r3
 8005dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005dd8:	4641      	mov	r1, r8
 8005dda:	1851      	adds	r1, r2, r1
 8005ddc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dde:	4649      	mov	r1, r9
 8005de0:	414b      	adcs	r3, r1
 8005de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005df0:	4659      	mov	r1, fp
 8005df2:	00cb      	lsls	r3, r1, #3
 8005df4:	4651      	mov	r1, sl
 8005df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfa:	4651      	mov	r1, sl
 8005dfc:	00ca      	lsls	r2, r1, #3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	4642      	mov	r2, r8
 8005e06:	189b      	adds	r3, r3, r2
 8005e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	460a      	mov	r2, r1
 8005e10:	eb42 0303 	adc.w	r3, r2, r3
 8005e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	18db      	adds	r3, r3, r3
 8005e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e32:	4613      	mov	r3, r2
 8005e34:	eb42 0303 	adc.w	r3, r2, r3
 8005e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e42:	f7fa fa2d 	bl	80002a0 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <UART_SetConfig+0x2d4>)
 8005e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	2164      	movs	r1, #100	@ 0x64
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	3332      	adds	r3, #50	@ 0x32
 8005e5e:	4a08      	ldr	r2, [pc, #32]	@ (8005e80 <UART_SetConfig+0x2d4>)
 8005e60:	fba2 2303 	umull	r2, r3, r2, r3
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	f003 0207 	and.w	r2, r3, #7
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4422      	add	r2, r4
 8005e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e74:	e106      	b.n	8006084 <UART_SetConfig+0x4d8>
 8005e76:	bf00      	nop
 8005e78:	40011000 	.word	0x40011000
 8005e7c:	40011400 	.word	0x40011400
 8005e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e96:	4642      	mov	r2, r8
 8005e98:	464b      	mov	r3, r9
 8005e9a:	1891      	adds	r1, r2, r2
 8005e9c:	6239      	str	r1, [r7, #32]
 8005e9e:	415b      	adcs	r3, r3
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ea6:	4641      	mov	r1, r8
 8005ea8:	1854      	adds	r4, r2, r1
 8005eaa:	4649      	mov	r1, r9
 8005eac:	eb43 0501 	adc.w	r5, r3, r1
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	00eb      	lsls	r3, r5, #3
 8005eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ebe:	00e2      	lsls	r2, r4, #3
 8005ec0:	4614      	mov	r4, r2
 8005ec2:	461d      	mov	r5, r3
 8005ec4:	4643      	mov	r3, r8
 8005ec6:	18e3      	adds	r3, r4, r3
 8005ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ecc:	464b      	mov	r3, r9
 8005ece:	eb45 0303 	adc.w	r3, r5, r3
 8005ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	008b      	lsls	r3, r1, #2
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005efc:	4621      	mov	r1, r4
 8005efe:	008a      	lsls	r2, r1, #2
 8005f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f04:	f7fa f9cc 	bl	80002a0 <__aeabi_uldivmod>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4b60      	ldr	r3, [pc, #384]	@ (8006090 <UART_SetConfig+0x4e4>)
 8005f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	011c      	lsls	r4, r3, #4
 8005f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f28:	4642      	mov	r2, r8
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	1891      	adds	r1, r2, r2
 8005f2e:	61b9      	str	r1, [r7, #24]
 8005f30:	415b      	adcs	r3, r3
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f38:	4641      	mov	r1, r8
 8005f3a:	1851      	adds	r1, r2, r1
 8005f3c:	6139      	str	r1, [r7, #16]
 8005f3e:	4649      	mov	r1, r9
 8005f40:	414b      	adcs	r3, r1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f50:	4659      	mov	r1, fp
 8005f52:	00cb      	lsls	r3, r1, #3
 8005f54:	4651      	mov	r1, sl
 8005f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5a:	4651      	mov	r1, sl
 8005f5c:	00ca      	lsls	r2, r1, #3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	4642      	mov	r2, r8
 8005f66:	189b      	adds	r3, r3, r2
 8005f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	460a      	mov	r2, r1
 8005f70:	eb42 0303 	adc.w	r3, r2, r3
 8005f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f90:	4649      	mov	r1, r9
 8005f92:	008b      	lsls	r3, r1, #2
 8005f94:	4641      	mov	r1, r8
 8005f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	008a      	lsls	r2, r1, #2
 8005f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fa2:	f7fa f97d 	bl	80002a0 <__aeabi_uldivmod>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	4b38      	ldr	r3, [pc, #224]	@ (8006090 <UART_SetConfig+0x4e4>)
 8005fae:	fba3 2301 	umull	r2, r3, r3, r1
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	2264      	movs	r2, #100	@ 0x64
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	1acb      	subs	r3, r1, r3
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	3332      	adds	r3, #50	@ 0x32
 8005fc0:	4a33      	ldr	r2, [pc, #204]	@ (8006090 <UART_SetConfig+0x4e4>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fcc:	441c      	add	r4, r3
 8005fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fdc:	4642      	mov	r2, r8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	1891      	adds	r1, r2, r2
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	415b      	adcs	r3, r3
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fec:	4641      	mov	r1, r8
 8005fee:	1851      	adds	r1, r2, r1
 8005ff0:	6039      	str	r1, [r7, #0]
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	414b      	adcs	r3, r1
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006004:	4659      	mov	r1, fp
 8006006:	00cb      	lsls	r3, r1, #3
 8006008:	4651      	mov	r1, sl
 800600a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800600e:	4651      	mov	r1, sl
 8006010:	00ca      	lsls	r2, r1, #3
 8006012:	4610      	mov	r0, r2
 8006014:	4619      	mov	r1, r3
 8006016:	4603      	mov	r3, r0
 8006018:	4642      	mov	r2, r8
 800601a:	189b      	adds	r3, r3, r2
 800601c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800601e:	464b      	mov	r3, r9
 8006020:	460a      	mov	r2, r1
 8006022:	eb42 0303 	adc.w	r3, r2, r3
 8006026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	663b      	str	r3, [r7, #96]	@ 0x60
 8006032:	667a      	str	r2, [r7, #100]	@ 0x64
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006040:	4649      	mov	r1, r9
 8006042:	008b      	lsls	r3, r1, #2
 8006044:	4641      	mov	r1, r8
 8006046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800604a:	4641      	mov	r1, r8
 800604c:	008a      	lsls	r2, r1, #2
 800604e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006052:	f7fa f925 	bl	80002a0 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <UART_SetConfig+0x4e4>)
 800605c:	fba3 1302 	umull	r1, r3, r3, r2
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	2164      	movs	r1, #100	@ 0x64
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	3332      	adds	r3, #50	@ 0x32
 800606e:	4a08      	ldr	r2, [pc, #32]	@ (8006090 <UART_SetConfig+0x4e4>)
 8006070:	fba2 2303 	umull	r2, r3, r2, r3
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	f003 020f 	and.w	r2, r3, #15
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4422      	add	r2, r4
 8006082:	609a      	str	r2, [r3, #8]
}
 8006084:	bf00      	nop
 8006086:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800608a:	46bd      	mov	sp, r7
 800608c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006090:	51eb851f 	.word	0x51eb851f

08006094 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006094:	b084      	sub	sp, #16
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	f107 001c 	add.w	r0, r7, #28
 80060a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d123      	bne.n	80060f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80060c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d105      	bne.n	80060ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 fae2 	bl	80076b4 <USB_CoreReset>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]
 80060f4:	e01b      	b.n	800612e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fad6 	bl	80076b4 <USB_CoreReset>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800610c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006118:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006120:	e005      	b.n	800612e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006126:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800612e:	7fbb      	ldrb	r3, [r7, #30]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d10b      	bne.n	800614c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f043 0206 	orr.w	r2, r3, #6
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f043 0220 	orr.w	r2, r3, #32
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800614c:	7bfb      	ldrb	r3, [r7, #15]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006158:	b004      	add	sp, #16
 800615a:	4770      	bx	lr

0800615c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d165      	bne.n	800623c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4a41      	ldr	r2, [pc, #260]	@ (8006278 <USB_SetTurnaroundTime+0x11c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d906      	bls.n	8006186 <USB_SetTurnaroundTime+0x2a>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4a40      	ldr	r2, [pc, #256]	@ (800627c <USB_SetTurnaroundTime+0x120>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d202      	bcs.n	8006186 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006180:	230f      	movs	r3, #15
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	e062      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4a3c      	ldr	r2, [pc, #240]	@ (800627c <USB_SetTurnaroundTime+0x120>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d306      	bcc.n	800619c <USB_SetTurnaroundTime+0x40>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4a3b      	ldr	r2, [pc, #236]	@ (8006280 <USB_SetTurnaroundTime+0x124>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d202      	bcs.n	800619c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006196:	230e      	movs	r3, #14
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	e057      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4a38      	ldr	r2, [pc, #224]	@ (8006280 <USB_SetTurnaroundTime+0x124>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d306      	bcc.n	80061b2 <USB_SetTurnaroundTime+0x56>
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4a37      	ldr	r2, [pc, #220]	@ (8006284 <USB_SetTurnaroundTime+0x128>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d202      	bcs.n	80061b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061ac:	230d      	movs	r3, #13
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e04c      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4a33      	ldr	r2, [pc, #204]	@ (8006284 <USB_SetTurnaroundTime+0x128>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d306      	bcc.n	80061c8 <USB_SetTurnaroundTime+0x6c>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4a32      	ldr	r2, [pc, #200]	@ (8006288 <USB_SetTurnaroundTime+0x12c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d802      	bhi.n	80061c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061c2:	230c      	movs	r3, #12
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e041      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006288 <USB_SetTurnaroundTime+0x12c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d906      	bls.n	80061de <USB_SetTurnaroundTime+0x82>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4a2e      	ldr	r2, [pc, #184]	@ (800628c <USB_SetTurnaroundTime+0x130>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d802      	bhi.n	80061de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80061d8:	230b      	movs	r3, #11
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	e036      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4a2a      	ldr	r2, [pc, #168]	@ (800628c <USB_SetTurnaroundTime+0x130>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d906      	bls.n	80061f4 <USB_SetTurnaroundTime+0x98>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4a29      	ldr	r2, [pc, #164]	@ (8006290 <USB_SetTurnaroundTime+0x134>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d802      	bhi.n	80061f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80061ee:	230a      	movs	r3, #10
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	e02b      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4a26      	ldr	r2, [pc, #152]	@ (8006290 <USB_SetTurnaroundTime+0x134>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d906      	bls.n	800620a <USB_SetTurnaroundTime+0xae>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4a25      	ldr	r2, [pc, #148]	@ (8006294 <USB_SetTurnaroundTime+0x138>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d202      	bcs.n	800620a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006204:	2309      	movs	r3, #9
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e020      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4a21      	ldr	r2, [pc, #132]	@ (8006294 <USB_SetTurnaroundTime+0x138>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d306      	bcc.n	8006220 <USB_SetTurnaroundTime+0xc4>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4a20      	ldr	r2, [pc, #128]	@ (8006298 <USB_SetTurnaroundTime+0x13c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d802      	bhi.n	8006220 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800621a:	2308      	movs	r3, #8
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e015      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4a1d      	ldr	r2, [pc, #116]	@ (8006298 <USB_SetTurnaroundTime+0x13c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d906      	bls.n	8006236 <USB_SetTurnaroundTime+0xda>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4a1c      	ldr	r2, [pc, #112]	@ (800629c <USB_SetTurnaroundTime+0x140>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d202      	bcs.n	8006236 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006230:	2307      	movs	r3, #7
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e00a      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006236:	2306      	movs	r3, #6
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e007      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006242:	2309      	movs	r3, #9
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e001      	b.n	800624c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006248:	2309      	movs	r3, #9
 800624a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	029b      	lsls	r3, r3, #10
 8006260:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	00d8acbf 	.word	0x00d8acbf
 800627c:	00e4e1c0 	.word	0x00e4e1c0
 8006280:	00f42400 	.word	0x00f42400
 8006284:	01067380 	.word	0x01067380
 8006288:	011a499f 	.word	0x011a499f
 800628c:	01312cff 	.word	0x01312cff
 8006290:	014ca43f 	.word	0x014ca43f
 8006294:	016e3600 	.word	0x016e3600
 8006298:	01a6ab1f 	.word	0x01a6ab1f
 800629c:	01e84800 	.word	0x01e84800

080062a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f043 0201 	orr.w	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f023 0201 	bic.w	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d115      	bne.n	8006332 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006312:	200a      	movs	r0, #10
 8006314:	f7fb fa8c 	bl	8001830 <HAL_Delay>
      ms += 10U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	330a      	adds	r3, #10
 800631c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 f939 	bl	8007596 <USB_GetMode>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d01e      	beq.n	8006368 <USB_SetCurrentMode+0x84>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2bc7      	cmp	r3, #199	@ 0xc7
 800632e:	d9f0      	bls.n	8006312 <USB_SetCurrentMode+0x2e>
 8006330:	e01a      	b.n	8006368 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d115      	bne.n	8006364 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006344:	200a      	movs	r0, #10
 8006346:	f7fb fa73 	bl	8001830 <HAL_Delay>
      ms += 10U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	330a      	adds	r3, #10
 800634e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f001 f920 	bl	8007596 <USB_GetMode>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <USB_SetCurrentMode+0x84>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006360:	d9f0      	bls.n	8006344 <USB_SetCurrentMode+0x60>
 8006362:	e001      	b.n	8006368 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e005      	b.n	8006374 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2bc8      	cmp	r3, #200	@ 0xc8
 800636c:	d101      	bne.n	8006372 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800637c:	b084      	sub	sp, #16
 800637e:	b580      	push	{r7, lr}
 8006380:	b086      	sub	sp, #24
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800638a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	e009      	b.n	80063b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3340      	adds	r3, #64	@ 0x40
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	2200      	movs	r2, #0
 80063a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3301      	adds	r3, #1
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b0e      	cmp	r3, #14
 80063b4:	d9f2      	bls.n	800639c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d11c      	bne.n	80063f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063cc:	f043 0302 	orr.w	r3, r3, #2
 80063d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80063f6:	e00b      	b.n	8006410 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006408:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006416:	461a      	mov	r2, r3
 8006418:	2300      	movs	r3, #0
 800641a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800641c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006420:	2b01      	cmp	r3, #1
 8006422:	d10d      	bne.n	8006440 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800642c:	2100      	movs	r1, #0
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f968 	bl	8006704 <USB_SetDevSpeed>
 8006434:	e008      	b.n	8006448 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006436:	2101      	movs	r1, #1
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f963 	bl	8006704 <USB_SetDevSpeed>
 800643e:	e003      	b.n	8006448 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006440:	2103      	movs	r1, #3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f95e 	bl	8006704 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006448:	2110      	movs	r1, #16
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f8fa 	bl	8006644 <USB_FlushTxFifo>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f924 	bl	80066a8 <USB_FlushRxFifo>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006470:	461a      	mov	r2, r3
 8006472:	2300      	movs	r3, #0
 8006474:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647c:	461a      	mov	r2, r3
 800647e:	2300      	movs	r3, #0
 8006480:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006488:	461a      	mov	r2, r3
 800648a:	2300      	movs	r3, #0
 800648c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800648e:	2300      	movs	r3, #0
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	e043      	b.n	800651c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064aa:	d118      	bne.n	80064de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064be:	461a      	mov	r2, r3
 80064c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e013      	b.n	80064f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d4:	461a      	mov	r2, r3
 80064d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e008      	b.n	80064f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ea:	461a      	mov	r2, r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064fc:	461a      	mov	r2, r3
 80064fe:	2300      	movs	r3, #0
 8006500:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650e:	461a      	mov	r2, r3
 8006510:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006514:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3301      	adds	r3, #1
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006520:	461a      	mov	r2, r3
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4293      	cmp	r3, r2
 8006526:	d3b5      	bcc.n	8006494 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006528:	2300      	movs	r3, #0
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	e043      	b.n	80065b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006544:	d118      	bne.n	8006578 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006558:	461a      	mov	r2, r3
 800655a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	e013      	b.n	800658a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656e:	461a      	mov	r2, r3
 8006570:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e008      	b.n	800658a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006584:	461a      	mov	r2, r3
 8006586:	2300      	movs	r3, #0
 8006588:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006596:	461a      	mov	r2, r3
 8006598:	2300      	movs	r3, #0
 800659a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a8:	461a      	mov	r2, r3
 80065aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	3301      	adds	r3, #1
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065ba:	461a      	mov	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4293      	cmp	r3, r2
 80065c0:	d3b5      	bcc.n	800652e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80065e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	f043 0210 	orr.w	r2, r3, #16
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699a      	ldr	r2, [r3, #24]
 80065fc:	4b10      	ldr	r3, [pc, #64]	@ (8006640 <USB_DevInit+0x2c4>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006604:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f043 0208 	orr.w	r2, r3, #8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006618:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800661c:	2b01      	cmp	r3, #1
 800661e:	d107      	bne.n	8006630 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006628:	f043 0304 	orr.w	r3, r3, #4
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800663c:	b004      	add	sp, #16
 800663e:	4770      	bx	lr
 8006640:	803c3800 	.word	0x803c3800

08006644 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800665e:	d901      	bls.n	8006664 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e01b      	b.n	800669c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	daf2      	bge.n	8006652 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	019b      	lsls	r3, r3, #6
 8006674:	f043 0220 	orr.w	r2, r3, #32
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006688:	d901      	bls.n	800668e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e006      	b.n	800669c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b20      	cmp	r3, #32
 8006698:	d0f0      	beq.n	800667c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066c0:	d901      	bls.n	80066c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e018      	b.n	80066f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	daf2      	bge.n	80066b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2210      	movs	r2, #16
 80066d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066e4:	d901      	bls.n	80066ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e006      	b.n	80066f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d0f0      	beq.n	80066d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	68f9      	ldr	r1, [r7, #12]
 8006720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006724:	4313      	orrs	r3, r2
 8006726:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006736:	b480      	push	{r7}
 8006738:	b087      	sub	sp, #28
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 0306 	and.w	r3, r3, #6
 800674e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]
 800675a:	e00a      	b.n	8006772 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d002      	beq.n	8006768 <USB_GetDevSpeed+0x32>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b06      	cmp	r3, #6
 8006766:	d102      	bne.n	800676e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006768:	2302      	movs	r3, #2
 800676a:	75fb      	strb	r3, [r7, #23]
 800676c:	e001      	b.n	8006772 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800676e:	230f      	movs	r3, #15
 8006770:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
}
 8006774:	4618      	mov	r0, r3
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d13a      	bne.n	8006812 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	2101      	movs	r1, #1
 80067ae:	fa01 f303 	lsl.w	r3, r1, r3
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067ba:	4313      	orrs	r3, r2
 80067bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d155      	bne.n	8006880 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	791b      	ldrb	r3, [r3, #4]
 80067ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	059b      	lsls	r3, r3, #22
 80067f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067f8:	4313      	orrs	r3, r2
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800680a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	e036      	b.n	8006880 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	2101      	movs	r1, #1
 8006824:	fa01 f303 	lsl.w	r3, r1, r3
 8006828:	041b      	lsls	r3, r3, #16
 800682a:	68f9      	ldr	r1, [r7, #12]
 800682c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006830:	4313      	orrs	r3, r2
 8006832:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d11a      	bne.n	8006880 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	791b      	ldrb	r3, [r3, #4]
 8006864:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006866:	430b      	orrs	r3, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	440a      	add	r2, r1
 8006872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800687e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
	...

08006890 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d161      	bne.n	8006970 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068c2:	d11f      	bne.n	8006904 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	2101      	movs	r1, #1
 8006916:	fa01 f303 	lsl.w	r3, r1, r3
 800691a:	b29b      	uxth	r3, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006924:	4013      	ands	r3, r2
 8006926:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	2101      	movs	r1, #1
 800693a:	fa01 f303 	lsl.w	r3, r1, r3
 800693e:	b29b      	uxth	r3, r3
 8006940:	43db      	mvns	r3, r3
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006948:	4013      	ands	r3, r2
 800694a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	0159      	lsls	r1, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	440b      	add	r3, r1
 8006962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006966:	4619      	mov	r1, r3
 8006968:	4b35      	ldr	r3, [pc, #212]	@ (8006a40 <USB_DeactivateEndpoint+0x1b0>)
 800696a:	4013      	ands	r3, r2
 800696c:	600b      	str	r3, [r1, #0]
 800696e:	e060      	b.n	8006a32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006982:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006986:	d11f      	bne.n	80069c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	440a      	add	r2, r1
 800699e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	2101      	movs	r1, #1
 80069da:	fa01 f303 	lsl.w	r3, r1, r3
 80069de:	041b      	lsls	r3, r3, #16
 80069e0:	43db      	mvns	r3, r3
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069e8:	4013      	ands	r3, r2
 80069ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	2101      	movs	r1, #1
 80069fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	43db      	mvns	r3, r3
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	0159      	lsls	r1, r3, #5
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	440b      	add	r3, r1
 8006a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <USB_DeactivateEndpoint+0x1b4>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	ec337800 	.word	0xec337800
 8006a44:	eff37800 	.word	0xeff37800

08006a48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	@ 0x28
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	f040 817a 	bne.w	8006d5e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d132      	bne.n	8006ad8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ad0:	0cdb      	lsrs	r3, r3, #19
 8006ad2:	04db      	lsls	r3, r3, #19
 8006ad4:	6113      	str	r3, [r2, #16]
 8006ad6:	e092      	b.n	8006bfe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	0151      	lsls	r1, r2, #5
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	440a      	add	r2, r1
 8006aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af2:	0cdb      	lsrs	r3, r3, #19
 8006af4:	04db      	lsls	r3, r3, #19
 8006af6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b1a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11a      	bne.n	8006b58 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d903      	bls.n	8006b36 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b54:	6113      	str	r3, [r2, #16]
 8006b56:	e01b      	b.n	8006b90 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b64:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6919      	ldr	r1, [r3, #16]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	440b      	add	r3, r1
 8006b70:	1e59      	subs	r1, r3, #1
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b7a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b7c:	4ba2      	ldr	r3, [pc, #648]	@ (8006e08 <USB_EPStartXfer+0x3c0>)
 8006b7e:	400b      	ands	r3, r1
 8006b80:	69b9      	ldr	r1, [r7, #24]
 8006b82:	0148      	lsls	r0, r1, #5
 8006b84:	69f9      	ldr	r1, [r7, #28]
 8006b86:	4401      	add	r1, r0
 8006b88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba6:	69b9      	ldr	r1, [r7, #24]
 8006ba8:	0148      	lsls	r0, r1, #5
 8006baa:	69f9      	ldr	r1, [r7, #28]
 8006bac:	4401      	add	r1, r0
 8006bae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	791b      	ldrb	r3, [r3, #4]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d11f      	bne.n	8006bfe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006bdc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bfc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d14b      	bne.n	8006c9c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	791b      	ldrb	r3, [r3, #4]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d128      	bne.n	8006c7a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d110      	bne.n	8006c5a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e00f      	b.n	8006c7a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	e165      	b.n	8006f68 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006cba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	791b      	ldrb	r3, [r3, #4]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d015      	beq.n	8006cf0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 814d 	beq.w	8006f68 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	2101      	movs	r1, #1
 8006ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce4:	69f9      	ldr	r1, [r7, #28]
 8006ce6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cea:	4313      	orrs	r3, r2
 8006cec:	634b      	str	r3, [r1, #52]	@ 0x34
 8006cee:	e13b      	b.n	8006f68 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d110      	bne.n	8006d22 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	e00f      	b.n	8006d42 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	68d9      	ldr	r1, [r3, #12]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	b298      	uxth	r0, r3
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4603      	mov	r3, r0
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f9b8 	bl	80070cc <USB_WritePacket>
 8006d5c:	e104      	b.n	8006f68 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d78:	0cdb      	lsrs	r3, r3, #19
 8006d7a:	04db      	lsls	r3, r3, #19
 8006d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d98:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d9c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006da0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d131      	bne.n	8006e0c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dcc:	691a      	ldr	r2, [r3, #16]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dd6:	69b9      	ldr	r1, [r7, #24]
 8006dd8:	0148      	lsls	r0, r1, #5
 8006dda:	69f9      	ldr	r1, [r7, #28]
 8006ddc:	4401      	add	r1, r0
 8006dde:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006de2:	4313      	orrs	r3, r2
 8006de4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e04:	6113      	str	r3, [r2, #16]
 8006e06:	e061      	b.n	8006ecc <USB_EPStartXfer+0x484>
 8006e08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d123      	bne.n	8006e5c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e2a:	69b9      	ldr	r1, [r7, #24]
 8006e2c:	0148      	lsls	r0, r1, #5
 8006e2e:	69f9      	ldr	r1, [r7, #28]
 8006e30:	4401      	add	r1, r0
 8006e32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e36:	4313      	orrs	r3, r2
 8006e38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e58:	6113      	str	r3, [r2, #16]
 8006e5a:	e037      	b.n	8006ecc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	4413      	add	r3, r2
 8006e66:	1e5a      	subs	r2, r3, #1
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	8afa      	ldrh	r2, [r7, #22]
 8006e78:	fb03 f202 	mul.w	r2, r3, r2
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	8afb      	ldrh	r3, [r7, #22]
 8006e90:	04d9      	lsls	r1, r3, #19
 8006e92:	4b38      	ldr	r3, [pc, #224]	@ (8006f74 <USB_EPStartXfer+0x52c>)
 8006e94:	400b      	ands	r3, r1
 8006e96:	69b9      	ldr	r1, [r7, #24]
 8006e98:	0148      	lsls	r0, r1, #5
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	4401      	add	r1, r0
 8006e9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	0148      	lsls	r0, r1, #5
 8006ec0:	69f9      	ldr	r1, [r7, #28]
 8006ec2:	4401      	add	r1, r0
 8006ec4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d10d      	bne.n	8006eee <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	68d9      	ldr	r1, [r3, #12]
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eea:	460a      	mov	r2, r1
 8006eec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	791b      	ldrb	r3, [r3, #4]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d128      	bne.n	8006f48 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d110      	bne.n	8006f28 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e00f      	b.n	8006f48 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3720      	adds	r7, #32
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	1ff80000 	.word	0x1ff80000

08006f78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d14a      	bne.n	800702c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fae:	f040 8086 	bne.w	80070be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	7812      	ldrb	r2, [r2, #0]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	7812      	ldrb	r2, [r2, #0]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ff8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007006:	4293      	cmp	r3, r2
 8007008:	d902      	bls.n	8007010 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	75fb      	strb	r3, [r7, #23]
          break;
 800700e:	e056      	b.n	80070be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007024:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007028:	d0e7      	beq.n	8006ffa <USB_EPStopXfer+0x82>
 800702a:	e048      	b.n	80070be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007044:	d13b      	bne.n	80070be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	7812      	ldrb	r2, [r2, #0]
 800705a:	0151      	lsls	r1, r2, #5
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	440a      	add	r2, r1
 8007060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007064:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007068:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007088:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800708c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3301      	adds	r3, #1
 8007092:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f242 7210 	movw	r2, #10000	@ 0x2710
 800709a:	4293      	cmp	r3, r2
 800709c:	d902      	bls.n	80070a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	75fb      	strb	r3, [r7, #23]
          break;
 80070a2:	e00c      	b.n	80070be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070bc:	d0e7      	beq.n	800708e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b089      	sub	sp, #36	@ 0x24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4611      	mov	r1, r2
 80070d8:	461a      	mov	r2, r3
 80070da:	460b      	mov	r3, r1
 80070dc:	71fb      	strb	r3, [r7, #7]
 80070de:	4613      	mov	r3, r2
 80070e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d123      	bne.n	800713a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070f2:	88bb      	ldrh	r3, [r7, #4]
 80070f4:	3303      	adds	r3, #3
 80070f6:	089b      	lsrs	r3, r3, #2
 80070f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	e018      	b.n	8007132 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	031a      	lsls	r2, r3, #12
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800710c:	461a      	mov	r2, r3
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	3301      	adds	r3, #1
 8007118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	3301      	adds	r3, #1
 800711e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	3301      	adds	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	3301      	adds	r3, #1
 800712a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	3301      	adds	r3, #1
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	d3e2      	bcc.n	8007100 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3724      	adds	r7, #36	@ 0x24
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007148:	b480      	push	{r7}
 800714a:	b08b      	sub	sp, #44	@ 0x2c
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	089b      	lsrs	r3, r3, #2
 8007162:	b29b      	uxth	r3, r3
 8007164:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800716e:	2300      	movs	r3, #0
 8007170:	623b      	str	r3, [r7, #32]
 8007172:	e014      	b.n	800719e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	3301      	adds	r3, #1
 8007184:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	3301      	adds	r3, #1
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	3301      	adds	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	3301      	adds	r3, #1
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	3301      	adds	r3, #1
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	6a3a      	ldr	r2, [r7, #32]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3e6      	bcc.n	8007174 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071a6:	8bfb      	ldrh	r3, [r7, #30]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01e      	beq.n	80071ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071b6:	461a      	mov	r2, r3
 80071b8:	f107 0310 	add.w	r3, r7, #16
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	701a      	strb	r2, [r3, #0]
      i++;
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	3301      	adds	r3, #1
 80071d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071da:	3301      	adds	r3, #1
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80071de:	8bfb      	ldrh	r3, [r7, #30]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071e4:	8bfb      	ldrh	r3, [r7, #30]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1ea      	bne.n	80071c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	372c      	adds	r7, #44	@ 0x2c
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d12c      	bne.n	800726e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	db12      	blt.n	800724c <USB_EPSetStall+0x54>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00f      	beq.n	800724c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	0151      	lsls	r1, r2, #5
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	440a      	add	r2, r1
 8007242:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007246:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800724a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	0151      	lsls	r1, r2, #5
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	440a      	add	r2, r1
 8007262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007266:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	e02b      	b.n	80072c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	db12      	blt.n	80072a6 <USB_EPSetStall+0xae>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00f      	beq.n	80072a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	440a      	add	r2, r1
 800729c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d128      	bne.n	8007342 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800730a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800730e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	791b      	ldrb	r3, [r3, #4]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d003      	beq.n	8007320 <USB_EPClearStall+0x4c>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	791b      	ldrb	r3, [r3, #4]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d138      	bne.n	8007392 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800733a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	e027      	b.n	8007392 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	0151      	lsls	r1, r2, #5
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	440a      	add	r2, r1
 8007358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800735c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007360:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	791b      	ldrb	r3, [r3, #4]
 8007366:	2b03      	cmp	r3, #3
 8007368:	d003      	beq.n	8007372 <USB_EPClearStall+0x9e>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	791b      	ldrb	r3, [r3, #4]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d10f      	bne.n	8007392 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007390:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80073c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80073d4:	68f9      	ldr	r1, [r7, #12]
 80073d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073da:	4313      	orrs	r3, r2
 80073dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800741a:	f023 0302 	bic.w	r3, r3, #2
 800741e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007448:	f023 0303 	bic.w	r3, r3, #3
 800744c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4013      	ands	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007488:	68fb      	ldr	r3, [r7, #12]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	0c1b      	lsrs	r3, r3, #16
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	4013      	ands	r3, r2
 80074ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	b29b      	uxth	r3, r3
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	4013      	ands	r3, r2
 800752a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800752c:	68bb      	ldr	r3, [r7, #8]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800753a:	b480      	push	{r7}
 800753c:	b087      	sub	sp, #28
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800755a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800755c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	f003 030f 	and.w	r3, r3, #15
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	fa22 f303 	lsr.w	r3, r2, r3
 800756a:	01db      	lsls	r3, r3, #7
 800756c:	b2db      	uxtb	r3, r3
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4013      	ands	r3, r2
 8007586:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007588:	68bb      	ldr	r3, [r7, #8]
}
 800758a:	4618      	mov	r0, r3
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f003 0301 	and.w	r3, r3, #1
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80075d0:	f023 0307 	bic.w	r3, r3, #7
 80075d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	460b      	mov	r3, r1
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	333c      	adds	r3, #60	@ 0x3c
 800760e:	3304      	adds	r3, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	4a26      	ldr	r2, [pc, #152]	@ (80076b0 <USB_EP0_OutStart+0xb8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d90a      	bls.n	8007632 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800762c:	d101      	bne.n	8007632 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	e037      	b.n	80076a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007638:	461a      	mov	r2, r3
 800763a:	2300      	movs	r3, #0
 800763c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800764c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007660:	f043 0318 	orr.w	r3, r3, #24
 8007664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007674:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007678:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800767a:	7afb      	ldrb	r3, [r7, #11]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d10f      	bne.n	80076a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007686:	461a      	mov	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800769a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800769e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	4f54300a 	.word	0x4f54300a

080076b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3301      	adds	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076cc:	d901      	bls.n	80076d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e01b      	b.n	800770a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	daf2      	bge.n	80076c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f043 0201 	orr.w	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076f6:	d901      	bls.n	80076fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e006      	b.n	800770a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b01      	cmp	r3, #1
 8007706:	d0f0      	beq.n	80076ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
	...

08007718 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007724:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007728:	f002 fca8 	bl	800a07c <USBD_static_malloc>
 800772c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d109      	bne.n	8007748 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32b0      	adds	r2, #176	@ 0xb0
 800773e:	2100      	movs	r1, #0
 8007740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007744:	2302      	movs	r3, #2
 8007746:	e0d4      	b.n	80078f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007748:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800774c:	2100      	movs	r1, #0
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f002 fcf8 	bl	800a144 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	32b0      	adds	r2, #176	@ 0xb0
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	32b0      	adds	r2, #176	@ 0xb0
 800776e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7c1b      	ldrb	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d138      	bne.n	80077f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007780:	4b5e      	ldr	r3, [pc, #376]	@ (80078fc <USBD_CDC_Init+0x1e4>)
 8007782:	7819      	ldrb	r1, [r3, #0]
 8007784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007788:	2202      	movs	r2, #2
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f002 fb53 	bl	8009e36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007790:	4b5a      	ldr	r3, [pc, #360]	@ (80078fc <USBD_CDC_Init+0x1e4>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	3324      	adds	r3, #36	@ 0x24
 80077a6:	2201      	movs	r2, #1
 80077a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077aa:	4b55      	ldr	r3, [pc, #340]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 80077ac:	7819      	ldrb	r1, [r3, #0]
 80077ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077b2:	2202      	movs	r2, #2
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f002 fb3e 	bl	8009e36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077ba:	4b51      	ldr	r3, [pc, #324]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 020f 	and.w	r2, r3, #15
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80077d2:	2201      	movs	r2, #1
 80077d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80077d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007904 <USBD_CDC_Init+0x1ec>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 020f 	and.w	r2, r3, #15
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	3326      	adds	r3, #38	@ 0x26
 80077ec:	2210      	movs	r2, #16
 80077ee:	801a      	strh	r2, [r3, #0]
 80077f0:	e035      	b.n	800785e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077f2:	4b42      	ldr	r3, [pc, #264]	@ (80078fc <USBD_CDC_Init+0x1e4>)
 80077f4:	7819      	ldrb	r1, [r3, #0]
 80077f6:	2340      	movs	r3, #64	@ 0x40
 80077f8:	2202      	movs	r2, #2
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f002 fb1b 	bl	8009e36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007800:	4b3e      	ldr	r3, [pc, #248]	@ (80078fc <USBD_CDC_Init+0x1e4>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f003 020f 	and.w	r2, r3, #15
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	3324      	adds	r3, #36	@ 0x24
 8007816:	2201      	movs	r2, #1
 8007818:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800781a:	4b39      	ldr	r3, [pc, #228]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 800781c:	7819      	ldrb	r1, [r3, #0]
 800781e:	2340      	movs	r3, #64	@ 0x40
 8007820:	2202      	movs	r2, #2
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f002 fb07 	bl	8009e36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007828:	4b35      	ldr	r3, [pc, #212]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007840:	2201      	movs	r2, #1
 8007842:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007844:	4b2f      	ldr	r3, [pc, #188]	@ (8007904 <USBD_CDC_Init+0x1ec>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 020f 	and.w	r2, r3, #15
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	3326      	adds	r3, #38	@ 0x26
 800785a:	2210      	movs	r2, #16
 800785c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800785e:	4b29      	ldr	r3, [pc, #164]	@ (8007904 <USBD_CDC_Init+0x1ec>)
 8007860:	7819      	ldrb	r1, [r3, #0]
 8007862:	2308      	movs	r3, #8
 8007864:	2203      	movs	r2, #3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f002 fae5 	bl	8009e36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800786c:	4b25      	ldr	r3, [pc, #148]	@ (8007904 <USBD_CDC_Init+0x1ec>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 020f 	and.w	r2, r3, #15
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	3324      	adds	r3, #36	@ 0x24
 8007882:	2201      	movs	r2, #1
 8007884:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	33b0      	adds	r3, #176	@ 0xb0
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80078bc:	2302      	movs	r3, #2
 80078be:	e018      	b.n	80078f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	7c1b      	ldrb	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 80078ca:	7819      	ldrb	r1, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f002 fb9c 	bl	800a014 <USBD_LL_PrepareReceive>
 80078dc:	e008      	b.n	80078f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078de:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <USBD_CDC_Init+0x1e8>)
 80078e0:	7819      	ldrb	r1, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078e8:	2340      	movs	r3, #64	@ 0x40
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f002 fb92 	bl	800a014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000093 	.word	0x20000093
 8007900:	20000094 	.word	0x20000094
 8007904:	20000095 	.word	0x20000095

08007908 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007914:	4b3a      	ldr	r3, [pc, #232]	@ (8007a00 <USBD_CDC_DeInit+0xf8>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f002 fab1 	bl	8009e82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007920:	4b37      	ldr	r3, [pc, #220]	@ (8007a00 <USBD_CDC_DeInit+0xf8>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	f003 020f 	and.w	r2, r3, #15
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	3324      	adds	r3, #36	@ 0x24
 8007936:	2200      	movs	r2, #0
 8007938:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800793a:	4b32      	ldr	r3, [pc, #200]	@ (8007a04 <USBD_CDC_DeInit+0xfc>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f002 fa9e 	bl	8009e82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007946:	4b2f      	ldr	r3, [pc, #188]	@ (8007a04 <USBD_CDC_DeInit+0xfc>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	f003 020f 	and.w	r2, r3, #15
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800795e:	2200      	movs	r2, #0
 8007960:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007962:	4b29      	ldr	r3, [pc, #164]	@ (8007a08 <USBD_CDC_DeInit+0x100>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f002 fa8a 	bl	8009e82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800796e:	4b26      	ldr	r3, [pc, #152]	@ (8007a08 <USBD_CDC_DeInit+0x100>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 020f 	and.w	r2, r3, #15
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	3324      	adds	r3, #36	@ 0x24
 8007984:	2200      	movs	r2, #0
 8007986:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007988:	4b1f      	ldr	r3, [pc, #124]	@ (8007a08 <USBD_CDC_DeInit+0x100>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	3326      	adds	r3, #38	@ 0x26
 800799e:	2200      	movs	r2, #0
 80079a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	32b0      	adds	r2, #176	@ 0xb0
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01f      	beq.n	80079f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	33b0      	adds	r3, #176	@ 0xb0
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	32b0      	adds	r2, #176	@ 0xb0
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f002 fb5e 	bl	800a098 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	32b0      	adds	r2, #176	@ 0xb0
 80079e6:	2100      	movs	r1, #0
 80079e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000093 	.word	0x20000093
 8007a04:	20000094 	.word	0x20000094
 8007a08:	20000095 	.word	0x20000095

08007a0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	32b0      	adds	r2, #176	@ 0xb0
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e0bf      	b.n	8007bbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d050      	beq.n	8007aea <USBD_CDC_Setup+0xde>
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	f040 80af 	bne.w	8007bac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d03a      	beq.n	8007acc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b25b      	sxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da1b      	bge.n	8007a98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	33b0      	adds	r3, #176	@ 0xb0
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	88d2      	ldrh	r2, [r2, #6]
 8007a7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	88db      	ldrh	r3, [r3, #6]
 8007a82:	2b07      	cmp	r3, #7
 8007a84:	bf28      	it	cs
 8007a86:	2307      	movcs	r3, #7
 8007a88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	89fa      	ldrh	r2, [r7, #14]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fd87 	bl	80095a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007a96:	e090      	b.n	8007bba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	785a      	ldrb	r2, [r3, #1]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88db      	ldrh	r3, [r3, #6]
 8007aa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007aa8:	d803      	bhi.n	8007ab2 <USBD_CDC_Setup+0xa6>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	88db      	ldrh	r3, [r3, #6]
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	e000      	b.n	8007ab4 <USBD_CDC_Setup+0xa8>
 8007ab2:	2240      	movs	r2, #64	@ 0x40
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007aba:	6939      	ldr	r1, [r7, #16]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 fd99 	bl	80095fc <USBD_CtlPrepareRx>
      break;
 8007aca:	e076      	b.n	8007bba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	33b0      	adds	r3, #176	@ 0xb0
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	7850      	ldrb	r0, [r2, #1]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	4798      	blx	r3
      break;
 8007ae8:	e067      	b.n	8007bba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b0b      	cmp	r3, #11
 8007af0:	d851      	bhi.n	8007b96 <USBD_CDC_Setup+0x18a>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <USBD_CDC_Setup+0xec>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b29 	.word	0x08007b29
 8007afc:	08007ba5 	.word	0x08007ba5
 8007b00:	08007b97 	.word	0x08007b97
 8007b04:	08007b97 	.word	0x08007b97
 8007b08:	08007b97 	.word	0x08007b97
 8007b0c:	08007b97 	.word	0x08007b97
 8007b10:	08007b97 	.word	0x08007b97
 8007b14:	08007b97 	.word	0x08007b97
 8007b18:	08007b97 	.word	0x08007b97
 8007b1c:	08007b97 	.word	0x08007b97
 8007b20:	08007b53 	.word	0x08007b53
 8007b24:	08007b7d 	.word	0x08007b7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d107      	bne.n	8007b44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b34:	f107 030a 	add.w	r3, r7, #10
 8007b38:	2202      	movs	r2, #2
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fd31 	bl	80095a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b42:	e032      	b.n	8007baa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fcbb 	bl	80094c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007b50:	e02b      	b.n	8007baa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d107      	bne.n	8007b6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b5e:	f107 030d 	add.w	r3, r7, #13
 8007b62:	2201      	movs	r2, #1
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 fd1c 	bl	80095a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b6c:	e01d      	b.n	8007baa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 fca6 	bl	80094c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b76:	2303      	movs	r3, #3
 8007b78:	75fb      	strb	r3, [r7, #23]
          break;
 8007b7a:	e016      	b.n	8007baa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d00f      	beq.n	8007ba8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fc99 	bl	80094c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b94:	e008      	b.n	8007ba8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 fc92 	bl	80094c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ba2:	e002      	b.n	8007baa <USBD_CDC_Setup+0x19e>
          break;
 8007ba4:	bf00      	nop
 8007ba6:	e008      	b.n	8007bba <USBD_CDC_Setup+0x1ae>
          break;
 8007ba8:	bf00      	nop
      }
      break;
 8007baa:	e006      	b.n	8007bba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 fc87 	bl	80094c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	32b0      	adds	r2, #176	@ 0xb0
 8007be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e065      	b.n	8007cba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	32b0      	adds	r2, #176	@ 0xb0
 8007bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	f003 020f 	and.w	r2, r3, #15
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	3318      	adds	r3, #24
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d02f      	beq.n	8007c78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	f003 020f 	and.w	r2, r3, #15
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	3318      	adds	r3, #24
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	f003 010f 	and.w	r1, r3, #15
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	460b      	mov	r3, r1
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	440b      	add	r3, r1
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4403      	add	r3, r0
 8007c40:	331c      	adds	r3, #28
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d112      	bne.n	8007c78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	f003 020f 	and.w	r2, r3, #15
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	3318      	adds	r3, #24
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c6a:	78f9      	ldrb	r1, [r7, #3]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f002 f9ae 	bl	8009fd2 <USBD_LL_Transmit>
 8007c76:	e01f      	b.n	8007cb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	33b0      	adds	r3, #176	@ 0xb0
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d010      	beq.n	8007cb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	33b0      	adds	r3, #176	@ 0xb0
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007cb4:	78fa      	ldrb	r2, [r7, #3]
 8007cb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	32b0      	adds	r2, #176	@ 0xb0
 8007cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	32b0      	adds	r2, #176	@ 0xb0
 8007ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e01a      	b.n	8007d2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f002 f9ac 	bl	800a056 <USBD_LL_GetRxDataSize>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	33b0      	adds	r3, #176	@ 0xb0
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d24:	4611      	mov	r1, r2
 8007d26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	32b0      	adds	r2, #176	@ 0xb0
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e024      	b.n	8007d9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	33b0      	adds	r3, #176	@ 0xb0
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d019      	beq.n	8007d9c <USBD_CDC_EP0_RxReady+0x6a>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007d6e:	2bff      	cmp	r3, #255	@ 0xff
 8007d70:	d014      	beq.n	8007d9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	33b0      	adds	r3, #176	@ 0xb0
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007d8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	22ff      	movs	r2, #255	@ 0xff
 8007d98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007db0:	2182      	movs	r1, #130	@ 0x82
 8007db2:	4818      	ldr	r0, [pc, #96]	@ (8007e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007db4:	f000 fd4f 	bl	8008856 <USBD_GetEpDesc>
 8007db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4815      	ldr	r0, [pc, #84]	@ (8007e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dbe:	f000 fd4a 	bl	8008856 <USBD_GetEpDesc>
 8007dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007dc4:	2181      	movs	r1, #129	@ 0x81
 8007dc6:	4813      	ldr	r0, [pc, #76]	@ (8007e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dc8:	f000 fd45 	bl	8008856 <USBD_GetEpDesc>
 8007dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2210      	movs	r2, #16
 8007dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d006      	beq.n	8007dee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007de8:	711a      	strb	r2, [r3, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d006      	beq.n	8007e02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dfc:	711a      	strb	r2, [r3, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2243      	movs	r2, #67	@ 0x43
 8007e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e08:	4b02      	ldr	r3, [pc, #8]	@ (8007e14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000050 	.word	0x20000050

08007e18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e20:	2182      	movs	r1, #130	@ 0x82
 8007e22:	4818      	ldr	r0, [pc, #96]	@ (8007e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e24:	f000 fd17 	bl	8008856 <USBD_GetEpDesc>
 8007e28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	4815      	ldr	r0, [pc, #84]	@ (8007e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e2e:	f000 fd12 	bl	8008856 <USBD_GetEpDesc>
 8007e32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e34:	2181      	movs	r1, #129	@ 0x81
 8007e36:	4813      	ldr	r0, [pc, #76]	@ (8007e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e38:	f000 fd0d 	bl	8008856 <USBD_GetEpDesc>
 8007e3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2210      	movs	r2, #16
 8007e48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d006      	beq.n	8007e5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2200      	movs	r2, #0
 8007e54:	711a      	strb	r2, [r3, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f042 0202 	orr.w	r2, r2, #2
 8007e5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	711a      	strb	r2, [r3, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f042 0202 	orr.w	r2, r2, #2
 8007e70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2243      	movs	r2, #67	@ 0x43
 8007e76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e78:	4b02      	ldr	r3, [pc, #8]	@ (8007e84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20000050 	.word	0x20000050

08007e88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e90:	2182      	movs	r1, #130	@ 0x82
 8007e92:	4818      	ldr	r0, [pc, #96]	@ (8007ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e94:	f000 fcdf 	bl	8008856 <USBD_GetEpDesc>
 8007e98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	4815      	ldr	r0, [pc, #84]	@ (8007ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e9e:	f000 fcda 	bl	8008856 <USBD_GetEpDesc>
 8007ea2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ea4:	2181      	movs	r1, #129	@ 0x81
 8007ea6:	4813      	ldr	r0, [pc, #76]	@ (8007ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ea8:	f000 fcd5 	bl	8008856 <USBD_GetEpDesc>
 8007eac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2210      	movs	r2, #16
 8007eb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ec8:	711a      	strb	r2, [r3, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d006      	beq.n	8007ee2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007edc:	711a      	strb	r2, [r3, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2243      	movs	r2, #67	@ 0x43
 8007ee6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ee8:	4b02      	ldr	r3, [pc, #8]	@ (8007ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000050 	.word	0x20000050

08007ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	220a      	movs	r2, #10
 8007f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f06:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	2000000c 	.word	0x2000000c

08007f18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e009      	b.n	8007f40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	33b0      	adds	r3, #176	@ 0xb0
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	32b0      	adds	r2, #176	@ 0xb0
 8007f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e008      	b.n	8007f84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32b0      	adds	r2, #176	@ 0xb0
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e004      	b.n	8007fbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
	...

08007fcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	32b0      	adds	r2, #176	@ 0xb0
 8007fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e025      	b.n	800803e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11f      	bne.n	800803c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008004:	4b10      	ldr	r3, [pc, #64]	@ (8008048 <USBD_CDC_TransmitPacket+0x7c>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f003 020f 	and.w	r2, r3, #15
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4403      	add	r3, r0
 800801e:	3318      	adds	r3, #24
 8008020:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008022:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <USBD_CDC_TransmitPacket+0x7c>)
 8008024:	7819      	ldrb	r1, [r3, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 ffcd 	bl	8009fd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20000093 	.word	0x20000093

0800804c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	32b0      	adds	r2, #176	@ 0xb0
 800805e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008062:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	32b0      	adds	r2, #176	@ 0xb0
 800806e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008076:	2303      	movs	r3, #3
 8008078:	e018      	b.n	80080ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7c1b      	ldrb	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <USBD_CDC_ReceivePacket+0x68>)
 8008084:	7819      	ldrb	r1, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800808c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 ffbf 	bl	800a014 <USBD_LL_PrepareReceive>
 8008096:	e008      	b.n	80080aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008098:	4b06      	ldr	r3, [pc, #24]	@ (80080b4 <USBD_CDC_ReceivePacket+0x68>)
 800809a:	7819      	ldrb	r1, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080a2:	2340      	movs	r3, #64	@ 0x40
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 ffb5 	bl	800a014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000094 	.word	0x20000094

080080b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e01f      	b.n	8008110 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	79fa      	ldrb	r2, [r7, #7]
 8008102:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f001 fe2f 	bl	8009d68 <USBD_LL_Init>
 800810a:	4603      	mov	r3, r0
 800810c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800810e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	e025      	b.n	800817c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	32ae      	adds	r2, #174	@ 0xae
 8008142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00f      	beq.n	800816c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	32ae      	adds	r2, #174	@ 0xae
 8008156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	f107 020e 	add.w	r2, r7, #14
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fe37 	bl	8009e00 <USBD_LL_Start>
 8008192:	4603      	mov	r3, r0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	460b      	mov	r3, r1
 80081bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	4611      	mov	r1, r2
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	4611      	mov	r1, r2
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f001 f90c 	bl	800944e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008244:	461a      	mov	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	2b02      	cmp	r3, #2
 8008258:	d01a      	beq.n	8008290 <USBD_LL_SetupStage+0x72>
 800825a:	2b02      	cmp	r3, #2
 800825c:	d822      	bhi.n	80082a4 <USBD_LL_SetupStage+0x86>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <USBD_LL_SetupStage+0x4a>
 8008262:	2b01      	cmp	r3, #1
 8008264:	d00a      	beq.n	800827c <USBD_LL_SetupStage+0x5e>
 8008266:	e01d      	b.n	80082a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fb63 	bl	800893c <USBD_StdDevReq>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]
      break;
 800827a:	e020      	b.n	80082be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fbcb 	bl	8008a20 <USBD_StdItfReq>
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
      break;
 800828e:	e016      	b.n	80082be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc2d 	bl	8008af8 <USBD_StdEPReq>
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
      break;
 80082a2:	e00c      	b.n	80082be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 fe04 	bl	8009ec0 <USBD_LL_StallEP>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
      break;
 80082bc:	bf00      	nop
  }

  return ret;
 80082be:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	460b      	mov	r3, r1
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d16e      	bne.n	80083be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80082e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f040 8098 	bne.w	8008424 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d913      	bls.n	8008328 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	1ad2      	subs	r2, r2, r3
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	4293      	cmp	r3, r2
 8008318:	bf28      	it	cs
 800831a:	4613      	movcs	r3, r2
 800831c:	461a      	mov	r2, r3
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f001 f988 	bl	8009636 <USBD_CtlContinueRx>
 8008326:	e07d      	b.n	8008424 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800832e:	f003 031f 	and.w	r3, r3, #31
 8008332:	2b02      	cmp	r3, #2
 8008334:	d014      	beq.n	8008360 <USBD_LL_DataOutStage+0x98>
 8008336:	2b02      	cmp	r3, #2
 8008338:	d81d      	bhi.n	8008376 <USBD_LL_DataOutStage+0xae>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <USBD_LL_DataOutStage+0x7c>
 800833e:	2b01      	cmp	r3, #1
 8008340:	d003      	beq.n	800834a <USBD_LL_DataOutStage+0x82>
 8008342:	e018      	b.n	8008376 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	75bb      	strb	r3, [r7, #22]
            break;
 8008348:	e018      	b.n	800837c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008350:	b2db      	uxtb	r3, r3
 8008352:	4619      	mov	r1, r3
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 fa64 	bl	8008822 <USBD_CoreFindIF>
 800835a:	4603      	mov	r3, r0
 800835c:	75bb      	strb	r3, [r7, #22]
            break;
 800835e:	e00d      	b.n	800837c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008366:	b2db      	uxtb	r3, r3
 8008368:	4619      	mov	r1, r3
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fa66 	bl	800883c <USBD_CoreFindEP>
 8008370:	4603      	mov	r3, r0
 8008372:	75bb      	strb	r3, [r7, #22]
            break;
 8008374:	e002      	b.n	800837c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	75bb      	strb	r3, [r7, #22]
            break;
 800837a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800837c:	7dbb      	ldrb	r3, [r7, #22]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d119      	bne.n	80083b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b03      	cmp	r3, #3
 800838c:	d113      	bne.n	80083b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800838e:	7dba      	ldrb	r2, [r7, #22]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	32ae      	adds	r2, #174	@ 0xae
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800839e:	7dba      	ldrb	r2, [r7, #22]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083a6:	7dba      	ldrb	r2, [r7, #22]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	32ae      	adds	r2, #174	@ 0xae
 80083ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f001 f94e 	bl	8009658 <USBD_CtlSendStatus>
 80083bc:	e032      	b.n	8008424 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083be:	7afb      	ldrb	r3, [r7, #11]
 80083c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	4619      	mov	r1, r3
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 fa37 	bl	800883c <USBD_CoreFindEP>
 80083ce:	4603      	mov	r3, r0
 80083d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083d2:	7dbb      	ldrb	r3, [r7, #22]
 80083d4:	2bff      	cmp	r3, #255	@ 0xff
 80083d6:	d025      	beq.n	8008424 <USBD_LL_DataOutStage+0x15c>
 80083d8:	7dbb      	ldrb	r3, [r7, #22]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d122      	bne.n	8008424 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d117      	bne.n	800841a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80083ea:	7dba      	ldrb	r2, [r7, #22]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	32ae      	adds	r2, #174	@ 0xae
 80083f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00f      	beq.n	800841a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80083fa:	7dba      	ldrb	r2, [r7, #22]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008402:	7dba      	ldrb	r2, [r7, #22]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	32ae      	adds	r2, #174	@ 0xae
 8008408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	7afa      	ldrb	r2, [r7, #11]
 8008410:	4611      	mov	r1, r2
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	4798      	blx	r3
 8008416:	4603      	mov	r3, r0
 8008418:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	e000      	b.n	8008426 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b086      	sub	sp, #24
 8008432:	af00      	add	r7, sp, #0
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	460b      	mov	r3, r1
 8008438:	607a      	str	r2, [r7, #4]
 800843a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d16f      	bne.n	8008522 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3314      	adds	r3, #20
 8008446:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800844e:	2b02      	cmp	r3, #2
 8008450:	d15a      	bne.n	8008508 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	689a      	ldr	r2, [r3, #8]
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	429a      	cmp	r2, r3
 800845c:	d914      	bls.n	8008488 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	1ad2      	subs	r2, r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	461a      	mov	r2, r3
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f001 f8b0 	bl	80095da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800847a:	2300      	movs	r3, #0
 800847c:	2200      	movs	r2, #0
 800847e:	2100      	movs	r1, #0
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f001 fdc7 	bl	800a014 <USBD_LL_PrepareReceive>
 8008486:	e03f      	b.n	8008508 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	429a      	cmp	r2, r3
 8008492:	d11c      	bne.n	80084ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800849c:	429a      	cmp	r2, r3
 800849e:	d316      	bcc.n	80084ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d20f      	bcs.n	80084ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084ae:	2200      	movs	r2, #0
 80084b0:	2100      	movs	r1, #0
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f001 f891 	bl	80095da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084c0:	2300      	movs	r3, #0
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f001 fda4 	bl	800a014 <USBD_LL_PrepareReceive>
 80084cc:	e01c      	b.n	8008508 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d10f      	bne.n	80084fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084fa:	2180      	movs	r1, #128	@ 0x80
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f001 fcdf 	bl	8009ec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f001 f8bb 	bl	800967e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d03a      	beq.n	8008588 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fe42 	bl	800819c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008520:	e032      	b.n	8008588 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008528:	b2db      	uxtb	r3, r3
 800852a:	4619      	mov	r1, r3
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f985 	bl	800883c <USBD_CoreFindEP>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	2bff      	cmp	r3, #255	@ 0xff
 800853a:	d025      	beq.n	8008588 <USBD_LL_DataInStage+0x15a>
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d122      	bne.n	8008588 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b03      	cmp	r3, #3
 800854c:	d11c      	bne.n	8008588 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800854e:	7dfa      	ldrb	r2, [r7, #23]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	32ae      	adds	r2, #174	@ 0xae
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d014      	beq.n	8008588 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800855e:	7dfa      	ldrb	r2, [r7, #23]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008566:	7dfa      	ldrb	r2, [r7, #23]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	32ae      	adds	r2, #174	@ 0xae
 800856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	7afa      	ldrb	r2, [r7, #11]
 8008574:	4611      	mov	r1, r2
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	4798      	blx	r3
 800857a:	4603      	mov	r3, r0
 800857c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800857e:	7dbb      	ldrb	r3, [r7, #22]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008584:	7dbb      	ldrb	r3, [r7, #22]
 8008586:	e000      	b.n	800858a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d014      	beq.n	80085f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00e      	beq.n	80085f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6852      	ldr	r2, [r2, #4]
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	4611      	mov	r1, r2
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80085f4:	2303      	movs	r3, #3
 80085f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f8:	2340      	movs	r3, #64	@ 0x40
 80085fa:	2200      	movs	r2, #0
 80085fc:	2100      	movs	r1, #0
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 fc19 	bl	8009e36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2240      	movs	r2, #64	@ 0x40
 8008610:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008614:	2340      	movs	r3, #64	@ 0x40
 8008616:	2200      	movs	r2, #0
 8008618:	2180      	movs	r1, #128	@ 0x80
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fc0b 	bl	8009e36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2240      	movs	r2, #64	@ 0x40
 800862a:	621a      	str	r2, [r3, #32]

  return ret;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	78fa      	ldrb	r2, [r7, #3]
 8008646:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b04      	cmp	r3, #4
 8008668:	d006      	beq.n	8008678 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008670:	b2da      	uxtb	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2204      	movs	r2, #4
 800867c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d106      	bne.n	80086b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d110      	bne.n	80086f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	32ae      	adds	r2, #174	@ 0xae
 8008714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800871c:	2303      	movs	r3, #3
 800871e:	e01c      	b.n	800875a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b03      	cmp	r3, #3
 800872a:	d115      	bne.n	8008758 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	32ae      	adds	r2, #174	@ 0xae
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00b      	beq.n	8008758 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	32ae      	adds	r2, #174	@ 0xae
 800874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	4611      	mov	r1, r2
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	32ae      	adds	r2, #174	@ 0xae
 8008778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	e01c      	b.n	80087be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b03      	cmp	r3, #3
 800878e:	d115      	bne.n	80087bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	32ae      	adds	r2, #174	@ 0xae
 800879a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	32ae      	adds	r2, #174	@ 0xae
 80087ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b4:	78fa      	ldrb	r2, [r7, #3]
 80087b6:	4611      	mov	r1, r2
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00e      	beq.n	8008818 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6852      	ldr	r2, [r2, #4]
 8008806:	b2d2      	uxtb	r2, r2
 8008808:	4611      	mov	r1, r2
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	4798      	blx	r3
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008814:	2303      	movs	r3, #3
 8008816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008818:	7bfb      	ldrb	r3, [r7, #15]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800882e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008848:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800884a:	4618      	mov	r0, r3
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b086      	sub	sp, #24
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	885b      	ldrh	r3, [r3, #2]
 8008872:	b29b      	uxth	r3, r3
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	7812      	ldrb	r2, [r2, #0]
 8008878:	4293      	cmp	r3, r2
 800887a:	d91f      	bls.n	80088bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008882:	e013      	b.n	80088ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008884:	f107 030a 	add.w	r3, r7, #10
 8008888:	4619      	mov	r1, r3
 800888a:	6978      	ldr	r0, [r7, #20]
 800888c:	f000 f81b 	bl	80088c6 <USBD_GetNextDesc>
 8008890:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	2b05      	cmp	r3, #5
 8008898:	d108      	bne.n	80088ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	789b      	ldrb	r3, [r3, #2]
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d008      	beq.n	80088ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80088a8:	2300      	movs	r3, #0
 80088aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	885b      	ldrh	r3, [r3, #2]
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	897b      	ldrh	r3, [r7, #10]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d8e5      	bhi.n	8008884 <USBD_GetEpDesc+0x2e>
 80088b8:	e000      	b.n	80088bc <USBD_GetEpDesc+0x66>
          break;
 80088ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80088bc:	693b      	ldr	r3, [r7, #16]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b085      	sub	sp, #20
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	7812      	ldrb	r2, [r2, #0]
 80088dc:	4413      	add	r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4413      	add	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088f0:	68fb      	ldr	r3, [r7, #12]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088fe:	b480      	push	{r7}
 8008900:	b087      	sub	sp, #28
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	3301      	adds	r3, #1
 8008914:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800891c:	8a3b      	ldrh	r3, [r7, #16]
 800891e:	021b      	lsls	r3, r3, #8
 8008920:	b21a      	sxth	r2, r3
 8008922:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008926:	4313      	orrs	r3, r2
 8008928:	b21b      	sxth	r3, r3
 800892a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800892c:	89fb      	ldrh	r3, [r7, #14]
}
 800892e:	4618      	mov	r0, r3
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
	...

0800893c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008952:	2b40      	cmp	r3, #64	@ 0x40
 8008954:	d005      	beq.n	8008962 <USBD_StdDevReq+0x26>
 8008956:	2b40      	cmp	r3, #64	@ 0x40
 8008958:	d857      	bhi.n	8008a0a <USBD_StdDevReq+0xce>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00f      	beq.n	800897e <USBD_StdDevReq+0x42>
 800895e:	2b20      	cmp	r3, #32
 8008960:	d153      	bne.n	8008a0a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	32ae      	adds	r2, #174	@ 0xae
 800896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
      break;
 800897c:	e04a      	b.n	8008a14 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	785b      	ldrb	r3, [r3, #1]
 8008982:	2b09      	cmp	r3, #9
 8008984:	d83b      	bhi.n	80089fe <USBD_StdDevReq+0xc2>
 8008986:	a201      	add	r2, pc, #4	@ (adr r2, 800898c <USBD_StdDevReq+0x50>)
 8008988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898c:	080089e1 	.word	0x080089e1
 8008990:	080089f5 	.word	0x080089f5
 8008994:	080089ff 	.word	0x080089ff
 8008998:	080089eb 	.word	0x080089eb
 800899c:	080089ff 	.word	0x080089ff
 80089a0:	080089bf 	.word	0x080089bf
 80089a4:	080089b5 	.word	0x080089b5
 80089a8:	080089ff 	.word	0x080089ff
 80089ac:	080089d7 	.word	0x080089d7
 80089b0:	080089c9 	.word	0x080089c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa3c 	bl	8008e34 <USBD_GetDescriptor>
          break;
 80089bc:	e024      	b.n	8008a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fba1 	bl	8009108 <USBD_SetAddress>
          break;
 80089c6:	e01f      	b.n	8008a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fbe0 	bl	8009190 <USBD_SetConfig>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]
          break;
 80089d4:	e018      	b.n	8008a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fc83 	bl	80092e4 <USBD_GetConfig>
          break;
 80089de:	e013      	b.n	8008a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fcb4 	bl	8009350 <USBD_GetStatus>
          break;
 80089e8:	e00e      	b.n	8008a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fce3 	bl	80093b8 <USBD_SetFeature>
          break;
 80089f2:	e009      	b.n	8008a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fd07 	bl	800940a <USBD_ClrFeature>
          break;
 80089fc:	e004      	b.n	8008a08 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fd5e 	bl	80094c2 <USBD_CtlError>
          break;
 8008a06:	bf00      	nop
      }
      break;
 8008a08:	e004      	b.n	8008a14 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fd58 	bl	80094c2 <USBD_CtlError>
      break;
 8008a12:	bf00      	nop
  }

  return ret;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop

08008a20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a36:	2b40      	cmp	r3, #64	@ 0x40
 8008a38:	d005      	beq.n	8008a46 <USBD_StdItfReq+0x26>
 8008a3a:	2b40      	cmp	r3, #64	@ 0x40
 8008a3c:	d852      	bhi.n	8008ae4 <USBD_StdItfReq+0xc4>
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <USBD_StdItfReq+0x26>
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d14e      	bne.n	8008ae4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d840      	bhi.n	8008ad6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	889b      	ldrh	r3, [r3, #4]
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d836      	bhi.n	8008acc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	889b      	ldrh	r3, [r3, #4]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fedb 	bl	8008822 <USBD_CoreFindIF>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	2bff      	cmp	r3, #255	@ 0xff
 8008a74:	d01d      	beq.n	8008ab2 <USBD_StdItfReq+0x92>
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d11a      	bne.n	8008ab2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a7c:	7bba      	ldrb	r2, [r7, #14]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32ae      	adds	r2, #174	@ 0xae
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00f      	beq.n	8008aac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a8c:	7bba      	ldrb	r2, [r7, #14]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a94:	7bba      	ldrb	r2, [r7, #14]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	32ae      	adds	r2, #174	@ 0xae
 8008a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008aaa:	e004      	b.n	8008ab6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008aac:	2303      	movs	r3, #3
 8008aae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ab0:	e001      	b.n	8008ab6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	88db      	ldrh	r3, [r3, #6]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d110      	bne.n	8008ae0 <USBD_StdItfReq+0xc0>
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10d      	bne.n	8008ae0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fdc7 	bl	8009658 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008aca:	e009      	b.n	8008ae0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fcf7 	bl	80094c2 <USBD_CtlError>
          break;
 8008ad4:	e004      	b.n	8008ae0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fcf2 	bl	80094c2 <USBD_CtlError>
          break;
 8008ade:	e000      	b.n	8008ae2 <USBD_StdItfReq+0xc2>
          break;
 8008ae0:	bf00      	nop
      }
      break;
 8008ae2:	e004      	b.n	8008aee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fceb 	bl	80094c2 <USBD_CtlError>
      break;
 8008aec:	bf00      	nop
  }

  return ret;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	889b      	ldrh	r3, [r3, #4]
 8008b0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b14:	2b40      	cmp	r3, #64	@ 0x40
 8008b16:	d007      	beq.n	8008b28 <USBD_StdEPReq+0x30>
 8008b18:	2b40      	cmp	r3, #64	@ 0x40
 8008b1a:	f200 817f 	bhi.w	8008e1c <USBD_StdEPReq+0x324>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d02a      	beq.n	8008b78 <USBD_StdEPReq+0x80>
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	f040 817a 	bne.w	8008e1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff fe85 	bl	800883c <USBD_CoreFindEP>
 8008b32:	4603      	mov	r3, r0
 8008b34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b36:	7b7b      	ldrb	r3, [r7, #13]
 8008b38:	2bff      	cmp	r3, #255	@ 0xff
 8008b3a:	f000 8174 	beq.w	8008e26 <USBD_StdEPReq+0x32e>
 8008b3e:	7b7b      	ldrb	r3, [r7, #13]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f040 8170 	bne.w	8008e26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b46:	7b7a      	ldrb	r2, [r7, #13]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b4e:	7b7a      	ldrb	r2, [r7, #13]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	32ae      	adds	r2, #174	@ 0xae
 8008b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 8163 	beq.w	8008e26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b60:	7b7a      	ldrb	r2, [r7, #13]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	32ae      	adds	r2, #174	@ 0xae
 8008b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	4798      	blx	r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b76:	e156      	b.n	8008e26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d008      	beq.n	8008b92 <USBD_StdEPReq+0x9a>
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	f300 8145 	bgt.w	8008e10 <USBD_StdEPReq+0x318>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 809b 	beq.w	8008cc2 <USBD_StdEPReq+0x1ca>
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d03c      	beq.n	8008c0a <USBD_StdEPReq+0x112>
 8008b90:	e13e      	b.n	8008e10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d002      	beq.n	8008ba4 <USBD_StdEPReq+0xac>
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d016      	beq.n	8008bd0 <USBD_StdEPReq+0xd8>
 8008ba2:	e02c      	b.n	8008bfe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00d      	beq.n	8008bc6 <USBD_StdEPReq+0xce>
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	2b80      	cmp	r3, #128	@ 0x80
 8008bae:	d00a      	beq.n	8008bc6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 f983 	bl	8009ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bba:	2180      	movs	r1, #128	@ 0x80
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f001 f97f 	bl	8009ec0 <USBD_LL_StallEP>
 8008bc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bc4:	e020      	b.n	8008c08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc7a 	bl	80094c2 <USBD_CtlError>
              break;
 8008bce:	e01b      	b.n	8008c08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	885b      	ldrh	r3, [r3, #2]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10e      	bne.n	8008bf6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <USBD_StdEPReq+0xfe>
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b80      	cmp	r3, #128	@ 0x80
 8008be2:	d008      	beq.n	8008bf6 <USBD_StdEPReq+0xfe>
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	88db      	ldrh	r3, [r3, #6]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 f965 	bl	8009ec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fd2e 	bl	8009658 <USBD_CtlSendStatus>

              break;
 8008bfc:	e004      	b.n	8008c08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fc5e 	bl	80094c2 <USBD_CtlError>
              break;
 8008c06:	bf00      	nop
          }
          break;
 8008c08:	e107      	b.n	8008e1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d002      	beq.n	8008c1c <USBD_StdEPReq+0x124>
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d016      	beq.n	8008c48 <USBD_StdEPReq+0x150>
 8008c1a:	e04b      	b.n	8008cb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00d      	beq.n	8008c3e <USBD_StdEPReq+0x146>
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b80      	cmp	r3, #128	@ 0x80
 8008c26:	d00a      	beq.n	8008c3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 f947 	bl	8009ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c32:	2180      	movs	r1, #128	@ 0x80
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 f943 	bl	8009ec0 <USBD_LL_StallEP>
 8008c3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c3c:	e040      	b.n	8008cc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fc3e 	bl	80094c2 <USBD_CtlError>
              break;
 8008c46:	e03b      	b.n	8008cc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	885b      	ldrh	r3, [r3, #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d136      	bne.n	8008cbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d004      	beq.n	8008c64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 f94d 	bl	8009efe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fcf7 	bl	8009658 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff fde4 	bl	800883c <USBD_CoreFindEP>
 8008c74:	4603      	mov	r3, r0
 8008c76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c78:	7b7b      	ldrb	r3, [r7, #13]
 8008c7a:	2bff      	cmp	r3, #255	@ 0xff
 8008c7c:	d01f      	beq.n	8008cbe <USBD_StdEPReq+0x1c6>
 8008c7e:	7b7b      	ldrb	r3, [r7, #13]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d11c      	bne.n	8008cbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008c84:	7b7a      	ldrb	r2, [r7, #13]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c8c:	7b7a      	ldrb	r2, [r7, #13]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	32ae      	adds	r2, #174	@ 0xae
 8008c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d010      	beq.n	8008cbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c9c:	7b7a      	ldrb	r2, [r7, #13]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	32ae      	adds	r2, #174	@ 0xae
 8008ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4798      	blx	r3
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008cb2:	e004      	b.n	8008cbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fc03 	bl	80094c2 <USBD_CtlError>
              break;
 8008cbc:	e000      	b.n	8008cc0 <USBD_StdEPReq+0x1c8>
              break;
 8008cbe:	bf00      	nop
          }
          break;
 8008cc0:	e0ab      	b.n	8008e1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d002      	beq.n	8008cd4 <USBD_StdEPReq+0x1dc>
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d032      	beq.n	8008d38 <USBD_StdEPReq+0x240>
 8008cd2:	e097      	b.n	8008e04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <USBD_StdEPReq+0x1f2>
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	2b80      	cmp	r3, #128	@ 0x80
 8008cde:	d004      	beq.n	8008cea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fbed 	bl	80094c2 <USBD_CtlError>
                break;
 8008ce8:	e091      	b.n	8008e0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	da0b      	bge.n	8008d0a <USBD_StdEPReq+0x212>
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	3310      	adds	r3, #16
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	3304      	adds	r3, #4
 8008d08:	e00b      	b.n	8008d22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	4413      	add	r3, r2
 8008d20:	3304      	adds	r3, #4
 8008d22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2200      	movs	r2, #0
 8008d28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fc37 	bl	80095a4 <USBD_CtlSendData>
              break;
 8008d36:	e06a      	b.n	8008e0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	da11      	bge.n	8008d64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	f003 020f 	and.w	r2, r3, #15
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	440b      	add	r3, r1
 8008d52:	3324      	adds	r3, #36	@ 0x24
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d117      	bne.n	8008d8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fbb0 	bl	80094c2 <USBD_CtlError>
                  break;
 8008d62:	e054      	b.n	8008e0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	f003 020f 	and.w	r2, r3, #15
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	440b      	add	r3, r1
 8008d76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d104      	bne.n	8008d8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fb9d 	bl	80094c2 <USBD_CtlError>
                  break;
 8008d88:	e041      	b.n	8008e0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	da0b      	bge.n	8008daa <USBD_StdEPReq+0x2b2>
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d98:	4613      	mov	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	3310      	adds	r3, #16
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	3304      	adds	r3, #4
 8008da8:	e00b      	b.n	8008dc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <USBD_StdEPReq+0x2d8>
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	2b80      	cmp	r3, #128	@ 0x80
 8008dce:	d103      	bne.n	8008dd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	e00e      	b.n	8008df6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 f8ad 	bl	8009f3c <USBD_LL_IsStallEP>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2201      	movs	r2, #1
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e002      	b.n	8008df6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fbd1 	bl	80095a4 <USBD_CtlSendData>
              break;
 8008e02:	e004      	b.n	8008e0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fb5b 	bl	80094c2 <USBD_CtlError>
              break;
 8008e0c:	bf00      	nop
          }
          break;
 8008e0e:	e004      	b.n	8008e1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fb55 	bl	80094c2 <USBD_CtlError>
          break;
 8008e18:	bf00      	nop
      }
      break;
 8008e1a:	e005      	b.n	8008e28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fb4f 	bl	80094c2 <USBD_CtlError>
      break;
 8008e24:	e000      	b.n	8008e28 <USBD_StdEPReq+0x330>
      break;
 8008e26:	bf00      	nop
  }

  return ret;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	0a1b      	lsrs	r3, r3, #8
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	2b06      	cmp	r3, #6
 8008e56:	f200 8128 	bhi.w	80090aa <USBD_GetDescriptor+0x276>
 8008e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e60 <USBD_GetDescriptor+0x2c>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008e7d 	.word	0x08008e7d
 8008e64:	08008e95 	.word	0x08008e95
 8008e68:	08008ed5 	.word	0x08008ed5
 8008e6c:	080090ab 	.word	0x080090ab
 8008e70:	080090ab 	.word	0x080090ab
 8008e74:	0800904b 	.word	0x0800904b
 8008e78:	08009077 	.word	0x08009077
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	7c12      	ldrb	r2, [r2, #16]
 8008e88:	f107 0108 	add.w	r1, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
      break;
 8008e92:	e112      	b.n	80090ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7c1b      	ldrb	r3, [r3, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10d      	bne.n	8008eb8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea4:	f107 0208 	add.w	r2, r7, #8
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
 8008eac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008eb6:	e100      	b.n	80090ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec0:	f107 0208 	add.w	r2, r7, #8
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4798      	blx	r3
 8008ec8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	2202      	movs	r2, #2
 8008ed0:	701a      	strb	r2, [r3, #0]
      break;
 8008ed2:	e0f2      	b.n	80090ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	885b      	ldrh	r3, [r3, #2]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b05      	cmp	r3, #5
 8008edc:	f200 80ac 	bhi.w	8009038 <USBD_GetDescriptor+0x204>
 8008ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee8 <USBD_GetDescriptor+0xb4>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008f01 	.word	0x08008f01
 8008eec:	08008f35 	.word	0x08008f35
 8008ef0:	08008f69 	.word	0x08008f69
 8008ef4:	08008f9d 	.word	0x08008f9d
 8008ef8:	08008fd1 	.word	0x08008fd1
 8008efc:	08009005 	.word	0x08009005
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00b      	beq.n	8008f24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	7c12      	ldrb	r2, [r2, #16]
 8008f18:	f107 0108 	add.w	r1, r7, #8
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
 8008f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f22:	e091      	b.n	8009048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 facb 	bl	80094c2 <USBD_CtlError>
            err++;
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	72fb      	strb	r3, [r7, #11]
          break;
 8008f32:	e089      	b.n	8009048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	7c12      	ldrb	r2, [r2, #16]
 8008f4c:	f107 0108 	add.w	r1, r7, #8
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3
 8008f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f56:	e077      	b.n	8009048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fab1 	bl	80094c2 <USBD_CtlError>
            err++;
 8008f60:	7afb      	ldrb	r3, [r7, #11]
 8008f62:	3301      	adds	r3, #1
 8008f64:	72fb      	strb	r3, [r7, #11]
          break;
 8008f66:	e06f      	b.n	8009048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	7c12      	ldrb	r2, [r2, #16]
 8008f80:	f107 0108 	add.w	r1, r7, #8
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
 8008f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f8a:	e05d      	b.n	8009048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa97 	bl	80094c2 <USBD_CtlError>
            err++;
 8008f94:	7afb      	ldrb	r3, [r7, #11]
 8008f96:	3301      	adds	r3, #1
 8008f98:	72fb      	strb	r3, [r7, #11]
          break;
 8008f9a:	e055      	b.n	8009048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	7c12      	ldrb	r2, [r2, #16]
 8008fb4:	f107 0108 	add.w	r1, r7, #8
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
 8008fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fbe:	e043      	b.n	8009048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa7d 	bl	80094c2 <USBD_CtlError>
            err++;
 8008fc8:	7afb      	ldrb	r3, [r7, #11]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fce:	e03b      	b.n	8009048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	7c12      	ldrb	r2, [r2, #16]
 8008fe8:	f107 0108 	add.w	r1, r7, #8
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
 8008ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff2:	e029      	b.n	8009048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa63 	bl	80094c2 <USBD_CtlError>
            err++;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	3301      	adds	r3, #1
 8009000:	72fb      	strb	r3, [r7, #11]
          break;
 8009002:	e021      	b.n	8009048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	7c12      	ldrb	r2, [r2, #16]
 800901c:	f107 0108 	add.w	r1, r7, #8
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
 8009024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009026:	e00f      	b.n	8009048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa49 	bl	80094c2 <USBD_CtlError>
            err++;
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	3301      	adds	r3, #1
 8009034:	72fb      	strb	r3, [r7, #11]
          break;
 8009036:	e007      	b.n	8009048 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fa41 	bl	80094c2 <USBD_CtlError>
          err++;
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	3301      	adds	r3, #1
 8009044:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009046:	bf00      	nop
      }
      break;
 8009048:	e037      	b.n	80090ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	7c1b      	ldrb	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800905a:	f107 0208 	add.w	r2, r7, #8
 800905e:	4610      	mov	r0, r2
 8009060:	4798      	blx	r3
 8009062:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009064:	e029      	b.n	80090ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa2a 	bl	80094c2 <USBD_CtlError>
        err++;
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	3301      	adds	r3, #1
 8009072:	72fb      	strb	r3, [r7, #11]
      break;
 8009074:	e021      	b.n	80090ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	7c1b      	ldrb	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10d      	bne.n	800909a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009086:	f107 0208 	add.w	r2, r7, #8
 800908a:	4610      	mov	r0, r2
 800908c:	4798      	blx	r3
 800908e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3301      	adds	r3, #1
 8009094:	2207      	movs	r2, #7
 8009096:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009098:	e00f      	b.n	80090ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fa10 	bl	80094c2 <USBD_CtlError>
        err++;
 80090a2:	7afb      	ldrb	r3, [r7, #11]
 80090a4:	3301      	adds	r3, #1
 80090a6:	72fb      	strb	r3, [r7, #11]
      break;
 80090a8:	e007      	b.n	80090ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fa08 	bl	80094c2 <USBD_CtlError>
      err++;
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	3301      	adds	r3, #1
 80090b6:	72fb      	strb	r3, [r7, #11]
      break;
 80090b8:	bf00      	nop
  }

  if (err != 0U)
 80090ba:	7afb      	ldrb	r3, [r7, #11]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d11e      	bne.n	80090fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	88db      	ldrh	r3, [r3, #6]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d016      	beq.n	80090f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80090c8:	893b      	ldrh	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00e      	beq.n	80090ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	88da      	ldrh	r2, [r3, #6]
 80090d2:	893b      	ldrh	r3, [r7, #8]
 80090d4:	4293      	cmp	r3, r2
 80090d6:	bf28      	it	cs
 80090d8:	4613      	movcs	r3, r2
 80090da:	b29b      	uxth	r3, r3
 80090dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090de:	893b      	ldrh	r3, [r7, #8]
 80090e0:	461a      	mov	r2, r3
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fa5d 	bl	80095a4 <USBD_CtlSendData>
 80090ea:	e009      	b.n	8009100 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f9e7 	bl	80094c2 <USBD_CtlError>
 80090f4:	e004      	b.n	8009100 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 faae 	bl	8009658 <USBD_CtlSendStatus>
 80090fc:	e000      	b.n	8009100 <USBD_GetDescriptor+0x2cc>
    return;
 80090fe:	bf00      	nop
  }
}
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop

08009108 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	889b      	ldrh	r3, [r3, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d131      	bne.n	800917e <USBD_SetAddress+0x76>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	88db      	ldrh	r3, [r3, #6]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d12d      	bne.n	800917e <USBD_SetAddress+0x76>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	885b      	ldrh	r3, [r3, #2]
 8009126:	2b7f      	cmp	r3, #127	@ 0x7f
 8009128:	d829      	bhi.n	800917e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	885b      	ldrh	r3, [r3, #2]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009134:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b03      	cmp	r3, #3
 8009140:	d104      	bne.n	800914c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f9bc 	bl	80094c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800914a:	e01d      	b.n	8009188 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7bfa      	ldrb	r2, [r7, #15]
 8009150:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 ff1b 	bl	8009f94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa7a 	bl	8009658 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d004      	beq.n	8009174 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2202      	movs	r2, #2
 800916e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009172:	e009      	b.n	8009188 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917c:	e004      	b.n	8009188 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f99e 	bl	80094c2 <USBD_CtlError>
  }
}
 8009186:	bf00      	nop
 8009188:	bf00      	nop
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	885b      	ldrh	r3, [r3, #2]
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	4b4e      	ldr	r3, [pc, #312]	@ (80092e0 <USBD_SetConfig+0x150>)
 80091a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091a8:	4b4d      	ldr	r3, [pc, #308]	@ (80092e0 <USBD_SetConfig+0x150>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d905      	bls.n	80091bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f985 	bl	80094c2 <USBD_CtlError>
    return USBD_FAIL;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e08c      	b.n	80092d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d002      	beq.n	80091ce <USBD_SetConfig+0x3e>
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d029      	beq.n	8009220 <USBD_SetConfig+0x90>
 80091cc:	e075      	b.n	80092ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80091ce:	4b44      	ldr	r3, [pc, #272]	@ (80092e0 <USBD_SetConfig+0x150>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d020      	beq.n	8009218 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80091d6:	4b42      	ldr	r3, [pc, #264]	@ (80092e0 <USBD_SetConfig+0x150>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091e0:	4b3f      	ldr	r3, [pc, #252]	@ (80092e0 <USBD_SetConfig+0x150>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7fe ffe3 	bl	80081b2 <USBD_SetClassConfig>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d008      	beq.n	8009208 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f962 	bl	80094c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2202      	movs	r2, #2
 8009202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009206:	e065      	b.n	80092d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fa25 	bl	8009658 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2203      	movs	r2, #3
 8009212:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009216:	e05d      	b.n	80092d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fa1d 	bl	8009658 <USBD_CtlSendStatus>
      break;
 800921e:	e059      	b.n	80092d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009220:	4b2f      	ldr	r3, [pc, #188]	@ (80092e0 <USBD_SetConfig+0x150>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d112      	bne.n	800924e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009230:	4b2b      	ldr	r3, [pc, #172]	@ (80092e0 <USBD_SetConfig+0x150>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800923a:	4b29      	ldr	r3, [pc, #164]	@ (80092e0 <USBD_SetConfig+0x150>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7fe ffd2 	bl	80081ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa06 	bl	8009658 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800924c:	e042      	b.n	80092d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800924e:	4b24      	ldr	r3, [pc, #144]	@ (80092e0 <USBD_SetConfig+0x150>)
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	429a      	cmp	r2, r3
 800925a:	d02a      	beq.n	80092b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7fe ffc0 	bl	80081ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800926a:	4b1d      	ldr	r3, [pc, #116]	@ (80092e0 <USBD_SetConfig+0x150>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009274:	4b1a      	ldr	r3, [pc, #104]	@ (80092e0 <USBD_SetConfig+0x150>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7fe ff99 	bl	80081b2 <USBD_SetClassConfig>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00f      	beq.n	80092aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f918 	bl	80094c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fe ffa5 	bl	80081ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092a8:	e014      	b.n	80092d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f9d4 	bl	8009658 <USBD_CtlSendStatus>
      break;
 80092b0:	e010      	b.n	80092d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f9d0 	bl	8009658 <USBD_CtlSendStatus>
      break;
 80092b8:	e00c      	b.n	80092d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f900 	bl	80094c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092c2:	4b07      	ldr	r3, [pc, #28]	@ (80092e0 <USBD_SetConfig+0x150>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7fe ff8e 	bl	80081ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092ce:	2303      	movs	r3, #3
 80092d0:	73fb      	strb	r3, [r7, #15]
      break;
 80092d2:	bf00      	nop
  }

  return ret;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20001464 	.word	0x20001464

080092e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	88db      	ldrh	r3, [r3, #6]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d004      	beq.n	8009300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f8e2 	bl	80094c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092fe:	e023      	b.n	8009348 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	dc02      	bgt.n	8009312 <USBD_GetConfig+0x2e>
 800930c:	2b00      	cmp	r3, #0
 800930e:	dc03      	bgt.n	8009318 <USBD_GetConfig+0x34>
 8009310:	e015      	b.n	800933e <USBD_GetConfig+0x5a>
 8009312:	2b03      	cmp	r3, #3
 8009314:	d00b      	beq.n	800932e <USBD_GetConfig+0x4a>
 8009316:	e012      	b.n	800933e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3308      	adds	r3, #8
 8009322:	2201      	movs	r2, #1
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f93c 	bl	80095a4 <USBD_CtlSendData>
        break;
 800932c:	e00c      	b.n	8009348 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3304      	adds	r3, #4
 8009332:	2201      	movs	r2, #1
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f934 	bl	80095a4 <USBD_CtlSendData>
        break;
 800933c:	e004      	b.n	8009348 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f8be 	bl	80094c2 <USBD_CtlError>
        break;
 8009346:	bf00      	nop
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009360:	b2db      	uxtb	r3, r3
 8009362:	3b01      	subs	r3, #1
 8009364:	2b02      	cmp	r3, #2
 8009366:	d81e      	bhi.n	80093a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	88db      	ldrh	r3, [r3, #6]
 800936c:	2b02      	cmp	r3, #2
 800936e:	d004      	beq.n	800937a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8a5 	bl	80094c2 <USBD_CtlError>
        break;
 8009378:	e01a      	b.n	80093b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009386:	2b00      	cmp	r3, #0
 8009388:	d005      	beq.n	8009396 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f043 0202 	orr.w	r2, r3, #2
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	330c      	adds	r3, #12
 800939a:	2202      	movs	r2, #2
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f900 	bl	80095a4 <USBD_CtlSendData>
      break;
 80093a4:	e004      	b.n	80093b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f88a 	bl	80094c2 <USBD_CtlError>
      break;
 80093ae:	bf00      	nop
  }
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	885b      	ldrh	r3, [r3, #2]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d107      	bne.n	80093da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f940 	bl	8009658 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80093d8:	e013      	b.n	8009402 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	885b      	ldrh	r3, [r3, #2]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d10b      	bne.n	80093fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	889b      	ldrh	r3, [r3, #4]
 80093e6:	0a1b      	lsrs	r3, r3, #8
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f930 	bl	8009658 <USBD_CtlSendStatus>
}
 80093f8:	e003      	b.n	8009402 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f860 	bl	80094c2 <USBD_CtlError>
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800941a:	b2db      	uxtb	r3, r3
 800941c:	3b01      	subs	r3, #1
 800941e:	2b02      	cmp	r3, #2
 8009420:	d80b      	bhi.n	800943a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	885b      	ldrh	r3, [r3, #2]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d10c      	bne.n	8009444 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f910 	bl	8009658 <USBD_CtlSendStatus>
      }
      break;
 8009438:	e004      	b.n	8009444 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f840 	bl	80094c2 <USBD_CtlError>
      break;
 8009442:	e000      	b.n	8009446 <USBD_ClrFeature+0x3c>
      break;
 8009444:	bf00      	nop
  }
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	781a      	ldrb	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3301      	adds	r3, #1
 8009468:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	781a      	ldrb	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3301      	adds	r3, #1
 8009476:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7ff fa40 	bl	80088fe <SWAPBYTE>
 800947e:	4603      	mov	r3, r0
 8009480:	461a      	mov	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f7ff fa33 	bl	80088fe <SWAPBYTE>
 8009498:	4603      	mov	r3, r0
 800949a:	461a      	mov	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3301      	adds	r3, #1
 80094a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3301      	adds	r3, #1
 80094aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff fa26 	bl	80088fe <SWAPBYTE>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	80da      	strh	r2, [r3, #6]
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094cc:	2180      	movs	r1, #128	@ 0x80
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fcf6 	bl	8009ec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094d4:	2100      	movs	r1, #0
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fcf2 	bl	8009ec0 <USBD_LL_StallEP>
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d036      	beq.n	8009568 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80094fe:	6938      	ldr	r0, [r7, #16]
 8009500:	f000 f836 	bl	8009570 <USBD_GetLen>
 8009504:	4603      	mov	r3, r0
 8009506:	3301      	adds	r3, #1
 8009508:	b29b      	uxth	r3, r3
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	4413      	add	r3, r2
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	7812      	ldrb	r2, [r2, #0]
 800951c:	701a      	strb	r2, [r3, #0]
  idx++;
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	3301      	adds	r3, #1
 8009522:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	4413      	add	r3, r2
 800952a:	2203      	movs	r2, #3
 800952c:	701a      	strb	r2, [r3, #0]
  idx++;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	3301      	adds	r3, #1
 8009532:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009534:	e013      	b.n	800955e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	4413      	add	r3, r2
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	7812      	ldrb	r2, [r2, #0]
 8009540:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	3301      	adds	r3, #1
 8009546:	613b      	str	r3, [r7, #16]
    idx++;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	3301      	adds	r3, #1
 800954c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	4413      	add	r3, r2
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
    idx++;
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	3301      	adds	r3, #1
 800955c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e7      	bne.n	8009536 <USBD_GetString+0x52>
 8009566:	e000      	b.n	800956a <USBD_GetString+0x86>
    return;
 8009568:	bf00      	nop
  }
}
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009580:	e005      	b.n	800958e <USBD_GetLen+0x1e>
  {
    len++;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	3301      	adds	r3, #1
 8009586:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	3301      	adds	r3, #1
 800958c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1f5      	bne.n	8009582 <USBD_GetLen+0x12>
  }

  return len;
 8009596:	7bfb      	ldrb	r3, [r7, #15]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	2100      	movs	r1, #0
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fd01 	bl	8009fd2 <USBD_LL_Transmit>

  return USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	2100      	movs	r1, #0
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 fcf0 	bl	8009fd2 <USBD_LL_Transmit>

  return USBD_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2203      	movs	r2, #3
 800960c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	2100      	movs	r1, #0
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 fcf4 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	2100      	movs	r1, #0
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fce3 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2204      	movs	r2, #4
 8009664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009668:	2300      	movs	r3, #0
 800966a:	2200      	movs	r2, #0
 800966c:	2100      	movs	r1, #0
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fcaf 	bl	8009fd2 <USBD_LL_Transmit>

  return USBD_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2205      	movs	r2, #5
 800968a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800968e:	2300      	movs	r3, #0
 8009690:	2200      	movs	r2, #0
 8009692:	2100      	movs	r1, #0
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fcbd 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096a8:	2200      	movs	r2, #0
 80096aa:	4912      	ldr	r1, [pc, #72]	@ (80096f4 <MX_USB_DEVICE_Init+0x50>)
 80096ac:	4812      	ldr	r0, [pc, #72]	@ (80096f8 <MX_USB_DEVICE_Init+0x54>)
 80096ae:	f7fe fd03 	bl	80080b8 <USBD_Init>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096b8:	f7f7 f906 	bl	80008c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096bc:	490f      	ldr	r1, [pc, #60]	@ (80096fc <MX_USB_DEVICE_Init+0x58>)
 80096be:	480e      	ldr	r0, [pc, #56]	@ (80096f8 <MX_USB_DEVICE_Init+0x54>)
 80096c0:	f7fe fd2a 	bl	8008118 <USBD_RegisterClass>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096ca:	f7f7 f8fd 	bl	80008c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096ce:	490c      	ldr	r1, [pc, #48]	@ (8009700 <MX_USB_DEVICE_Init+0x5c>)
 80096d0:	4809      	ldr	r0, [pc, #36]	@ (80096f8 <MX_USB_DEVICE_Init+0x54>)
 80096d2:	f7fe fc21 	bl	8007f18 <USBD_CDC_RegisterInterface>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096dc:	f7f7 f8f4 	bl	80008c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096e0:	4805      	ldr	r0, [pc, #20]	@ (80096f8 <MX_USB_DEVICE_Init+0x54>)
 80096e2:	f7fe fd4f 	bl	8008184 <USBD_Start>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096ec:	f7f7 f8ec 	bl	80008c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096f0:	bf00      	nop
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	200000ac 	.word	0x200000ac
 80096f8:	20001468 	.word	0x20001468
 80096fc:	20000018 	.word	0x20000018
 8009700:	20000098 	.word	0x20000098

08009704 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009708:	2200      	movs	r2, #0
 800970a:	4905      	ldr	r1, [pc, #20]	@ (8009720 <CDC_Init_FS+0x1c>)
 800970c:	4805      	ldr	r0, [pc, #20]	@ (8009724 <CDC_Init_FS+0x20>)
 800970e:	f7fe fc1d 	bl	8007f4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009712:	4905      	ldr	r1, [pc, #20]	@ (8009728 <CDC_Init_FS+0x24>)
 8009714:	4803      	ldr	r0, [pc, #12]	@ (8009724 <CDC_Init_FS+0x20>)
 8009716:	f7fe fc3b 	bl	8007f90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800971a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800971c:	4618      	mov	r0, r3
 800971e:	bd80      	pop	{r7, pc}
 8009720:	20001f44 	.word	0x20001f44
 8009724:	20001468 	.word	0x20001468
 8009728:	20001744 	.word	0x20001744

0800972c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009730:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009732:	4618      	mov	r0, r3
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	6039      	str	r1, [r7, #0]
 8009746:	71fb      	strb	r3, [r7, #7]
 8009748:	4613      	mov	r3, r2
 800974a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	2b23      	cmp	r3, #35	@ 0x23
 8009750:	d84a      	bhi.n	80097e8 <CDC_Control_FS+0xac>
 8009752:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <CDC_Control_FS+0x1c>)
 8009754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009758:	080097e9 	.word	0x080097e9
 800975c:	080097e9 	.word	0x080097e9
 8009760:	080097e9 	.word	0x080097e9
 8009764:	080097e9 	.word	0x080097e9
 8009768:	080097e9 	.word	0x080097e9
 800976c:	080097e9 	.word	0x080097e9
 8009770:	080097e9 	.word	0x080097e9
 8009774:	080097e9 	.word	0x080097e9
 8009778:	080097e9 	.word	0x080097e9
 800977c:	080097e9 	.word	0x080097e9
 8009780:	080097e9 	.word	0x080097e9
 8009784:	080097e9 	.word	0x080097e9
 8009788:	080097e9 	.word	0x080097e9
 800978c:	080097e9 	.word	0x080097e9
 8009790:	080097e9 	.word	0x080097e9
 8009794:	080097e9 	.word	0x080097e9
 8009798:	080097e9 	.word	0x080097e9
 800979c:	080097e9 	.word	0x080097e9
 80097a0:	080097e9 	.word	0x080097e9
 80097a4:	080097e9 	.word	0x080097e9
 80097a8:	080097e9 	.word	0x080097e9
 80097ac:	080097e9 	.word	0x080097e9
 80097b0:	080097e9 	.word	0x080097e9
 80097b4:	080097e9 	.word	0x080097e9
 80097b8:	080097e9 	.word	0x080097e9
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	080097e9 	.word	0x080097e9
 80097c4:	080097e9 	.word	0x080097e9
 80097c8:	080097e9 	.word	0x080097e9
 80097cc:	080097e9 	.word	0x080097e9
 80097d0:	080097e9 	.word	0x080097e9
 80097d4:	080097e9 	.word	0x080097e9
 80097d8:	080097e9 	.word	0x080097e9
 80097dc:	080097e9 	.word	0x080097e9
 80097e0:	080097e9 	.word	0x080097e9
 80097e4:	080097e9 	.word	0x080097e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097e8:	bf00      	nop
  }

  return (USBD_OK);
 80097ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_CdcRxBuffer_FS_cnt = *Len;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a0a      	ldr	r2, [pc, #40]	@ (8009830 <CDC_Receive_FS+0x38>)
 8009808:	6013      	str	r3, [r2, #0]
  strncpy(USB_CdcRxBuffer_FS, Buf, *Len);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	4808      	ldr	r0, [pc, #32]	@ (8009834 <CDC_Receive_FS+0x3c>)
 8009814:	f000 fcb0 	bl	800a178 <strncpy>

  // memcpy((uint8_t *) USB_CdcRxBuffer_FS, (uint8_t *) Buf, sizeof(*Len));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4807      	ldr	r0, [pc, #28]	@ (8009838 <CDC_Receive_FS+0x40>)
 800981c:	f7fe fbb8 	bl	8007f90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009820:	4805      	ldr	r0, [pc, #20]	@ (8009838 <CDC_Receive_FS+0x40>)
 8009822:	f7fe fc13 	bl	800804c <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8009826:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20000c54 	.word	0x20000c54
 8009834:	20000454 	.word	0x20000454
 8009838:	20001468 	.word	0x20001468

0800983c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  uint32_t startTick = HAL_GetTick();
 800984c:	f7f7 ffe4 	bl	8001818 <HAL_GetTick>
 8009850:	6138      	str	r0, [r7, #16]
  uint32_t TIMEOUT_VALUE = 1U;
 8009852:	2301      	movs	r3, #1
 8009854:	60fb      	str	r3, [r7, #12]

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009856:	4b0f      	ldr	r3, [pc, #60]	@ (8009894 <CDC_Transmit_FS+0x58>)
 8009858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800985c:	60bb      	str	r3, [r7, #8]
  if (hcdc == NULL)
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <CDC_Transmit_FS+0x2c>
  {
    return USBD_FAIL;
 8009864:	2303      	movs	r3, #3
 8009866:	e010      	b.n	800988a <CDC_Transmit_FS+0x4e>
  //     return USBD_FAIL;
  //   }
  // }
  #endif

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009868:	887b      	ldrh	r3, [r7, #2]
 800986a:	461a      	mov	r2, r3
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	4809      	ldr	r0, [pc, #36]	@ (8009894 <CDC_Transmit_FS+0x58>)
 8009870:	f7fe fb6c 	bl	8007f4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009874:	4807      	ldr	r0, [pc, #28]	@ (8009894 <CDC_Transmit_FS+0x58>)
 8009876:	f7fe fba9 	bl	8007fcc <USBD_CDC_TransmitPacket>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]

  #if 1
  while (result == USBD_BUSY)
 800987e:	bf00      	nop
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d101      	bne.n	800988a <CDC_Transmit_FS+0x4e>
  #else
  #endif
  /* USER CODE END 7 */
  return result;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	e7ff      	b.n	800988a <CDC_Transmit_FS+0x4e>
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20001468 	.word	0x20001468

08009898 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	4613      	mov	r3, r2
 80098a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80098aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
	...

080098bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2212      	movs	r2, #18
 80098cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098ce:	4b03      	ldr	r3, [pc, #12]	@ (80098dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	200000c8 	.word	0x200000c8

080098e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2204      	movs	r2, #4
 80098f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098f2:	4b03      	ldr	r3, [pc, #12]	@ (8009900 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	200000dc 	.word	0x200000dc

08009904 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	6039      	str	r1, [r7, #0]
 800990e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d105      	bne.n	8009922 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	4907      	ldr	r1, [pc, #28]	@ (8009938 <USBD_FS_ProductStrDescriptor+0x34>)
 800991a:	4808      	ldr	r0, [pc, #32]	@ (800993c <USBD_FS_ProductStrDescriptor+0x38>)
 800991c:	f7ff fde2 	bl	80094e4 <USBD_GetString>
 8009920:	e004      	b.n	800992c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	4904      	ldr	r1, [pc, #16]	@ (8009938 <USBD_FS_ProductStrDescriptor+0x34>)
 8009926:	4805      	ldr	r0, [pc, #20]	@ (800993c <USBD_FS_ProductStrDescriptor+0x38>)
 8009928:	f7ff fddc 	bl	80094e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800992c:	4b02      	ldr	r3, [pc, #8]	@ (8009938 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20002744 	.word	0x20002744
 800993c:	0800acd8 	.word	0x0800acd8

08009940 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	6039      	str	r1, [r7, #0]
 800994a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	4904      	ldr	r1, [pc, #16]	@ (8009960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009950:	4804      	ldr	r0, [pc, #16]	@ (8009964 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009952:	f7ff fdc7 	bl	80094e4 <USBD_GetString>
  return USBD_StrDesc;
 8009956:	4b02      	ldr	r3, [pc, #8]	@ (8009960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20002744 	.word	0x20002744
 8009964:	0800acf0 	.word	0x0800acf0

08009968 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	221a      	movs	r2, #26
 8009978:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800997a:	f000 f843 	bl	8009a04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800997e:	4b02      	ldr	r3, [pc, #8]	@ (8009988 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	200000e0 	.word	0x200000e0

0800998c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	6039      	str	r1, [r7, #0]
 8009996:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d105      	bne.n	80099aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4907      	ldr	r1, [pc, #28]	@ (80099c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099a2:	4808      	ldr	r0, [pc, #32]	@ (80099c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099a4:	f7ff fd9e 	bl	80094e4 <USBD_GetString>
 80099a8:	e004      	b.n	80099b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	4904      	ldr	r1, [pc, #16]	@ (80099c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099ae:	4805      	ldr	r0, [pc, #20]	@ (80099c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099b0:	f7ff fd98 	bl	80094e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099b4:	4b02      	ldr	r3, [pc, #8]	@ (80099c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20002744 	.word	0x20002744
 80099c4:	0800ad04 	.word	0x0800ad04

080099c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	6039      	str	r1, [r7, #0]
 80099d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d105      	bne.n	80099e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	4907      	ldr	r1, [pc, #28]	@ (80099fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099de:	4808      	ldr	r0, [pc, #32]	@ (8009a00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099e0:	f7ff fd80 	bl	80094e4 <USBD_GetString>
 80099e4:	e004      	b.n	80099f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	4904      	ldr	r1, [pc, #16]	@ (80099fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099ea:	4805      	ldr	r0, [pc, #20]	@ (8009a00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099ec:	f7ff fd7a 	bl	80094e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099f0:	4b02      	ldr	r3, [pc, #8]	@ (80099fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20002744 	.word	0x20002744
 8009a00:	0800ad10 	.word	0x0800ad10

08009a04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a48 <Get_SerialNum+0x44>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a10:	4b0e      	ldr	r3, [pc, #56]	@ (8009a4c <Get_SerialNum+0x48>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a16:	4b0e      	ldr	r3, [pc, #56]	@ (8009a50 <Get_SerialNum+0x4c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4413      	add	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d009      	beq.n	8009a3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a2a:	2208      	movs	r2, #8
 8009a2c:	4909      	ldr	r1, [pc, #36]	@ (8009a54 <Get_SerialNum+0x50>)
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f000 f814 	bl	8009a5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a34:	2204      	movs	r2, #4
 8009a36:	4908      	ldr	r1, [pc, #32]	@ (8009a58 <Get_SerialNum+0x54>)
 8009a38:	68b8      	ldr	r0, [r7, #8]
 8009a3a:	f000 f80f 	bl	8009a5c <IntToUnicode>
  }
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	1fff7a10 	.word	0x1fff7a10
 8009a4c:	1fff7a14 	.word	0x1fff7a14
 8009a50:	1fff7a18 	.word	0x1fff7a18
 8009a54:	200000e2 	.word	0x200000e2
 8009a58:	200000f2 	.word	0x200000f2

08009a5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4613      	mov	r3, r2
 8009a68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]
 8009a72:	e027      	b.n	8009ac4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	0f1b      	lsrs	r3, r3, #28
 8009a78:	2b09      	cmp	r3, #9
 8009a7a:	d80b      	bhi.n	8009a94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	0f1b      	lsrs	r3, r3, #28
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	4619      	mov	r1, r3
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	440b      	add	r3, r1
 8009a8c:	3230      	adds	r2, #48	@ 0x30
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	e00a      	b.n	8009aaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	0f1b      	lsrs	r3, r3, #28
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	440b      	add	r3, r1
 8009aa4:	3237      	adds	r2, #55	@ 0x37
 8009aa6:	b2d2      	uxtb	r2, r2
 8009aa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	011b      	lsls	r3, r3, #4
 8009aae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	4413      	add	r3, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009abe:	7dfb      	ldrb	r3, [r7, #23]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	75fb      	strb	r3, [r7, #23]
 8009ac4:	7dfa      	ldrb	r2, [r7, #23]
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d3d3      	bcc.n	8009a74 <IntToUnicode+0x18>
  }
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
	...

08009adc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	@ 0x28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae4:	f107 0314 	add.w	r3, r7, #20
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	605a      	str	r2, [r3, #4]
 8009aee:	609a      	str	r2, [r3, #8]
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009afc:	d13a      	bne.n	8009b74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	4b1e      	ldr	r3, [pc, #120]	@ (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b06:	4a1d      	ldr	r2, [pc, #116]	@ (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b08:	f043 0301 	orr.w	r3, r3, #1
 8009b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8009b1a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8009b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b20:	2302      	movs	r3, #2
 8009b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b2c:	230a      	movs	r3, #10
 8009b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b30:	f107 0314 	add.w	r3, r7, #20
 8009b34:	4619      	mov	r1, r3
 8009b36:	4812      	ldr	r0, [pc, #72]	@ (8009b80 <HAL_PCD_MspInit+0xa4>)
 8009b38:	f7f8 fbcc 	bl	80022d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b40:	4a0e      	ldr	r2, [pc, #56]	@ (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b46:	6353      	str	r3, [r2, #52]	@ 0x34
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b50:	4a0a      	ldr	r2, [pc, #40]	@ (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b56:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b58:	4b08      	ldr	r3, [pc, #32]	@ (8009b7c <HAL_PCD_MspInit+0xa0>)
 8009b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b64:	2200      	movs	r2, #0
 8009b66:	2100      	movs	r1, #0
 8009b68:	2043      	movs	r0, #67	@ 0x43
 8009b6a:	f7f7 ff76 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b6e:	2043      	movs	r0, #67	@ 0x43
 8009b70:	f7f7 ff8f 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b74:	bf00      	nop
 8009b76:	3728      	adds	r7, #40	@ 0x28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	40023800 	.word	0x40023800
 8009b80:	40020000 	.word	0x40020000

08009b84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f7fe fb3f 	bl	800821e <USBD_LL_SetupStage>
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009bba:	78fa      	ldrb	r2, [r7, #3]
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	440b      	add	r3, r1
 8009bc8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f7fe fb79 	bl	80082c8 <USBD_LL_DataOutStage>
}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	440b      	add	r3, r1
 8009bfe:	3320      	adds	r3, #32
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	4619      	mov	r1, r3
 8009c06:	f7fe fc12 	bl	800842e <USBD_LL_DataInStage>
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe fd4c 	bl	80086be <USBD_LL_SOF>
}
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c36:	2301      	movs	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	79db      	ldrb	r3, [r3, #7]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
 8009c46:	e008      	b.n	8009c5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	79db      	ldrb	r3, [r3, #7]
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d102      	bne.n	8009c56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
 8009c54:	e001      	b.n	8009c5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c56:	f7f6 fe37 	bl	80008c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c60:	7bfa      	ldrb	r2, [r7, #15]
 8009c62:	4611      	mov	r1, r2
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe fce6 	bl	8008636 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe fc8e 	bl	8008592 <USBD_LL_Reset>
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fce1 	bl	8008656 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	6812      	ldr	r2, [r2, #0]
 8009ca2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7adb      	ldrb	r3, [r3, #11]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cb4:	4b04      	ldr	r3, [pc, #16]	@ (8009cc8 <HAL_PCD_SuspendCallback+0x48>)
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	4a03      	ldr	r2, [pc, #12]	@ (8009cc8 <HAL_PCD_SuspendCallback+0x48>)
 8009cba:	f043 0306 	orr.w	r3, r3, #6
 8009cbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	e000ed00 	.word	0xe000ed00

08009ccc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fe fcd7 	bl	800868e <USBD_LL_Resume>
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cfa:	78fa      	ldrb	r2, [r7, #3]
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fd2f 	bl	8008762 <USBD_LL_IsoOUTIncomplete>
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d1e:	78fa      	ldrb	r2, [r7, #3]
 8009d20:	4611      	mov	r1, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fceb 	bl	80086fe <USBD_LL_IsoINIncomplete>
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe fd41 	bl	80087c6 <USBD_LL_DevConnected>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fd3e 	bl	80087dc <USBD_LL_DevDisconnected>
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d13c      	bne.n	8009df2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d78:	4a20      	ldr	r2, [pc, #128]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a1e      	ldr	r2, [pc, #120]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009d84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d88:	4b1c      	ldr	r3, [pc, #112]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009d8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009d8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d90:	4b1a      	ldr	r3, [pc, #104]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009d92:	2204      	movs	r2, #4
 8009d94:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d96:	4b19      	ldr	r3, [pc, #100]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009d98:	2202      	movs	r2, #2
 8009d9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d9c:	4b17      	ldr	r3, [pc, #92]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009da2:	4b16      	ldr	r3, [pc, #88]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009da4:	2202      	movs	r2, #2
 8009da6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009da8:	4b14      	ldr	r3, [pc, #80]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dae:	4b13      	ldr	r3, [pc, #76]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009db4:	4b11      	ldr	r3, [pc, #68]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dba:	4b10      	ldr	r3, [pc, #64]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009dc6:	480d      	ldr	r0, [pc, #52]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009dc8:	f7f8 fc63 	bl	8002692 <HAL_PCD_Init>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009dd2:	f7f6 fd79 	bl	80008c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009dd6:	2180      	movs	r1, #128	@ 0x80
 8009dd8:	4808      	ldr	r0, [pc, #32]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009dda:	f7f9 fe8e 	bl	8003afa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dde:	2240      	movs	r2, #64	@ 0x40
 8009de0:	2100      	movs	r1, #0
 8009de2:	4806      	ldr	r0, [pc, #24]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009de4:	f7f9 fe42 	bl	8003a6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009de8:	2280      	movs	r2, #128	@ 0x80
 8009dea:	2101      	movs	r1, #1
 8009dec:	4803      	ldr	r0, [pc, #12]	@ (8009dfc <USBD_LL_Init+0x94>)
 8009dee:	f7f9 fe3d 	bl	8003a6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20002944 	.word	0x20002944

08009e00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7f8 fd4a 	bl	80028b0 <HAL_PCD_Start>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 f942 	bl	800a0ac <USBD_Get_USB_Status>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	4608      	mov	r0, r1
 8009e40:	4611      	mov	r1, r2
 8009e42:	461a      	mov	r2, r3
 8009e44:	4603      	mov	r3, r0
 8009e46:	70fb      	strb	r3, [r7, #3]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70bb      	strb	r3, [r7, #2]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e5e:	78bb      	ldrb	r3, [r7, #2]
 8009e60:	883a      	ldrh	r2, [r7, #0]
 8009e62:	78f9      	ldrb	r1, [r7, #3]
 8009e64:	f7f9 fa1e 	bl	80032a4 <HAL_PCD_EP_Open>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f91c 	bl	800a0ac <USBD_Get_USB_Status>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7f9 fa67 	bl	8003374 <HAL_PCD_EP_Close>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f8fd 	bl	800a0ac <USBD_Get_USB_Status>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009eda:	78fa      	ldrb	r2, [r7, #3]
 8009edc:	4611      	mov	r1, r2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f9 fb1f 	bl	8003522 <HAL_PCD_EP_SetStall>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f8de 	bl	800a0ac <USBD_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f18:	78fa      	ldrb	r2, [r7, #3]
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7f9 fb63 	bl	80035e8 <HAL_PCD_EP_ClrStall>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 f8bf 	bl	800a0ac <USBD_Get_USB_Status>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	da0b      	bge.n	8009f70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f5e:	68f9      	ldr	r1, [r7, #12]
 8009f60:	4613      	mov	r3, r2
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	440b      	add	r3, r1
 8009f6a:	3316      	adds	r3, #22
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	e00b      	b.n	8009f88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f70:	78fb      	ldrb	r3, [r7, #3]
 8009f72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	4413      	add	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009f86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fae:	78fa      	ldrb	r2, [r7, #3]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f9 f952 	bl	800325c <HAL_PCD_SetAddress>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f874 	bl	800a0ac <USBD_Get_USB_Status>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b086      	sub	sp, #24
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ff0:	7af9      	ldrb	r1, [r7, #11]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	f7f9 fa5a 	bl	80034ae <HAL_PCD_EP_Transmit>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 f853 	bl	800a0ac <USBD_Get_USB_Status>
 800a006:	4603      	mov	r3, r0
 800a008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	607a      	str	r2, [r7, #4]
 800a01e:	603b      	str	r3, [r7, #0]
 800a020:	460b      	mov	r3, r1
 800a022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a032:	7af9      	ldrb	r1, [r7, #11]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	f7f9 f9e6 	bl	8003408 <HAL_PCD_EP_Receive>
 800a03c:	4603      	mov	r3, r0
 800a03e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	4618      	mov	r0, r3
 800a044:	f000 f832 	bl	800a0ac <USBD_Get_USB_Status>
 800a048:	4603      	mov	r3, r0
 800a04a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a04c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f9 fa06 	bl	800347e <HAL_PCD_EP_GetRxCount>
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a084:	4b03      	ldr	r3, [pc, #12]	@ (800a094 <USBD_static_malloc+0x18>)
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20002e28 	.word	0x20002e28

0800a098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d817      	bhi.n	800a0f0 <USBD_Get_USB_Status+0x44>
 800a0c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c8 <USBD_Get_USB_Status+0x1c>)
 800a0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c6:	bf00      	nop
 800a0c8:	0800a0d9 	.word	0x0800a0d9
 800a0cc:	0800a0df 	.word	0x0800a0df
 800a0d0:	0800a0e5 	.word	0x0800a0e5
 800a0d4:	0800a0eb 	.word	0x0800a0eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	73fb      	strb	r3, [r7, #15]
    break;
 800a0dc:	e00b      	b.n	800a0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e2:	e008      	b.n	800a0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e8:	e005      	b.n	800a0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ee:	e002      	b.n	800a0f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f4:	bf00      	nop
  }
  return usb_status;
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <siprintf>:
 800a104:	b40e      	push	{r1, r2, r3}
 800a106:	b500      	push	{lr}
 800a108:	b09c      	sub	sp, #112	@ 0x70
 800a10a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a10c:	9002      	str	r0, [sp, #8]
 800a10e:	9006      	str	r0, [sp, #24]
 800a110:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a114:	4809      	ldr	r0, [pc, #36]	@ (800a13c <siprintf+0x38>)
 800a116:	9107      	str	r1, [sp, #28]
 800a118:	9104      	str	r1, [sp, #16]
 800a11a:	4909      	ldr	r1, [pc, #36]	@ (800a140 <siprintf+0x3c>)
 800a11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a120:	9105      	str	r1, [sp, #20]
 800a122:	6800      	ldr	r0, [r0, #0]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	a902      	add	r1, sp, #8
 800a128:	f000 f9ba 	bl	800a4a0 <_svfiprintf_r>
 800a12c:	9b02      	ldr	r3, [sp, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	b01c      	add	sp, #112	@ 0x70
 800a134:	f85d eb04 	ldr.w	lr, [sp], #4
 800a138:	b003      	add	sp, #12
 800a13a:	4770      	bx	lr
 800a13c:	200000fc 	.word	0x200000fc
 800a140:	ffff0208 	.word	0xffff0208

0800a144 <memset>:
 800a144:	4402      	add	r2, r0
 800a146:	4603      	mov	r3, r0
 800a148:	4293      	cmp	r3, r2
 800a14a:	d100      	bne.n	800a14e <memset+0xa>
 800a14c:	4770      	bx	lr
 800a14e:	f803 1b01 	strb.w	r1, [r3], #1
 800a152:	e7f9      	b.n	800a148 <memset+0x4>

0800a154 <strncmp>:
 800a154:	b510      	push	{r4, lr}
 800a156:	b16a      	cbz	r2, 800a174 <strncmp+0x20>
 800a158:	3901      	subs	r1, #1
 800a15a:	1884      	adds	r4, r0, r2
 800a15c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a160:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a164:	429a      	cmp	r2, r3
 800a166:	d103      	bne.n	800a170 <strncmp+0x1c>
 800a168:	42a0      	cmp	r0, r4
 800a16a:	d001      	beq.n	800a170 <strncmp+0x1c>
 800a16c:	2a00      	cmp	r2, #0
 800a16e:	d1f5      	bne.n	800a15c <strncmp+0x8>
 800a170:	1ad0      	subs	r0, r2, r3
 800a172:	bd10      	pop	{r4, pc}
 800a174:	4610      	mov	r0, r2
 800a176:	e7fc      	b.n	800a172 <strncmp+0x1e>

0800a178 <strncpy>:
 800a178:	b510      	push	{r4, lr}
 800a17a:	3901      	subs	r1, #1
 800a17c:	4603      	mov	r3, r0
 800a17e:	b132      	cbz	r2, 800a18e <strncpy+0x16>
 800a180:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a184:	f803 4b01 	strb.w	r4, [r3], #1
 800a188:	3a01      	subs	r2, #1
 800a18a:	2c00      	cmp	r4, #0
 800a18c:	d1f7      	bne.n	800a17e <strncpy+0x6>
 800a18e:	441a      	add	r2, r3
 800a190:	2100      	movs	r1, #0
 800a192:	4293      	cmp	r3, r2
 800a194:	d100      	bne.n	800a198 <strncpy+0x20>
 800a196:	bd10      	pop	{r4, pc}
 800a198:	f803 1b01 	strb.w	r1, [r3], #1
 800a19c:	e7f9      	b.n	800a192 <strncpy+0x1a>
	...

0800a1a0 <__errno>:
 800a1a0:	4b01      	ldr	r3, [pc, #4]	@ (800a1a8 <__errno+0x8>)
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	200000fc 	.word	0x200000fc

0800a1ac <__libc_init_array>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a1e4 <__libc_init_array+0x38>)
 800a1b0:	4c0d      	ldr	r4, [pc, #52]	@ (800a1e8 <__libc_init_array+0x3c>)
 800a1b2:	1b64      	subs	r4, r4, r5
 800a1b4:	10a4      	asrs	r4, r4, #2
 800a1b6:	2600      	movs	r6, #0
 800a1b8:	42a6      	cmp	r6, r4
 800a1ba:	d109      	bne.n	800a1d0 <__libc_init_array+0x24>
 800a1bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a1ec <__libc_init_array+0x40>)
 800a1be:	4c0c      	ldr	r4, [pc, #48]	@ (800a1f0 <__libc_init_array+0x44>)
 800a1c0:	f000 fc66 	bl	800aa90 <_init>
 800a1c4:	1b64      	subs	r4, r4, r5
 800a1c6:	10a4      	asrs	r4, r4, #2
 800a1c8:	2600      	movs	r6, #0
 800a1ca:	42a6      	cmp	r6, r4
 800a1cc:	d105      	bne.n	800a1da <__libc_init_array+0x2e>
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1d4:	4798      	blx	r3
 800a1d6:	3601      	adds	r6, #1
 800a1d8:	e7ee      	b.n	800a1b8 <__libc_init_array+0xc>
 800a1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1de:	4798      	blx	r3
 800a1e0:	3601      	adds	r6, #1
 800a1e2:	e7f2      	b.n	800a1ca <__libc_init_array+0x1e>
 800a1e4:	0800ad7c 	.word	0x0800ad7c
 800a1e8:	0800ad7c 	.word	0x0800ad7c
 800a1ec:	0800ad7c 	.word	0x0800ad7c
 800a1f0:	0800ad80 	.word	0x0800ad80

0800a1f4 <__retarget_lock_acquire_recursive>:
 800a1f4:	4770      	bx	lr

0800a1f6 <__retarget_lock_release_recursive>:
 800a1f6:	4770      	bx	lr

0800a1f8 <_free_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d041      	beq.n	800a284 <_free_r+0x8c>
 800a200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a204:	1f0c      	subs	r4, r1, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	bfb8      	it	lt
 800a20a:	18e4      	addlt	r4, r4, r3
 800a20c:	f000 f8e0 	bl	800a3d0 <__malloc_lock>
 800a210:	4a1d      	ldr	r2, [pc, #116]	@ (800a288 <_free_r+0x90>)
 800a212:	6813      	ldr	r3, [r2, #0]
 800a214:	b933      	cbnz	r3, 800a224 <_free_r+0x2c>
 800a216:	6063      	str	r3, [r4, #4]
 800a218:	6014      	str	r4, [r2, #0]
 800a21a:	4628      	mov	r0, r5
 800a21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a220:	f000 b8dc 	b.w	800a3dc <__malloc_unlock>
 800a224:	42a3      	cmp	r3, r4
 800a226:	d908      	bls.n	800a23a <_free_r+0x42>
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	1821      	adds	r1, r4, r0
 800a22c:	428b      	cmp	r3, r1
 800a22e:	bf01      	itttt	eq
 800a230:	6819      	ldreq	r1, [r3, #0]
 800a232:	685b      	ldreq	r3, [r3, #4]
 800a234:	1809      	addeq	r1, r1, r0
 800a236:	6021      	streq	r1, [r4, #0]
 800a238:	e7ed      	b.n	800a216 <_free_r+0x1e>
 800a23a:	461a      	mov	r2, r3
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	b10b      	cbz	r3, 800a244 <_free_r+0x4c>
 800a240:	42a3      	cmp	r3, r4
 800a242:	d9fa      	bls.n	800a23a <_free_r+0x42>
 800a244:	6811      	ldr	r1, [r2, #0]
 800a246:	1850      	adds	r0, r2, r1
 800a248:	42a0      	cmp	r0, r4
 800a24a:	d10b      	bne.n	800a264 <_free_r+0x6c>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	4401      	add	r1, r0
 800a250:	1850      	adds	r0, r2, r1
 800a252:	4283      	cmp	r3, r0
 800a254:	6011      	str	r1, [r2, #0]
 800a256:	d1e0      	bne.n	800a21a <_free_r+0x22>
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	6053      	str	r3, [r2, #4]
 800a25e:	4408      	add	r0, r1
 800a260:	6010      	str	r0, [r2, #0]
 800a262:	e7da      	b.n	800a21a <_free_r+0x22>
 800a264:	d902      	bls.n	800a26c <_free_r+0x74>
 800a266:	230c      	movs	r3, #12
 800a268:	602b      	str	r3, [r5, #0]
 800a26a:	e7d6      	b.n	800a21a <_free_r+0x22>
 800a26c:	6820      	ldr	r0, [r4, #0]
 800a26e:	1821      	adds	r1, r4, r0
 800a270:	428b      	cmp	r3, r1
 800a272:	bf04      	itt	eq
 800a274:	6819      	ldreq	r1, [r3, #0]
 800a276:	685b      	ldreq	r3, [r3, #4]
 800a278:	6063      	str	r3, [r4, #4]
 800a27a:	bf04      	itt	eq
 800a27c:	1809      	addeq	r1, r1, r0
 800a27e:	6021      	streq	r1, [r4, #0]
 800a280:	6054      	str	r4, [r2, #4]
 800a282:	e7ca      	b.n	800a21a <_free_r+0x22>
 800a284:	bd38      	pop	{r3, r4, r5, pc}
 800a286:	bf00      	nop
 800a288:	2000318c 	.word	0x2000318c

0800a28c <sbrk_aligned>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	4e0f      	ldr	r6, [pc, #60]	@ (800a2cc <sbrk_aligned+0x40>)
 800a290:	460c      	mov	r4, r1
 800a292:	6831      	ldr	r1, [r6, #0]
 800a294:	4605      	mov	r5, r0
 800a296:	b911      	cbnz	r1, 800a29e <sbrk_aligned+0x12>
 800a298:	f000 fba6 	bl	800a9e8 <_sbrk_r>
 800a29c:	6030      	str	r0, [r6, #0]
 800a29e:	4621      	mov	r1, r4
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f000 fba1 	bl	800a9e8 <_sbrk_r>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	d103      	bne.n	800a2b2 <sbrk_aligned+0x26>
 800a2aa:	f04f 34ff 	mov.w	r4, #4294967295
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	bd70      	pop	{r4, r5, r6, pc}
 800a2b2:	1cc4      	adds	r4, r0, #3
 800a2b4:	f024 0403 	bic.w	r4, r4, #3
 800a2b8:	42a0      	cmp	r0, r4
 800a2ba:	d0f8      	beq.n	800a2ae <sbrk_aligned+0x22>
 800a2bc:	1a21      	subs	r1, r4, r0
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 fb92 	bl	800a9e8 <_sbrk_r>
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d1f2      	bne.n	800a2ae <sbrk_aligned+0x22>
 800a2c8:	e7ef      	b.n	800a2aa <sbrk_aligned+0x1e>
 800a2ca:	bf00      	nop
 800a2cc:	20003188 	.word	0x20003188

0800a2d0 <_malloc_r>:
 800a2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d4:	1ccd      	adds	r5, r1, #3
 800a2d6:	f025 0503 	bic.w	r5, r5, #3
 800a2da:	3508      	adds	r5, #8
 800a2dc:	2d0c      	cmp	r5, #12
 800a2de:	bf38      	it	cc
 800a2e0:	250c      	movcc	r5, #12
 800a2e2:	2d00      	cmp	r5, #0
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	db01      	blt.n	800a2ec <_malloc_r+0x1c>
 800a2e8:	42a9      	cmp	r1, r5
 800a2ea:	d904      	bls.n	800a2f6 <_malloc_r+0x26>
 800a2ec:	230c      	movs	r3, #12
 800a2ee:	6033      	str	r3, [r6, #0]
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3cc <_malloc_r+0xfc>
 800a2fa:	f000 f869 	bl	800a3d0 <__malloc_lock>
 800a2fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a302:	461c      	mov	r4, r3
 800a304:	bb44      	cbnz	r4, 800a358 <_malloc_r+0x88>
 800a306:	4629      	mov	r1, r5
 800a308:	4630      	mov	r0, r6
 800a30a:	f7ff ffbf 	bl	800a28c <sbrk_aligned>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	4604      	mov	r4, r0
 800a312:	d158      	bne.n	800a3c6 <_malloc_r+0xf6>
 800a314:	f8d8 4000 	ldr.w	r4, [r8]
 800a318:	4627      	mov	r7, r4
 800a31a:	2f00      	cmp	r7, #0
 800a31c:	d143      	bne.n	800a3a6 <_malloc_r+0xd6>
 800a31e:	2c00      	cmp	r4, #0
 800a320:	d04b      	beq.n	800a3ba <_malloc_r+0xea>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	4639      	mov	r1, r7
 800a326:	4630      	mov	r0, r6
 800a328:	eb04 0903 	add.w	r9, r4, r3
 800a32c:	f000 fb5c 	bl	800a9e8 <_sbrk_r>
 800a330:	4581      	cmp	r9, r0
 800a332:	d142      	bne.n	800a3ba <_malloc_r+0xea>
 800a334:	6821      	ldr	r1, [r4, #0]
 800a336:	1a6d      	subs	r5, r5, r1
 800a338:	4629      	mov	r1, r5
 800a33a:	4630      	mov	r0, r6
 800a33c:	f7ff ffa6 	bl	800a28c <sbrk_aligned>
 800a340:	3001      	adds	r0, #1
 800a342:	d03a      	beq.n	800a3ba <_malloc_r+0xea>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	442b      	add	r3, r5
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	f8d8 3000 	ldr.w	r3, [r8]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	bb62      	cbnz	r2, 800a3ac <_malloc_r+0xdc>
 800a352:	f8c8 7000 	str.w	r7, [r8]
 800a356:	e00f      	b.n	800a378 <_malloc_r+0xa8>
 800a358:	6822      	ldr	r2, [r4, #0]
 800a35a:	1b52      	subs	r2, r2, r5
 800a35c:	d420      	bmi.n	800a3a0 <_malloc_r+0xd0>
 800a35e:	2a0b      	cmp	r2, #11
 800a360:	d917      	bls.n	800a392 <_malloc_r+0xc2>
 800a362:	1961      	adds	r1, r4, r5
 800a364:	42a3      	cmp	r3, r4
 800a366:	6025      	str	r5, [r4, #0]
 800a368:	bf18      	it	ne
 800a36a:	6059      	strne	r1, [r3, #4]
 800a36c:	6863      	ldr	r3, [r4, #4]
 800a36e:	bf08      	it	eq
 800a370:	f8c8 1000 	streq.w	r1, [r8]
 800a374:	5162      	str	r2, [r4, r5]
 800a376:	604b      	str	r3, [r1, #4]
 800a378:	4630      	mov	r0, r6
 800a37a:	f000 f82f 	bl	800a3dc <__malloc_unlock>
 800a37e:	f104 000b 	add.w	r0, r4, #11
 800a382:	1d23      	adds	r3, r4, #4
 800a384:	f020 0007 	bic.w	r0, r0, #7
 800a388:	1ac2      	subs	r2, r0, r3
 800a38a:	bf1c      	itt	ne
 800a38c:	1a1b      	subne	r3, r3, r0
 800a38e:	50a3      	strne	r3, [r4, r2]
 800a390:	e7af      	b.n	800a2f2 <_malloc_r+0x22>
 800a392:	6862      	ldr	r2, [r4, #4]
 800a394:	42a3      	cmp	r3, r4
 800a396:	bf0c      	ite	eq
 800a398:	f8c8 2000 	streq.w	r2, [r8]
 800a39c:	605a      	strne	r2, [r3, #4]
 800a39e:	e7eb      	b.n	800a378 <_malloc_r+0xa8>
 800a3a0:	4623      	mov	r3, r4
 800a3a2:	6864      	ldr	r4, [r4, #4]
 800a3a4:	e7ae      	b.n	800a304 <_malloc_r+0x34>
 800a3a6:	463c      	mov	r4, r7
 800a3a8:	687f      	ldr	r7, [r7, #4]
 800a3aa:	e7b6      	b.n	800a31a <_malloc_r+0x4a>
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	42a3      	cmp	r3, r4
 800a3b2:	d1fb      	bne.n	800a3ac <_malloc_r+0xdc>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	6053      	str	r3, [r2, #4]
 800a3b8:	e7de      	b.n	800a378 <_malloc_r+0xa8>
 800a3ba:	230c      	movs	r3, #12
 800a3bc:	6033      	str	r3, [r6, #0]
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f000 f80c 	bl	800a3dc <__malloc_unlock>
 800a3c4:	e794      	b.n	800a2f0 <_malloc_r+0x20>
 800a3c6:	6005      	str	r5, [r0, #0]
 800a3c8:	e7d6      	b.n	800a378 <_malloc_r+0xa8>
 800a3ca:	bf00      	nop
 800a3cc:	2000318c 	.word	0x2000318c

0800a3d0 <__malloc_lock>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	@ (800a3d8 <__malloc_lock+0x8>)
 800a3d2:	f7ff bf0f 	b.w	800a1f4 <__retarget_lock_acquire_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	20003184 	.word	0x20003184

0800a3dc <__malloc_unlock>:
 800a3dc:	4801      	ldr	r0, [pc, #4]	@ (800a3e4 <__malloc_unlock+0x8>)
 800a3de:	f7ff bf0a 	b.w	800a1f6 <__retarget_lock_release_recursive>
 800a3e2:	bf00      	nop
 800a3e4:	20003184 	.word	0x20003184

0800a3e8 <__ssputs_r>:
 800a3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ec:	688e      	ldr	r6, [r1, #8]
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	42be      	cmp	r6, r7
 800a3f2:	680b      	ldr	r3, [r1, #0]
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	4690      	mov	r8, r2
 800a3fa:	d82d      	bhi.n	800a458 <__ssputs_r+0x70>
 800a3fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a400:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a404:	d026      	beq.n	800a454 <__ssputs_r+0x6c>
 800a406:	6965      	ldr	r5, [r4, #20]
 800a408:	6909      	ldr	r1, [r1, #16]
 800a40a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a40e:	eba3 0901 	sub.w	r9, r3, r1
 800a412:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a416:	1c7b      	adds	r3, r7, #1
 800a418:	444b      	add	r3, r9
 800a41a:	106d      	asrs	r5, r5, #1
 800a41c:	429d      	cmp	r5, r3
 800a41e:	bf38      	it	cc
 800a420:	461d      	movcc	r5, r3
 800a422:	0553      	lsls	r3, r2, #21
 800a424:	d527      	bpl.n	800a476 <__ssputs_r+0x8e>
 800a426:	4629      	mov	r1, r5
 800a428:	f7ff ff52 	bl	800a2d0 <_malloc_r>
 800a42c:	4606      	mov	r6, r0
 800a42e:	b360      	cbz	r0, 800a48a <__ssputs_r+0xa2>
 800a430:	6921      	ldr	r1, [r4, #16]
 800a432:	464a      	mov	r2, r9
 800a434:	f000 fae8 	bl	800aa08 <memcpy>
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a43e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	6126      	str	r6, [r4, #16]
 800a446:	6165      	str	r5, [r4, #20]
 800a448:	444e      	add	r6, r9
 800a44a:	eba5 0509 	sub.w	r5, r5, r9
 800a44e:	6026      	str	r6, [r4, #0]
 800a450:	60a5      	str	r5, [r4, #8]
 800a452:	463e      	mov	r6, r7
 800a454:	42be      	cmp	r6, r7
 800a456:	d900      	bls.n	800a45a <__ssputs_r+0x72>
 800a458:	463e      	mov	r6, r7
 800a45a:	6820      	ldr	r0, [r4, #0]
 800a45c:	4632      	mov	r2, r6
 800a45e:	4641      	mov	r1, r8
 800a460:	f000 faa8 	bl	800a9b4 <memmove>
 800a464:	68a3      	ldr	r3, [r4, #8]
 800a466:	1b9b      	subs	r3, r3, r6
 800a468:	60a3      	str	r3, [r4, #8]
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	4433      	add	r3, r6
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	2000      	movs	r0, #0
 800a472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a476:	462a      	mov	r2, r5
 800a478:	f000 fad4 	bl	800aa24 <_realloc_r>
 800a47c:	4606      	mov	r6, r0
 800a47e:	2800      	cmp	r0, #0
 800a480:	d1e0      	bne.n	800a444 <__ssputs_r+0x5c>
 800a482:	6921      	ldr	r1, [r4, #16]
 800a484:	4650      	mov	r0, sl
 800a486:	f7ff feb7 	bl	800a1f8 <_free_r>
 800a48a:	230c      	movs	r3, #12
 800a48c:	f8ca 3000 	str.w	r3, [sl]
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	f04f 30ff 	mov.w	r0, #4294967295
 800a49c:	e7e9      	b.n	800a472 <__ssputs_r+0x8a>
	...

0800a4a0 <_svfiprintf_r>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	4698      	mov	r8, r3
 800a4a6:	898b      	ldrh	r3, [r1, #12]
 800a4a8:	061b      	lsls	r3, r3, #24
 800a4aa:	b09d      	sub	sp, #116	@ 0x74
 800a4ac:	4607      	mov	r7, r0
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	4614      	mov	r4, r2
 800a4b2:	d510      	bpl.n	800a4d6 <_svfiprintf_r+0x36>
 800a4b4:	690b      	ldr	r3, [r1, #16]
 800a4b6:	b973      	cbnz	r3, 800a4d6 <_svfiprintf_r+0x36>
 800a4b8:	2140      	movs	r1, #64	@ 0x40
 800a4ba:	f7ff ff09 	bl	800a2d0 <_malloc_r>
 800a4be:	6028      	str	r0, [r5, #0]
 800a4c0:	6128      	str	r0, [r5, #16]
 800a4c2:	b930      	cbnz	r0, 800a4d2 <_svfiprintf_r+0x32>
 800a4c4:	230c      	movs	r3, #12
 800a4c6:	603b      	str	r3, [r7, #0]
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	b01d      	add	sp, #116	@ 0x74
 800a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d2:	2340      	movs	r3, #64	@ 0x40
 800a4d4:	616b      	str	r3, [r5, #20]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4da:	2320      	movs	r3, #32
 800a4dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4e4:	2330      	movs	r3, #48	@ 0x30
 800a4e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a684 <_svfiprintf_r+0x1e4>
 800a4ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4ee:	f04f 0901 	mov.w	r9, #1
 800a4f2:	4623      	mov	r3, r4
 800a4f4:	469a      	mov	sl, r3
 800a4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4fa:	b10a      	cbz	r2, 800a500 <_svfiprintf_r+0x60>
 800a4fc:	2a25      	cmp	r2, #37	@ 0x25
 800a4fe:	d1f9      	bne.n	800a4f4 <_svfiprintf_r+0x54>
 800a500:	ebba 0b04 	subs.w	fp, sl, r4
 800a504:	d00b      	beq.n	800a51e <_svfiprintf_r+0x7e>
 800a506:	465b      	mov	r3, fp
 800a508:	4622      	mov	r2, r4
 800a50a:	4629      	mov	r1, r5
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff ff6b 	bl	800a3e8 <__ssputs_r>
 800a512:	3001      	adds	r0, #1
 800a514:	f000 80a7 	beq.w	800a666 <_svfiprintf_r+0x1c6>
 800a518:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a51a:	445a      	add	r2, fp
 800a51c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a51e:	f89a 3000 	ldrb.w	r3, [sl]
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 809f 	beq.w	800a666 <_svfiprintf_r+0x1c6>
 800a528:	2300      	movs	r3, #0
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a532:	f10a 0a01 	add.w	sl, sl, #1
 800a536:	9304      	str	r3, [sp, #16]
 800a538:	9307      	str	r3, [sp, #28]
 800a53a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a53e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a540:	4654      	mov	r4, sl
 800a542:	2205      	movs	r2, #5
 800a544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a548:	484e      	ldr	r0, [pc, #312]	@ (800a684 <_svfiprintf_r+0x1e4>)
 800a54a:	f7f5 fe59 	bl	8000200 <memchr>
 800a54e:	9a04      	ldr	r2, [sp, #16]
 800a550:	b9d8      	cbnz	r0, 800a58a <_svfiprintf_r+0xea>
 800a552:	06d0      	lsls	r0, r2, #27
 800a554:	bf44      	itt	mi
 800a556:	2320      	movmi	r3, #32
 800a558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a55c:	0711      	lsls	r1, r2, #28
 800a55e:	bf44      	itt	mi
 800a560:	232b      	movmi	r3, #43	@ 0x2b
 800a562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a566:	f89a 3000 	ldrb.w	r3, [sl]
 800a56a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a56c:	d015      	beq.n	800a59a <_svfiprintf_r+0xfa>
 800a56e:	9a07      	ldr	r2, [sp, #28]
 800a570:	4654      	mov	r4, sl
 800a572:	2000      	movs	r0, #0
 800a574:	f04f 0c0a 	mov.w	ip, #10
 800a578:	4621      	mov	r1, r4
 800a57a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a57e:	3b30      	subs	r3, #48	@ 0x30
 800a580:	2b09      	cmp	r3, #9
 800a582:	d94b      	bls.n	800a61c <_svfiprintf_r+0x17c>
 800a584:	b1b0      	cbz	r0, 800a5b4 <_svfiprintf_r+0x114>
 800a586:	9207      	str	r2, [sp, #28]
 800a588:	e014      	b.n	800a5b4 <_svfiprintf_r+0x114>
 800a58a:	eba0 0308 	sub.w	r3, r0, r8
 800a58e:	fa09 f303 	lsl.w	r3, r9, r3
 800a592:	4313      	orrs	r3, r2
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	46a2      	mov	sl, r4
 800a598:	e7d2      	b.n	800a540 <_svfiprintf_r+0xa0>
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	1d19      	adds	r1, r3, #4
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	9103      	str	r1, [sp, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	bfbb      	ittet	lt
 800a5a6:	425b      	neglt	r3, r3
 800a5a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a5ac:	9307      	strge	r3, [sp, #28]
 800a5ae:	9307      	strlt	r3, [sp, #28]
 800a5b0:	bfb8      	it	lt
 800a5b2:	9204      	strlt	r2, [sp, #16]
 800a5b4:	7823      	ldrb	r3, [r4, #0]
 800a5b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5b8:	d10a      	bne.n	800a5d0 <_svfiprintf_r+0x130>
 800a5ba:	7863      	ldrb	r3, [r4, #1]
 800a5bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5be:	d132      	bne.n	800a626 <_svfiprintf_r+0x186>
 800a5c0:	9b03      	ldr	r3, [sp, #12]
 800a5c2:	1d1a      	adds	r2, r3, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	9203      	str	r2, [sp, #12]
 800a5c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5cc:	3402      	adds	r4, #2
 800a5ce:	9305      	str	r3, [sp, #20]
 800a5d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a694 <_svfiprintf_r+0x1f4>
 800a5d4:	7821      	ldrb	r1, [r4, #0]
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	4650      	mov	r0, sl
 800a5da:	f7f5 fe11 	bl	8000200 <memchr>
 800a5de:	b138      	cbz	r0, 800a5f0 <_svfiprintf_r+0x150>
 800a5e0:	9b04      	ldr	r3, [sp, #16]
 800a5e2:	eba0 000a 	sub.w	r0, r0, sl
 800a5e6:	2240      	movs	r2, #64	@ 0x40
 800a5e8:	4082      	lsls	r2, r0
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	9304      	str	r3, [sp, #16]
 800a5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f4:	4824      	ldr	r0, [pc, #144]	@ (800a688 <_svfiprintf_r+0x1e8>)
 800a5f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5fa:	2206      	movs	r2, #6
 800a5fc:	f7f5 fe00 	bl	8000200 <memchr>
 800a600:	2800      	cmp	r0, #0
 800a602:	d036      	beq.n	800a672 <_svfiprintf_r+0x1d2>
 800a604:	4b21      	ldr	r3, [pc, #132]	@ (800a68c <_svfiprintf_r+0x1ec>)
 800a606:	bb1b      	cbnz	r3, 800a650 <_svfiprintf_r+0x1b0>
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	3307      	adds	r3, #7
 800a60c:	f023 0307 	bic.w	r3, r3, #7
 800a610:	3308      	adds	r3, #8
 800a612:	9303      	str	r3, [sp, #12]
 800a614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a616:	4433      	add	r3, r6
 800a618:	9309      	str	r3, [sp, #36]	@ 0x24
 800a61a:	e76a      	b.n	800a4f2 <_svfiprintf_r+0x52>
 800a61c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a620:	460c      	mov	r4, r1
 800a622:	2001      	movs	r0, #1
 800a624:	e7a8      	b.n	800a578 <_svfiprintf_r+0xd8>
 800a626:	2300      	movs	r3, #0
 800a628:	3401      	adds	r4, #1
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	4619      	mov	r1, r3
 800a62e:	f04f 0c0a 	mov.w	ip, #10
 800a632:	4620      	mov	r0, r4
 800a634:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a638:	3a30      	subs	r2, #48	@ 0x30
 800a63a:	2a09      	cmp	r2, #9
 800a63c:	d903      	bls.n	800a646 <_svfiprintf_r+0x1a6>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0c6      	beq.n	800a5d0 <_svfiprintf_r+0x130>
 800a642:	9105      	str	r1, [sp, #20]
 800a644:	e7c4      	b.n	800a5d0 <_svfiprintf_r+0x130>
 800a646:	fb0c 2101 	mla	r1, ip, r1, r2
 800a64a:	4604      	mov	r4, r0
 800a64c:	2301      	movs	r3, #1
 800a64e:	e7f0      	b.n	800a632 <_svfiprintf_r+0x192>
 800a650:	ab03      	add	r3, sp, #12
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	462a      	mov	r2, r5
 800a656:	4b0e      	ldr	r3, [pc, #56]	@ (800a690 <_svfiprintf_r+0x1f0>)
 800a658:	a904      	add	r1, sp, #16
 800a65a:	4638      	mov	r0, r7
 800a65c:	f3af 8000 	nop.w
 800a660:	1c42      	adds	r2, r0, #1
 800a662:	4606      	mov	r6, r0
 800a664:	d1d6      	bne.n	800a614 <_svfiprintf_r+0x174>
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	065b      	lsls	r3, r3, #25
 800a66a:	f53f af2d 	bmi.w	800a4c8 <_svfiprintf_r+0x28>
 800a66e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a670:	e72c      	b.n	800a4cc <_svfiprintf_r+0x2c>
 800a672:	ab03      	add	r3, sp, #12
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	462a      	mov	r2, r5
 800a678:	4b05      	ldr	r3, [pc, #20]	@ (800a690 <_svfiprintf_r+0x1f0>)
 800a67a:	a904      	add	r1, sp, #16
 800a67c:	4638      	mov	r0, r7
 800a67e:	f000 f879 	bl	800a774 <_printf_i>
 800a682:	e7ed      	b.n	800a660 <_svfiprintf_r+0x1c0>
 800a684:	0800ad40 	.word	0x0800ad40
 800a688:	0800ad4a 	.word	0x0800ad4a
 800a68c:	00000000 	.word	0x00000000
 800a690:	0800a3e9 	.word	0x0800a3e9
 800a694:	0800ad46 	.word	0x0800ad46

0800a698 <_printf_common>:
 800a698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a69c:	4616      	mov	r6, r2
 800a69e:	4698      	mov	r8, r3
 800a6a0:	688a      	ldr	r2, [r1, #8]
 800a6a2:	690b      	ldr	r3, [r1, #16]
 800a6a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	bfb8      	it	lt
 800a6ac:	4613      	movlt	r3, r2
 800a6ae:	6033      	str	r3, [r6, #0]
 800a6b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	b10a      	cbz	r2, 800a6be <_printf_common+0x26>
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	6033      	str	r3, [r6, #0]
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	0699      	lsls	r1, r3, #26
 800a6c2:	bf42      	ittt	mi
 800a6c4:	6833      	ldrmi	r3, [r6, #0]
 800a6c6:	3302      	addmi	r3, #2
 800a6c8:	6033      	strmi	r3, [r6, #0]
 800a6ca:	6825      	ldr	r5, [r4, #0]
 800a6cc:	f015 0506 	ands.w	r5, r5, #6
 800a6d0:	d106      	bne.n	800a6e0 <_printf_common+0x48>
 800a6d2:	f104 0a19 	add.w	sl, r4, #25
 800a6d6:	68e3      	ldr	r3, [r4, #12]
 800a6d8:	6832      	ldr	r2, [r6, #0]
 800a6da:	1a9b      	subs	r3, r3, r2
 800a6dc:	42ab      	cmp	r3, r5
 800a6de:	dc26      	bgt.n	800a72e <_printf_common+0x96>
 800a6e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	3b00      	subs	r3, #0
 800a6e8:	bf18      	it	ne
 800a6ea:	2301      	movne	r3, #1
 800a6ec:	0692      	lsls	r2, r2, #26
 800a6ee:	d42b      	bmi.n	800a748 <_printf_common+0xb0>
 800a6f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a6f4:	4641      	mov	r1, r8
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	47c8      	blx	r9
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	d01e      	beq.n	800a73c <_printf_common+0xa4>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	6922      	ldr	r2, [r4, #16]
 800a702:	f003 0306 	and.w	r3, r3, #6
 800a706:	2b04      	cmp	r3, #4
 800a708:	bf02      	ittt	eq
 800a70a:	68e5      	ldreq	r5, [r4, #12]
 800a70c:	6833      	ldreq	r3, [r6, #0]
 800a70e:	1aed      	subeq	r5, r5, r3
 800a710:	68a3      	ldr	r3, [r4, #8]
 800a712:	bf0c      	ite	eq
 800a714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a718:	2500      	movne	r5, #0
 800a71a:	4293      	cmp	r3, r2
 800a71c:	bfc4      	itt	gt
 800a71e:	1a9b      	subgt	r3, r3, r2
 800a720:	18ed      	addgt	r5, r5, r3
 800a722:	2600      	movs	r6, #0
 800a724:	341a      	adds	r4, #26
 800a726:	42b5      	cmp	r5, r6
 800a728:	d11a      	bne.n	800a760 <_printf_common+0xc8>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e008      	b.n	800a740 <_printf_common+0xa8>
 800a72e:	2301      	movs	r3, #1
 800a730:	4652      	mov	r2, sl
 800a732:	4641      	mov	r1, r8
 800a734:	4638      	mov	r0, r7
 800a736:	47c8      	blx	r9
 800a738:	3001      	adds	r0, #1
 800a73a:	d103      	bne.n	800a744 <_printf_common+0xac>
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295
 800a740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a744:	3501      	adds	r5, #1
 800a746:	e7c6      	b.n	800a6d6 <_printf_common+0x3e>
 800a748:	18e1      	adds	r1, r4, r3
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	2030      	movs	r0, #48	@ 0x30
 800a74e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a752:	4422      	add	r2, r4
 800a754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a75c:	3302      	adds	r3, #2
 800a75e:	e7c7      	b.n	800a6f0 <_printf_common+0x58>
 800a760:	2301      	movs	r3, #1
 800a762:	4622      	mov	r2, r4
 800a764:	4641      	mov	r1, r8
 800a766:	4638      	mov	r0, r7
 800a768:	47c8      	blx	r9
 800a76a:	3001      	adds	r0, #1
 800a76c:	d0e6      	beq.n	800a73c <_printf_common+0xa4>
 800a76e:	3601      	adds	r6, #1
 800a770:	e7d9      	b.n	800a726 <_printf_common+0x8e>
	...

0800a774 <_printf_i>:
 800a774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a778:	7e0f      	ldrb	r7, [r1, #24]
 800a77a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a77c:	2f78      	cmp	r7, #120	@ 0x78
 800a77e:	4691      	mov	r9, r2
 800a780:	4680      	mov	r8, r0
 800a782:	460c      	mov	r4, r1
 800a784:	469a      	mov	sl, r3
 800a786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a78a:	d807      	bhi.n	800a79c <_printf_i+0x28>
 800a78c:	2f62      	cmp	r7, #98	@ 0x62
 800a78e:	d80a      	bhi.n	800a7a6 <_printf_i+0x32>
 800a790:	2f00      	cmp	r7, #0
 800a792:	f000 80d2 	beq.w	800a93a <_printf_i+0x1c6>
 800a796:	2f58      	cmp	r7, #88	@ 0x58
 800a798:	f000 80b9 	beq.w	800a90e <_printf_i+0x19a>
 800a79c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7a4:	e03a      	b.n	800a81c <_printf_i+0xa8>
 800a7a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7aa:	2b15      	cmp	r3, #21
 800a7ac:	d8f6      	bhi.n	800a79c <_printf_i+0x28>
 800a7ae:	a101      	add	r1, pc, #4	@ (adr r1, 800a7b4 <_printf_i+0x40>)
 800a7b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7b4:	0800a80d 	.word	0x0800a80d
 800a7b8:	0800a821 	.word	0x0800a821
 800a7bc:	0800a79d 	.word	0x0800a79d
 800a7c0:	0800a79d 	.word	0x0800a79d
 800a7c4:	0800a79d 	.word	0x0800a79d
 800a7c8:	0800a79d 	.word	0x0800a79d
 800a7cc:	0800a821 	.word	0x0800a821
 800a7d0:	0800a79d 	.word	0x0800a79d
 800a7d4:	0800a79d 	.word	0x0800a79d
 800a7d8:	0800a79d 	.word	0x0800a79d
 800a7dc:	0800a79d 	.word	0x0800a79d
 800a7e0:	0800a921 	.word	0x0800a921
 800a7e4:	0800a84b 	.word	0x0800a84b
 800a7e8:	0800a8db 	.word	0x0800a8db
 800a7ec:	0800a79d 	.word	0x0800a79d
 800a7f0:	0800a79d 	.word	0x0800a79d
 800a7f4:	0800a943 	.word	0x0800a943
 800a7f8:	0800a79d 	.word	0x0800a79d
 800a7fc:	0800a84b 	.word	0x0800a84b
 800a800:	0800a79d 	.word	0x0800a79d
 800a804:	0800a79d 	.word	0x0800a79d
 800a808:	0800a8e3 	.word	0x0800a8e3
 800a80c:	6833      	ldr	r3, [r6, #0]
 800a80e:	1d1a      	adds	r2, r3, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6032      	str	r2, [r6, #0]
 800a814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a81c:	2301      	movs	r3, #1
 800a81e:	e09d      	b.n	800a95c <_printf_i+0x1e8>
 800a820:	6833      	ldr	r3, [r6, #0]
 800a822:	6820      	ldr	r0, [r4, #0]
 800a824:	1d19      	adds	r1, r3, #4
 800a826:	6031      	str	r1, [r6, #0]
 800a828:	0606      	lsls	r6, r0, #24
 800a82a:	d501      	bpl.n	800a830 <_printf_i+0xbc>
 800a82c:	681d      	ldr	r5, [r3, #0]
 800a82e:	e003      	b.n	800a838 <_printf_i+0xc4>
 800a830:	0645      	lsls	r5, r0, #25
 800a832:	d5fb      	bpl.n	800a82c <_printf_i+0xb8>
 800a834:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a838:	2d00      	cmp	r5, #0
 800a83a:	da03      	bge.n	800a844 <_printf_i+0xd0>
 800a83c:	232d      	movs	r3, #45	@ 0x2d
 800a83e:	426d      	negs	r5, r5
 800a840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a844:	4859      	ldr	r0, [pc, #356]	@ (800a9ac <_printf_i+0x238>)
 800a846:	230a      	movs	r3, #10
 800a848:	e011      	b.n	800a86e <_printf_i+0xfa>
 800a84a:	6821      	ldr	r1, [r4, #0]
 800a84c:	6833      	ldr	r3, [r6, #0]
 800a84e:	0608      	lsls	r0, r1, #24
 800a850:	f853 5b04 	ldr.w	r5, [r3], #4
 800a854:	d402      	bmi.n	800a85c <_printf_i+0xe8>
 800a856:	0649      	lsls	r1, r1, #25
 800a858:	bf48      	it	mi
 800a85a:	b2ad      	uxthmi	r5, r5
 800a85c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a85e:	4853      	ldr	r0, [pc, #332]	@ (800a9ac <_printf_i+0x238>)
 800a860:	6033      	str	r3, [r6, #0]
 800a862:	bf14      	ite	ne
 800a864:	230a      	movne	r3, #10
 800a866:	2308      	moveq	r3, #8
 800a868:	2100      	movs	r1, #0
 800a86a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a86e:	6866      	ldr	r6, [r4, #4]
 800a870:	60a6      	str	r6, [r4, #8]
 800a872:	2e00      	cmp	r6, #0
 800a874:	bfa2      	ittt	ge
 800a876:	6821      	ldrge	r1, [r4, #0]
 800a878:	f021 0104 	bicge.w	r1, r1, #4
 800a87c:	6021      	strge	r1, [r4, #0]
 800a87e:	b90d      	cbnz	r5, 800a884 <_printf_i+0x110>
 800a880:	2e00      	cmp	r6, #0
 800a882:	d04b      	beq.n	800a91c <_printf_i+0x1a8>
 800a884:	4616      	mov	r6, r2
 800a886:	fbb5 f1f3 	udiv	r1, r5, r3
 800a88a:	fb03 5711 	mls	r7, r3, r1, r5
 800a88e:	5dc7      	ldrb	r7, [r0, r7]
 800a890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a894:	462f      	mov	r7, r5
 800a896:	42bb      	cmp	r3, r7
 800a898:	460d      	mov	r5, r1
 800a89a:	d9f4      	bls.n	800a886 <_printf_i+0x112>
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d10b      	bne.n	800a8b8 <_printf_i+0x144>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	07df      	lsls	r7, r3, #31
 800a8a4:	d508      	bpl.n	800a8b8 <_printf_i+0x144>
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	6861      	ldr	r1, [r4, #4]
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	bfde      	ittt	le
 800a8ae:	2330      	movle	r3, #48	@ 0x30
 800a8b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8b8:	1b92      	subs	r2, r2, r6
 800a8ba:	6122      	str	r2, [r4, #16]
 800a8bc:	f8cd a000 	str.w	sl, [sp]
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	aa03      	add	r2, sp, #12
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7ff fee6 	bl	800a698 <_printf_common>
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	d14a      	bne.n	800a966 <_printf_i+0x1f2>
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	b004      	add	sp, #16
 800a8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	f043 0320 	orr.w	r3, r3, #32
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	4833      	ldr	r0, [pc, #204]	@ (800a9b0 <_printf_i+0x23c>)
 800a8e4:	2778      	movs	r7, #120	@ 0x78
 800a8e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	6831      	ldr	r1, [r6, #0]
 800a8ee:	061f      	lsls	r7, r3, #24
 800a8f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a8f4:	d402      	bmi.n	800a8fc <_printf_i+0x188>
 800a8f6:	065f      	lsls	r7, r3, #25
 800a8f8:	bf48      	it	mi
 800a8fa:	b2ad      	uxthmi	r5, r5
 800a8fc:	6031      	str	r1, [r6, #0]
 800a8fe:	07d9      	lsls	r1, r3, #31
 800a900:	bf44      	itt	mi
 800a902:	f043 0320 	orrmi.w	r3, r3, #32
 800a906:	6023      	strmi	r3, [r4, #0]
 800a908:	b11d      	cbz	r5, 800a912 <_printf_i+0x19e>
 800a90a:	2310      	movs	r3, #16
 800a90c:	e7ac      	b.n	800a868 <_printf_i+0xf4>
 800a90e:	4827      	ldr	r0, [pc, #156]	@ (800a9ac <_printf_i+0x238>)
 800a910:	e7e9      	b.n	800a8e6 <_printf_i+0x172>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	f023 0320 	bic.w	r3, r3, #32
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	e7f6      	b.n	800a90a <_printf_i+0x196>
 800a91c:	4616      	mov	r6, r2
 800a91e:	e7bd      	b.n	800a89c <_printf_i+0x128>
 800a920:	6833      	ldr	r3, [r6, #0]
 800a922:	6825      	ldr	r5, [r4, #0]
 800a924:	6961      	ldr	r1, [r4, #20]
 800a926:	1d18      	adds	r0, r3, #4
 800a928:	6030      	str	r0, [r6, #0]
 800a92a:	062e      	lsls	r6, r5, #24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	d501      	bpl.n	800a934 <_printf_i+0x1c0>
 800a930:	6019      	str	r1, [r3, #0]
 800a932:	e002      	b.n	800a93a <_printf_i+0x1c6>
 800a934:	0668      	lsls	r0, r5, #25
 800a936:	d5fb      	bpl.n	800a930 <_printf_i+0x1bc>
 800a938:	8019      	strh	r1, [r3, #0]
 800a93a:	2300      	movs	r3, #0
 800a93c:	6123      	str	r3, [r4, #16]
 800a93e:	4616      	mov	r6, r2
 800a940:	e7bc      	b.n	800a8bc <_printf_i+0x148>
 800a942:	6833      	ldr	r3, [r6, #0]
 800a944:	1d1a      	adds	r2, r3, #4
 800a946:	6032      	str	r2, [r6, #0]
 800a948:	681e      	ldr	r6, [r3, #0]
 800a94a:	6862      	ldr	r2, [r4, #4]
 800a94c:	2100      	movs	r1, #0
 800a94e:	4630      	mov	r0, r6
 800a950:	f7f5 fc56 	bl	8000200 <memchr>
 800a954:	b108      	cbz	r0, 800a95a <_printf_i+0x1e6>
 800a956:	1b80      	subs	r0, r0, r6
 800a958:	6060      	str	r0, [r4, #4]
 800a95a:	6863      	ldr	r3, [r4, #4]
 800a95c:	6123      	str	r3, [r4, #16]
 800a95e:	2300      	movs	r3, #0
 800a960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a964:	e7aa      	b.n	800a8bc <_printf_i+0x148>
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	4632      	mov	r2, r6
 800a96a:	4649      	mov	r1, r9
 800a96c:	4640      	mov	r0, r8
 800a96e:	47d0      	blx	sl
 800a970:	3001      	adds	r0, #1
 800a972:	d0ad      	beq.n	800a8d0 <_printf_i+0x15c>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	079b      	lsls	r3, r3, #30
 800a978:	d413      	bmi.n	800a9a2 <_printf_i+0x22e>
 800a97a:	68e0      	ldr	r0, [r4, #12]
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	4298      	cmp	r0, r3
 800a980:	bfb8      	it	lt
 800a982:	4618      	movlt	r0, r3
 800a984:	e7a6      	b.n	800a8d4 <_printf_i+0x160>
 800a986:	2301      	movs	r3, #1
 800a988:	4632      	mov	r2, r6
 800a98a:	4649      	mov	r1, r9
 800a98c:	4640      	mov	r0, r8
 800a98e:	47d0      	blx	sl
 800a990:	3001      	adds	r0, #1
 800a992:	d09d      	beq.n	800a8d0 <_printf_i+0x15c>
 800a994:	3501      	adds	r5, #1
 800a996:	68e3      	ldr	r3, [r4, #12]
 800a998:	9903      	ldr	r1, [sp, #12]
 800a99a:	1a5b      	subs	r3, r3, r1
 800a99c:	42ab      	cmp	r3, r5
 800a99e:	dcf2      	bgt.n	800a986 <_printf_i+0x212>
 800a9a0:	e7eb      	b.n	800a97a <_printf_i+0x206>
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	f104 0619 	add.w	r6, r4, #25
 800a9a8:	e7f5      	b.n	800a996 <_printf_i+0x222>
 800a9aa:	bf00      	nop
 800a9ac:	0800ad51 	.word	0x0800ad51
 800a9b0:	0800ad62 	.word	0x0800ad62

0800a9b4 <memmove>:
 800a9b4:	4288      	cmp	r0, r1
 800a9b6:	b510      	push	{r4, lr}
 800a9b8:	eb01 0402 	add.w	r4, r1, r2
 800a9bc:	d902      	bls.n	800a9c4 <memmove+0x10>
 800a9be:	4284      	cmp	r4, r0
 800a9c0:	4623      	mov	r3, r4
 800a9c2:	d807      	bhi.n	800a9d4 <memmove+0x20>
 800a9c4:	1e43      	subs	r3, r0, #1
 800a9c6:	42a1      	cmp	r1, r4
 800a9c8:	d008      	beq.n	800a9dc <memmove+0x28>
 800a9ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9d2:	e7f8      	b.n	800a9c6 <memmove+0x12>
 800a9d4:	4402      	add	r2, r0
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	428a      	cmp	r2, r1
 800a9da:	d100      	bne.n	800a9de <memmove+0x2a>
 800a9dc:	bd10      	pop	{r4, pc}
 800a9de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9e6:	e7f7      	b.n	800a9d8 <memmove+0x24>

0800a9e8 <_sbrk_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4d06      	ldr	r5, [pc, #24]	@ (800aa04 <_sbrk_r+0x1c>)
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	4608      	mov	r0, r1
 800a9f2:	602b      	str	r3, [r5, #0]
 800a9f4:	f7f6 f8ea 	bl	8000bcc <_sbrk>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_sbrk_r+0x1a>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_sbrk_r+0x1a>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	20003180 	.word	0x20003180

0800aa08 <memcpy>:
 800aa08:	440a      	add	r2, r1
 800aa0a:	4291      	cmp	r1, r2
 800aa0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa10:	d100      	bne.n	800aa14 <memcpy+0xc>
 800aa12:	4770      	bx	lr
 800aa14:	b510      	push	{r4, lr}
 800aa16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa1e:	4291      	cmp	r1, r2
 800aa20:	d1f9      	bne.n	800aa16 <memcpy+0xe>
 800aa22:	bd10      	pop	{r4, pc}

0800aa24 <_realloc_r>:
 800aa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4615      	mov	r5, r2
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	b921      	cbnz	r1, 800aa3a <_realloc_r+0x16>
 800aa30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa34:	4611      	mov	r1, r2
 800aa36:	f7ff bc4b 	b.w	800a2d0 <_malloc_r>
 800aa3a:	b92a      	cbnz	r2, 800aa48 <_realloc_r+0x24>
 800aa3c:	f7ff fbdc 	bl	800a1f8 <_free_r>
 800aa40:	2400      	movs	r4, #0
 800aa42:	4620      	mov	r0, r4
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	f000 f81a 	bl	800aa80 <_malloc_usable_size_r>
 800aa4c:	4285      	cmp	r5, r0
 800aa4e:	4606      	mov	r6, r0
 800aa50:	d802      	bhi.n	800aa58 <_realloc_r+0x34>
 800aa52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa56:	d8f4      	bhi.n	800aa42 <_realloc_r+0x1e>
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f7ff fc38 	bl	800a2d0 <_malloc_r>
 800aa60:	4607      	mov	r7, r0
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d0ec      	beq.n	800aa40 <_realloc_r+0x1c>
 800aa66:	42b5      	cmp	r5, r6
 800aa68:	462a      	mov	r2, r5
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	bf28      	it	cs
 800aa6e:	4632      	movcs	r2, r6
 800aa70:	f7ff ffca 	bl	800aa08 <memcpy>
 800aa74:	4621      	mov	r1, r4
 800aa76:	4640      	mov	r0, r8
 800aa78:	f7ff fbbe 	bl	800a1f8 <_free_r>
 800aa7c:	463c      	mov	r4, r7
 800aa7e:	e7e0      	b.n	800aa42 <_realloc_r+0x1e>

0800aa80 <_malloc_usable_size_r>:
 800aa80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa84:	1f18      	subs	r0, r3, #4
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bfbc      	itt	lt
 800aa8a:	580b      	ldrlt	r3, [r1, r0]
 800aa8c:	18c0      	addlt	r0, r0, r3
 800aa8e:	4770      	bx	lr

0800aa90 <_init>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	bf00      	nop
 800aa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa96:	bc08      	pop	{r3}
 800aa98:	469e      	mov	lr, r3
 800aa9a:	4770      	bx	lr

0800aa9c <_fini>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	bf00      	nop
 800aaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa2:	bc08      	pop	{r3}
 800aaa4:	469e      	mov	lr, r3
 800aaa6:	4770      	bx	lr
