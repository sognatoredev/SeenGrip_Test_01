
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800bb90  0800bb90  0000cb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcb4  0800bcb4  0000d168  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcb4  0800bcb4  0000ccb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcbc  0800bcbc  0000d168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcbc  0800bcbc  0000ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bcc0  0800bcc0  0000ccc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800bcc4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d168  2**0
                  CONTENTS
 10 .bss          000086d4  20000168  20000168  0000d168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000883c  2000883c  0000d168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d41e  00000000  00000000  0000d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a27  00000000  00000000  0002a5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  0002efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001290  00000000  00000000  00030828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a374  00000000  00000000  00031ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020be5  00000000  00000000  0005be2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6d88  00000000  00000000  0007ca11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00163799  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c20  00000000  00000000  001637dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0016a3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000168 	.word	0x20000168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bb78 	.word	0x0800bb78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	0800bb78 	.word	0x0800bb78

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2010      	movs	r0, #16
 80005c4:	f001 fc6d 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f001 fc86 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2039      	movs	r0, #57	@ 0x39
 80005d4:	f001 fc65 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80005d8:	2039      	movs	r0, #57	@ 0x39
 80005da:	f001 fc7e 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_ETH_Init+0x84>)
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <MX_ETH_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000604:	22e1      	movs	r2, #225	@ 0xe1
 8000606:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_ETH_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_ETH_Init+0x84>)
 800061c:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <MX_ETH_Init+0x8c>)
 800061e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_ETH_Init+0x84>)
 8000622:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000626:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_ETH_Init+0x84>)
 800062a:	4a14      	ldr	r2, [pc, #80]	@ (800067c <MX_ETH_Init+0x90>)
 800062c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_ETH_Init+0x84>)
 8000630:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_ETH_Init+0x94>)
 8000632:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_ETH_Init+0x84>)
 8000636:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800063a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_ETH_Init+0x84>)
 800063e:	f002 f869 	bl	8002714 <HAL_ETH_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000648:	f000 fa7c 	bl	8000b44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800064c:	2238      	movs	r2, #56	@ 0x38
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <MX_ETH_Init+0x98>)
 8000652:	f00a fcff 	bl	800b054 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_ETH_Init+0x98>)
 8000658:	2221      	movs	r2, #33	@ 0x21
 800065a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_ETH_Init+0x98>)
 800065e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000662:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_ETH_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200002fc 	.word	0x200002fc
 8000674:	40028000 	.word	0x40028000
 8000678:	200003ac 	.word	0x200003ac
 800067c:	20000224 	.word	0x20000224
 8000680:	20000184 	.word	0x20000184
 8000684:	200002c4 	.word	0x200002c4

08000688 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	@ 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a55      	ldr	r2, [pc, #340]	@ (80007fc <HAL_ETH_MspInit+0x174>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 80a4 	bne.w	80007f4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
 80006b0:	4b53      	ldr	r3, [pc, #332]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	4a52      	ldr	r2, [pc, #328]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80006bc:	4b50      	ldr	r3, [pc, #320]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006c4:	623b      	str	r3, [r7, #32]
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	4b4c      	ldr	r3, [pc, #304]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	4a4b      	ldr	r2, [pc, #300]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d8:	4b49      	ldr	r3, [pc, #292]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	4b45      	ldr	r3, [pc, #276]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	4a44      	ldr	r2, [pc, #272]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f4:	4b42      	ldr	r3, [pc, #264]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	4b3e      	ldr	r3, [pc, #248]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000708:	4a3d      	ldr	r2, [pc, #244]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000710:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000724:	4a36      	ldr	r2, [pc, #216]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6313      	str	r3, [r2, #48]	@ 0x30
 800072c:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000762:	6313      	str	r3, [r2, #48]	@ 0x30
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000770:	2332      	movs	r3, #50	@ 0x32
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	@ (8000804 <HAL_ETH_MspInit+0x17c>)
 800078c:	f002 fb12 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000790:	2386      	movs	r3, #134	@ 0x86
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4817      	ldr	r0, [pc, #92]	@ (8000808 <HAL_ETH_MspInit+0x180>)
 80007ac:	f002 fb02 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c2:	230b      	movs	r3, #11
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ca:	4619      	mov	r1, r3
 80007cc:	480f      	ldr	r0, [pc, #60]	@ (800080c <HAL_ETH_MspInit+0x184>)
 80007ce:	f002 faf1 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4808      	ldr	r0, [pc, #32]	@ (8000810 <HAL_ETH_MspInit+0x188>)
 80007f0:	f002 fae0 	bl	8002db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f4:	bf00      	nop
 80007f6:	3738      	adds	r7, #56	@ 0x38
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40028000 	.word	0x40028000
 8000800:	40023800 	.word	0x40023800
 8000804:	40020800 	.word	0x40020800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020400 	.word	0x40020400
 8000810:	40021800 	.word	0x40021800

08000814 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b58      	ldr	r3, [pc, #352]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a57      	ldr	r2, [pc, #348]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b55      	ldr	r3, [pc, #340]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b51      	ldr	r3, [pc, #324]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a50      	ldr	r2, [pc, #320]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b4a      	ldr	r3, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a49      	ldr	r2, [pc, #292]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b47      	ldr	r3, [pc, #284]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a42      	ldr	r2, [pc, #264]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b40      	ldr	r3, [pc, #256]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a34      	ldr	r2, [pc, #208]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008d8:	482e      	ldr	r0, [pc, #184]	@ (8000994 <MX_GPIO_Init+0x180>)
 80008da:	f002 fc17 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	482d      	ldr	r0, [pc, #180]	@ (8000998 <MX_GPIO_Init+0x184>)
 80008e4:	f002 fc12 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4827      	ldr	r0, [pc, #156]	@ (800099c <MX_GPIO_Init+0x188>)
 8000900:	f002 fa58 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000904:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481d      	ldr	r0, [pc, #116]	@ (8000994 <MX_GPIO_Init+0x180>)
 800091e:	f002 fa49 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000922:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000934:	2307      	movs	r3, #7
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4818      	ldr	r0, [pc, #96]	@ (80009a0 <MX_GPIO_Init+0x18c>)
 8000940:	f002 fa38 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x184>)
 800095c:	f002 fa2a 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x184>)
 8000974:	f002 fa1e 	bl	8002db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2028      	movs	r0, #40	@ 0x28
 800097e:	f001 fa90 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000982:	2028      	movs	r0, #40	@ 0x28
 8000984:	f001 faa9 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00

080009a4 <_write>:

// #define MAX_MSEQ                1000

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <_write+0x24>)
 80009ba:	f000 f8e8 	bl	8000b8e <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 80009be:	687b      	ldr	r3, [r7, #4]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200003b4 	.word	0x200003b4

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f001 f8f6 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f84c 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f7ff ff1c 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 80009dc:	f7ff fdd0 	bl	8000580 <MX_DMA_Init>
  MX_ETH_Init();
 80009e0:	f7ff fe04 	bl	80005ec <MX_ETH_Init>
  MX_USART2_UART_Init();
 80009e4:	f000 fc94 	bl	8001310 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80009e8:	f000 fcbe 	bl	8001368 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80009ec:	f009 fbe8 	bl	800a1c0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80009f0:	f000 fc16 	bl	8001220 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, 2000);
 80009f4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009f8:	4914      	ldr	r1, [pc, #80]	@ (8000a4c <main+0x80>)
 80009fa:	4815      	ldr	r0, [pc, #84]	@ (8000a50 <main+0x84>)
 80009fc:	f000 f8a8 	bl	8000b50 <Q_Init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a04:	4913      	ldr	r1, [pc, #76]	@ (8000a54 <main+0x88>)
 8000a06:	4814      	ldr	r0, [pc, #80]	@ (8000a58 <main+0x8c>)
 8000a08:	f004 ffe1 	bl	80059ce <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <main+0x90>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <main+0x90>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0208 	bic.w	r2, r2, #8
 8000a1a:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a20:	490f      	ldr	r1, [pc, #60]	@ (8000a60 <main+0x94>)
 8000a22:	4810      	ldr	r0, [pc, #64]	@ (8000a64 <main+0x98>)
 8000a24:	f004 ffd3 	bl	80059ce <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <main+0x9c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <main+0x9c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 0208 	bic.w	r2, r2, #8
 8000a36:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <main+0xa0>)
 8000a3a:	f004 fad3 	bl	8004fe4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UART_RX_BufferClear();
 8000a3e:	f001 f82b 	bl	8001a98 <UART_RX_BufferClear>
    debug_buf_read();
 8000a42:	f000 fe75 	bl	8001730 <debug_buf_read>
  {
 8000a46:	bf00      	nop
 8000a48:	e7f9      	b.n	8000a3e <main+0x72>
 8000a4a:	bf00      	nop
 8000a4c:	20000d34 	.word	0x20000d34
 8000a50:	200003b4 	.word	0x200003b4
 8000a54:	20001514 	.word	0x20001514
 8000a58:	20000410 	.word	0x20000410
 8000a5c:	200004a0 	.word	0x200004a0
 8000a60:	2000289c 	.word	0x2000289c
 8000a64:	20000458 	.word	0x20000458
 8000a68:	20000500 	.word	0x20000500
 8000a6c:	200003c8 	.word	0x200003c8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00a fae8 	bl	800b054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae4:	23a8      	movs	r3, #168	@ 0xa8
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fd8d 	bl	8004614 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 f820 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2105      	movs	r1, #5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 ffee 	bl	8004b04 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b2e:	f000 f809 	bl	8000b44 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	@ 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2200      	movs	r2, #0
 8000b68:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	88fa      	ldrh	r2, [r7, #6]
 8000b7a:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	60da      	str	r2, [r3, #12]
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b088      	sub	sp, #32
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f000 f8ea 	bl	8000d7a <Q_NumEmptyBytes>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	db44      	blt.n	8000c3c <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	8afa      	ldrh	r2, [r7, #22]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d20b      	bcs.n	8000be2 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00a fab5 	bl	800b14a <memcpy>
 8000be0:	e01d      	b.n	8000c1e <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	881a      	ldrh	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	8aba      	ldrh	r2, [r7, #20]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00a faa1 	bl	800b14a <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	68d8      	ldr	r0, [r3, #12]
 8000c0c:	8abb      	ldrh	r3, [r7, #20]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	18d1      	adds	r1, r2, r3
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	8abb      	ldrh	r3, [r7, #20]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	f00a fa96 	bl	800b14a <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	8afb      	ldrh	r3, [r7, #22]
 8000c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c28:	fb01 f202 	mul.w	r2, r1, r2
 8000c2c:	1a9b      	subs	r3, r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000c36:	2301      	movs	r3, #1
 8000c38:	77fb      	strb	r3, [r7, #31]
 8000c3a:	e00e      	b.n	8000c5a <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	88db      	ldrh	r3, [r3, #6]
 8000c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d004      	beq.n	8000c52 <Q_Write+0xc4>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	88db      	ldrh	r3, [r3, #6]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	e001      	b.n	8000c56 <Q_Write+0xc8>
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	80da      	strh	r2, [r3, #6]
    return ret;    
 8000c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 f864 	bl	8000d40 <Q_NumContents>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d848      	bhi.n	8000d14 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	8aba      	ldrh	r2, [r7, #20]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d20b      	bcs.n	8000cb2 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	68b8      	ldr	r0, [r7, #8]
 8000cac:	f00a fa4d 	bl	800b14a <memcpy>
 8000cb0:	e01d      	b.n	8000cee <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	881a      	ldrh	r2, [r3, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	8a7a      	ldrh	r2, [r7, #18]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	68b8      	ldr	r0, [r7, #8]
 8000cd4:	f00a fa39 	bl	800b14a <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8000cd8:	8a7b      	ldrh	r3, [r7, #18]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	18d0      	adds	r0, r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	68d9      	ldr	r1, [r3, #12]
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	8a7b      	ldrh	r3, [r7, #18]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	f00a fa2e 	bl	800b14a <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d02:	fb01 f202 	mul.w	r2, r1, r2
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e010      	b.n	8000d36 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	891b      	ldrh	r3, [r3, #8]
 8000d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d004      	beq.n	8000d2a <Q_Read+0xc6>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	891b      	ldrh	r3, [r3, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	e001      	b.n	8000d2e <Q_Read+0xca>
 8000d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000d32:	2300      	movs	r3, #0
 8000d34:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d54:	4413      	add	r3, r2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d66:	fb01 f202 	mul.w	r2, r1, r2
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	b29b      	uxth	r3, r3
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000d7a:	b590      	push	{r4, r7, lr}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	881c      	ldrh	r4, [r3, #0]
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffda 	bl	8000d40 <Q_NumContents>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	1ae3      	subs	r3, r4, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29b      	uxth	r3, r3
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 ff0d 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <DMA1_Stream5_IRQHandler+0x10>)
 8000e56:	f001 f9f3 	bl	8002240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200004a0 	.word	0x200004a0

08000e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e6a:	f004 f92b 	bl	80050c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200003c8 	.word	0x200003c8

08000e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (uart_rx_IDLE_TotalCnt < 2)
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <USART2_IRQHandler+0x64>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d823      	bhi.n	8000ece <USART2_IRQHandler+0x56>
  {
    if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)))
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d006      	beq.n	8000ea2 <USART2_IRQHandler+0x2a>
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d115      	bne.n	8000ece <USART2_IRQHandler+0x56>
    {
      __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
      __HAL_UART_CLEAR_FEFLAG(&huart2);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
    //   HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
    }
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ece:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ed0:	f004 fdda 	bl	8005a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20003c24 	.word	0x20003c24
 8000ee0:	20000410 	.word	0x20000410

08000ee4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ee8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eec:	f002 f928 	bl	8003140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA2_Stream1_IRQHandler+0x10>)
 8000efa:	f001 f9a1 	bl	8002240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000500 	.word	0x20000500

08000f08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <OTG_FS_IRQHandler+0x10>)
 8000f0e:	f002 fa73 	bl	80033f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20007fec 	.word	0x20007fec

08000f1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <USART6_IRQHandler+0x10>)
 8000f22:	f004 fdb1 	bl	8005a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000458 	.word	0x20000458

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	81fb      	strh	r3, [r7, #14]
  
  if ((num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000f3c:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f3e:	f7ff feff 	bl	8000d40 <Q_NumContents>
 8000f42:	4603      	mov	r3, r0
 8000f44:	81fb      	strh	r3, [r7, #14]
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d016      	beq.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000f4c:	f009 fa2e 	bl	800a3ac <CDC_Transmit_Is_Busy>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d011      	beq.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f62:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	461a      	mov	r2, r3
 8000f68:	490f      	ldr	r1, [pc, #60]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f6c:	f7ff fe7a 	bl	8000c64 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f76:	f009 f9e1 	bl	800a33c <CDC_Transmit_FS>
    }
  }

  TIM1_CNT_1++; // LED ?���??????? 
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f82:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++; //
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a09      	ldr	r2, [pc, #36]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000f8c:	6013      	str	r3, [r2, #0]
  TIM1_CNT_3++; //
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200003b4 	.word	0x200003b4
 8000fa4:	20000d30 	.word	0x20000d30
 8000fa8:	20000560 	.word	0x20000560
 8000fac:	20001504 	.word	0x20001504
 8000fb0:	20001508 	.word	0x20001508
 8000fb4:	2000150c 	.word	0x2000150c

08000fb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000fd8:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000fe4:	801a      	strh	r2, [r3, #0]

  if (huart->Instance == USART6)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2e      	ldr	r2, [pc, #184]	@ (80010a4 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d127      	bne.n	8001040 <HAL_UARTEx_RxEventCallback+0x74>
  {
    mseq_upload_device(Size);
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fb28 	bl	8001648 <mseq_upload_device>

    __HAL_DMA_DISABLE(&hdma_usart6_rx);
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001008:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001010:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart6_rx);
 8001012:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]

    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001026:	4921      	ldr	r1, [pc, #132]	@ (80010ac <HAL_UARTEx_RxEventCallback+0xe0>)
 8001028:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800102a:	f004 fcd0 	bl	80059ce <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart2_rx);

    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
  }
}
 800103e:	e02b      	b.n	8001098 <HAL_UARTEx_RxEventCallback+0xcc>
  else if (huart->Instance == USART2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d126      	bne.n	8001098 <HAL_UARTEx_RxEventCallback+0xcc>
    mseq_upload_master(Size);
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fac9 	bl	80015e4 <mseq_upload_master>
    __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800106a:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart2_rx);
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 800107c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001080:	490e      	ldr	r1, [pc, #56]	@ (80010bc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001082:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001084:	f004 fca3 	bl	80059ce <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0208 	bic.w	r2, r2, #8
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20003c24 	.word	0x20003c24
 80010a4:	40011400 	.word	0x40011400
 80010a8:	20000500 	.word	0x20000500
 80010ac:	2000289c 	.word	0x2000289c
 80010b0:	20000458 	.word	0x20000458
 80010b4:	40004400 	.word	0x40004400
 80010b8:	200004a0 	.word	0x200004a0
 80010bc:	20001514 	.word	0x20001514
 80010c0:	20000410 	.word	0x20000410

080010c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010d4:	d102      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x18>
  {
    UserButton_Flag = 1;
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
  }
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20001510 	.word	0x20001510

080010ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e00a      	b.n	8001114 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010fe:	f3af 8000 	nop.w
 8001102:	4601      	mov	r1, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	b2ca      	uxtb	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf0      	blt.n	80010fe <_read+0x12>
  }

  return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800114e:	605a      	str	r2, [r3, #4]
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f009 ff96 	bl	800b0f0 <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20030000 	.word	0x20030000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	200003c4 	.word	0x200003c4
 80011f8:	20008840 	.word	0x20008840

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123c:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800123e:	4a1f      	ldr	r2, [pc, #124]	@ (80012bc <MX_TIM1_Init+0x9c>)
 8001240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001244:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001248:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001252:	22a7      	movs	r2, #167	@ 0xa7
 8001254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800126a:	f003 fe6b 	bl	8004f44 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001274:	f7ff fc66 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001286:	f004 f80d 	bl	80052a4 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001290:	f7ff fc58 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_TIM1_Init+0x98>)
 80012a2:	f004 fa35 	bl	8005710 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012ac:	f7ff fc4a 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200003c8 	.word	0x200003c8
 80012bc:	40010000 	.word	0x40010000

080012c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d115      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2019      	movs	r0, #25
 80012f4:	f000 fdd5 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012f8:	2019      	movs	r0, #25
 80012fa:	f000 fdee 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40010000 	.word	0x40010000
 800130c:	40023800 	.word	0x40023800

08001310 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_USART2_UART_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800131c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001324:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001328:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132a:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800134c:	f004 fa70 	bl	8005830 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001356:	f7ff fbf5 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000410 	.word	0x20000410
 8001364:	40004400 	.word	0x40004400

08001368 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <MX_USART6_UART_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001374:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001378:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800137c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001380:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800138a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 80013a4:	f004 fa44 	bl	8005830 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 80013ae:	f7ff fbc9 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000458 	.word	0x20000458
 80013bc:	40011400 	.word	0x40011400

080013c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a77      	ldr	r2, [pc, #476]	@ (80015bc <HAL_UART_MspInit+0x1fc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	f040 8081 	bne.w	80014e6 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	4b75      	ldr	r3, [pc, #468]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	4a74      	ldr	r2, [pc, #464]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f4:	4b72      	ldr	r3, [pc, #456]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	4b6e      	ldr	r3, [pc, #440]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	4a6d      	ldr	r2, [pc, #436]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001410:	4b6b      	ldr	r3, [pc, #428]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	4b67      	ldr	r3, [pc, #412]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	4a66      	ldr	r2, [pc, #408]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6313      	str	r3, [r2, #48]	@ 0x30
 800142c:	4b64      	ldr	r3, [pc, #400]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001438:	2308      	movs	r3, #8
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001448:	2307      	movs	r3, #7
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	485c      	ldr	r0, [pc, #368]	@ (80015c4 <HAL_UART_MspInit+0x204>)
 8001454:	f001 fcae 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001458:	2320      	movs	r3, #32
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001468:	2307      	movs	r3, #7
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4855      	ldr	r0, [pc, #340]	@ (80015c8 <HAL_UART_MspInit+0x208>)
 8001474:	f001 fc9e 	bl	8002db4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800147a:	4a55      	ldr	r2, [pc, #340]	@ (80015d0 <HAL_UART_MspInit+0x210>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800147e:	4b53      	ldr	r3, [pc, #332]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001480:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001484:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001486:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b4f      	ldr	r3, [pc, #316]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b4e      	ldr	r3, [pc, #312]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001498:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149a:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a0:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014b8:	4844      	ldr	r0, [pc, #272]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014ba:	f000 fd29 	bl	8001f10 <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80014c4:	f7ff fb3e 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a40      	ldr	r2, [pc, #256]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ce:	4a3f      	ldr	r2, [pc, #252]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2026      	movs	r0, #38	@ 0x26
 80014da:	f000 fce2 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014de:	2026      	movs	r0, #38	@ 0x26
 80014e0:	f000 fcfb 	bl	8001eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80014e4:	e066      	b.n	80015b4 <HAL_UART_MspInit+0x1f4>
  else if(uartHandle->Instance==USART6)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a3a      	ldr	r2, [pc, #232]	@ (80015d4 <HAL_UART_MspInit+0x214>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d161      	bne.n	80015b4 <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b32      	ldr	r3, [pc, #200]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	4a31      	ldr	r2, [pc, #196]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80014fa:	f043 0320 	orr.w	r3, r3, #32
 80014fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001500:	4b2f      	ldr	r3, [pc, #188]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a2a      	ldr	r2, [pc, #168]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001528:	23c0      	movs	r3, #192	@ 0xc0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001538:	2308      	movs	r3, #8
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	4825      	ldr	r0, [pc, #148]	@ (80015d8 <HAL_UART_MspInit+0x218>)
 8001544:	f001 fc36 	bl	8002db4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800154a:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <HAL_UART_MspInit+0x220>)
 800154c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001550:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001554:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001564:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001568:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001588:	4814      	ldr	r0, [pc, #80]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800158a:	f000 fcc1 	bl	8001f10 <HAL_DMA_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8001594:	f7ff fad6 	bl	8000b44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800159c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800159e:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2047      	movs	r0, #71	@ 0x47
 80015aa:	f000 fc7a 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015ae:	2047      	movs	r0, #71	@ 0x47
 80015b0:	f000 fc93 	bl	8001eda <HAL_NVIC_EnableIRQ>
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	200004a0 	.word	0x200004a0
 80015d0:	40026088 	.word	0x40026088
 80015d4:	40011400 	.word	0x40011400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	20000500 	.word	0x20000500
 80015e0:	40026428 	.word	0x40026428

080015e4 <mseq_upload_master>:
MSEQ_t mseq[MAX_MSEQ];

bool flag_end;

void mseq_upload_master (uint16_t size)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	81fb      	strh	r3, [r7, #14]

    rxdataSize = size;
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	81fb      	strh	r3, [r7, #14]

    mseq[mseq_cnt].MC = uart2_rx_IDLE_buf[0];
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <mseq_upload_master+0x58>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <mseq_upload_master+0x5c>)
 80015fe:	7818      	ldrb	r0, [r3, #0]
 8001600:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <mseq_upload_master+0x60>)
 8001602:	460b      	mov	r3, r1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	440b      	add	r3, r1
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3301      	adds	r3, #1
 800160e:	4602      	mov	r2, r0
 8001610:	701a      	strb	r2, [r3, #0]
    mseq[mseq_cnt].CKT = uart2_rx_IDLE_buf[1];
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <mseq_upload_master+0x58>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <mseq_upload_master+0x5c>)
 800161a:	7858      	ldrb	r0, [r3, #1]
 800161c:	4a09      	ldr	r2, [pc, #36]	@ (8001644 <mseq_upload_master+0x60>)
 800161e:	460b      	mov	r3, r1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	440b      	add	r3, r1
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3302      	adds	r3, #2
 800162a:	4602      	mov	r2, r0
 800162c:	701a      	strb	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20003c26 	.word	0x20003c26
 8001640:	20001514 	.word	0x20001514
 8001644:	20003c28 	.word	0x20003c28

08001648 <mseq_upload_device>:

void mseq_upload_device (uint16_t size)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	81fb      	strh	r3, [r7, #14]
    uint16_t cks_offset = 1;
 8001656:	2301      	movs	r3, #1
 8001658:	81bb      	strh	r3, [r7, #12]

    rxdataSize = size;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	81fb      	strh	r3, [r7, #14]

    // mseq[mseq_cnt].CKS = uart3_rx_IDLE_buf[rxdataSize - 1];
    mseq[(mseq_cnt + cks_offset)].CKS = uart6_rx_IDLE_buf[rxdataSize - 1];
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a0e      	ldr	r2, [pc, #56]	@ (800169c <mseq_upload_device+0x54>)
 8001664:	8812      	ldrh	r2, [r2, #0]
 8001666:	4611      	mov	r1, r2
 8001668:	89ba      	ldrh	r2, [r7, #12]
 800166a:	440a      	add	r2, r1
 800166c:	490c      	ldr	r1, [pc, #48]	@ (80016a0 <mseq_upload_device+0x58>)
 800166e:	5cc8      	ldrb	r0, [r1, r3]
 8001670:	490c      	ldr	r1, [pc, #48]	@ (80016a4 <mseq_upload_device+0x5c>)
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	3303      	adds	r3, #3
 800167e:	4602      	mov	r2, r0
 8001680:	701a      	strb	r2, [r3, #0]

    mseq_cnt++;
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <mseq_upload_device+0x54>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <mseq_upload_device+0x54>)
 800168c:	801a      	strh	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20003c26 	.word	0x20003c26
 80016a0:	2000289c 	.word	0x2000289c
 80016a4:	20003c28 	.word	0x20003c28

080016a8 <mseq_display>:

void mseq_display (void)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af02      	add	r7, sp, #8
    uint16_t i = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < mseq_cnt; ++i)
 80016b2:	2300      	movs	r3, #0
 80016b4:	80fb      	strh	r3, [r7, #6]
 80016b6:	e02a      	b.n	800170e <mseq_display+0x66>
    {
        // printf("%d,%d,%d,%d\r\n", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
        printf("%d,%d,%d,%d,", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
 80016b8:	88f9      	ldrh	r1, [r7, #6]
 80016ba:	88fa      	ldrh	r2, [r7, #6]
 80016bc:	4819      	ldr	r0, [pc, #100]	@ (8001724 <mseq_display+0x7c>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4403      	add	r3, r0
 80016c8:	3301      	adds	r3, #1
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461c      	mov	r4, r3
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	4814      	ldr	r0, [pc, #80]	@ (8001724 <mseq_display+0x7c>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4403      	add	r3, r0
 80016dc:	3302      	adds	r3, #2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461d      	mov	r5, r3
 80016e2:	88fa      	ldrh	r2, [r7, #6]
 80016e4:	480f      	ldr	r0, [pc, #60]	@ (8001724 <mseq_display+0x7c>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4403      	add	r3, r0
 80016f0:	3303      	adds	r3, #3
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	462b      	mov	r3, r5
 80016f8:	4622      	mov	r2, r4
 80016fa:	480b      	ldr	r0, [pc, #44]	@ (8001728 <mseq_display+0x80>)
 80016fc:	f009 fb62 	bl	800adc4 <iprintf>
        Mseq_Display_PacketFrame(i);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f906 	bl	8001914 <Mseq_Display_PacketFrame>
    for (i = 0; i < mseq_cnt; ++i)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	3301      	adds	r3, #1
 800170c:	80fb      	strh	r3, [r7, #6]
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <mseq_display+0x84>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	88fa      	ldrh	r2, [r7, #6]
 8001714:	429a      	cmp	r2, r3
 8001716:	d3cf      	bcc.n	80016b8 <mseq_display+0x10>
        // HAL_Delay(1);
    }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bdb0      	pop	{r4, r5, r7, pc}
 8001722:	bf00      	nop
 8001724:	20003c28 	.word	0x20003c28
 8001728:	0800bbb4 	.word	0x0800bbb4
 800172c:	20003c26 	.word	0x20003c26

08001730 <debug_buf_read>:


void debug_buf_read (void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  if (uart_rx_IDLE_TotalCnt >= MAX_RX_DATA)
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <debug_buf_read+0x2c>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800173c:	4293      	cmp	r3, r2
 800173e:	d90a      	bls.n	8001756 <debug_buf_read+0x26>
  {
    uart_rx_IDLE_TotalCnt = 0;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <debug_buf_read+0x2c>)
 8001742:	2200      	movs	r2, #0
 8001744:	801a      	strh	r2, [r3, #0]

    mseq_display();
 8001746:	f7ff ffaf 	bl	80016a8 <mseq_display>
    // Mseq_Display_PacketFrame();

    HAL_UART_DMAStop(&huart2);
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <debug_buf_read+0x30>)
 800174c:	f004 f8c0 	bl	80058d0 <HAL_UART_DMAStop>
    HAL_UART_DMAStop(&huart6);
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <debug_buf_read+0x34>)
 8001752:	f004 f8bd 	bl	80058d0 <HAL_UART_DMAStop>
  }
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20003c24 	.word	0x20003c24
 8001760:	20000410 	.word	0x20000410
 8001764:	20000458 	.word	0x20000458

08001768 <Decode_MC_ReadWrite>:

static uint8_t Decode_MC_ReadWrite (uint8_t pData)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]

    MCdata = pData;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	09db      	lsrs	r3, r3, #7
 800177e:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <Decode_MC_ReadWrite+0x24>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d002      	beq.n	8001790 <Decode_MC_ReadWrite+0x28>
 800178a:	e003      	b.n	8001794 <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return 'W';
 800178c:	2357      	movs	r3, #87	@ 0x57
 800178e:	e005      	b.n	800179c <Decode_MC_ReadWrite+0x34>
        case 1 :
            return 'R';
 8001790:	2352      	movs	r3, #82	@ 0x52
 8001792:	e003      	b.n	800179c <Decode_MC_ReadWrite+0x34>
        default :
            printf("Unexpected value\n");
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <Decode_MC_ReadWrite+0x3c>)
 8001796:	f009 fb7d 	bl	800ae94 <puts>
            return 'X';
 800179a:	2358      	movs	r3, #88	@ 0x58
    }
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	0800bbc4 	.word	0x0800bbc4

080017a8 <Print_MC_CommunicationChannel>:

    return MCdata & 0x03;
}

static uint8_t Print_MC_CommunicationChannel (uint8_t pData)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]

    MCdata = pData;
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d827      	bhi.n	800181c <Print_MC_CommunicationChannel+0x74>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <Print_MC_CommunicationChannel+0x2c>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e5 	.word	0x080017e5
 80017d8:	080017f3 	.word	0x080017f3
 80017dc:	08001801 	.word	0x08001801
 80017e0:	0800180f 	.word	0x0800180f
    {
        case 0 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_0);
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <Print_MC_CommunicationChannel+0x80>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	4810      	ldr	r0, [pc, #64]	@ (800182c <Print_MC_CommunicationChannel+0x84>)
 80017ec:	f009 faea 	bl	800adc4 <iprintf>
            break;
 80017f0:	e014      	b.n	800181c <Print_MC_CommunicationChannel+0x74>
        case 1 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_1);
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <Print_MC_CommunicationChannel+0x80>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <Print_MC_CommunicationChannel+0x84>)
 80017fa:	f009 fae3 	bl	800adc4 <iprintf>
            break;
 80017fe:	e00d      	b.n	800181c <Print_MC_CommunicationChannel+0x74>
        case 2 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_2);
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <Print_MC_CommunicationChannel+0x80>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4619      	mov	r1, r3
 8001806:	4809      	ldr	r0, [pc, #36]	@ (800182c <Print_MC_CommunicationChannel+0x84>)
 8001808:	f009 fadc 	bl	800adc4 <iprintf>
            break;
 800180c:	e006      	b.n	800181c <Print_MC_CommunicationChannel+0x74>
        case 3 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_3);
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <Print_MC_CommunicationChannel+0x80>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	@ (800182c <Print_MC_CommunicationChannel+0x84>)
 8001816:	f009 fad5 	bl	800adc4 <iprintf>
            break;
 800181a:	bf00      	nop
    }
}
 800181c:	bf00      	nop
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000004 	.word	0x20000004
 800182c:	0800bbd8 	.word	0x0800bbd8

08001830 <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t pData)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]

    MCdata = pData;
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	b2db      	uxtb	r3, r3
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t pData)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]
    
    MCdata = pData;
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	099b      	lsrs	r3, r3, #6
 800186c:	b2db      	uxtb	r3, r3
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t pData)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]

    MCdata = pData;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001892:	b2db      	uxtb	r3, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <Decode_CKS_EventFlag>:

static uint8_t Decode_CKS_EventFlag (uint8_t pData)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]

    MCdata = pData;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 7) & 0x01;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	09db      	lsrs	r3, r3, #7
 80018b6:	b2db      	uxtb	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <Decode_CKS_PDStatus>:

static uint8_t Decode_CKS_PDStatus (uint8_t pData)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]

    MCdata = pData;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x01;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <Decode_CKS_Checksum>:

static uint8_t Decode_CKS_Checksum (uint8_t pData)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]

    MCdata = pData;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <Mseq_Display_PacketFrame>:

void Mseq_Display_PacketFrame (uint16_t cnt)
{
 8001914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001918:	b089      	sub	sp, #36	@ 0x24
 800191a:	af04      	add	r7, sp, #16
 800191c:	4603      	mov	r3, r0
 800191e:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	81fb      	strh	r3, [r7, #14]
    i = cnt;
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	81fb      	strh	r3, [r7, #14]

    printf("%c,",Decode_MC_ReadWrite(mseq[i].MC));
 8001928:	89fa      	ldrh	r2, [r7, #14]
 800192a:	493e      	ldr	r1, [pc, #248]	@ (8001a24 <Mseq_Display_PacketFrame+0x110>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3301      	adds	r3, #1
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff14 	bl	8001768 <Decode_MC_ReadWrite>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	4838      	ldr	r0, [pc, #224]	@ (8001a28 <Mseq_Display_PacketFrame+0x114>)
 8001946:	f009 fa3d 	bl	800adc4 <iprintf>
    Print_MC_CommunicationChannel(mseq[i].MC);
 800194a:	89fa      	ldrh	r2, [r7, #14]
 800194c:	4935      	ldr	r1, [pc, #212]	@ (8001a24 <Mseq_Display_PacketFrame+0x110>)
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	3301      	adds	r3, #1
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff23 	bl	80017a8 <Print_MC_CommunicationChannel>
    printf("%02X,%d,%02X,%d,%d,%02X\r\n", 
            Decode_MC_Address(mseq[i].MC),
 8001962:	89fa      	ldrh	r2, [r7, #14]
 8001964:	492f      	ldr	r1, [pc, #188]	@ (8001a24 <Mseq_Display_PacketFrame+0x110>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3301      	adds	r3, #1
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5b 	bl	8001830 <Decode_MC_Address>
 800197a:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%d,%d,%02X\r\n", 
 800197c:	461e      	mov	r6, r3
            Decode_CKT_Type(mseq[i].CKT),
 800197e:	89fa      	ldrh	r2, [r7, #14]
 8001980:	4928      	ldr	r1, [pc, #160]	@ (8001a24 <Mseq_Display_PacketFrame+0x110>)
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	3302      	adds	r3, #2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff60 	bl	8001856 <Decode_CKT_Type>
 8001996:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%d,%d,%02X\r\n", 
 8001998:	4698      	mov	r8, r3
            Decode_CKT_Checksum(mseq[i].CKT),
 800199a:	89fa      	ldrh	r2, [r7, #14]
 800199c:	4921      	ldr	r1, [pc, #132]	@ (8001a24 <Mseq_Display_PacketFrame+0x110>)
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	3302      	adds	r3, #2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff64 	bl	800187a <Decode_CKT_Checksum>
 80019b2:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%d,%d,%02X\r\n", 
 80019b4:	4699      	mov	r9, r3
            Decode_CKS_EventFlag(mseq[i].CKS),
 80019b6:	89fa      	ldrh	r2, [r7, #14]
 80019b8:	491a      	ldr	r1, [pc, #104]	@ (8001a24 <Mseq_Display_PacketFrame+0x110>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3303      	adds	r3, #3
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff69 	bl	80018a0 <Decode_CKS_EventFlag>
 80019ce:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%d,%d,%02X\r\n", 
 80019d0:	461c      	mov	r4, r3
            Decode_CKS_PDStatus(mseq[i].CKS),
 80019d2:	89fa      	ldrh	r2, [r7, #14]
 80019d4:	4913      	ldr	r1, [pc, #76]	@ (8001a24 <Mseq_Display_PacketFrame+0x110>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3303      	adds	r3, #3
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff6d 	bl	80018c4 <Decode_CKS_PDStatus>
 80019ea:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%d,%d,%02X\r\n", 
 80019ec:	461d      	mov	r5, r3
            Decode_CKS_Checksum(mseq[i].CKS)
 80019ee:	89fa      	ldrh	r2, [r7, #14]
 80019f0:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <Mseq_Display_PacketFrame+0x110>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3303      	adds	r3, #3
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff74 	bl	80018ee <Decode_CKS_Checksum>
 8001a06:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%d,%d,%02X\r\n", 
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	9501      	str	r5, [sp, #4]
 8001a0c:	9400      	str	r4, [sp, #0]
 8001a0e:	464b      	mov	r3, r9
 8001a10:	4642      	mov	r2, r8
 8001a12:	4631      	mov	r1, r6
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <Mseq_Display_PacketFrame+0x118>)
 8001a16:	f009 f9d5 	bl	800adc4 <iprintf>
            );
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a24:	20003c28 	.word	0x20003c28
 8001a28:	0800bbdc 	.word	0x0800bbdc
 8001a2c:	0800bbe0 	.word	0x0800bbe0

08001a30 <UserButton_BufferClear>:


static uint8_t UserButton_BufferClear (void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
    uint8_t buttonstatus = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	71fb      	strb	r3, [r7, #7]

    if (TIM1_CNT_2 >= 100)
 8001a3a:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <UserButton_BufferClear+0x58>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b63      	cmp	r3, #99	@ 0x63
 8001a40:	d918      	bls.n	8001a74 <UserButton_BufferClear+0x44>
    {
        TIM1_CNT_2 = 0;
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <UserButton_BufferClear+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        if (UserButton_Flag == 1)
 8001a48:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <UserButton_BufferClear+0x5c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d111      	bne.n	8001a74 <UserButton_BufferClear+0x44>
        {
            buttonstatus = UserButton_Flag;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <UserButton_BufferClear+0x5c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	71fb      	strb	r3, [r7, #7]

            UserButton_Flag = 0;
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <UserButton_BufferClear+0x5c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]

            memset(uart2_rx_IDLE_buf, 0, UART_RX_IDLE_BUFSIZE);
 8001a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a60:	2100      	movs	r1, #0
 8001a62:	480b      	ldr	r0, [pc, #44]	@ (8001a90 <UserButton_BufferClear+0x60>)
 8001a64:	f009 faf6 	bl	800b054 <memset>
            memset(uart6_rx_IDLE_buf, 0, UART_RX_IDLE_BUFSIZE);
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4809      	ldr	r0, [pc, #36]	@ (8001a94 <UserButton_BufferClear+0x64>)
 8001a70:	f009 faf0 	bl	800b054 <memset>
            // memset(mseq, 0, 1000);
        }
    }
    return !buttonstatus;
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20001508 	.word	0x20001508
 8001a8c:	20001510 	.word	0x20001510
 8001a90:	20001514 	.word	0x20001514
 8001a94:	2000289c 	.word	0x2000289c

08001a98 <UART_RX_BufferClear>:

void UART_RX_BufferClear (void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    if(UserButton_BufferClear() == HAL_OK)
 8001a9c:	f7ff ffc8 	bl	8001a30 <UserButton_BufferClear>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d14e      	bne.n	8001b44 <UART_RX_BufferClear+0xac>
    {
        printf("\r\nUART RX Buffer Clear.\r\n\n");
 8001aa6:	4828      	ldr	r0, [pc, #160]	@ (8001b48 <UART_RX_BufferClear+0xb0>)
 8001aa8:	f009 f9f4 	bl	800ae94 <puts>
        
        uart_rx_IDLE_TotalCnt = 0;
 8001aac:	4b27      	ldr	r3, [pc, #156]	@ (8001b4c <UART_RX_BufferClear+0xb4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	801a      	strh	r2, [r3, #0]
        mseq_cnt = 0;
 8001ab2:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <UART_RX_BufferClear+0xb8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	801a      	strh	r2, [r3, #0]
        
        __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8001ab8:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <UART_RX_BufferClear+0xbc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <UART_RX_BufferClear+0xbc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <UART_RX_BufferClear+0xbc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad0:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart2_rx);
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <UART_RX_BufferClear+0xbc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <UART_RX_BufferClear+0xbc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae6:	491c      	ldr	r1, [pc, #112]	@ (8001b58 <UART_RX_BufferClear+0xc0>)
 8001ae8:	481c      	ldr	r0, [pc, #112]	@ (8001b5c <UART_RX_BufferClear+0xc4>)
 8001aea:	f003 ff70 	bl	80059ce <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <UART_RX_BufferClear+0xbc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <UART_RX_BufferClear+0xbc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0208 	bic.w	r2, r2, #8
 8001afc:	601a      	str	r2, [r3, #0]

        __HAL_DMA_DISABLE(&hdma_usart6_rx);
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <UART_RX_BufferClear+0xc8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <UART_RX_BufferClear+0xc8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
        hdma_usart6_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <UART_RX_BufferClear+0xc8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b16:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart6_rx);
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <UART_RX_BufferClear+0xc8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <UART_RX_BufferClear+0xc8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

        HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2c:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <UART_RX_BufferClear+0xcc>)
 8001b2e:	480e      	ldr	r0, [pc, #56]	@ (8001b68 <UART_RX_BufferClear+0xd0>)
 8001b30:	f003 ff4d 	bl	80059ce <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <UART_RX_BufferClear+0xc8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <UART_RX_BufferClear+0xc8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0208 	bic.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
        // HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);
        // HAL_UART_Receive_DMA(&huart3, uart3_rx_buf, UART_RXDATA_MAX);
    }

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	0800bbfc 	.word	0x0800bbfc
 8001b4c:	20003c24 	.word	0x20003c24
 8001b50:	20003c26 	.word	0x20003c26
 8001b54:	200004a0 	.word	0x200004a0
 8001b58:	20001514 	.word	0x20001514
 8001b5c:	20000410 	.word	0x20000410
 8001b60:	20000500 	.word	0x20000500
 8001b64:	2000289c 	.word	0x2000289c
 8001b68:	20000458 	.word	0x20000458

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b70:	f7ff fb44 	bl	80011fc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	@ (8001bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f009 faaf 	bl	800b0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7fe ff15 	bl	80009cc <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ba4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001bb0:	0800bcc4 	.word	0x0800bcc4
  ldr r2, =_sbss
 8001bb4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001bb8:	2000883c 	.word	0x2000883c

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <HAL_Init+0x40>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <HAL_Init+0x40>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_Init+0x40>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 f94f 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff f8d4 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f967 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 f92f 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	@ (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000018 	.word	0x20000018
 8001c60:	20000014 	.word	0x20000014

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000018 	.word	0x20000018
 8001c88:	20006b08 	.word	0x20006b08

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20006b08 	.word	0x20006b08

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000018 	.word	0x20000018

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	@ (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	@ (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff feb6 	bl	8001c8c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e099      	b.n	8002060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4c:	e00f      	b.n	8001f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4e:	f7ff fe9d 	bl	8001c8c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d908      	bls.n	8001f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e078      	b.n	8002060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e8      	bne.n	8001f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_DMA_Init+0x158>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d117      	bne.n	8002032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fb01 	bl	800261c <DMA_CheckFifoParam>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fab8 	bl	80025b0 <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	223f      	movs	r2, #63	@ 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	f010803f 	.word	0xf010803f

0800206c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Start_IT+0x26>
 800208e:	2302      	movs	r3, #2
 8002090:	e040      	b.n	8002114 <HAL_DMA_Start_IT+0xa8>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d12f      	bne.n	8002106 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fa4a 	bl	8002554 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	223f      	movs	r2, #63	@ 0x3f
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0216 	orr.w	r2, r2, #22
 80020da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0208 	orr.w	r2, r2, #8
 80020f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e005      	b.n	8002112 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002112:	7dfb      	ldrb	r3, [r7, #23]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800212a:	f7ff fdaf 	bl	8001c8c <HAL_GetTick>
 800212e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d008      	beq.n	800214e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2280      	movs	r2, #128	@ 0x80
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e052      	b.n	80021f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0216 	bic.w	r2, r2, #22
 800215c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800216c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_DMA_Abort+0x62>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0208 	bic.w	r2, r2, #8
 800218c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219e:	e013      	b.n	80021c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a0:	f7ff fd74 	bl	8001c8c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d90c      	bls.n	80021c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e015      	b.n	80021f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1e4      	bne.n	80021a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	223f      	movs	r2, #63	@ 0x3f
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d004      	beq.n	800221a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2280      	movs	r2, #128	@ 0x80
 8002214:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00c      	b.n	8002234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2205      	movs	r2, #5
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800224c:	4b8e      	ldr	r3, [pc, #568]	@ (8002488 <HAL_DMA_IRQHandler+0x248>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a8e      	ldr	r2, [pc, #568]	@ (800248c <HAL_DMA_IRQHandler+0x24c>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0a9b      	lsrs	r3, r3, #10
 8002258:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	2208      	movs	r2, #8
 800226c:	409a      	lsls	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01a      	beq.n	80022ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0204 	bic.w	r2, r2, #4
 8002292:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002298:	2208      	movs	r2, #8
 800229a:	409a      	lsls	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	2201      	movs	r2, #1
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	2201      	movs	r2, #1
 80022d0:	409a      	lsls	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022da:	f043 0202 	orr.w	r2, r3, #2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	2204      	movs	r2, #4
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	2204      	movs	r2, #4
 8002306:	409a      	lsls	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	f043 0204 	orr.w	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231c:	2210      	movs	r2, #16
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d043      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d03c      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233a:	2210      	movs	r2, #16
 800233c:	409a      	lsls	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d018      	beq.n	8002382 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d024      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
 800236e:	e01f      	b.n	80023b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01b      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
 8002380:	e016      	b.n	80023b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0208 	bic.w	r2, r2, #8
 800239e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	2220      	movs	r2, #32
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 808f 	beq.w	80024e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8087 	beq.w	80024e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	2220      	movs	r2, #32
 80023d8:	409a      	lsls	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d136      	bne.n	8002458 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0216 	bic.w	r2, r2, #22
 80023f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002408:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <HAL_DMA_IRQHandler+0x1da>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0208 	bic.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	223f      	movs	r2, #63	@ 0x3f
 8002430:	409a      	lsls	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800244a:	2b00      	cmp	r3, #0
 800244c:	d07e      	beq.n	800254c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
        }
        return;
 8002456:	e079      	b.n	800254c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002478:	2b00      	cmp	r3, #0
 800247a:	d031      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
 8002484:	e02c      	b.n	80024e0 <HAL_DMA_IRQHandler+0x2a0>
 8002486:	bf00      	nop
 8002488:	20000000 	.word	0x20000000
 800248c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
 80024a0:	e01e      	b.n	80024e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10f      	bne.n	80024d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0210 	bic.w	r2, r2, #16
 80024be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d032      	beq.n	800254e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d022      	beq.n	800253a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2205      	movs	r2, #5
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	3301      	adds	r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	d307      	bcc.n	8002528 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f2      	bne.n	800250c <HAL_DMA_IRQHandler+0x2cc>
 8002526:	e000      	b.n	800252a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002528:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
 800254a:	e000      	b.n	800254e <HAL_DMA_IRQHandler+0x30e>
        return;
 800254c:	bf00      	nop
    }
  }
}
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002570:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b40      	cmp	r3, #64	@ 0x40
 8002580:	d108      	bne.n	8002594 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002592:	e007      	b.n	80025a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	60da      	str	r2, [r3, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	3b10      	subs	r3, #16
 80025c0:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <DMA_CalcBaseAndBitshift+0x64>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <DMA_CalcBaseAndBitshift+0x68>)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d909      	bls.n	80025f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	1d1a      	adds	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80025f0:	e007      	b.n	8002602 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	aaaaaaab 	.word	0xaaaaaaab
 8002618:	0800bc78 	.word	0x0800bc78

0800261c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11f      	bne.n	8002676 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d856      	bhi.n	80026ea <DMA_CheckFifoParam+0xce>
 800263c:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <DMA_CheckFifoParam+0x28>)
 800263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002642:	bf00      	nop
 8002644:	08002655 	.word	0x08002655
 8002648:	08002667 	.word	0x08002667
 800264c:	08002655 	.word	0x08002655
 8002650:	080026eb 	.word	0x080026eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d046      	beq.n	80026ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002664:	e043      	b.n	80026ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800266e:	d140      	bne.n	80026f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002674:	e03d      	b.n	80026f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800267e:	d121      	bne.n	80026c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d837      	bhi.n	80026f6 <DMA_CheckFifoParam+0xda>
 8002686:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <DMA_CheckFifoParam+0x70>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	0800269d 	.word	0x0800269d
 8002690:	080026a3 	.word	0x080026a3
 8002694:	0800269d 	.word	0x0800269d
 8002698:	080026b5 	.word	0x080026b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      break;
 80026a0:	e030      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d025      	beq.n	80026fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b2:	e022      	b.n	80026fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026bc:	d11f      	bne.n	80026fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026c2:	e01c      	b.n	80026fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d903      	bls.n	80026d2 <DMA_CheckFifoParam+0xb6>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d003      	beq.n	80026d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026d0:	e018      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      break;
 80026d6:	e015      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00e      	beq.n	8002702 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      break;
 80026e8:	e00b      	b.n	8002702 <DMA_CheckFifoParam+0xe6>
      break;
 80026ea:	bf00      	nop
 80026ec:	e00a      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026ee:	bf00      	nop
 80026f0:	e008      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026f2:	bf00      	nop
 80026f4:	e006      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026f6:	bf00      	nop
 80026f8:	e004      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026fa:	bf00      	nop
 80026fc:	e002      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;   
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 8002702:	bf00      	nop
    }
  } 
  
  return status; 
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop

08002714 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e08a      	b.n	800283c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2223      	movs	r2, #35	@ 0x23
 8002734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7fd ffa5 	bl	8000688 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <HAL_ETH_Init+0x130>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	4a3f      	ldr	r2, [pc, #252]	@ (8002844 <HAL_ETH_Init+0x130>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800274c:	6453      	str	r3, [r2, #68]	@ 0x44
 800274e:	4b3d      	ldr	r3, [pc, #244]	@ (8002844 <HAL_ETH_Init+0x130>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_ETH_Init+0x134>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a3a      	ldr	r2, [pc, #232]	@ (8002848 <HAL_ETH_Init+0x134>)
 8002760:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002764:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002766:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <HAL_ETH_Init+0x134>)
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4936      	ldr	r1, [pc, #216]	@ (8002848 <HAL_ETH_Init+0x134>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002774:	4b34      	ldr	r3, [pc, #208]	@ (8002848 <HAL_ETH_Init+0x134>)
 8002776:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800278e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002790:	f7ff fa7c 	bl	8001c8c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002796:	e011      	b.n	80027bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002798:	f7ff fa78 	bl	8001c8c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80027a6:	d909      	bls.n	80027bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2204      	movs	r2, #4
 80027ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	22e0      	movs	r2, #224	@ 0xe0
 80027b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e03f      	b.n	800283c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1e4      	bne.n	8002798 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f97a 	bl	8002ac8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fa25 	bl	8002c24 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fa7b 	bl	8002cd6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	461a      	mov	r2, r3
 80027e6:	2100      	movs	r1, #0
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f9e3 	bl	8002bb4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80027fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002812:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002826:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2210      	movs	r2, #16
 8002836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800

0800284c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4b53      	ldr	r3, [pc, #332]	@ (80029b0 <ETH_SetMACConfig+0x164>)
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	7b9b      	ldrb	r3, [r3, #14]
 800286a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	7c12      	ldrb	r2, [r2, #16]
 8002870:	2a00      	cmp	r2, #0
 8002872:	d102      	bne.n	800287a <ETH_SetMACConfig+0x2e>
 8002874:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002878:	e000      	b.n	800287c <ETH_SetMACConfig+0x30>
 800287a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800287c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	7c52      	ldrb	r2, [r2, #17]
 8002882:	2a00      	cmp	r2, #0
 8002884:	d102      	bne.n	800288c <ETH_SetMACConfig+0x40>
 8002886:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800288a:	e000      	b.n	800288e <ETH_SetMACConfig+0x42>
 800288c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800288e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002894:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	7fdb      	ldrb	r3, [r3, #31]
 800289a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800289c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	7f92      	ldrb	r2, [r2, #30]
 80028a8:	2a00      	cmp	r2, #0
 80028aa:	d102      	bne.n	80028b2 <ETH_SetMACConfig+0x66>
 80028ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028b0:	e000      	b.n	80028b4 <ETH_SetMACConfig+0x68>
 80028b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80028b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	7f1b      	ldrb	r3, [r3, #28]
 80028ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	791b      	ldrb	r3, [r3, #4]
 80028c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80028ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028d2:	2a00      	cmp	r2, #0
 80028d4:	d102      	bne.n	80028dc <ETH_SetMACConfig+0x90>
 80028d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028da:	e000      	b.n	80028de <ETH_SetMACConfig+0x92>
 80028dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	7bdb      	ldrb	r3, [r3, #15]
 80028e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028f6:	4313      	orrs	r3, r2
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800290e:	2001      	movs	r0, #1
 8002910:	f7ff f9c8 	bl	8001ca4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800292a:	4013      	ands	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002932:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800293a:	2a00      	cmp	r2, #0
 800293c:	d101      	bne.n	8002942 <ETH_SetMACConfig+0xf6>
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	e000      	b.n	8002944 <ETH_SetMACConfig+0xf8>
 8002942:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002944:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800294a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002952:	2a01      	cmp	r2, #1
 8002954:	d101      	bne.n	800295a <ETH_SetMACConfig+0x10e>
 8002956:	2208      	movs	r2, #8
 8002958:	e000      	b.n	800295c <ETH_SetMACConfig+0x110>
 800295a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800295c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002964:	2a01      	cmp	r2, #1
 8002966:	d101      	bne.n	800296c <ETH_SetMACConfig+0x120>
 8002968:	2204      	movs	r2, #4
 800296a:	e000      	b.n	800296e <ETH_SetMACConfig+0x122>
 800296c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800296e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002976:	2a01      	cmp	r2, #1
 8002978:	d101      	bne.n	800297e <ETH_SetMACConfig+0x132>
 800297a:	2202      	movs	r2, #2
 800297c:	e000      	b.n	8002980 <ETH_SetMACConfig+0x134>
 800297e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002980:	4313      	orrs	r3, r2
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002998:	2001      	movs	r0, #1
 800299a:	f7ff f983 	bl	8001ca4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	fd20810f 	.word	0xfd20810f

080029b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac4 <ETH_SetDMAConfig+0x110>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	7b1b      	ldrb	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <ETH_SetDMAConfig+0x2c>
 80029da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029de:	e000      	b.n	80029e2 <ETH_SetDMAConfig+0x2e>
 80029e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	7b5b      	ldrb	r3, [r3, #13]
 80029e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	7f52      	ldrb	r2, [r2, #29]
 80029ee:	2a00      	cmp	r2, #0
 80029f0:	d102      	bne.n	80029f8 <ETH_SetDMAConfig+0x44>
 80029f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029f6:	e000      	b.n	80029fa <ETH_SetDMAConfig+0x46>
 80029f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	7b9b      	ldrb	r3, [r3, #14]
 8002a00:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a02:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7f1b      	ldrb	r3, [r3, #28]
 8002a0e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	7f9b      	ldrb	r3, [r3, #30]
 8002a16:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a18:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a26:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7ff f92a 	bl	8001ca4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	791b      	ldrb	r3, [r3, #4]
 8002a62:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a68:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a6e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a74:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a7c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a7e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a86:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a8c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a9a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7ff f8fb 	bl	8001ca4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	f8de3f23 	.word	0xf8de3f23

08002ac8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b0a6      	sub	sp, #152	@ 0x98
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002adc:	2300      	movs	r3, #0
 8002ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b34:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fe7f 	bl	800284c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b84:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b88:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b8e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ff05 	bl	80029b4 <ETH_SetDMAConfig>
}
 8002baa:	bf00      	nop
 8002bac:	3798      	adds	r7, #152	@ 0x98
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3305      	adds	r3, #5
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	3204      	adds	r2, #4
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <ETH_MACAddressConfig+0x68>)
 8002bd6:	4413      	add	r3, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3303      	adds	r3, #3
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	061a      	lsls	r2, r3, #24
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3302      	adds	r3, #2
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <ETH_MACAddressConfig+0x6c>)
 8002c06:	4413      	add	r3, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	6013      	str	r3, [r2, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40028040 	.word	0x40028040
 8002c20:	40028044 	.word	0x40028044

08002c24 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e03e      	b.n	8002cb0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68d9      	ldr	r1, [r3, #12]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	3206      	adds	r2, #6
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d80c      	bhi.n	8002c94 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68d9      	ldr	r1, [r3, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	e004      	b.n	8002c9e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d9bd      	bls.n	8002c32 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cc8:	611a      	str	r2, [r3, #16]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	e048      	b.n	8002d76 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6919      	ldr	r1, [r3, #16]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d20:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	3212      	adds	r2, #18
 8002d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d80c      	bhi.n	8002d66 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6919      	ldr	r1, [r3, #16]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	e004      	b.n	8002d70 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d9b3      	bls.n	8002ce4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da6:	60da      	str	r2, [r3, #12]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	@ 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e177      	b.n	80030c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f040 8166 	bne.w	80030ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d005      	beq.n	8002e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d130      	bne.n	8002e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 0201 	and.w	r2, r3, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d017      	beq.n	8002ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d123      	bne.n	8002ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80c0 	beq.w	80030ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b66      	ldr	r3, [pc, #408]	@ (80030d8 <HAL_GPIO_Init+0x324>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	4a65      	ldr	r2, [pc, #404]	@ (80030d8 <HAL_GPIO_Init+0x324>)
 8002f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f4a:	4b63      	ldr	r3, [pc, #396]	@ (80030d8 <HAL_GPIO_Init+0x324>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f56:	4a61      	ldr	r2, [pc, #388]	@ (80030dc <HAL_GPIO_Init+0x328>)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	@ (80030e0 <HAL_GPIO_Init+0x32c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d037      	beq.n	8002ff2 <HAL_GPIO_Init+0x23e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a57      	ldr	r2, [pc, #348]	@ (80030e4 <HAL_GPIO_Init+0x330>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_GPIO_Init+0x23a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a56      	ldr	r2, [pc, #344]	@ (80030e8 <HAL_GPIO_Init+0x334>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02b      	beq.n	8002fea <HAL_GPIO_Init+0x236>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a55      	ldr	r2, [pc, #340]	@ (80030ec <HAL_GPIO_Init+0x338>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d025      	beq.n	8002fe6 <HAL_GPIO_Init+0x232>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a54      	ldr	r2, [pc, #336]	@ (80030f0 <HAL_GPIO_Init+0x33c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01f      	beq.n	8002fe2 <HAL_GPIO_Init+0x22e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a53      	ldr	r2, [pc, #332]	@ (80030f4 <HAL_GPIO_Init+0x340>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d019      	beq.n	8002fde <HAL_GPIO_Init+0x22a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a52      	ldr	r2, [pc, #328]	@ (80030f8 <HAL_GPIO_Init+0x344>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_GPIO_Init+0x226>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a51      	ldr	r2, [pc, #324]	@ (80030fc <HAL_GPIO_Init+0x348>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_GPIO_Init+0x222>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a50      	ldr	r2, [pc, #320]	@ (8003100 <HAL_GPIO_Init+0x34c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <HAL_GPIO_Init+0x21e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003104 <HAL_GPIO_Init+0x350>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_GPIO_Init+0x21a>
 8002fca:	2309      	movs	r3, #9
 8002fcc:	e012      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fce:	230a      	movs	r3, #10
 8002fd0:	e010      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	e00e      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fd6:	2307      	movs	r3, #7
 8002fd8:	e00c      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fda:	2306      	movs	r3, #6
 8002fdc:	e00a      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fde:	2305      	movs	r3, #5
 8002fe0:	e008      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e004      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f002 0203 	and.w	r2, r2, #3
 8002ffa:	0092      	lsls	r2, r2, #2
 8002ffc:	4093      	lsls	r3, r2
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003004:	4935      	ldr	r1, [pc, #212]	@ (80030dc <HAL_GPIO_Init+0x328>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003012:	4b3d      	ldr	r3, [pc, #244]	@ (8003108 <HAL_GPIO_Init+0x354>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003036:	4a34      	ldr	r2, [pc, #208]	@ (8003108 <HAL_GPIO_Init+0x354>)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800303c:	4b32      	ldr	r3, [pc, #200]	@ (8003108 <HAL_GPIO_Init+0x354>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003060:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_GPIO_Init+0x354>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003066:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <HAL_GPIO_Init+0x354>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800308a:	4a1f      	ldr	r2, [pc, #124]	@ (8003108 <HAL_GPIO_Init+0x354>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003090:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <HAL_GPIO_Init+0x354>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b4:	4a14      	ldr	r2, [pc, #80]	@ (8003108 <HAL_GPIO_Init+0x354>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b0f      	cmp	r3, #15
 80030c4:	f67f ae84 	bls.w	8002dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	3724      	adds	r7, #36	@ 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40013800 	.word	0x40013800
 80030e0:	40020000 	.word	0x40020000
 80030e4:	40020400 	.word	0x40020400
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020c00 	.word	0x40020c00
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40021400 	.word	0x40021400
 80030f8:	40021800 	.word	0x40021800
 80030fc:	40021c00 	.word	0x40021c00
 8003100:	40022000 	.word	0x40022000
 8003104:	40022400 	.word	0x40022400
 8003108:	40013c00 	.word	0x40013c00

0800310c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
 8003118:	4613      	mov	r3, r2
 800311a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003128:	e003      	b.n	8003132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312a:	887b      	ldrh	r3, [r7, #2]
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	619a      	str	r2, [r3, #24]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d006      	beq.n	8003164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003156:	4a05      	ldr	r2, [pc, #20]	@ (800316c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd ffb0 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40013c00 	.word	0x40013c00

08003170 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af02      	add	r7, sp, #8
 8003176:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e101      	b.n	8003386 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f007 fa2d 	bl	800a5fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2203      	movs	r2, #3
 80031a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b0:	d102      	bne.n	80031b8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 fdfc 	bl	8006dba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7c1a      	ldrb	r2, [r3, #16]
 80031ca:	f88d 2000 	strb.w	r2, [sp]
 80031ce:	3304      	adds	r3, #4
 80031d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d2:	f003 fcdb 	bl	8006b8c <USB_CoreInit>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0ce      	b.n	8003386 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fdf4 	bl	8006ddc <USB_SetCurrentMode>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0bf      	b.n	8003386 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	e04a      	b.n	80032a2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3315      	adds	r3, #21
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3314      	adds	r3, #20
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	b298      	uxth	r0, r3
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	332e      	adds	r3, #46	@ 0x2e
 8003248:	4602      	mov	r2, r0
 800324a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3318      	adds	r3, #24
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	331c      	adds	r3, #28
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3320      	adds	r3, #32
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	3324      	adds	r3, #36	@ 0x24
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	3301      	adds	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	791b      	ldrb	r3, [r3, #4]
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3af      	bcc.n	800320c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	e044      	b.n	800333c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	3301      	adds	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	791b      	ldrb	r3, [r3, #4]
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	429a      	cmp	r2, r3
 8003344:	d3b5      	bcc.n	80032b2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7c1a      	ldrb	r2, [r3, #16]
 800334e:	f88d 2000 	strb.w	r2, [sp]
 8003352:	3304      	adds	r3, #4
 8003354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003356:	f003 fd8d 	bl	8006e74 <USB_DevInit>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e00c      	b.n	8003386 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f004 fdd7 	bl	8007f32 <USB_DevDisconnect>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_PCD_Start+0x1c>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e022      	b.n	80033f0 <HAL_PCD_Start+0x62>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 fcde 	bl	8006d98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f004 fd85 	bl	8007ef0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b08d      	sub	sp, #52	@ 0x34
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f004 fe43 	bl	800809a <USB_GetMode>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 848c 	bne.w	8003d34 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f004 fda7 	bl	8007f74 <USB_ReadInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8482 	beq.w	8003d32 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f004 fd94 	bl	8007f74 <USB_ReadInterrupts>
 800344c:	4603      	mov	r3, r0
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d107      	bne.n	8003466 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f002 0202 	and.w	r2, r2, #2
 8003464:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f004 fd82 	bl	8007f74 <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b10      	cmp	r3, #16
 8003478:	d161      	bne.n	800353e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0210 	bic.w	r2, r2, #16
 8003488:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	0c5b      	lsrs	r3, r3, #17
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d124      	bne.n	8003500 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d035      	beq.n	800352e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	6a38      	ldr	r0, [r7, #32]
 80034d6:	f004 fbb9 	bl	8007c4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e6:	441a      	add	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034f8:	441a      	add	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	615a      	str	r2, [r3, #20]
 80034fe:	e016      	b.n	800352e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	0c5b      	lsrs	r3, r3, #17
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	2b06      	cmp	r3, #6
 800350a:	d110      	bne.n	800352e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003512:	2208      	movs	r2, #8
 8003514:	4619      	mov	r1, r3
 8003516:	6a38      	ldr	r0, [r7, #32]
 8003518:	f004 fb98 	bl	8007c4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003528:	441a      	add	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0210 	orr.w	r2, r2, #16
 800353c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f004 fd16 	bl	8007f74 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800354e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003552:	f040 80a7 	bne.w	80036a4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f004 fd1b 	bl	8007f9a <USB_ReadDevAllOutEpInterrupt>
 8003564:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003566:	e099      	b.n	800369c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 808e 	beq.w	8003690 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f004 fd3f 	bl	8008002 <USB_ReadDevOutEPInterrupt>
 8003584:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00c      	beq.n	80035aa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800359c:	461a      	mov	r2, r3
 800359e:	2301      	movs	r3, #1
 80035a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fea3 	bl	80042f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00c      	beq.n	80035ce <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c0:	461a      	mov	r2, r3
 80035c2:	2308      	movs	r3, #8
 80035c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 ff79 	bl	80044c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e4:	461a      	mov	r2, r3
 80035e6:	2310      	movs	r3, #16
 80035e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d030      	beq.n	8003656 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fc:	2b80      	cmp	r3, #128	@ 0x80
 80035fe:	d109      	bne.n	8003614 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800360e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003612:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	78db      	ldrb	r3, [r3, #3]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d108      	bne.n	8003644 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	b2db      	uxtb	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f007 f8f0 	bl	800a824 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003650:	461a      	mov	r2, r3
 8003652:	2302      	movs	r3, #2
 8003654:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366c:	461a      	mov	r2, r3
 800366e:	2320      	movs	r3, #32
 8003670:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003688:	461a      	mov	r2, r3
 800368a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800368e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	3301      	adds	r3, #1
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f47f af62 	bne.w	8003568 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f004 fc63 	bl	8007f74 <USB_ReadInterrupts>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036b8:	f040 80db 	bne.w	8003872 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 fc84 	bl	8007fce <USB_ReadDevAllInEpInterrupt>
 80036c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80036cc:	e0cd      	b.n	800386a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80c2 	beq.w	800385e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 fcaa 	bl	800803e <USB_ReadDevInEPInterrupt>
 80036ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d057      	beq.n	80037a6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	2201      	movs	r2, #1
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	43db      	mvns	r3, r3
 8003710:	69f9      	ldr	r1, [r7, #28]
 8003712:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003716:	4013      	ands	r3, r2
 8003718:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003726:	461a      	mov	r2, r3
 8003728:	2301      	movs	r3, #1
 800372a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	799b      	ldrb	r3, [r3, #6]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d132      	bne.n	800379a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3320      	adds	r3, #32
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4403      	add	r3, r0
 8003754:	331c      	adds	r3, #28
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4419      	add	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4403      	add	r3, r0
 8003768:	3320      	adds	r3, #32
 800376a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d113      	bne.n	800379a <HAL_PCD_IRQHandler+0x3a2>
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3324      	adds	r3, #36	@ 0x24
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d108      	bne.n	800379a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003792:	461a      	mov	r2, r3
 8003794:	2101      	movs	r1, #1
 8003796:	f004 fcb1 	bl	80080fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	b2db      	uxtb	r3, r3
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f006 ffba 	bl	800a71a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037bc:	461a      	mov	r2, r3
 80037be:	2308      	movs	r3, #8
 80037c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d8:	461a      	mov	r2, r3
 80037da:	2310      	movs	r3, #16
 80037dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f4:	461a      	mov	r2, r3
 80037f6:	2340      	movs	r3, #64	@ 0x40
 80037f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d023      	beq.n	800384c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003806:	6a38      	ldr	r0, [r7, #32]
 8003808:	f003 fc98 	bl	800713c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800380c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	3310      	adds	r3, #16
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4413      	add	r3, r2
 800381c:	3304      	adds	r3, #4
 800381e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	78db      	ldrb	r3, [r3, #3]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d108      	bne.n	800383a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2200      	movs	r2, #0
 800382c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	b2db      	uxtb	r3, r3
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f007 f807 	bl	800a848 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003846:	461a      	mov	r2, r3
 8003848:	2302      	movs	r3, #2
 800384a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003856:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fcbd 	bl	80041d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	3301      	adds	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f af2e 	bne.w	80036ce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f004 fb7c 	bl	8007f74 <USB_ReadInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003886:	d122      	bne.n	80038ce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d108      	bne.n	80038b8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038ae:	2100      	movs	r1, #0
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fea3 	bl	80045fc <HAL_PCDEx_LPM_Callback>
 80038b6:	e002      	b.n	80038be <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f006 ffa5 	bl	800a808 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80038cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 fb4e 	bl	8007f74 <USB_ReadInterrupts>
 80038d8:	4603      	mov	r3, r0
 80038da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e2:	d112      	bne.n	800390a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f006 ff61 	bl	800a7bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003908:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f004 fb30 	bl	8007f74 <USB_ReadInterrupts>
 8003914:	4603      	mov	r3, r0
 8003916:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391e:	f040 80b7 	bne.w	8003a90 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2110      	movs	r1, #16
 800393c:	4618      	mov	r0, r3
 800393e:	f003 fbfd 	bl	800713c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003942:	2300      	movs	r3, #0
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003946:	e046      	b.n	80039d6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003954:	461a      	mov	r2, r3
 8003956:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800395a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396c:	0151      	lsls	r1, r2, #5
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	440a      	add	r2, r1
 8003972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800397a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003988:	461a      	mov	r2, r3
 800398a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800398e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039a0:	0151      	lsls	r1, r2, #5
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	440a      	add	r2, r1
 80039a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c0:	0151      	lsls	r1, r2, #5
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	440a      	add	r2, r1
 80039c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d2:	3301      	adds	r3, #1
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	791b      	ldrb	r3, [r3, #4]
 80039da:	461a      	mov	r2, r3
 80039dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039de:	4293      	cmp	r3, r2
 80039e0:	d3b2      	bcc.n	8003948 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039f0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80039f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7bdb      	ldrb	r3, [r3, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a0e:	f043 030b 	orr.w	r3, r3, #11
 8003a12:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	69fa      	ldr	r2, [r7, #28]
 8003a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a24:	f043 030b 	orr.w	r3, r3, #11
 8003a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a2a:	e015      	b.n	8003a58 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a3e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003a42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a52:	f043 030b 	orr.w	r3, r3, #11
 8003a56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f004 fb3e 	bl	80080fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f004 fa6d 	bl	8007f74 <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa4:	d123      	bne.n	8003aee <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 fb03 	bl	80080b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f003 fbba 	bl	800722e <USB_GetDevSpeed>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681c      	ldr	r4, [r3, #0]
 8003ac6:	f001 fa09 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8003aca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f003 f8be 	bl	8006c54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f006 fe46 	bl	800a76a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f004 fa3e 	bl	8007f74 <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d10a      	bne.n	8003b18 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f006 fe23 	bl	800a74e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f002 0208 	and.w	r2, r2, #8
 8003b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f004 fa29 	bl	8007f74 <USB_ReadInterrupts>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b28:	2b80      	cmp	r3, #128	@ 0x80
 8003b2a:	d123      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b38:	2301      	movs	r3, #1
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3c:	e014      	b.n	8003b68 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fb0a 	bl	8004176 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	3301      	adds	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	791b      	ldrb	r3, [r3, #4]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d3e4      	bcc.n	8003b3e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 f9fb 	bl	8007f74 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b88:	d13c      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8e:	e02b      	b.n	8003be8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3318      	adds	r3, #24
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d115      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	da12      	bge.n	8003be2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3317      	adds	r3, #23
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 faca 	bl	8004176 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	3301      	adds	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	791b      	ldrb	r3, [r3, #4]
 8003bec:	461a      	mov	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d3cd      	bcc.n	8003b90 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f004 f9b3 	bl	8007f74 <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c18:	d156      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c1e:	e045      	b.n	8003cac <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d12e      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da2b      	bge.n	8003ca6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003c5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d121      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ca2:	6053      	str	r3, [r2, #4]
            break;
 8003ca4:	e008      	b.n	8003cb8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	3301      	adds	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d3b3      	bcc.n	8003c20 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f004 f951 	bl	8007f74 <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f006 fdc4 	bl	800a86c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 f93b 	bl	8007f74 <USB_ReadInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d115      	bne.n	8003d34 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f006 fdb4 	bl	800a888 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	e000      	b.n	8003d34 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003d32:	bf00      	nop
    }
  }
}
 8003d34:	3734      	adds	r7, #52	@ 0x34
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}

08003d3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_PCD_SetAddress+0x1a>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e012      	b.n	8003d7a <HAL_PCD_SetAddress+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 f89a 	bl	8007ea4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4603      	mov	r3, r0
 8003d92:	70fb      	strb	r3, [r7, #3]
 8003d94:	460b      	mov	r3, r1
 8003d96:	803b      	strh	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da0f      	bge.n	8003dc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	3310      	adds	r3, #16
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	705a      	strb	r2, [r3, #1]
 8003dc6:	e00f      	b.n	8003de8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	f003 020f 	and.w	r2, r3, #15
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3304      	adds	r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003df4:	883b      	ldrh	r3, [r7, #0]
 8003df6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	78ba      	ldrb	r2, [r7, #2]
 8003e02:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e16:	78bb      	ldrb	r3, [r7, #2]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d102      	bne.n	8003e22 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_PCD_EP_Open+0xae>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e00e      	b.n	8003e4e <HAL_PCD_EP_Open+0xcc>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68f9      	ldr	r1, [r7, #12]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 fa1a 	bl	8007278 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003e4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da0f      	bge.n	8003e8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	3310      	adds	r3, #16
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3304      	adds	r3, #4
 8003e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	705a      	strb	r2, [r3, #1]
 8003e88:	e00f      	b.n	8003eaa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_PCD_EP_Close+0x6e>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e00e      	b.n	8003ee2 <HAL_PCD_EP_Close+0x8c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68f9      	ldr	r1, [r7, #12]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f003 fa58 	bl	8007388 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b086      	sub	sp, #24
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003efa:	7afb      	ldrb	r3, [r7, #11]
 8003efc:	f003 020f 	and.w	r2, r3, #15
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	3304      	adds	r3, #4
 8003f12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f2c:	7afb      	ldrb	r3, [r7, #11]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	799b      	ldrb	r3, [r3, #6]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d102      	bne.n	8003f46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	799b      	ldrb	r3, [r3, #6]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6979      	ldr	r1, [r7, #20]
 8003f52:	f003 faf5 	bl	8007540 <USB_EPStartXfer>

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	f003 020f 	and.w	r2, r3, #15
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f82:	681b      	ldr	r3, [r3, #0]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	3310      	adds	r3, #16
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	799b      	ldrb	r3, [r3, #6]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d102      	bne.n	8003fea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	799b      	ldrb	r3, [r3, #6]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	6979      	ldr	r1, [r7, #20]
 8003ff6:	f003 faa3 	bl	8007540 <USB_EPStartXfer>

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	7912      	ldrb	r2, [r2, #4]
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e04f      	b.n	80040c2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	da0f      	bge.n	800404a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	3310      	adds	r3, #16
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	3304      	adds	r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	705a      	strb	r2, [r3, #1]
 8004048:	e00d      	b.n	8004066 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	3304      	adds	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_PCD_EP_SetStall+0x82>
 8004082:	2302      	movs	r3, #2
 8004084:	e01d      	b.n	80040c2 <HAL_PCD_EP_SetStall+0xbe>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fe31 	bl	8007cfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7999      	ldrb	r1, [r3, #6]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040b2:	461a      	mov	r2, r3
 80040b4:	f004 f822 	bl	80080fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	7912      	ldrb	r2, [r2, #4]
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e042      	b.n	800416e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	da0f      	bge.n	8004110 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	f003 020f 	and.w	r2, r3, #15
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	3310      	adds	r3, #16
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	705a      	strb	r2, [r3, #1]
 800410e:	e00f      	b.n	8004130 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	f003 020f 	and.w	r2, r3, #15
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_PCD_EP_ClrStall+0x86>
 800414c:	2302      	movs	r3, #2
 800414e:	e00e      	b.n	800416e <HAL_PCD_EP_ClrStall+0xa4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	4618      	mov	r0, r3
 8004160:	f003 fe3a 	bl	8007dd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004186:	2b00      	cmp	r3, #0
 8004188:	da0c      	bge.n	80041a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	f003 020f 	and.w	r2, r3, #15
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	3310      	adds	r3, #16
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	3304      	adds	r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e00c      	b.n	80041be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	f003 020f 	and.w	r2, r3, #15
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	3304      	adds	r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f003 fc59 	bl	8007a7c <USB_EPStopXfer>
 80041ca:	4603      	mov	r3, r0
 80041cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041ce:	7afb      	ldrb	r3, [r7, #11]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	3310      	adds	r3, #16
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	429a      	cmp	r2, r3
 800420a:	d901      	bls.n	8004210 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e06b      	b.n	80042e8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	429a      	cmp	r2, r3
 8004224:	d902      	bls.n	800422c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	3303      	adds	r3, #3
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004234:	e02a      	b.n	800428c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	429a      	cmp	r2, r3
 800424a:	d902      	bls.n	8004252 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3303      	adds	r3, #3
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4603      	mov	r3, r0
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f003 fcae 	bl	8007bd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	441a      	add	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	441a      	add	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d809      	bhi.n	80042b6 <PCD_WriteEmptyTxFifo+0xde>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d203      	bcs.n	80042b6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1bf      	bne.n	8004236 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d811      	bhi.n	80042e6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	2201      	movs	r2, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	43db      	mvns	r3, r3
 80042dc:	6939      	ldr	r1, [r7, #16]
 80042de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042e2:	4013      	ands	r3, r2
 80042e4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	333c      	adds	r3, #60	@ 0x3c
 8004308:	3304      	adds	r3, #4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	799b      	ldrb	r3, [r3, #6]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d17b      	bne.n	800441e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d015      	beq.n	800435c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4a61      	ldr	r2, [pc, #388]	@ (80044b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	f240 80b9 	bls.w	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80b3 	beq.w	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004358:	6093      	str	r3, [r2, #8]
 800435a:	e0a7      	b.n	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004372:	461a      	mov	r2, r3
 8004374:	2320      	movs	r3, #32
 8004376:	6093      	str	r3, [r2, #8]
 8004378:	e098      	b.n	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 8093 	bne.w	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4a4b      	ldr	r2, [pc, #300]	@ (80044b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d90f      	bls.n	80043ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a4:	461a      	mov	r2, r3
 80043a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043aa:	6093      	str	r3, [r2, #8]
 80043ac:	e07e      	b.n	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	4413      	add	r3, r2
 80043c0:	3304      	adds	r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	0159      	lsls	r1, r3, #5
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	440b      	add	r3, r1
 80043d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043da:	1ad2      	subs	r2, r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d114      	bne.n	8004410 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043f8:	461a      	mov	r2, r3
 80043fa:	2101      	movs	r1, #1
 80043fc:	f003 fe7e 	bl	80080fc <USB_EP0_OutStart>
 8004400:	e006      	b.n	8004410 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	441a      	add	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f006 f964 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
 800441c:	e046      	b.n	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4a26      	ldr	r2, [pc, #152]	@ (80044bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d124      	bne.n	8004470 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443c:	461a      	mov	r2, r3
 800443e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004442:	6093      	str	r3, [r2, #8]
 8004444:	e032      	b.n	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445c:	461a      	mov	r2, r3
 800445e:	2320      	movs	r3, #32
 8004460:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f006 f93b 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
 800446e:	e01d      	b.n	80044ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d114      	bne.n	80044a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004498:	461a      	mov	r2, r3
 800449a:	2100      	movs	r1, #0
 800449c:	f003 fe2e 	bl	80080fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f006 f91c 	bl	800a6e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	4f54300a 	.word	0x4f54300a
 80044bc:	4f54310a 	.word	0x4f54310a

080044c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	333c      	adds	r3, #60	@ 0x3c
 80044d8:	3304      	adds	r3, #4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <PCD_EP_OutSetupPacket_int+0x88>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d90e      	bls.n	8004514 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	461a      	mov	r2, r3
 800450e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004512:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f006 f8d3 	bl	800a6c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4a0a      	ldr	r2, [pc, #40]	@ (8004548 <PCD_EP_OutSetupPacket_int+0x88>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d90c      	bls.n	800453c <PCD_EP_OutSetupPacket_int+0x7c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	799b      	ldrb	r3, [r3, #6]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d108      	bne.n	800453c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004534:	461a      	mov	r2, r3
 8004536:	2101      	movs	r1, #1
 8004538:	f003 fde0 	bl	80080fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	4f54300a 	.word	0x4f54300a

0800454c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
 8004558:	4613      	mov	r3, r2
 800455a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d107      	bne.n	800457a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800456a:	883b      	ldrh	r3, [r7, #0]
 800456c:	0419      	lsls	r1, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	430a      	orrs	r2, r1
 8004576:	629a      	str	r2, [r3, #40]	@ 0x28
 8004578:	e028      	b.n	80045cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4413      	add	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	e00d      	b.n	80045aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	3340      	adds	r3, #64	@ 0x40
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	3301      	adds	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
 80045aa:	7bfa      	ldrb	r2, [r7, #15]
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d3ec      	bcc.n	800458e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045b4:	883b      	ldrh	r3, [r7, #0]
 80045b6:	0418      	lsls	r0, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6819      	ldr	r1, [r3, #0]
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	3b01      	subs	r3, #1
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	4302      	orrs	r2, r0
 80045c4:	3340      	adds	r3, #64	@ 0x40
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e267      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d075      	beq.n	800471e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004632:	4b88      	ldr	r3, [pc, #544]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b04      	cmp	r3, #4
 800463c:	d00c      	beq.n	8004658 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800463e:	4b85      	ldr	r3, [pc, #532]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004646:	2b08      	cmp	r3, #8
 8004648:	d112      	bne.n	8004670 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464a:	4b82      	ldr	r3, [pc, #520]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004656:	d10b      	bne.n	8004670 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	4b7e      	ldr	r3, [pc, #504]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d05b      	beq.n	800471c <HAL_RCC_OscConfig+0x108>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d157      	bne.n	800471c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e242      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004678:	d106      	bne.n	8004688 <HAL_RCC_OscConfig+0x74>
 800467a:	4b76      	ldr	r3, [pc, #472]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a75      	ldr	r2, [pc, #468]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e01d      	b.n	80046c4 <HAL_RCC_OscConfig+0xb0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004690:	d10c      	bne.n	80046ac <HAL_RCC_OscConfig+0x98>
 8004692:	4b70      	ldr	r3, [pc, #448]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6f      	ldr	r2, [pc, #444]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4b6d      	ldr	r3, [pc, #436]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e00b      	b.n	80046c4 <HAL_RCC_OscConfig+0xb0>
 80046ac:	4b69      	ldr	r3, [pc, #420]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a68      	ldr	r2, [pc, #416]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b66      	ldr	r3, [pc, #408]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a65      	ldr	r2, [pc, #404]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80046be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fd fade 	bl	8001c8c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fd fada 	bl	8001c8c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	@ 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e207      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0xc0>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fd faca 	bl	8001c8c <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fd fac6 	bl	8001c8c <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	@ 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1f3      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	4b51      	ldr	r3, [pc, #324]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0xe8>
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d063      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800472a:	4b4a      	ldr	r3, [pc, #296]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004736:	4b47      	ldr	r3, [pc, #284]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800473e:	2b08      	cmp	r3, #8
 8004740:	d11c      	bne.n	800477c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004742:	4b44      	ldr	r3, [pc, #272]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d116      	bne.n	800477c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	4b41      	ldr	r3, [pc, #260]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_RCC_OscConfig+0x152>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e1c7      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004766:	4b3b      	ldr	r3, [pc, #236]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4937      	ldr	r1, [pc, #220]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	e03a      	b.n	80047f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004784:	4b34      	ldr	r3, [pc, #208]	@ (8004858 <HAL_RCC_OscConfig+0x244>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fd fa7f 	bl	8001c8c <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004792:	f7fd fa7b 	bl	8001c8c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1a8      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b0:	4b28      	ldr	r3, [pc, #160]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4925      	ldr	r1, [pc, #148]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]
 80047c4:	e015      	b.n	80047f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c6:	4b24      	ldr	r3, [pc, #144]	@ (8004858 <HAL_RCC_OscConfig+0x244>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fd fa5e 	bl	8001c8c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fd fa5a 	bl	8001c8c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e187      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d036      	beq.n	800486c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004806:	4b15      	ldr	r3, [pc, #84]	@ (800485c <HAL_RCC_OscConfig+0x248>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fd fa3e 	bl	8001c8c <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004814:	f7fd fa3a 	bl	8001c8c <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e167      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <HAL_RCC_OscConfig+0x240>)
 8004828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x200>
 8004832:	e01b      	b.n	800486c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004834:	4b09      	ldr	r3, [pc, #36]	@ (800485c <HAL_RCC_OscConfig+0x248>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483a:	f7fd fa27 	bl	8001c8c <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004840:	e00e      	b.n	8004860 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004842:	f7fd fa23 	bl	8001c8c <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d907      	bls.n	8004860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e150      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
 8004854:	40023800 	.word	0x40023800
 8004858:	42470000 	.word	0x42470000
 800485c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004860:	4b88      	ldr	r3, [pc, #544]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ea      	bne.n	8004842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8097 	beq.w	80049a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487e:	4b81      	ldr	r3, [pc, #516]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	4a7c      	ldr	r2, [pc, #496]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004898:	6413      	str	r3, [r2, #64]	@ 0x40
 800489a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	4b77      	ldr	r3, [pc, #476]	@ (8004a88 <HAL_RCC_OscConfig+0x474>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d118      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b6:	4b74      	ldr	r3, [pc, #464]	@ (8004a88 <HAL_RCC_OscConfig+0x474>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a73      	ldr	r2, [pc, #460]	@ (8004a88 <HAL_RCC_OscConfig+0x474>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c2:	f7fd f9e3 	bl	8001c8c <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ca:	f7fd f9df 	bl	8001c8c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e10c      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <HAL_RCC_OscConfig+0x474>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x2ea>
 80048f0:	4b64      	ldr	r3, [pc, #400]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f4:	4a63      	ldr	r2, [pc, #396]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80048fc:	e01c      	b.n	8004938 <HAL_RCC_OscConfig+0x324>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b05      	cmp	r3, #5
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x30c>
 8004906:	4b5f      	ldr	r3, [pc, #380]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	4a5e      	ldr	r2, [pc, #376]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 800490c:	f043 0304 	orr.w	r3, r3, #4
 8004910:	6713      	str	r3, [r2, #112]	@ 0x70
 8004912:	4b5c      	ldr	r3, [pc, #368]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004916:	4a5b      	ldr	r2, [pc, #364]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6713      	str	r3, [r2, #112]	@ 0x70
 800491e:	e00b      	b.n	8004938 <HAL_RCC_OscConfig+0x324>
 8004920:	4b58      	ldr	r3, [pc, #352]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004924:	4a57      	ldr	r2, [pc, #348]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	@ 0x70
 800492c:	4b55      	ldr	r3, [pc, #340]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004930:	4a54      	ldr	r2, [pc, #336]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004932:	f023 0304 	bic.w	r3, r3, #4
 8004936:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fd f9a4 	bl	8001c8c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004946:	e00a      	b.n	800495e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fd f9a0 	bl	8001c8c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0cb      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495e:	4b49      	ldr	r3, [pc, #292]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0ee      	beq.n	8004948 <HAL_RCC_OscConfig+0x334>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496c:	f7fd f98e 	bl	8001c8c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fd f98a 	bl	8001c8c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e0b5      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ee      	bne.n	8004974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d105      	bne.n	80049a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499c:	4b39      	ldr	r3, [pc, #228]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	4a38      	ldr	r2, [pc, #224]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a1 	beq.w	8004af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049b2:	4b34      	ldr	r3, [pc, #208]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d05c      	beq.n	8004a78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d141      	bne.n	8004a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b31      	ldr	r3, [pc, #196]	@ (8004a8c <HAL_RCC_OscConfig+0x478>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fd f95e 	bl	8001c8c <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fd f95a 	bl	8001c8c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e087      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	4b27      	ldr	r3, [pc, #156]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	019b      	lsls	r3, r3, #6
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	085b      	lsrs	r3, r3, #1
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	491b      	ldr	r1, [pc, #108]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a8c <HAL_RCC_OscConfig+0x478>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fd f933 	bl	8001c8c <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2a:	f7fd f92f 	bl	8001c8c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e05c      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3c:	4b11      	ldr	r3, [pc, #68]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x416>
 8004a48:	e054      	b.n	8004af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4a:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <HAL_RCC_OscConfig+0x478>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fd f91c 	bl	8001c8c <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fd f918 	bl	8001c8c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e045      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6a:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x444>
 8004a76:	e03d      	b.n	8004af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e038      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40007000 	.word	0x40007000
 8004a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a90:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <HAL_RCC_OscConfig+0x4ec>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d028      	beq.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d121      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d11a      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d111      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d107      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800

08004b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0cc      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b18:	4b68      	ldr	r3, [pc, #416]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d90c      	bls.n	8004b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b65      	ldr	r3, [pc, #404]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b63      	ldr	r3, [pc, #396]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0b8      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b58:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a58      	ldr	r2, [pc, #352]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b70:	4b53      	ldr	r3, [pc, #332]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a52      	ldr	r2, [pc, #328]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7c:	4b50      	ldr	r3, [pc, #320]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	494d      	ldr	r1, [pc, #308]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d044      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	4b47      	ldr	r3, [pc, #284]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d119      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e07f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d003      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e06f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e067      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be2:	4b37      	ldr	r3, [pc, #220]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 0203 	bic.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4934      	ldr	r1, [pc, #208]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf4:	f7fd f84a 	bl	8001c8c <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7fd f846 	bl	8001c8c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e04f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 020c 	and.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d1eb      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c24:	4b25      	ldr	r3, [pc, #148]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d20c      	bcs.n	8004c4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b22      	ldr	r3, [pc, #136]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b20      	ldr	r3, [pc, #128]	@ (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e032      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c58:	4b19      	ldr	r3, [pc, #100]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4916      	ldr	r1, [pc, #88]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	490e      	ldr	r1, [pc, #56]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c8a:	f000 f821 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	490a      	ldr	r1, [pc, #40]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9c:	5ccb      	ldrb	r3, [r1, r3]
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	4a09      	ldr	r2, [pc, #36]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc ffaa 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40023c00 	.word	0x40023c00
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	0800bc60 	.word	0x0800bc60
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	20000014 	.word	0x20000014

08004cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd4:	b094      	sub	sp, #80	@ 0x50
 8004cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce8:	4b79      	ldr	r3, [pc, #484]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d00d      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x40>
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	f200 80e1 	bhi.w	8004ebc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_RCC_GetSysClockFreq+0x34>
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d003      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d02:	e0db      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d04:	4b73      	ldr	r3, [pc, #460]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d08:	e0db      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d0a:	4b73      	ldr	r3, [pc, #460]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d0e:	e0d8      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d10:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d063      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d26:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	099b      	lsrs	r3, r3, #6
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d42:	4622      	mov	r2, r4
 8004d44:	462b      	mov	r3, r5
 8004d46:	f04f 0000 	mov.w	r0, #0
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	0159      	lsls	r1, r3, #5
 8004d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d54:	0150      	lsls	r0, r2, #5
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	1a51      	subs	r1, r2, r1
 8004d5e:	6139      	str	r1, [r7, #16]
 8004d60:	4629      	mov	r1, r5
 8004d62:	eb63 0301 	sbc.w	r3, r3, r1
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d74:	4659      	mov	r1, fp
 8004d76:	018b      	lsls	r3, r1, #6
 8004d78:	4651      	mov	r1, sl
 8004d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d7e:	4651      	mov	r1, sl
 8004d80:	018a      	lsls	r2, r1, #6
 8004d82:	4651      	mov	r1, sl
 8004d84:	ebb2 0801 	subs.w	r8, r2, r1
 8004d88:	4659      	mov	r1, fp
 8004d8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004da2:	4690      	mov	r8, r2
 8004da4:	4699      	mov	r9, r3
 8004da6:	4623      	mov	r3, r4
 8004da8:	eb18 0303 	adds.w	r3, r8, r3
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	462b      	mov	r3, r5
 8004db0:	eb49 0303 	adc.w	r3, r9, r3
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	024b      	lsls	r3, r1, #9
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dcc:	4621      	mov	r1, r4
 8004dce:	024a      	lsls	r2, r1, #9
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ddc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004de0:	f7fb fa56 	bl	8000290 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dec:	e058      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dee:	4b38      	ldr	r3, [pc, #224]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	2200      	movs	r2, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	4611      	mov	r1, r2
 8004dfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	2300      	movs	r3, #0
 8004e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	f04f 0000 	mov.w	r0, #0
 8004e10:	f04f 0100 	mov.w	r1, #0
 8004e14:	0159      	lsls	r1, r3, #5
 8004e16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e1a:	0150      	lsls	r0, r2, #5
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4641      	mov	r1, r8
 8004e22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e26:	4649      	mov	r1, r9
 8004e28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e40:	ebb2 040a 	subs.w	r4, r2, sl
 8004e44:	eb63 050b 	sbc.w	r5, r3, fp
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	00eb      	lsls	r3, r5, #3
 8004e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e56:	00e2      	lsls	r2, r4, #3
 8004e58:	4614      	mov	r4, r2
 8004e5a:	461d      	mov	r5, r3
 8004e5c:	4643      	mov	r3, r8
 8004e5e:	18e3      	adds	r3, r4, r3
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	464b      	mov	r3, r9
 8004e64:	eb45 0303 	adc.w	r3, r5, r3
 8004e68:	607b      	str	r3, [r7, #4]
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e76:	4629      	mov	r1, r5
 8004e78:	028b      	lsls	r3, r1, #10
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e80:	4621      	mov	r1, r4
 8004e82:	028a      	lsls	r2, r1, #10
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	61fa      	str	r2, [r7, #28]
 8004e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e94:	f7fb f9fc 	bl	8000290 <__aeabi_uldivmod>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004eb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004eba:	e002      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3750      	adds	r7, #80	@ 0x50
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	007a1200 	.word	0x007a1200

08004edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	@ (8004ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20000000 	.word	0x20000000

08004ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ef8:	f7ff fff0 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0a9b      	lsrs	r3, r3, #10
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4903      	ldr	r1, [pc, #12]	@ (8004f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40023800 	.word	0x40023800
 8004f18:	0800bc70 	.word	0x0800bc70

08004f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f20:	f7ff ffdc 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	0b5b      	lsrs	r3, r3, #13
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4903      	ldr	r1, [pc, #12]	@ (8004f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	0800bc70 	.word	0x0800bc70

08004f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e041      	b.n	8004fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc f9a8 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 fa7e 	bl	8005484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d001      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e04e      	b.n	800509a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a23      	ldr	r2, [pc, #140]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d022      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005026:	d01d      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x80>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1f      	ldr	r2, [pc, #124]	@ (80050ac <HAL_TIM_Base_Start_IT+0xc8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d018      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x80>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1e      	ldr	r2, [pc, #120]	@ (80050b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x80>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1c      	ldr	r2, [pc, #112]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00e      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1b      	ldr	r2, [pc, #108]	@ (80050b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0x80>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d111      	bne.n	8005088 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b06      	cmp	r3, #6
 8005074:	d010      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0201 	orr.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005086:	e007      	b.n	8005098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40010400 	.word	0x40010400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40001800 	.word	0x40001800

080050c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d020      	beq.n	8005128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0202 	mvn.w	r2, #2
 80050f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f999 	bl	8005446 <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f98b 	bl	8005432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f99c 	bl	800545a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d020      	beq.n	8005174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01b      	beq.n	8005174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0204 	mvn.w	r2, #4
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f973 	bl	8005446 <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f965 	bl	8005432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f976 	bl	800545a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d020      	beq.n	80051c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01b      	beq.n	80051c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0208 	mvn.w	r2, #8
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f94d 	bl	8005446 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f93f 	bl	8005432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f950 	bl	800545a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d020      	beq.n	800520c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01b      	beq.n	800520c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0210 	mvn.w	r2, #16
 80051dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2208      	movs	r2, #8
 80051e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f927 	bl	8005446 <HAL_TIM_IC_CaptureCallback>
 80051f8:	e005      	b.n	8005206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f919 	bl	8005432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f92a 	bl	800545a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0201 	mvn.w	r2, #1
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fb fe80 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fae4 	bl	800581c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f8fb 	bl	800546e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00c      	beq.n	800529c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0220 	mvn.w	r2, #32
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fab6 	bl	8005808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIM_ConfigClockSource+0x1c>
 80052bc:	2302      	movs	r3, #2
 80052be:	e0b4      	b.n	800542a <HAL_TIM_ConfigClockSource+0x186>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f8:	d03e      	beq.n	8005378 <HAL_TIM_ConfigClockSource+0xd4>
 80052fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fe:	f200 8087 	bhi.w	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005306:	f000 8086 	beq.w	8005416 <HAL_TIM_ConfigClockSource+0x172>
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530e:	d87f      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b70      	cmp	r3, #112	@ 0x70
 8005312:	d01a      	beq.n	800534a <HAL_TIM_ConfigClockSource+0xa6>
 8005314:	2b70      	cmp	r3, #112	@ 0x70
 8005316:	d87b      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b60      	cmp	r3, #96	@ 0x60
 800531a:	d050      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x11a>
 800531c:	2b60      	cmp	r3, #96	@ 0x60
 800531e:	d877      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b50      	cmp	r3, #80	@ 0x50
 8005322:	d03c      	beq.n	800539e <HAL_TIM_ConfigClockSource+0xfa>
 8005324:	2b50      	cmp	r3, #80	@ 0x50
 8005326:	d873      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b40      	cmp	r3, #64	@ 0x40
 800532a:	d058      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x13a>
 800532c:	2b40      	cmp	r3, #64	@ 0x40
 800532e:	d86f      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b30      	cmp	r3, #48	@ 0x30
 8005332:	d064      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005334:	2b30      	cmp	r3, #48	@ 0x30
 8005336:	d86b      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d060      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d867      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d05c      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005344:	2b10      	cmp	r3, #16
 8005346:	d05a      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005348:	e062      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800535a:	f000 f9b9 	bl	80056d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800536c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	609a      	str	r2, [r3, #8]
      break;
 8005376:	e04f      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	f000 f9a2 	bl	80056d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800539a:	609a      	str	r2, [r3, #8]
      break;
 800539c:	e03c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	461a      	mov	r2, r3
 80053ac:	f000 f916 	bl	80055dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2150      	movs	r1, #80	@ 0x50
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f96f 	bl	800569a <TIM_ITRx_SetConfig>
      break;
 80053bc:	e02c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ca:	461a      	mov	r2, r3
 80053cc:	f000 f935 	bl	800563a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2160      	movs	r1, #96	@ 0x60
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f95f 	bl	800569a <TIM_ITRx_SetConfig>
      break;
 80053dc:	e01c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	461a      	mov	r2, r3
 80053ec:	f000 f8f6 	bl	80055dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2140      	movs	r1, #64	@ 0x40
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f94f 	bl	800569a <TIM_ITRx_SetConfig>
      break;
 80053fc:	e00c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f000 f946 	bl	800569a <TIM_ITRx_SetConfig>
      break;
 800540e:	e003      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      break;
 8005414:	e000      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005428:	7bfb      	ldrb	r3, [r7, #15]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a46      	ldr	r2, [pc, #280]	@ (80055b0 <TIM_Base_SetConfig+0x12c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d013      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a2:	d00f      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a43      	ldr	r2, [pc, #268]	@ (80055b4 <TIM_Base_SetConfig+0x130>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00b      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a42      	ldr	r2, [pc, #264]	@ (80055b8 <TIM_Base_SetConfig+0x134>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a41      	ldr	r2, [pc, #260]	@ (80055bc <TIM_Base_SetConfig+0x138>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a40      	ldr	r2, [pc, #256]	@ (80055c0 <TIM_Base_SetConfig+0x13c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d108      	bne.n	80054d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a35      	ldr	r2, [pc, #212]	@ (80055b0 <TIM_Base_SetConfig+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d02b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e4:	d027      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a32      	ldr	r2, [pc, #200]	@ (80055b4 <TIM_Base_SetConfig+0x130>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d023      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a31      	ldr	r2, [pc, #196]	@ (80055b8 <TIM_Base_SetConfig+0x134>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01f      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a30      	ldr	r2, [pc, #192]	@ (80055bc <TIM_Base_SetConfig+0x138>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2f      	ldr	r2, [pc, #188]	@ (80055c0 <TIM_Base_SetConfig+0x13c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d017      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2e      	ldr	r2, [pc, #184]	@ (80055c4 <TIM_Base_SetConfig+0x140>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2d      	ldr	r2, [pc, #180]	@ (80055c8 <TIM_Base_SetConfig+0x144>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2c      	ldr	r2, [pc, #176]	@ (80055cc <TIM_Base_SetConfig+0x148>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2b      	ldr	r2, [pc, #172]	@ (80055d0 <TIM_Base_SetConfig+0x14c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <TIM_Base_SetConfig+0x150>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a29      	ldr	r2, [pc, #164]	@ (80055d8 <TIM_Base_SetConfig+0x154>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	@ (80055b0 <TIM_Base_SetConfig+0x12c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_Base_SetConfig+0xf8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a12      	ldr	r2, [pc, #72]	@ (80055c0 <TIM_Base_SetConfig+0x13c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d103      	bne.n	8005584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	611a      	str	r2, [r3, #16]
  }
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800
 80055d0:	40001800 	.word	0x40001800
 80055d4:	40001c00 	.word	0x40001c00
 80055d8:	40002000 	.word	0x40002000

080055dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f023 0201 	bic.w	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 030a 	bic.w	r3, r3, #10
 8005618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800563a:	b480      	push	{r7}
 800563c:	b087      	sub	sp, #28
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f023 0210 	bic.w	r2, r3, #16
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	031b      	lsls	r3, r3, #12
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005676:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f043 0307 	orr.w	r3, r3, #7
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	609a      	str	r2, [r3, #8]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	021a      	lsls	r2, r3, #8
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	609a      	str	r2, [r3, #8]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005724:	2302      	movs	r3, #2
 8005726:	e05a      	b.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a21      	ldr	r2, [pc, #132]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005774:	d01d      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1d      	ldr	r2, [pc, #116]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1a      	ldr	r2, [pc, #104]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a18      	ldr	r2, [pc, #96]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a17      	ldr	r2, [pc, #92]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a15      	ldr	r2, [pc, #84]	@ (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d10c      	bne.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40000c00 	.word	0x40000c00
 80057fc:	40010400 	.word	0x40010400
 8005800:	40014000 	.word	0x40014000
 8005804:	40001800 	.word	0x40001800

08005808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e042      	b.n	80058c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fb fdb2 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2224      	movs	r2, #36	@ 0x24
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 ff15 	bl	80066a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b090      	sub	sp, #64	@ 0x40
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058d8:	2300      	movs	r3, #0
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e6:	2b80      	cmp	r3, #128	@ 0x80
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b21      	cmp	r3, #33	@ 0x21
 80058fc:	d128      	bne.n	8005950 <HAL_UART_DMAStop+0x80>
 80058fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d025      	beq.n	8005950 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3314      	adds	r3, #20
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	623b      	str	r3, [r7, #32]
   return(result);
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005924:	633a      	str	r2, [r7, #48]	@ 0x30
 8005926:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800592a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	4618      	mov	r0, r3
 8005946:	f7fc fbe9 	bl	800211c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fce4 	bl	8006318 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595a:	2b40      	cmp	r3, #64	@ 0x40
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b22      	cmp	r3, #34	@ 0x22
 8005970:	d128      	bne.n	80059c4 <HAL_UART_DMAStop+0xf4>
 8005972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d025      	beq.n	80059c4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	60fb      	str	r3, [r7, #12]
   return(result);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800598e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005998:	61fa      	str	r2, [r7, #28]
 800599a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	617b      	str	r3, [r7, #20]
   return(result);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e5      	bne.n	8005978 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fc fbaf 	bl	800211c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fcd2 	bl	8006368 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3740      	adds	r7, #64	@ 0x40
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08c      	sub	sp, #48	@ 0x30
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d14a      	bne.n	8005a7e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e043      	b.n	8005a80 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	461a      	mov	r2, r3
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fbea 	bl	80061e4 <UART_Start_Receive_DMA>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005a16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d12c      	bne.n	8005a78 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d125      	bne.n	8005a72 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f043 0310 	orr.w	r3, r3, #16
 8005a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6a39      	ldr	r1, [r7, #32]
 8005a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e5      	bne.n	8005a3c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005a70:	e002      	b.n	8005a78 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005a78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a7c:	e000      	b.n	8005a80 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
  }
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3730      	adds	r7, #48	@ 0x30
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10f      	bne.n	8005aee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <HAL_UART_IRQHandler+0x66>
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fd1d 	bl	8006526 <UART_Receive_IT>
      return;
 8005aec:	e25b      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80de 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x22c>
 8005af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80d1 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <HAL_UART_IRQHandler+0xae>
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	f043 0201 	orr.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_UART_IRQHandler+0xd2>
 8005b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b52:	f043 0202 	orr.w	r2, r3, #2
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <HAL_UART_IRQHandler+0xf6>
 8005b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d011      	beq.n	8005bae <HAL_UART_IRQHandler+0x126>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	f043 0208 	orr.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 81f2 	beq.w	8005f9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x14e>
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fca8 	bl	8006526 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <HAL_UART_IRQHandler+0x17a>
 8005bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d04f      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fbb0 	bl	8006368 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c12:	2b40      	cmp	r3, #64	@ 0x40
 8005c14:	d141      	bne.n	8005c9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3314      	adds	r3, #20
 8005c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1d9      	bne.n	8005c16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d013      	beq.n	8005c92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e68 <HAL_UART_IRQHandler+0x3e0>)
 8005c70:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fc fac0 	bl	80021fc <HAL_DMA_Abort_IT>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00e      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f99e 	bl	8005fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e00a      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f99a 	bl	8005fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e006      	b.n	8005cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f996 	bl	8005fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005cae:	e175      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	bf00      	nop
    return;
 8005cb2:	e173      	b.n	8005f9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 814f 	bne.w	8005f5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8148 	beq.w	8005f5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8141 	beq.w	8005f5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	f040 80b6 	bne.w	8005e6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8145 	beq.w	8005fa0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	f080 813e 	bcs.w	8005fa0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d36:	f000 8088 	beq.w	8005e4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1d9      	bne.n	8005d3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3314      	adds	r3, #20
 8005da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005daa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e1      	bne.n	8005d86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3314      	adds	r3, #20
 8005dc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005de6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005de8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005df4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e3      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e1a:	f023 0310 	bic.w	r3, r3, #16
 8005e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e3      	bne.n	8005e08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fc f969 	bl	800211c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fb f8b3 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e66:	e09b      	b.n	8005fa0 <HAL_UART_IRQHandler+0x518>
 8005e68:	0800642f 	.word	0x0800642f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 808e 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8089 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	330c      	adds	r3, #12
 8005e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e3      	bne.n	8005e92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f34:	61fa      	str	r2, [r7, #28]
 8005f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	617b      	str	r3, [r7, #20]
   return(result);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e3      	bne.n	8005f10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7fb f839 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f5a:	e023      	b.n	8005fa4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <HAL_UART_IRQHandler+0x4f4>
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fa6e 	bl	8006456 <UART_Transmit_IT>
    return;
 8005f7a:	e014      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 faae 	bl	80064f6 <UART_EndTransmit_IT>
    return;
 8005f9a:	e004      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f9c:	bf00      	nop
 8005f9e:	e002      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005fa0:	bf00      	nop
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005fa4:	bf00      	nop
  }
}
 8005fa6:	37e8      	adds	r7, #232	@ 0xe8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b09c      	sub	sp, #112	@ 0x70
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d172      	bne.n	80060ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006006:	2200      	movs	r2, #0
 8006008:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800600a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800601a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800601c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800602a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800602c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006030:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3314      	adds	r3, #20
 8006044:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800604e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	667b      	str	r3, [r7, #100]	@ 0x64
 8006056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3314      	adds	r3, #20
 800605c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800605e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006060:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800606c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e5      	bne.n	800603e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	623b      	str	r3, [r7, #32]
   return(result);
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006088:	663b      	str	r3, [r7, #96]	@ 0x60
 800608a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006092:	633a      	str	r2, [r7, #48]	@ 0x30
 8006094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e5      	bne.n	8006072 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d119      	bne.n	80060ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	330c      	adds	r3, #12
 80060bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f023 0310 	bic.w	r3, r3, #16
 80060cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	330c      	adds	r3, #12
 80060d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80060d6:	61fa      	str	r2, [r7, #28]
 80060d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	69b9      	ldr	r1, [r7, #24]
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	617b      	str	r3, [r7, #20]
   return(result);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e5      	bne.n	80060b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ec:	2200      	movs	r2, #0
 80060ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d106      	bne.n	8006106 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060fc:	4619      	mov	r1, r3
 80060fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006100:	f7fa ff64 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006104:	e002      	b.n	800610c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006106:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006108:	f7fa ff56 	bl	8000fb8 <HAL_UART_RxCpltCallback>
}
 800610c:	bf00      	nop
 800610e:	3770      	adds	r7, #112	@ 0x70
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612c:	2b01      	cmp	r3, #1
 800612e:	d108      	bne.n	8006142 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	b29b      	uxth	r3, r3
 8006138:	4619      	mov	r1, r3
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7fa ff46 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006140:	e002      	b.n	8006148 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff ff3c 	bl	8005fc0 <HAL_UART_RxHalfCpltCallback>
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006160:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800616c:	2b80      	cmp	r3, #128	@ 0x80
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b21      	cmp	r3, #33	@ 0x21
 8006182:	d108      	bne.n	8006196 <UART_DMAError+0x46>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006190:	68b8      	ldr	r0, [r7, #8]
 8006192:	f000 f8c1 	bl	8006318 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a0:	2b40      	cmp	r3, #64	@ 0x40
 80061a2:	bf0c      	ite	eq
 80061a4:	2301      	moveq	r3, #1
 80061a6:	2300      	movne	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b22      	cmp	r3, #34	@ 0x22
 80061b6:	d108      	bne.n	80061ca <UART_DMAError+0x7a>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80061c4:	68b8      	ldr	r0, [r7, #8]
 80061c6:	f000 f8cf 	bl	8006368 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ce:	f043 0210 	orr.w	r2, r3, #16
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061d6:	68b8      	ldr	r0, [r7, #8]
 80061d8:	f7ff fefc 	bl	8005fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b098      	sub	sp, #96	@ 0x60
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	88fa      	ldrh	r2, [r7, #6]
 80061fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2222      	movs	r2, #34	@ 0x22
 8006208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006210:	4a3e      	ldr	r2, [pc, #248]	@ (800630c <UART_Start_Receive_DMA+0x128>)
 8006212:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006218:	4a3d      	ldr	r2, [pc, #244]	@ (8006310 <UART_Start_Receive_DMA+0x12c>)
 800621a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006220:	4a3c      	ldr	r2, [pc, #240]	@ (8006314 <UART_Start_Receive_DMA+0x130>)
 8006222:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006228:	2200      	movs	r2, #0
 800622a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800622c:	f107 0308 	add.w	r3, r7, #8
 8006230:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3304      	adds	r3, #4
 800623c:	4619      	mov	r1, r3
 800623e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	f7fb ff12 	bl	800206c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d019      	beq.n	800629a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800627c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	330c      	adds	r3, #12
 8006284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006286:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006288:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800628c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e5      	bne.n	8006266 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3314      	adds	r3, #20
 80062a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3314      	adds	r3, #20
 80062b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80062bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80062c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3314      	adds	r3, #20
 80062d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	617b      	str	r3, [r7, #20]
   return(result);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3314      	adds	r3, #20
 80062ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80062ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80062f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6a39      	ldr	r1, [r7, #32]
 80062f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3760      	adds	r7, #96	@ 0x60
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	08005fe9 	.word	0x08005fe9
 8006310:	08006115 	.word	0x08006115
 8006314:	08006151 	.word	0x08006151

08006318 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	@ 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	330c      	adds	r3, #12
 8006326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	61ba      	str	r2, [r7, #24]
 8006342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6979      	ldr	r1, [r7, #20]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	613b      	str	r3, [r7, #16]
   return(result);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e5      	bne.n	8006320 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800635c:	bf00      	nop
 800635e:	3724      	adds	r7, #36	@ 0x24
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b095      	sub	sp, #84	@ 0x54
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006390:	643a      	str	r2, [r7, #64]	@ 0x40
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006396:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e5      	bne.n	8006370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d119      	bne.n	8006414 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f023 0310 	bic.w	r3, r3, #16
 80063f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006400:	61ba      	str	r2, [r7, #24]
 8006402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6979      	ldr	r1, [r7, #20]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	613b      	str	r3, [r7, #16]
   return(result);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e5      	bne.n	80063e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006422:	bf00      	nop
 8006424:	3754      	adds	r7, #84	@ 0x54
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f7ff fdc3 	bl	8005fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800644e:	bf00      	nop
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b21      	cmp	r3, #33	@ 0x21
 8006468:	d13e      	bne.n	80064e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006472:	d114      	bne.n	800649e <UART_Transmit_IT+0x48>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d110      	bne.n	800649e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006490:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	1c9a      	adds	r2, r3, #2
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	621a      	str	r2, [r3, #32]
 800649c:	e008      	b.n	80064b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	1c59      	adds	r1, r3, #1
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6211      	str	r1, [r2, #32]
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	4619      	mov	r1, r3
 80064be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10f      	bne.n	80064e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e000      	b.n	80064ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800650c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fd48 	bl	8005fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b08c      	sub	sp, #48	@ 0x30
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b22      	cmp	r3, #34	@ 0x22
 8006538:	f040 80ae 	bne.w	8006698 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006544:	d117      	bne.n	8006576 <UART_Receive_IT+0x50>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d113      	bne.n	8006576 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006564:	b29a      	uxth	r2, r3
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656e:	1c9a      	adds	r2, r3, #2
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	629a      	str	r2, [r3, #40]	@ 0x28
 8006574:	e026      	b.n	80065c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800657c:	2300      	movs	r3, #0
 800657e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006588:	d007      	beq.n	800659a <UART_Receive_IT+0x74>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10a      	bne.n	80065a8 <UART_Receive_IT+0x82>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	e008      	b.n	80065ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	4619      	mov	r1, r3
 80065d2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d15d      	bne.n	8006694 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0220 	bic.w	r2, r2, #32
 80065e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0201 	bic.w	r2, r2, #1
 8006606:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661a:	2b01      	cmp	r3, #1
 800661c:	d135      	bne.n	800668a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	330c      	adds	r3, #12
 800662a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	613b      	str	r3, [r7, #16]
   return(result);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f023 0310 	bic.w	r3, r3, #16
 800663a:	627b      	str	r3, [r7, #36]	@ 0x24
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006644:	623a      	str	r2, [r7, #32]
 8006646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	69f9      	ldr	r1, [r7, #28]
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	61bb      	str	r3, [r7, #24]
   return(result);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b10      	cmp	r3, #16
 8006664:	d10a      	bne.n	800667c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fa fca2 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
 8006688:	e002      	b.n	8006690 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fa fc94 	bl	8000fb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	e002      	b.n	800669a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	e000      	b.n	800669a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006698:	2302      	movs	r3, #2
  }
}
 800669a:	4618      	mov	r0, r3
 800669c:	3730      	adds	r7, #48	@ 0x30
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a8:	b0c0      	sub	sp, #256	@ 0x100
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c0:	68d9      	ldr	r1, [r3, #12]
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	ea40 0301 	orr.w	r3, r0, r1
 80066cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	431a      	orrs	r2, r3
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80066fc:	f021 010c 	bic.w	r1, r1, #12
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800670a:	430b      	orrs	r3, r1
 800670c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671e:	6999      	ldr	r1, [r3, #24]
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	ea40 0301 	orr.w	r3, r0, r1
 800672a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b8f      	ldr	r3, [pc, #572]	@ (8006970 <UART_SetConfig+0x2cc>)
 8006734:	429a      	cmp	r2, r3
 8006736:	d005      	beq.n	8006744 <UART_SetConfig+0xa0>
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b8d      	ldr	r3, [pc, #564]	@ (8006974 <UART_SetConfig+0x2d0>)
 8006740:	429a      	cmp	r2, r3
 8006742:	d104      	bne.n	800674e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7fe fbea 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 8006748:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800674c:	e003      	b.n	8006756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800674e:	f7fe fbd1 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8006752:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006760:	f040 810c 	bne.w	800697c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006768:	2200      	movs	r2, #0
 800676a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800676e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006776:	4622      	mov	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	1891      	adds	r1, r2, r2
 800677c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800677e:	415b      	adcs	r3, r3
 8006780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006786:	4621      	mov	r1, r4
 8006788:	eb12 0801 	adds.w	r8, r2, r1
 800678c:	4629      	mov	r1, r5
 800678e:	eb43 0901 	adc.w	r9, r3, r1
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800679e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a6:	4690      	mov	r8, r2
 80067a8:	4699      	mov	r9, r3
 80067aa:	4623      	mov	r3, r4
 80067ac:	eb18 0303 	adds.w	r3, r8, r3
 80067b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067b4:	462b      	mov	r3, r5
 80067b6:	eb49 0303 	adc.w	r3, r9, r3
 80067ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80067ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067d2:	460b      	mov	r3, r1
 80067d4:	18db      	adds	r3, r3, r3
 80067d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067d8:	4613      	mov	r3, r2
 80067da:	eb42 0303 	adc.w	r3, r2, r3
 80067de:	657b      	str	r3, [r7, #84]	@ 0x54
 80067e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067e8:	f7f9 fd52 	bl	8000290 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4b61      	ldr	r3, [pc, #388]	@ (8006978 <UART_SetConfig+0x2d4>)
 80067f2:	fba3 2302 	umull	r2, r3, r3, r2
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	011c      	lsls	r4, r3, #4
 80067fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006804:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800680c:	4642      	mov	r2, r8
 800680e:	464b      	mov	r3, r9
 8006810:	1891      	adds	r1, r2, r2
 8006812:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006814:	415b      	adcs	r3, r3
 8006816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800681c:	4641      	mov	r1, r8
 800681e:	eb12 0a01 	adds.w	sl, r2, r1
 8006822:	4649      	mov	r1, r9
 8006824:	eb43 0b01 	adc.w	fp, r3, r1
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800683c:	4692      	mov	sl, r2
 800683e:	469b      	mov	fp, r3
 8006840:	4643      	mov	r3, r8
 8006842:	eb1a 0303 	adds.w	r3, sl, r3
 8006846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800684a:	464b      	mov	r3, r9
 800684c:	eb4b 0303 	adc.w	r3, fp, r3
 8006850:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006860:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006868:	460b      	mov	r3, r1
 800686a:	18db      	adds	r3, r3, r3
 800686c:	643b      	str	r3, [r7, #64]	@ 0x40
 800686e:	4613      	mov	r3, r2
 8006870:	eb42 0303 	adc.w	r3, r2, r3
 8006874:	647b      	str	r3, [r7, #68]	@ 0x44
 8006876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800687a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800687e:	f7f9 fd07 	bl	8000290 <__aeabi_uldivmod>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4611      	mov	r1, r2
 8006888:	4b3b      	ldr	r3, [pc, #236]	@ (8006978 <UART_SetConfig+0x2d4>)
 800688a:	fba3 2301 	umull	r2, r3, r3, r1
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	2264      	movs	r2, #100	@ 0x64
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	1acb      	subs	r3, r1, r3
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800689e:	4b36      	ldr	r3, [pc, #216]	@ (8006978 <UART_SetConfig+0x2d4>)
 80068a0:	fba3 2302 	umull	r2, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068ac:	441c      	add	r4, r3
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068c8:	415b      	adcs	r3, r3
 80068ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80068d0:	4641      	mov	r1, r8
 80068d2:	1851      	adds	r1, r2, r1
 80068d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80068d6:	4649      	mov	r1, r9
 80068d8:	414b      	adcs	r3, r1
 80068da:	637b      	str	r3, [r7, #52]	@ 0x34
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068e8:	4659      	mov	r1, fp
 80068ea:	00cb      	lsls	r3, r1, #3
 80068ec:	4651      	mov	r1, sl
 80068ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f2:	4651      	mov	r1, sl
 80068f4:	00ca      	lsls	r2, r1, #3
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	4642      	mov	r2, r8
 80068fe:	189b      	adds	r3, r3, r2
 8006900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006904:	464b      	mov	r3, r9
 8006906:	460a      	mov	r2, r1
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800691c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006924:	460b      	mov	r3, r1
 8006926:	18db      	adds	r3, r3, r3
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800692a:	4613      	mov	r3, r2
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800693a:	f7f9 fca9 	bl	8000290 <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <UART_SetConfig+0x2d4>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	@ 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	3332      	adds	r3, #50	@ 0x32
 8006956:	4a08      	ldr	r2, [pc, #32]	@ (8006978 <UART_SetConfig+0x2d4>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 0207 	and.w	r2, r3, #7
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4422      	add	r2, r4
 800696a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800696c:	e106      	b.n	8006b7c <UART_SetConfig+0x4d8>
 800696e:	bf00      	nop
 8006970:	40011000 	.word	0x40011000
 8006974:	40011400 	.word	0x40011400
 8006978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800697c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006980:	2200      	movs	r2, #0
 8006982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006986:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800698a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800698e:	4642      	mov	r2, r8
 8006990:	464b      	mov	r3, r9
 8006992:	1891      	adds	r1, r2, r2
 8006994:	6239      	str	r1, [r7, #32]
 8006996:	415b      	adcs	r3, r3
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
 800699a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800699e:	4641      	mov	r1, r8
 80069a0:	1854      	adds	r4, r2, r1
 80069a2:	4649      	mov	r1, r9
 80069a4:	eb43 0501 	adc.w	r5, r3, r1
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	00eb      	lsls	r3, r5, #3
 80069b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b6:	00e2      	lsls	r2, r4, #3
 80069b8:	4614      	mov	r4, r2
 80069ba:	461d      	mov	r5, r3
 80069bc:	4643      	mov	r3, r8
 80069be:	18e3      	adds	r3, r4, r3
 80069c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069c4:	464b      	mov	r3, r9
 80069c6:	eb45 0303 	adc.w	r3, r5, r3
 80069ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069ea:	4629      	mov	r1, r5
 80069ec:	008b      	lsls	r3, r1, #2
 80069ee:	4621      	mov	r1, r4
 80069f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f4:	4621      	mov	r1, r4
 80069f6:	008a      	lsls	r2, r1, #2
 80069f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80069fc:	f7f9 fc48 	bl	8000290 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4b60      	ldr	r3, [pc, #384]	@ (8006b88 <UART_SetConfig+0x4e4>)
 8006a06:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	011c      	lsls	r4, r3, #4
 8006a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a20:	4642      	mov	r2, r8
 8006a22:	464b      	mov	r3, r9
 8006a24:	1891      	adds	r1, r2, r2
 8006a26:	61b9      	str	r1, [r7, #24]
 8006a28:	415b      	adcs	r3, r3
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a30:	4641      	mov	r1, r8
 8006a32:	1851      	adds	r1, r2, r1
 8006a34:	6139      	str	r1, [r7, #16]
 8006a36:	4649      	mov	r1, r9
 8006a38:	414b      	adcs	r3, r1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a48:	4659      	mov	r1, fp
 8006a4a:	00cb      	lsls	r3, r1, #3
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a52:	4651      	mov	r1, sl
 8006a54:	00ca      	lsls	r2, r1, #3
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	189b      	adds	r3, r3, r2
 8006a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a64:	464b      	mov	r3, r9
 8006a66:	460a      	mov	r2, r1
 8006a68:	eb42 0303 	adc.w	r3, r2, r3
 8006a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a88:	4649      	mov	r1, r9
 8006a8a:	008b      	lsls	r3, r1, #2
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a92:	4641      	mov	r1, r8
 8006a94:	008a      	lsls	r2, r1, #2
 8006a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a9a:	f7f9 fbf9 	bl	8000290 <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4b38      	ldr	r3, [pc, #224]	@ (8006b88 <UART_SetConfig+0x4e4>)
 8006aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2264      	movs	r2, #100	@ 0x64
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	1acb      	subs	r3, r1, r3
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	3332      	adds	r3, #50	@ 0x32
 8006ab8:	4a33      	ldr	r2, [pc, #204]	@ (8006b88 <UART_SetConfig+0x4e4>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ac4:	441c      	add	r4, r3
 8006ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aca:	2200      	movs	r2, #0
 8006acc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ace:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ad0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	1891      	adds	r1, r2, r2
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	415b      	adcs	r3, r3
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	1851      	adds	r1, r2, r1
 8006ae8:	6039      	str	r1, [r7, #0]
 8006aea:	4649      	mov	r1, r9
 8006aec:	414b      	adcs	r3, r1
 8006aee:	607b      	str	r3, [r7, #4]
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006afc:	4659      	mov	r1, fp
 8006afe:	00cb      	lsls	r3, r1, #3
 8006b00:	4651      	mov	r1, sl
 8006b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b06:	4651      	mov	r1, sl
 8006b08:	00ca      	lsls	r2, r1, #3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4642      	mov	r2, r8
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b16:	464b      	mov	r3, r9
 8006b18:	460a      	mov	r2, r1
 8006b1a:	eb42 0303 	adc.w	r3, r2, r3
 8006b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b38:	4649      	mov	r1, r9
 8006b3a:	008b      	lsls	r3, r1, #2
 8006b3c:	4641      	mov	r1, r8
 8006b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b42:	4641      	mov	r1, r8
 8006b44:	008a      	lsls	r2, r1, #2
 8006b46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b4a:	f7f9 fba1 	bl	8000290 <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4b0d      	ldr	r3, [pc, #52]	@ (8006b88 <UART_SetConfig+0x4e4>)
 8006b54:	fba3 1302 	umull	r1, r3, r3, r2
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	2164      	movs	r1, #100	@ 0x64
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	3332      	adds	r3, #50	@ 0x32
 8006b66:	4a08      	ldr	r2, [pc, #32]	@ (8006b88 <UART_SetConfig+0x4e4>)
 8006b68:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f003 020f 	and.w	r2, r3, #15
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4422      	add	r2, r4
 8006b7a:	609a      	str	r2, [r3, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b82:	46bd      	mov	sp, r7
 8006b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b88:	51eb851f 	.word	0x51eb851f

08006b8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	f107 001c 	add.w	r0, r7, #28
 8006b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d123      	bne.n	8006bee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006baa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d105      	bne.n	8006be2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 fae8 	bl	80081b8 <USB_CoreReset>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
 8006bec:	e01b      	b.n	8006c26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fadc 	bl	80081b8 <USB_CoreReset>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c18:	e005      	b.n	8006c26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c26:	7fbb      	ldrb	r3, [r7, #30]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d10b      	bne.n	8006c44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f043 0206 	orr.w	r2, r3, #6
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f043 0220 	orr.w	r2, r3, #32
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c50:	b004      	add	sp, #16
 8006c52:	4770      	bx	lr

08006c54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d165      	bne.n	8006d34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4a41      	ldr	r2, [pc, #260]	@ (8006d70 <USB_SetTurnaroundTime+0x11c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d906      	bls.n	8006c7e <USB_SetTurnaroundTime+0x2a>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4a40      	ldr	r2, [pc, #256]	@ (8006d74 <USB_SetTurnaroundTime+0x120>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d202      	bcs.n	8006c7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c78:	230f      	movs	r3, #15
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e062      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	4a3c      	ldr	r2, [pc, #240]	@ (8006d74 <USB_SetTurnaroundTime+0x120>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d306      	bcc.n	8006c94 <USB_SetTurnaroundTime+0x40>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4a3b      	ldr	r2, [pc, #236]	@ (8006d78 <USB_SetTurnaroundTime+0x124>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d202      	bcs.n	8006c94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c8e:	230e      	movs	r3, #14
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	e057      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4a38      	ldr	r2, [pc, #224]	@ (8006d78 <USB_SetTurnaroundTime+0x124>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d306      	bcc.n	8006caa <USB_SetTurnaroundTime+0x56>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4a37      	ldr	r2, [pc, #220]	@ (8006d7c <USB_SetTurnaroundTime+0x128>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d202      	bcs.n	8006caa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ca4:	230d      	movs	r3, #13
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e04c      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4a33      	ldr	r2, [pc, #204]	@ (8006d7c <USB_SetTurnaroundTime+0x128>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d306      	bcc.n	8006cc0 <USB_SetTurnaroundTime+0x6c>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	4a32      	ldr	r2, [pc, #200]	@ (8006d80 <USB_SetTurnaroundTime+0x12c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d802      	bhi.n	8006cc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006cba:	230c      	movs	r3, #12
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	e041      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8006d80 <USB_SetTurnaroundTime+0x12c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d906      	bls.n	8006cd6 <USB_SetTurnaroundTime+0x82>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4a2e      	ldr	r2, [pc, #184]	@ (8006d84 <USB_SetTurnaroundTime+0x130>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d802      	bhi.n	8006cd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006cd0:	230b      	movs	r3, #11
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	e036      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006d84 <USB_SetTurnaroundTime+0x130>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d906      	bls.n	8006cec <USB_SetTurnaroundTime+0x98>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	4a29      	ldr	r2, [pc, #164]	@ (8006d88 <USB_SetTurnaroundTime+0x134>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d802      	bhi.n	8006cec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ce6:	230a      	movs	r3, #10
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	e02b      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4a26      	ldr	r2, [pc, #152]	@ (8006d88 <USB_SetTurnaroundTime+0x134>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d906      	bls.n	8006d02 <USB_SetTurnaroundTime+0xae>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4a25      	ldr	r2, [pc, #148]	@ (8006d8c <USB_SetTurnaroundTime+0x138>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d202      	bcs.n	8006d02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006cfc:	2309      	movs	r3, #9
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	e020      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4a21      	ldr	r2, [pc, #132]	@ (8006d8c <USB_SetTurnaroundTime+0x138>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d306      	bcc.n	8006d18 <USB_SetTurnaroundTime+0xc4>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	@ (8006d90 <USB_SetTurnaroundTime+0x13c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d802      	bhi.n	8006d18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d12:	2308      	movs	r3, #8
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	e015      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006d90 <USB_SetTurnaroundTime+0x13c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d906      	bls.n	8006d2e <USB_SetTurnaroundTime+0xda>
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4a1c      	ldr	r2, [pc, #112]	@ (8006d94 <USB_SetTurnaroundTime+0x140>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d202      	bcs.n	8006d2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d28:	2307      	movs	r3, #7
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e00a      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d2e:	2306      	movs	r3, #6
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e007      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d3a:	2309      	movs	r3, #9
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e001      	b.n	8006d44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d40:	2309      	movs	r3, #9
 8006d42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	029b      	lsls	r3, r3, #10
 8006d58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	00d8acbf 	.word	0x00d8acbf
 8006d74:	00e4e1c0 	.word	0x00e4e1c0
 8006d78:	00f42400 	.word	0x00f42400
 8006d7c:	01067380 	.word	0x01067380
 8006d80:	011a499f 	.word	0x011a499f
 8006d84:	01312cff 	.word	0x01312cff
 8006d88:	014ca43f 	.word	0x014ca43f
 8006d8c:	016e3600 	.word	0x016e3600
 8006d90:	01a6ab1f 	.word	0x01a6ab1f
 8006d94:	01e84800 	.word	0x01e84800

08006d98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f043 0201 	orr.w	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d115      	bne.n	8006e2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e0a:	200a      	movs	r0, #10
 8006e0c:	f7fa ff4a 	bl	8001ca4 <HAL_Delay>
      ms += 10U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	330a      	adds	r3, #10
 8006e14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f93f 	bl	800809a <USB_GetMode>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d01e      	beq.n	8006e60 <USB_SetCurrentMode+0x84>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e26:	d9f0      	bls.n	8006e0a <USB_SetCurrentMode+0x2e>
 8006e28:	e01a      	b.n	8006e60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d115      	bne.n	8006e5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e3c:	200a      	movs	r0, #10
 8006e3e:	f7fa ff31 	bl	8001ca4 <HAL_Delay>
      ms += 10U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	330a      	adds	r3, #10
 8006e46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 f926 	bl	800809a <USB_GetMode>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <USB_SetCurrentMode+0x84>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e58:	d9f0      	bls.n	8006e3c <USB_SetCurrentMode+0x60>
 8006e5a:	e001      	b.n	8006e60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e005      	b.n	8006e6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e64:	d101      	bne.n	8006e6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e74:	b084      	sub	sp, #16
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b086      	sub	sp, #24
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	613b      	str	r3, [r7, #16]
 8006e92:	e009      	b.n	8006ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	3340      	adds	r3, #64	@ 0x40
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b0e      	cmp	r3, #14
 8006eac:	d9f2      	bls.n	8006e94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006eae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d11c      	bne.n	8006ef0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ec4:	f043 0302 	orr.w	r3, r3, #2
 8006ec8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	@ 0x38
 8006eee:	e00b      	b.n	8006f08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2300      	movs	r3, #0
 8006f12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d10d      	bne.n	8006f38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f24:	2100      	movs	r1, #0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f968 	bl	80071fc <USB_SetDevSpeed>
 8006f2c:	e008      	b.n	8006f40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f2e:	2101      	movs	r1, #1
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f963 	bl	80071fc <USB_SetDevSpeed>
 8006f36:	e003      	b.n	8006f40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f38:	2103      	movs	r1, #3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f95e 	bl	80071fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f40:	2110      	movs	r1, #16
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f8fa 	bl	800713c <USB_FlushTxFifo>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f924 	bl	80071a0 <USB_FlushRxFifo>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f74:	461a      	mov	r2, r3
 8006f76:	2300      	movs	r3, #0
 8006f78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f80:	461a      	mov	r2, r3
 8006f82:	2300      	movs	r3, #0
 8006f84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f86:	2300      	movs	r3, #0
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	e043      	b.n	8007014 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fa2:	d118      	bne.n	8006fd6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	e013      	b.n	8006fe8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	e008      	b.n	8006fe8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007006:	461a      	mov	r2, r3
 8007008:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800700c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	3301      	adds	r3, #1
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007018:	461a      	mov	r2, r3
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4293      	cmp	r3, r2
 800701e:	d3b5      	bcc.n	8006f8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	e043      	b.n	80070ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007038:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800703c:	d118      	bne.n	8007070 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007050:	461a      	mov	r2, r3
 8007052:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	e013      	b.n	8007082 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007066:	461a      	mov	r2, r3
 8007068:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e008      	b.n	8007082 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707c:	461a      	mov	r2, r3
 800707e:	2300      	movs	r3, #0
 8007080:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708e:	461a      	mov	r2, r3
 8007090:	2300      	movs	r3, #0
 8007092:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a0:	461a      	mov	r2, r3
 80070a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	3301      	adds	r3, #1
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070b2:	461a      	mov	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d3b5      	bcc.n	8007026 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80070da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f043 0210 	orr.w	r2, r3, #16
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	4b10      	ldr	r3, [pc, #64]	@ (8007138 <USB_DevInit+0x2c4>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f043 0208 	orr.w	r2, r3, #8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007110:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007114:	2b01      	cmp	r3, #1
 8007116:	d107      	bne.n	8007128 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007120:	f043 0304 	orr.w	r3, r3, #4
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007134:	b004      	add	sp, #16
 8007136:	4770      	bx	lr
 8007138:	803c3800 	.word	0x803c3800

0800713c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007156:	d901      	bls.n	800715c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e01b      	b.n	8007194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	daf2      	bge.n	800714a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	019b      	lsls	r3, r3, #6
 800716c:	f043 0220 	orr.w	r2, r3, #32
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007180:	d901      	bls.n	8007186 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e006      	b.n	8007194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d0f0      	beq.n	8007174 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071b8:	d901      	bls.n	80071be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e018      	b.n	80071f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	daf2      	bge.n	80071ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2210      	movs	r2, #16
 80071ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071dc:	d901      	bls.n	80071e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e006      	b.n	80071f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d0f0      	beq.n	80071d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800721c:	4313      	orrs	r3, r2
 800721e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800722e:	b480      	push	{r7}
 8007230:	b087      	sub	sp, #28
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0306 	and.w	r3, r3, #6
 8007246:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d102      	bne.n	8007254 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800724e:	2300      	movs	r3, #0
 8007250:	75fb      	strb	r3, [r7, #23]
 8007252:	e00a      	b.n	800726a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d002      	beq.n	8007260 <USB_GetDevSpeed+0x32>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b06      	cmp	r3, #6
 800725e:	d102      	bne.n	8007266 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007260:	2302      	movs	r3, #2
 8007262:	75fb      	strb	r3, [r7, #23]
 8007264:	e001      	b.n	800726a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007266:	230f      	movs	r3, #15
 8007268:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
}
 800726c:	4618      	mov	r0, r3
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d13a      	bne.n	800730a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	2101      	movs	r1, #1
 80072a6:	fa01 f303 	lsl.w	r3, r1, r3
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	68f9      	ldr	r1, [r7, #12]
 80072ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072b2:	4313      	orrs	r3, r2
 80072b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d155      	bne.n	8007378 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	791b      	ldrb	r3, [r3, #4]
 80072e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	059b      	lsls	r3, r3, #22
 80072ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072f0:	4313      	orrs	r3, r2
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	e036      	b.n	8007378 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007310:	69da      	ldr	r2, [r3, #28]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	2101      	movs	r1, #1
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	041b      	lsls	r3, r3, #16
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007328:	4313      	orrs	r3, r2
 800732a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d11a      	bne.n	8007378 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	791b      	ldrb	r3, [r3, #4]
 800735c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800735e:	430b      	orrs	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800736e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007376:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
	...

08007388 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d161      	bne.n	8007468 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073ba:	d11f      	bne.n	80073fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	2101      	movs	r1, #1
 800740e:	fa01 f303 	lsl.w	r3, r1, r3
 8007412:	b29b      	uxth	r3, r3
 8007414:	43db      	mvns	r3, r3
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800741c:	4013      	ands	r3, r2
 800741e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	2101      	movs	r1, #1
 8007432:	fa01 f303 	lsl.w	r3, r1, r3
 8007436:	b29b      	uxth	r3, r3
 8007438:	43db      	mvns	r3, r3
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007440:	4013      	ands	r3, r2
 8007442:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	0159      	lsls	r1, r3, #5
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	440b      	add	r3, r1
 800745a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745e:	4619      	mov	r1, r3
 8007460:	4b35      	ldr	r3, [pc, #212]	@ (8007538 <USB_DeactivateEndpoint+0x1b0>)
 8007462:	4013      	ands	r3, r2
 8007464:	600b      	str	r3, [r1, #0]
 8007466:	e060      	b.n	800752a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800747a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800747e:	d11f      	bne.n	80074c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800749a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800749e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	2101      	movs	r1, #1
 80074d2:	fa01 f303 	lsl.w	r3, r1, r3
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	43db      	mvns	r3, r3
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074e0:	4013      	ands	r3, r2
 80074e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ea:	69da      	ldr	r2, [r3, #28]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	2101      	movs	r1, #1
 80074f6:	fa01 f303 	lsl.w	r3, r1, r3
 80074fa:	041b      	lsls	r3, r3, #16
 80074fc:	43db      	mvns	r3, r3
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007504:	4013      	ands	r3, r2
 8007506:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	0159      	lsls	r1, r3, #5
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	440b      	add	r3, r1
 800751e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007522:	4619      	mov	r1, r3
 8007524:	4b05      	ldr	r3, [pc, #20]	@ (800753c <USB_DeactivateEndpoint+0x1b4>)
 8007526:	4013      	ands	r3, r2
 8007528:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	ec337800 	.word	0xec337800
 800753c:	eff37800 	.word	0xeff37800

08007540 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	@ 0x28
 8007544:	af02      	add	r7, sp, #8
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	4613      	mov	r3, r2
 800754c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	785b      	ldrb	r3, [r3, #1]
 800755c:	2b01      	cmp	r3, #1
 800755e:	f040 817f 	bne.w	8007860 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d132      	bne.n	80075d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007584:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007588:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800758c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075c8:	0cdb      	lsrs	r3, r3, #19
 80075ca:	04db      	lsls	r3, r3, #19
 80075cc:	6113      	str	r3, [r2, #16]
 80075ce:	e097      	b.n	8007700 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	69fa      	ldr	r2, [r7, #28]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ea:	0cdb      	lsrs	r3, r3, #19
 80075ec:	04db      	lsls	r3, r3, #19
 80075ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800760a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800760e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007612:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d11a      	bne.n	8007650 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	429a      	cmp	r2, r3
 8007624:	d903      	bls.n	800762e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007648:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800764c:	6113      	str	r3, [r2, #16]
 800764e:	e044      	b.n	80076da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	4413      	add	r3, r2
 800765a:	1e5a      	subs	r2, r3, #1
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	8afb      	ldrh	r3, [r7, #22]
 8007676:	04d9      	lsls	r1, r3, #19
 8007678:	4ba4      	ldr	r3, [pc, #656]	@ (800790c <USB_EPStartXfer+0x3cc>)
 800767a:	400b      	ands	r3, r1
 800767c:	69b9      	ldr	r1, [r7, #24]
 800767e:	0148      	lsls	r0, r1, #5
 8007680:	69f9      	ldr	r1, [r7, #28]
 8007682:	4401      	add	r1, r0
 8007684:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007688:	4313      	orrs	r3, r2
 800768a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d122      	bne.n	80076da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80076b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	8afb      	ldrh	r3, [r7, #22]
 80076c4:	075b      	lsls	r3, r3, #29
 80076c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80076ca:	69b9      	ldr	r1, [r7, #24]
 80076cc:	0148      	lsls	r0, r1, #5
 80076ce:	69f9      	ldr	r1, [r7, #28]
 80076d0:	4401      	add	r1, r0
 80076d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076d6:	4313      	orrs	r3, r2
 80076d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f0:	69b9      	ldr	r1, [r7, #24]
 80076f2:	0148      	lsls	r0, r1, #5
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	4401      	add	r1, r0
 80076f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076fc:	4313      	orrs	r3, r2
 80076fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d14b      	bne.n	800779e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800771a:	461a      	mov	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d128      	bne.n	800777c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d110      	bne.n	800775c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007754:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e00f      	b.n	800777c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800777a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007796:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	e166      	b.n	8007a6c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d015      	beq.n	80077f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 814e 	beq.w	8007a6c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	2101      	movs	r1, #1
 80077e2:	fa01 f303 	lsl.w	r3, r1, r3
 80077e6:	69f9      	ldr	r1, [r7, #28]
 80077e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077ec:	4313      	orrs	r3, r2
 80077ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80077f0:	e13c      	b.n	8007a6c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d110      	bne.n	8007824 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800781c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	e00f      	b.n	8007844 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	440a      	add	r2, r1
 800783a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800783e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007842:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	68d9      	ldr	r1, [r3, #12]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	b298      	uxth	r0, r3
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4603      	mov	r3, r0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f9b9 	bl	8007bd0 <USB_WritePacket>
 800785e:	e105      	b.n	8007a6c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800787a:	0cdb      	lsrs	r3, r3, #19
 800787c:	04db      	lsls	r3, r3, #19
 800787e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	440a      	add	r2, r1
 8007896:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800789a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800789e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d132      	bne.n	8007910 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ce:	691a      	ldr	r2, [r3, #16]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d8:	69b9      	ldr	r1, [r7, #24]
 80078da:	0148      	lsls	r0, r1, #5
 80078dc:	69f9      	ldr	r1, [r7, #28]
 80078de:	4401      	add	r1, r0
 80078e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078e4:	4313      	orrs	r3, r2
 80078e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007902:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007906:	6113      	str	r3, [r2, #16]
 8007908:	e062      	b.n	80079d0 <USB_EPStartXfer+0x490>
 800790a:	bf00      	nop
 800790c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d123      	bne.n	8007960 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800792e:	69b9      	ldr	r1, [r7, #24]
 8007930:	0148      	lsls	r0, r1, #5
 8007932:	69f9      	ldr	r1, [r7, #28]
 8007934:	4401      	add	r1, r0
 8007936:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800793a:	4313      	orrs	r3, r2
 800793c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800795c:	6113      	str	r3, [r2, #16]
 800795e:	e037      	b.n	80079d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	691a      	ldr	r2, [r3, #16]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	4413      	add	r3, r2
 800796a:	1e5a      	subs	r2, r3, #1
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	fbb2 f3f3 	udiv	r3, r2, r3
 8007974:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	8afa      	ldrh	r2, [r7, #22]
 800797c:	fb03 f202 	mul.w	r2, r3, r2
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	8afb      	ldrh	r3, [r7, #22]
 8007994:	04d9      	lsls	r1, r3, #19
 8007996:	4b38      	ldr	r3, [pc, #224]	@ (8007a78 <USB_EPStartXfer+0x538>)
 8007998:	400b      	ands	r3, r1
 800799a:	69b9      	ldr	r1, [r7, #24]
 800799c:	0148      	lsls	r0, r1, #5
 800799e:	69f9      	ldr	r1, [r7, #28]
 80079a0:	4401      	add	r1, r0
 80079a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079a6:	4313      	orrs	r3, r2
 80079a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c0:	69b9      	ldr	r1, [r7, #24]
 80079c2:	0148      	lsls	r0, r1, #5
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	4401      	add	r1, r0
 80079c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079cc:	4313      	orrs	r3, r2
 80079ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10d      	bne.n	80079f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	68d9      	ldr	r1, [r3, #12]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ee:	460a      	mov	r2, r1
 80079f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	791b      	ldrb	r3, [r3, #4]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d128      	bne.n	8007a4c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d110      	bne.n	8007a2c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	e00f      	b.n	8007a4c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	1ff80000 	.word	0x1ff80000

08007a7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d14a      	bne.n	8007b30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ab2:	f040 8086 	bne.w	8007bc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	7812      	ldrb	r2, [r2, #0]
 8007aca:	0151      	lsls	r1, r2, #5
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	440a      	add	r2, r1
 8007ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ad4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ad8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007af8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007afc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3301      	adds	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d902      	bls.n	8007b14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]
          break;
 8007b12:	e056      	b.n	8007bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b2c:	d0e7      	beq.n	8007afe <USB_EPStopXfer+0x82>
 8007b2e:	e048      	b.n	8007bc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b48:	d13b      	bne.n	8007bc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	7812      	ldrb	r2, [r2, #0]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	7812      	ldrb	r2, [r2, #0]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d902      	bls.n	8007ba8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ba6:	e00c      	b.n	8007bc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bc0:	d0e7      	beq.n	8007b92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	371c      	adds	r7, #28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b089      	sub	sp, #36	@ 0x24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4611      	mov	r1, r2
 8007bdc:	461a      	mov	r2, r3
 8007bde:	460b      	mov	r3, r1
 8007be0:	71fb      	strb	r3, [r7, #7]
 8007be2:	4613      	mov	r3, r2
 8007be4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007bee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d123      	bne.n	8007c3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007bf6:	88bb      	ldrh	r3, [r7, #4]
 8007bf8:	3303      	adds	r3, #3
 8007bfa:	089b      	lsrs	r3, r3, #2
 8007bfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	e018      	b.n	8007c36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	031a      	lsls	r2, r3, #12
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c10:	461a      	mov	r2, r3
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	3301      	adds	r3, #1
 8007c22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	3301      	adds	r3, #1
 8007c28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	3301      	adds	r3, #1
 8007c34:	61bb      	str	r3, [r7, #24]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d3e2      	bcc.n	8007c04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3724      	adds	r7, #36	@ 0x24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b08b      	sub	sp, #44	@ 0x2c
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	089b      	lsrs	r3, r3, #2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c6a:	88fb      	ldrh	r3, [r7, #6]
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c72:	2300      	movs	r3, #0
 8007c74:	623b      	str	r3, [r7, #32]
 8007c76:	e014      	b.n	8007ca2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	3301      	adds	r3, #1
 8007c88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	3301      	adds	r3, #1
 8007c94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	3301      	adds	r3, #1
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	623b      	str	r3, [r7, #32]
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d3e6      	bcc.n	8007c78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007caa:	8bfb      	ldrh	r3, [r7, #30]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01e      	beq.n	8007cee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f107 0310 	add.w	r3, r7, #16
 8007cc0:	6812      	ldr	r2, [r2, #0]
 8007cc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	701a      	strb	r2, [r3, #0]
      i++;
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	623b      	str	r3, [r7, #32]
      pDest++;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	3301      	adds	r3, #1
 8007ce0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007ce2:	8bfb      	ldrh	r3, [r7, #30]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ce8:	8bfb      	ldrh	r3, [r7, #30]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1ea      	bne.n	8007cc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	372c      	adds	r7, #44	@ 0x2c
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d12c      	bne.n	8007d72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	db12      	blt.n	8007d50 <USB_EPSetStall+0x54>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00f      	beq.n	8007d50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	0151      	lsls	r1, r2, #5
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	440a      	add	r2, r1
 8007d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	e02b      	b.n	8007dca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db12      	blt.n	8007daa <USB_EPSetStall+0xae>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00f      	beq.n	8007daa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007da4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007da8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	0151      	lsls	r1, r2, #5
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007dc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d128      	bne.n	8007e46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	791b      	ldrb	r3, [r3, #4]
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d003      	beq.n	8007e24 <USB_EPClearStall+0x4c>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	791b      	ldrb	r3, [r3, #4]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d138      	bne.n	8007e96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	e027      	b.n	8007e96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	791b      	ldrb	r3, [r3, #4]
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d003      	beq.n	8007e76 <USB_EPClearStall+0x9e>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	791b      	ldrb	r3, [r3, #4]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d10f      	bne.n	8007e96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ec2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007ec6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007ed8:	68f9      	ldr	r1, [r7, #12]
 8007eda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f1e:	f023 0302 	bic.w	r3, r3, #2
 8007f22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f4c:	f023 0303 	bic.w	r3, r3, #3
 8007f50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f60:	f043 0302 	orr.w	r3, r3, #2
 8007f64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	0c1b      	lsrs	r3, r3, #16
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	b29b      	uxth	r3, r3
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4013      	ands	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008030:	68bb      	ldr	r3, [r7, #8]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800803e:	b480      	push	{r7}
 8008040:	b087      	sub	sp, #28
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800805e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008060:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	fa22 f303 	lsr.w	r3, r2, r3
 800806e:	01db      	lsls	r3, r3, #7
 8008070:	b2db      	uxtb	r3, r3
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4013      	ands	r3, r2
 800808a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800808c:	68bb      	ldr	r3, [r7, #8]
}
 800808e:	4618      	mov	r0, r3
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f003 0301 	and.w	r3, r3, #1
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b085      	sub	sp, #20
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80080d4:	f023 0307 	bic.w	r3, r3, #7
 80080d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	460b      	mov	r3, r1
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	333c      	adds	r3, #60	@ 0x3c
 8008112:	3304      	adds	r3, #4
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	4a26      	ldr	r2, [pc, #152]	@ (80081b4 <USB_EP0_OutStart+0xb8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d90a      	bls.n	8008136 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800812c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008130:	d101      	bne.n	8008136 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	e037      	b.n	80081a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800813c:	461a      	mov	r2, r3
 800813e:	2300      	movs	r3, #0
 8008140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008150:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008164:	f043 0318 	orr.w	r3, r3, #24
 8008168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008178:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800817c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d10f      	bne.n	80081a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818a:	461a      	mov	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800819e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80081a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	4f54300a 	.word	0x4f54300a

080081b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081d0:	d901      	bls.n	80081d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e01b      	b.n	800820e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	daf2      	bge.n	80081c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f043 0201 	orr.w	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3301      	adds	r3, #1
 80081f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081fa:	d901      	bls.n	8008200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e006      	b.n	800820e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b01      	cmp	r3, #1
 800820a:	d0f0      	beq.n	80081ee <USB_CoreReset+0x36>

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008228:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800822c:	f002 fcc4 	bl	800abb8 <USBD_static_malloc>
 8008230:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d109      	bne.n	800824c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	32b0      	adds	r2, #176	@ 0xb0
 8008242:	2100      	movs	r1, #0
 8008244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008248:	2302      	movs	r3, #2
 800824a:	e0d4      	b.n	80083f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800824c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008250:	2100      	movs	r1, #0
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f002 fefe 	bl	800b054 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	32b0      	adds	r2, #176	@ 0xb0
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	32b0      	adds	r2, #176	@ 0xb0
 8008272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7c1b      	ldrb	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d138      	bne.n	80082f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008284:	4b5e      	ldr	r3, [pc, #376]	@ (8008400 <USBD_CDC_Init+0x1e4>)
 8008286:	7819      	ldrb	r1, [r3, #0]
 8008288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800828c:	2202      	movs	r2, #2
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f002 fb6f 	bl	800a972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008294:	4b5a      	ldr	r3, [pc, #360]	@ (8008400 <USBD_CDC_Init+0x1e4>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	f003 020f 	and.w	r2, r3, #15
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	3324      	adds	r3, #36	@ 0x24
 80082aa:	2201      	movs	r2, #1
 80082ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082ae:	4b55      	ldr	r3, [pc, #340]	@ (8008404 <USBD_CDC_Init+0x1e8>)
 80082b0:	7819      	ldrb	r1, [r3, #0]
 80082b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082b6:	2202      	movs	r2, #2
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f002 fb5a 	bl	800a972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082be:	4b51      	ldr	r3, [pc, #324]	@ (8008404 <USBD_CDC_Init+0x1e8>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 020f 	and.w	r2, r3, #15
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80082d6:	2201      	movs	r2, #1
 80082d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80082da:	4b4b      	ldr	r3, [pc, #300]	@ (8008408 <USBD_CDC_Init+0x1ec>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	f003 020f 	and.w	r2, r3, #15
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	3326      	adds	r3, #38	@ 0x26
 80082f0:	2210      	movs	r2, #16
 80082f2:	801a      	strh	r2, [r3, #0]
 80082f4:	e035      	b.n	8008362 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082f6:	4b42      	ldr	r3, [pc, #264]	@ (8008400 <USBD_CDC_Init+0x1e4>)
 80082f8:	7819      	ldrb	r1, [r3, #0]
 80082fa:	2340      	movs	r3, #64	@ 0x40
 80082fc:	2202      	movs	r2, #2
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f002 fb37 	bl	800a972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008304:	4b3e      	ldr	r3, [pc, #248]	@ (8008400 <USBD_CDC_Init+0x1e4>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	f003 020f 	and.w	r2, r3, #15
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	440b      	add	r3, r1
 8008318:	3324      	adds	r3, #36	@ 0x24
 800831a:	2201      	movs	r2, #1
 800831c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800831e:	4b39      	ldr	r3, [pc, #228]	@ (8008404 <USBD_CDC_Init+0x1e8>)
 8008320:	7819      	ldrb	r1, [r3, #0]
 8008322:	2340      	movs	r3, #64	@ 0x40
 8008324:	2202      	movs	r2, #2
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f002 fb23 	bl	800a972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800832c:	4b35      	ldr	r3, [pc, #212]	@ (8008404 <USBD_CDC_Init+0x1e8>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008344:	2201      	movs	r2, #1
 8008346:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008348:	4b2f      	ldr	r3, [pc, #188]	@ (8008408 <USBD_CDC_Init+0x1ec>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	f003 020f 	and.w	r2, r3, #15
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	440b      	add	r3, r1
 800835c:	3326      	adds	r3, #38	@ 0x26
 800835e:	2210      	movs	r2, #16
 8008360:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008362:	4b29      	ldr	r3, [pc, #164]	@ (8008408 <USBD_CDC_Init+0x1ec>)
 8008364:	7819      	ldrb	r1, [r3, #0]
 8008366:	2308      	movs	r3, #8
 8008368:	2203      	movs	r2, #3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f002 fb01 	bl	800a972 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008370:	4b25      	ldr	r3, [pc, #148]	@ (8008408 <USBD_CDC_Init+0x1ec>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	f003 020f 	and.w	r2, r3, #15
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	3324      	adds	r3, #36	@ 0x24
 8008386:	2201      	movs	r2, #1
 8008388:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	33b0      	adds	r3, #176	@ 0xb0
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80083c0:	2302      	movs	r3, #2
 80083c2:	e018      	b.n	80083f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	7c1b      	ldrb	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008404 <USBD_CDC_Init+0x1e8>)
 80083ce:	7819      	ldrb	r1, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f002 fbb8 	bl	800ab50 <USBD_LL_PrepareReceive>
 80083e0:	e008      	b.n	80083f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083e2:	4b08      	ldr	r3, [pc, #32]	@ (8008404 <USBD_CDC_Init+0x1e8>)
 80083e4:	7819      	ldrb	r1, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083ec:	2340      	movs	r3, #64	@ 0x40
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f002 fbae 	bl	800ab50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	200000a3 	.word	0x200000a3
 8008404:	200000a4 	.word	0x200000a4
 8008408:	200000a5 	.word	0x200000a5

0800840c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008418:	4b3a      	ldr	r3, [pc, #232]	@ (8008504 <USBD_CDC_DeInit+0xf8>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f002 facd 	bl	800a9be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008424:	4b37      	ldr	r3, [pc, #220]	@ (8008504 <USBD_CDC_DeInit+0xf8>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f003 020f 	and.w	r2, r3, #15
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	3324      	adds	r3, #36	@ 0x24
 800843a:	2200      	movs	r2, #0
 800843c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800843e:	4b32      	ldr	r3, [pc, #200]	@ (8008508 <USBD_CDC_DeInit+0xfc>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f002 faba 	bl	800a9be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800844a:	4b2f      	ldr	r3, [pc, #188]	@ (8008508 <USBD_CDC_DeInit+0xfc>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	f003 020f 	and.w	r2, r3, #15
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008462:	2200      	movs	r2, #0
 8008464:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008466:	4b29      	ldr	r3, [pc, #164]	@ (800850c <USBD_CDC_DeInit+0x100>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f002 faa6 	bl	800a9be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008472:	4b26      	ldr	r3, [pc, #152]	@ (800850c <USBD_CDC_DeInit+0x100>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	f003 020f 	and.w	r2, r3, #15
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	440b      	add	r3, r1
 8008486:	3324      	adds	r3, #36	@ 0x24
 8008488:	2200      	movs	r2, #0
 800848a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800848c:	4b1f      	ldr	r3, [pc, #124]	@ (800850c <USBD_CDC_DeInit+0x100>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	f003 020f 	and.w	r2, r3, #15
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	3326      	adds	r3, #38	@ 0x26
 80084a2:	2200      	movs	r2, #0
 80084a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	32b0      	adds	r2, #176	@ 0xb0
 80084b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01f      	beq.n	80084f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	33b0      	adds	r3, #176	@ 0xb0
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	32b0      	adds	r2, #176	@ 0xb0
 80084d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 fb7a 	bl	800abd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32b0      	adds	r2, #176	@ 0xb0
 80084ea:	2100      	movs	r1, #0
 80084ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	200000a3 	.word	0x200000a3
 8008508:	200000a4 	.word	0x200000a4
 800850c:	200000a5 	.word	0x200000a5

08008510 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	32b0      	adds	r2, #176	@ 0xb0
 8008524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008528:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800853c:	2303      	movs	r3, #3
 800853e:	e0bf      	b.n	80086c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008548:	2b00      	cmp	r3, #0
 800854a:	d050      	beq.n	80085ee <USBD_CDC_Setup+0xde>
 800854c:	2b20      	cmp	r3, #32
 800854e:	f040 80af 	bne.w	80086b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	88db      	ldrh	r3, [r3, #6]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d03a      	beq.n	80085d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	b25b      	sxtb	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	da1b      	bge.n	800859c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	33b0      	adds	r3, #176	@ 0xb0
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800857a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	88d2      	ldrh	r2, [r2, #6]
 8008580:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	88db      	ldrh	r3, [r3, #6]
 8008586:	2b07      	cmp	r3, #7
 8008588:	bf28      	it	cs
 800858a:	2307      	movcs	r3, #7
 800858c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	89fa      	ldrh	r2, [r7, #14]
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fd93 	bl	800a0c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800859a:	e090      	b.n	80086be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	785a      	ldrb	r2, [r3, #1]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	88db      	ldrh	r3, [r3, #6]
 80085aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80085ac:	d803      	bhi.n	80085b6 <USBD_CDC_Setup+0xa6>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	88db      	ldrh	r3, [r3, #6]
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	e000      	b.n	80085b8 <USBD_CDC_Setup+0xa8>
 80085b6:	2240      	movs	r2, #64	@ 0x40
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80085be:	6939      	ldr	r1, [r7, #16]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80085c6:	461a      	mov	r2, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fda5 	bl	800a118 <USBD_CtlPrepareRx>
      break;
 80085ce:	e076      	b.n	80086be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	33b0      	adds	r3, #176	@ 0xb0
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	7850      	ldrb	r0, [r2, #1]
 80085e6:	2200      	movs	r2, #0
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	4798      	blx	r3
      break;
 80085ec:	e067      	b.n	80086be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	2b0b      	cmp	r3, #11
 80085f4:	d851      	bhi.n	800869a <USBD_CDC_Setup+0x18a>
 80085f6:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <USBD_CDC_Setup+0xec>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	0800862d 	.word	0x0800862d
 8008600:	080086a9 	.word	0x080086a9
 8008604:	0800869b 	.word	0x0800869b
 8008608:	0800869b 	.word	0x0800869b
 800860c:	0800869b 	.word	0x0800869b
 8008610:	0800869b 	.word	0x0800869b
 8008614:	0800869b 	.word	0x0800869b
 8008618:	0800869b 	.word	0x0800869b
 800861c:	0800869b 	.word	0x0800869b
 8008620:	0800869b 	.word	0x0800869b
 8008624:	08008657 	.word	0x08008657
 8008628:	08008681 	.word	0x08008681
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b03      	cmp	r3, #3
 8008636:	d107      	bne.n	8008648 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008638:	f107 030a 	add.w	r3, r7, #10
 800863c:	2202      	movs	r2, #2
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 fd3d 	bl	800a0c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008646:	e032      	b.n	80086ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f001 fcbb 	bl	8009fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008650:	2303      	movs	r3, #3
 8008652:	75fb      	strb	r3, [r7, #23]
          break;
 8008654:	e02b      	b.n	80086ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b03      	cmp	r3, #3
 8008660:	d107      	bne.n	8008672 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008662:	f107 030d 	add.w	r3, r7, #13
 8008666:	2201      	movs	r2, #1
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 fd28 	bl	800a0c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008670:	e01d      	b.n	80086ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 fca6 	bl	8009fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800867a:	2303      	movs	r3, #3
 800867c:	75fb      	strb	r3, [r7, #23]
          break;
 800867e:	e016      	b.n	80086ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b03      	cmp	r3, #3
 800868a:	d00f      	beq.n	80086ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 fc99 	bl	8009fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008694:	2303      	movs	r3, #3
 8008696:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008698:	e008      	b.n	80086ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 fc92 	bl	8009fc6 <USBD_CtlError>
          ret = USBD_FAIL;
 80086a2:	2303      	movs	r3, #3
 80086a4:	75fb      	strb	r3, [r7, #23]
          break;
 80086a6:	e002      	b.n	80086ae <USBD_CDC_Setup+0x19e>
          break;
 80086a8:	bf00      	nop
 80086aa:	e008      	b.n	80086be <USBD_CDC_Setup+0x1ae>
          break;
 80086ac:	bf00      	nop
      }
      break;
 80086ae:	e006      	b.n	80086be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 fc87 	bl	8009fc6 <USBD_CtlError>
      ret = USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	75fb      	strb	r3, [r7, #23]
      break;
 80086bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	32b0      	adds	r2, #176	@ 0xb0
 80086e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e065      	b.n	80087be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	32b0      	adds	r2, #176	@ 0xb0
 80086fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008700:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	f003 020f 	and.w	r2, r3, #15
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	3318      	adds	r3, #24
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d02f      	beq.n	800877c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	f003 020f 	and.w	r2, r3, #15
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	4613      	mov	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	440b      	add	r3, r1
 800872e:	3318      	adds	r3, #24
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	f003 010f 	and.w	r1, r3, #15
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	460b      	mov	r3, r1
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	440b      	add	r3, r1
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4403      	add	r3, r0
 8008744:	331c      	adds	r3, #28
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	fbb2 f1f3 	udiv	r1, r2, r3
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008752:	2b00      	cmp	r3, #0
 8008754:	d112      	bne.n	800877c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	f003 020f 	and.w	r2, r3, #15
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	3318      	adds	r3, #24
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800876e:	78f9      	ldrb	r1, [r7, #3]
 8008770:	2300      	movs	r3, #0
 8008772:	2200      	movs	r2, #0
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f002 f9ca 	bl	800ab0e <USBD_LL_Transmit>
 800877a:	e01f      	b.n	80087bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	33b0      	adds	r3, #176	@ 0xb0
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d010      	beq.n	80087bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	33b0      	adds	r3, #176	@ 0xb0
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	32b0      	adds	r2, #176	@ 0xb0
 80087dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	32b0      	adds	r2, #176	@ 0xb0
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e01a      	b.n	800882e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f002 f9c8 	bl	800ab92 <USBD_LL_GetRxDataSize>
 8008802:	4602      	mov	r2, r0
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	33b0      	adds	r3, #176	@ 0xb0
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008828:	4611      	mov	r1, r2
 800882a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	32b0      	adds	r2, #176	@ 0xb0
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008854:	2303      	movs	r3, #3
 8008856:	e024      	b.n	80088a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	33b0      	adds	r3, #176	@ 0xb0
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d019      	beq.n	80088a0 <USBD_CDC_EP0_RxReady+0x6a>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008872:	2bff      	cmp	r3, #255	@ 0xff
 8008874:	d014      	beq.n	80088a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	33b0      	adds	r3, #176	@ 0xb0
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800888e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008896:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	22ff      	movs	r2, #255	@ 0xff
 800889c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088b4:	2182      	movs	r1, #130	@ 0x82
 80088b6:	4818      	ldr	r0, [pc, #96]	@ (8008918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088b8:	f000 fd4f 	bl	800935a <USBD_GetEpDesc>
 80088bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088be:	2101      	movs	r1, #1
 80088c0:	4815      	ldr	r0, [pc, #84]	@ (8008918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088c2:	f000 fd4a 	bl	800935a <USBD_GetEpDesc>
 80088c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088c8:	2181      	movs	r1, #129	@ 0x81
 80088ca:	4813      	ldr	r0, [pc, #76]	@ (8008918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088cc:	f000 fd45 	bl	800935a <USBD_GetEpDesc>
 80088d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2210      	movs	r2, #16
 80088dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d006      	beq.n	80088f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088ec:	711a      	strb	r2, [r3, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d006      	beq.n	8008906 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008900:	711a      	strb	r2, [r3, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2243      	movs	r2, #67	@ 0x43
 800890a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800890c:	4b02      	ldr	r3, [pc, #8]	@ (8008918 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20000060 	.word	0x20000060

0800891c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008924:	2182      	movs	r1, #130	@ 0x82
 8008926:	4818      	ldr	r0, [pc, #96]	@ (8008988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008928:	f000 fd17 	bl	800935a <USBD_GetEpDesc>
 800892c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800892e:	2101      	movs	r1, #1
 8008930:	4815      	ldr	r0, [pc, #84]	@ (8008988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008932:	f000 fd12 	bl	800935a <USBD_GetEpDesc>
 8008936:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008938:	2181      	movs	r1, #129	@ 0x81
 800893a:	4813      	ldr	r0, [pc, #76]	@ (8008988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800893c:	f000 fd0d 	bl	800935a <USBD_GetEpDesc>
 8008940:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2210      	movs	r2, #16
 800894c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2200      	movs	r2, #0
 8008958:	711a      	strb	r2, [r3, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f042 0202 	orr.w	r2, r2, #2
 8008960:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d006      	beq.n	8008976 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	711a      	strb	r2, [r3, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f042 0202 	orr.w	r2, r2, #2
 8008974:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2243      	movs	r2, #67	@ 0x43
 800897a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800897c:	4b02      	ldr	r3, [pc, #8]	@ (8008988 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000060 	.word	0x20000060

0800898c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008994:	2182      	movs	r1, #130	@ 0x82
 8008996:	4818      	ldr	r0, [pc, #96]	@ (80089f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008998:	f000 fcdf 	bl	800935a <USBD_GetEpDesc>
 800899c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800899e:	2101      	movs	r1, #1
 80089a0:	4815      	ldr	r0, [pc, #84]	@ (80089f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089a2:	f000 fcda 	bl	800935a <USBD_GetEpDesc>
 80089a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089a8:	2181      	movs	r1, #129	@ 0x81
 80089aa:	4813      	ldr	r0, [pc, #76]	@ (80089f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089ac:	f000 fcd5 	bl	800935a <USBD_GetEpDesc>
 80089b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2210      	movs	r2, #16
 80089bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089cc:	711a      	strb	r2, [r3, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d006      	beq.n	80089e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089e0:	711a      	strb	r2, [r3, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2243      	movs	r2, #67	@ 0x43
 80089ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089ec:	4b02      	ldr	r3, [pc, #8]	@ (80089f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20000060 	.word	0x20000060

080089fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	220a      	movs	r2, #10
 8008a08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a0a:	4b03      	ldr	r3, [pc, #12]	@ (8008a18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	2000001c 	.word	0x2000001c

08008a1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e009      	b.n	8008a44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	33b0      	adds	r3, #176	@ 0xb0
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	32b0      	adds	r2, #176	@ 0xb0
 8008a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e008      	b.n	8008a88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	371c      	adds	r7, #28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	32b0      	adds	r2, #176	@ 0xb0
 8008aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e004      	b.n	8008ac2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	32b0      	adds	r2, #176	@ 0xb0
 8008ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e025      	b.n	8008b42 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d11f      	bne.n	8008b40 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008b08:	4b10      	ldr	r3, [pc, #64]	@ (8008b4c <USBD_CDC_TransmitPacket+0x7c>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	f003 020f 	and.w	r2, r3, #15
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4403      	add	r3, r0
 8008b22:	3318      	adds	r3, #24
 8008b24:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008b26:	4b09      	ldr	r3, [pc, #36]	@ (8008b4c <USBD_CDC_TransmitPacket+0x7c>)
 8008b28:	7819      	ldrb	r1, [r3, #0]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 ffe9 	bl	800ab0e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200000a3 	.word	0x200000a3

08008b50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	32b0      	adds	r2, #176	@ 0xb0
 8008b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	32b0      	adds	r2, #176	@ 0xb0
 8008b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e018      	b.n	8008bb0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	7c1b      	ldrb	r3, [r3, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10a      	bne.n	8008b9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b86:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <USBD_CDC_ReceivePacket+0x68>)
 8008b88:	7819      	ldrb	r1, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 ffdb 	bl	800ab50 <USBD_LL_PrepareReceive>
 8008b9a:	e008      	b.n	8008bae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b9c:	4b06      	ldr	r3, [pc, #24]	@ (8008bb8 <USBD_CDC_ReceivePacket+0x68>)
 8008b9e:	7819      	ldrb	r1, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ba6:	2340      	movs	r3, #64	@ 0x40
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 ffd1 	bl	800ab50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	200000a4 	.word	0x200000a4

08008bbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e01f      	b.n	8008c14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	79fa      	ldrb	r2, [r7, #7]
 8008c06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f001 fe4b 	bl	800a8a4 <USBD_LL_Init>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e025      	b.n	8008c80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	32ae      	adds	r2, #174	@ 0xae
 8008c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00f      	beq.n	8008c70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	32ae      	adds	r2, #174	@ 0xae
 8008c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c60:	f107 020e 	add.w	r2, r7, #14
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	4602      	mov	r2, r0
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 fe53 	bl	800a93c <USBD_LL_Start>
 8008c96:	4603      	mov	r3, r0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ca8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d009      	beq.n	8008ce4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	78fa      	ldrb	r2, [r7, #3]
 8008cda:	4611      	mov	r1, r2
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	4798      	blx	r3
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	4611      	mov	r1, r2
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d14:	2303      	movs	r3, #3
 8008d16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f001 f90c 	bl	8009f52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d01a      	beq.n	8008d94 <USBD_LL_SetupStage+0x72>
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d822      	bhi.n	8008da8 <USBD_LL_SetupStage+0x86>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <USBD_LL_SetupStage+0x4a>
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d00a      	beq.n	8008d80 <USBD_LL_SetupStage+0x5e>
 8008d6a:	e01d      	b.n	8008da8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fb63 	bl	8009440 <USBD_StdDevReq>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d7e:	e020      	b.n	8008dc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fbcb 	bl	8009524 <USBD_StdItfReq>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	73fb      	strb	r3, [r7, #15]
      break;
 8008d92:	e016      	b.n	8008dc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc2d 	bl	80095fc <USBD_StdEPReq>
 8008da2:	4603      	mov	r3, r0
 8008da4:	73fb      	strb	r3, [r7, #15]
      break;
 8008da6:	e00c      	b.n	8008dc2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 fe20 	bl	800a9fc <USBD_LL_StallEP>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc0:	bf00      	nop
  }

  return ret;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d16e      	bne.n	8008ec2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008dea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	f040 8098 	bne.w	8008f28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d913      	bls.n	8008e2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	1ad2      	subs	r2, r2, r3
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bf28      	it	cs
 8008e1e:	4613      	movcs	r3, r2
 8008e20:	461a      	mov	r2, r3
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f001 f994 	bl	800a152 <USBD_CtlContinueRx>
 8008e2a:	e07d      	b.n	8008f28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d014      	beq.n	8008e64 <USBD_LL_DataOutStage+0x98>
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d81d      	bhi.n	8008e7a <USBD_LL_DataOutStage+0xae>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <USBD_LL_DataOutStage+0x7c>
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d003      	beq.n	8008e4e <USBD_LL_DataOutStage+0x82>
 8008e46:	e018      	b.n	8008e7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	75bb      	strb	r3, [r7, #22]
            break;
 8008e4c:	e018      	b.n	8008e80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	4619      	mov	r1, r3
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 fa64 	bl	8009326 <USBD_CoreFindIF>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	75bb      	strb	r3, [r7, #22]
            break;
 8008e62:	e00d      	b.n	8008e80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 fa66 	bl	8009340 <USBD_CoreFindEP>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75bb      	strb	r3, [r7, #22]
            break;
 8008e78:	e002      	b.n	8008e80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e80:	7dbb      	ldrb	r3, [r7, #22]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d119      	bne.n	8008eba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d113      	bne.n	8008eba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e92:	7dba      	ldrb	r2, [r7, #22]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	32ae      	adds	r2, #174	@ 0xae
 8008e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ea2:	7dba      	ldrb	r2, [r7, #22]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008eaa:	7dba      	ldrb	r2, [r7, #22]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	32ae      	adds	r2, #174	@ 0xae
 8008eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f001 f95a 	bl	800a174 <USBD_CtlSendStatus>
 8008ec0:	e032      	b.n	8008f28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ec2:	7afb      	ldrb	r3, [r7, #11]
 8008ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	4619      	mov	r1, r3
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 fa37 	bl	8009340 <USBD_CoreFindEP>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ed6:	7dbb      	ldrb	r3, [r7, #22]
 8008ed8:	2bff      	cmp	r3, #255	@ 0xff
 8008eda:	d025      	beq.n	8008f28 <USBD_LL_DataOutStage+0x15c>
 8008edc:	7dbb      	ldrb	r3, [r7, #22]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d122      	bne.n	8008f28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d117      	bne.n	8008f1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008eee:	7dba      	ldrb	r2, [r7, #22]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	32ae      	adds	r2, #174	@ 0xae
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00f      	beq.n	8008f1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008efe:	7dba      	ldrb	r2, [r7, #22]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f06:	7dba      	ldrb	r2, [r7, #22]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	32ae      	adds	r2, #174	@ 0xae
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	7afa      	ldrb	r2, [r7, #11]
 8008f14:	4611      	mov	r1, r2
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	4798      	blx	r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	e000      	b.n	8008f2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b086      	sub	sp, #24
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	607a      	str	r2, [r7, #4]
 8008f3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d16f      	bne.n	8009026 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3314      	adds	r3, #20
 8008f4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d15a      	bne.n	800900c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	689a      	ldr	r2, [r3, #8]
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d914      	bls.n	8008f8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	1ad2      	subs	r2, r2, r3
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	461a      	mov	r2, r3
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f001 f8bc 	bl	800a0f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2200      	movs	r2, #0
 8008f82:	2100      	movs	r1, #0
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f001 fde3 	bl	800ab50 <USBD_LL_PrepareReceive>
 8008f8a:	e03f      	b.n	800900c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	68da      	ldr	r2, [r3, #12]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d11c      	bne.n	8008fd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d316      	bcc.n	8008fd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d20f      	bcs.n	8008fd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f001 f89d 	bl	800a0f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2100      	movs	r1, #0
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f001 fdc0 	bl	800ab50 <USBD_LL_PrepareReceive>
 8008fd0:	e01c      	b.n	800900c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d10f      	bne.n	8008ffe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d009      	beq.n	8008ffe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ffe:	2180      	movs	r1, #128	@ 0x80
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f001 fcfb 	bl	800a9fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f001 f8c7 	bl	800a19a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d03a      	beq.n	800908c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7ff fe42 	bl	8008ca0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009024:	e032      	b.n	800908c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800902c:	b2db      	uxtb	r3, r3
 800902e:	4619      	mov	r1, r3
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f985 	bl	8009340 <USBD_CoreFindEP>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	2bff      	cmp	r3, #255	@ 0xff
 800903e:	d025      	beq.n	800908c <USBD_LL_DataInStage+0x15a>
 8009040:	7dfb      	ldrb	r3, [r7, #23]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d122      	bne.n	800908c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b03      	cmp	r3, #3
 8009050:	d11c      	bne.n	800908c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009052:	7dfa      	ldrb	r2, [r7, #23]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	32ae      	adds	r2, #174	@ 0xae
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d014      	beq.n	800908c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009062:	7dfa      	ldrb	r2, [r7, #23]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800906a:	7dfa      	ldrb	r2, [r7, #23]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	32ae      	adds	r2, #174	@ 0xae
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	7afa      	ldrb	r2, [r7, #11]
 8009078:	4611      	mov	r1, r2
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	4798      	blx	r3
 800907e:	4603      	mov	r3, r0
 8009080:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009082:	7dbb      	ldrb	r3, [r7, #22]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009088:	7dbb      	ldrb	r3, [r7, #22]
 800908a:	e000      	b.n	800908e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d014      	beq.n	80090fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00e      	beq.n	80090fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	6852      	ldr	r2, [r2, #4]
 80090ea:	b2d2      	uxtb	r2, r2
 80090ec:	4611      	mov	r1, r2
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	4798      	blx	r3
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80090f8:	2303      	movs	r3, #3
 80090fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090fc:	2340      	movs	r3, #64	@ 0x40
 80090fe:	2200      	movs	r2, #0
 8009100:	2100      	movs	r1, #0
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 fc35 	bl	800a972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2240      	movs	r2, #64	@ 0x40
 8009114:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009118:	2340      	movs	r3, #64	@ 0x40
 800911a:	2200      	movs	r2, #0
 800911c:	2180      	movs	r1, #128	@ 0x80
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fc27 	bl	800a972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2240      	movs	r2, #64	@ 0x40
 800912e:	621a      	str	r2, [r3, #32]

  return ret;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b04      	cmp	r3, #4
 800916c:	d006      	beq.n	800917c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009174:	b2da      	uxtb	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2204      	movs	r2, #4
 8009180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d106      	bne.n	80091b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b082      	sub	sp, #8
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d110      	bne.n	80091f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d005      	beq.n	80091f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	32ae      	adds	r2, #174	@ 0xae
 8009218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009220:	2303      	movs	r3, #3
 8009222:	e01c      	b.n	800925e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b03      	cmp	r3, #3
 800922e:	d115      	bne.n	800925c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	32ae      	adds	r2, #174	@ 0xae
 800923a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00b      	beq.n	800925c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	32ae      	adds	r2, #174	@ 0xae
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	4611      	mov	r1, r2
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	32ae      	adds	r2, #174	@ 0xae
 800927c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009284:	2303      	movs	r3, #3
 8009286:	e01c      	b.n	80092c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b03      	cmp	r3, #3
 8009292:	d115      	bne.n	80092c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	32ae      	adds	r2, #174	@ 0xae
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	32ae      	adds	r2, #174	@ 0xae
 80092b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	4611      	mov	r1, r2
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00e      	beq.n	800931c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6852      	ldr	r2, [r2, #4]
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	4611      	mov	r1, r2
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	4798      	blx	r3
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009318:	2303      	movs	r3, #3
 800931a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800931c:	7bfb      	ldrb	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009332:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800934c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800934e:	4618      	mov	r0, r3
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b086      	sub	sp, #24
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	885b      	ldrh	r3, [r3, #2]
 8009376:	b29b      	uxth	r3, r3
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	7812      	ldrb	r2, [r2, #0]
 800937c:	4293      	cmp	r3, r2
 800937e:	d91f      	bls.n	80093c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009386:	e013      	b.n	80093b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009388:	f107 030a 	add.w	r3, r7, #10
 800938c:	4619      	mov	r1, r3
 800938e:	6978      	ldr	r0, [r7, #20]
 8009390:	f000 f81b 	bl	80093ca <USBD_GetNextDesc>
 8009394:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	785b      	ldrb	r3, [r3, #1]
 800939a:	2b05      	cmp	r3, #5
 800939c:	d108      	bne.n	80093b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	789b      	ldrb	r3, [r3, #2]
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d008      	beq.n	80093be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	885b      	ldrh	r3, [r3, #2]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	897b      	ldrh	r3, [r7, #10]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d8e5      	bhi.n	8009388 <USBD_GetEpDesc+0x2e>
 80093bc:	e000      	b.n	80093c0 <USBD_GetEpDesc+0x66>
          break;
 80093be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093c0:	693b      	ldr	r3, [r7, #16]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	7812      	ldrb	r2, [r2, #0]
 80093e0:	4413      	add	r3, r2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093f4:	68fb      	ldr	r3, [r7, #12]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009402:	b480      	push	{r7}
 8009404:	b087      	sub	sp, #28
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	3301      	adds	r3, #1
 8009418:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009420:	8a3b      	ldrh	r3, [r7, #16]
 8009422:	021b      	lsls	r3, r3, #8
 8009424:	b21a      	sxth	r2, r3
 8009426:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800942a:	4313      	orrs	r3, r2
 800942c:	b21b      	sxth	r3, r3
 800942e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009430:	89fb      	ldrh	r3, [r7, #14]
}
 8009432:	4618      	mov	r0, r3
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009456:	2b40      	cmp	r3, #64	@ 0x40
 8009458:	d005      	beq.n	8009466 <USBD_StdDevReq+0x26>
 800945a:	2b40      	cmp	r3, #64	@ 0x40
 800945c:	d857      	bhi.n	800950e <USBD_StdDevReq+0xce>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00f      	beq.n	8009482 <USBD_StdDevReq+0x42>
 8009462:	2b20      	cmp	r3, #32
 8009464:	d153      	bne.n	800950e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	32ae      	adds	r2, #174	@ 0xae
 8009470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]
      break;
 8009480:	e04a      	b.n	8009518 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2b09      	cmp	r3, #9
 8009488:	d83b      	bhi.n	8009502 <USBD_StdDevReq+0xc2>
 800948a:	a201      	add	r2, pc, #4	@ (adr r2, 8009490 <USBD_StdDevReq+0x50>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094e5 	.word	0x080094e5
 8009494:	080094f9 	.word	0x080094f9
 8009498:	08009503 	.word	0x08009503
 800949c:	080094ef 	.word	0x080094ef
 80094a0:	08009503 	.word	0x08009503
 80094a4:	080094c3 	.word	0x080094c3
 80094a8:	080094b9 	.word	0x080094b9
 80094ac:	08009503 	.word	0x08009503
 80094b0:	080094db 	.word	0x080094db
 80094b4:	080094cd 	.word	0x080094cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa3c 	bl	8009938 <USBD_GetDescriptor>
          break;
 80094c0:	e024      	b.n	800950c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fba1 	bl	8009c0c <USBD_SetAddress>
          break;
 80094ca:	e01f      	b.n	800950c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fbe0 	bl	8009c94 <USBD_SetConfig>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]
          break;
 80094d8:	e018      	b.n	800950c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fc83 	bl	8009de8 <USBD_GetConfig>
          break;
 80094e2:	e013      	b.n	800950c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fcb4 	bl	8009e54 <USBD_GetStatus>
          break;
 80094ec:	e00e      	b.n	800950c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fce3 	bl	8009ebc <USBD_SetFeature>
          break;
 80094f6:	e009      	b.n	800950c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fd07 	bl	8009f0e <USBD_ClrFeature>
          break;
 8009500:	e004      	b.n	800950c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fd5e 	bl	8009fc6 <USBD_CtlError>
          break;
 800950a:	bf00      	nop
      }
      break;
 800950c:	e004      	b.n	8009518 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fd58 	bl	8009fc6 <USBD_CtlError>
      break;
 8009516:	bf00      	nop
  }

  return ret;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop

08009524 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800953a:	2b40      	cmp	r3, #64	@ 0x40
 800953c:	d005      	beq.n	800954a <USBD_StdItfReq+0x26>
 800953e:	2b40      	cmp	r3, #64	@ 0x40
 8009540:	d852      	bhi.n	80095e8 <USBD_StdItfReq+0xc4>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <USBD_StdItfReq+0x26>
 8009546:	2b20      	cmp	r3, #32
 8009548:	d14e      	bne.n	80095e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009550:	b2db      	uxtb	r3, r3
 8009552:	3b01      	subs	r3, #1
 8009554:	2b02      	cmp	r3, #2
 8009556:	d840      	bhi.n	80095da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	889b      	ldrh	r3, [r3, #4]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b01      	cmp	r3, #1
 8009560:	d836      	bhi.n	80095d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	889b      	ldrh	r3, [r3, #4]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff fedb 	bl	8009326 <USBD_CoreFindIF>
 8009570:	4603      	mov	r3, r0
 8009572:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2bff      	cmp	r3, #255	@ 0xff
 8009578:	d01d      	beq.n	80095b6 <USBD_StdItfReq+0x92>
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d11a      	bne.n	80095b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009580:	7bba      	ldrb	r2, [r7, #14]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	32ae      	adds	r2, #174	@ 0xae
 8009586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00f      	beq.n	80095b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009590:	7bba      	ldrb	r2, [r7, #14]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009598:	7bba      	ldrb	r2, [r7, #14]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	32ae      	adds	r2, #174	@ 0xae
 800959e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095ae:	e004      	b.n	80095ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095b0:	2303      	movs	r3, #3
 80095b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095b4:	e001      	b.n	80095ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095b6:	2303      	movs	r3, #3
 80095b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	88db      	ldrh	r3, [r3, #6]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d110      	bne.n	80095e4 <USBD_StdItfReq+0xc0>
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10d      	bne.n	80095e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fdd3 	bl	800a174 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095ce:	e009      	b.n	80095e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fcf7 	bl	8009fc6 <USBD_CtlError>
          break;
 80095d8:	e004      	b.n	80095e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fcf2 	bl	8009fc6 <USBD_CtlError>
          break;
 80095e2:	e000      	b.n	80095e6 <USBD_StdItfReq+0xc2>
          break;
 80095e4:	bf00      	nop
      }
      break;
 80095e6:	e004      	b.n	80095f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fceb 	bl	8009fc6 <USBD_CtlError>
      break;
 80095f0:	bf00      	nop
  }

  return ret;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	889b      	ldrh	r3, [r3, #4]
 800960e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009618:	2b40      	cmp	r3, #64	@ 0x40
 800961a:	d007      	beq.n	800962c <USBD_StdEPReq+0x30>
 800961c:	2b40      	cmp	r3, #64	@ 0x40
 800961e:	f200 817f 	bhi.w	8009920 <USBD_StdEPReq+0x324>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d02a      	beq.n	800967c <USBD_StdEPReq+0x80>
 8009626:	2b20      	cmp	r3, #32
 8009628:	f040 817a 	bne.w	8009920 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff fe85 	bl	8009340 <USBD_CoreFindEP>
 8009636:	4603      	mov	r3, r0
 8009638:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800963a:	7b7b      	ldrb	r3, [r7, #13]
 800963c:	2bff      	cmp	r3, #255	@ 0xff
 800963e:	f000 8174 	beq.w	800992a <USBD_StdEPReq+0x32e>
 8009642:	7b7b      	ldrb	r3, [r7, #13]
 8009644:	2b00      	cmp	r3, #0
 8009646:	f040 8170 	bne.w	800992a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800964a:	7b7a      	ldrb	r2, [r7, #13]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009652:	7b7a      	ldrb	r2, [r7, #13]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	32ae      	adds	r2, #174	@ 0xae
 8009658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 8163 	beq.w	800992a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009664:	7b7a      	ldrb	r2, [r7, #13]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	32ae      	adds	r2, #174	@ 0xae
 800966a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	4798      	blx	r3
 8009676:	4603      	mov	r3, r0
 8009678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800967a:	e156      	b.n	800992a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b03      	cmp	r3, #3
 8009682:	d008      	beq.n	8009696 <USBD_StdEPReq+0x9a>
 8009684:	2b03      	cmp	r3, #3
 8009686:	f300 8145 	bgt.w	8009914 <USBD_StdEPReq+0x318>
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 809b 	beq.w	80097c6 <USBD_StdEPReq+0x1ca>
 8009690:	2b01      	cmp	r3, #1
 8009692:	d03c      	beq.n	800970e <USBD_StdEPReq+0x112>
 8009694:	e13e      	b.n	8009914 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d002      	beq.n	80096a8 <USBD_StdEPReq+0xac>
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d016      	beq.n	80096d4 <USBD_StdEPReq+0xd8>
 80096a6:	e02c      	b.n	8009702 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00d      	beq.n	80096ca <USBD_StdEPReq+0xce>
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b80      	cmp	r3, #128	@ 0x80
 80096b2:	d00a      	beq.n	80096ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f001 f99f 	bl	800a9fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096be:	2180      	movs	r1, #128	@ 0x80
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f99b 	bl	800a9fc <USBD_LL_StallEP>
 80096c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096c8:	e020      	b.n	800970c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fc7a 	bl	8009fc6 <USBD_CtlError>
              break;
 80096d2:	e01b      	b.n	800970c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	885b      	ldrh	r3, [r3, #2]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10e      	bne.n	80096fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <USBD_StdEPReq+0xfe>
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	2b80      	cmp	r3, #128	@ 0x80
 80096e6:	d008      	beq.n	80096fa <USBD_StdEPReq+0xfe>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	88db      	ldrh	r3, [r3, #6]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d104      	bne.n	80096fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 f981 	bl	800a9fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fd3a 	bl	800a174 <USBD_CtlSendStatus>

              break;
 8009700:	e004      	b.n	800970c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fc5e 	bl	8009fc6 <USBD_CtlError>
              break;
 800970a:	bf00      	nop
          }
          break;
 800970c:	e107      	b.n	800991e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b02      	cmp	r3, #2
 8009718:	d002      	beq.n	8009720 <USBD_StdEPReq+0x124>
 800971a:	2b03      	cmp	r3, #3
 800971c:	d016      	beq.n	800974c <USBD_StdEPReq+0x150>
 800971e:	e04b      	b.n	80097b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009720:	7bbb      	ldrb	r3, [r7, #14]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00d      	beq.n	8009742 <USBD_StdEPReq+0x146>
 8009726:	7bbb      	ldrb	r3, [r7, #14]
 8009728:	2b80      	cmp	r3, #128	@ 0x80
 800972a:	d00a      	beq.n	8009742 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800972c:	7bbb      	ldrb	r3, [r7, #14]
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 f963 	bl	800a9fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009736:	2180      	movs	r1, #128	@ 0x80
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f001 f95f 	bl	800a9fc <USBD_LL_StallEP>
 800973e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009740:	e040      	b.n	80097c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fc3e 	bl	8009fc6 <USBD_CtlError>
              break;
 800974a:	e03b      	b.n	80097c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	885b      	ldrh	r3, [r3, #2]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d136      	bne.n	80097c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800975a:	2b00      	cmp	r3, #0
 800975c:	d004      	beq.n	8009768 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 f969 	bl	800aa3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fd03 	bl	800a174 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff fde4 	bl	8009340 <USBD_CoreFindEP>
 8009778:	4603      	mov	r3, r0
 800977a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800977c:	7b7b      	ldrb	r3, [r7, #13]
 800977e:	2bff      	cmp	r3, #255	@ 0xff
 8009780:	d01f      	beq.n	80097c2 <USBD_StdEPReq+0x1c6>
 8009782:	7b7b      	ldrb	r3, [r7, #13]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d11c      	bne.n	80097c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009788:	7b7a      	ldrb	r2, [r7, #13]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009790:	7b7a      	ldrb	r2, [r7, #13]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	32ae      	adds	r2, #174	@ 0xae
 8009796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d010      	beq.n	80097c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097a0:	7b7a      	ldrb	r2, [r7, #13]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	32ae      	adds	r2, #174	@ 0xae
 80097a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
 80097b2:	4603      	mov	r3, r0
 80097b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097b6:	e004      	b.n	80097c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fc03 	bl	8009fc6 <USBD_CtlError>
              break;
 80097c0:	e000      	b.n	80097c4 <USBD_StdEPReq+0x1c8>
              break;
 80097c2:	bf00      	nop
          }
          break;
 80097c4:	e0ab      	b.n	800991e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d002      	beq.n	80097d8 <USBD_StdEPReq+0x1dc>
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d032      	beq.n	800983c <USBD_StdEPReq+0x240>
 80097d6:	e097      	b.n	8009908 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d007      	beq.n	80097ee <USBD_StdEPReq+0x1f2>
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	2b80      	cmp	r3, #128	@ 0x80
 80097e2:	d004      	beq.n	80097ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fbed 	bl	8009fc6 <USBD_CtlError>
                break;
 80097ec:	e091      	b.n	8009912 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da0b      	bge.n	800980e <USBD_StdEPReq+0x212>
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	3310      	adds	r3, #16
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4413      	add	r3, r2
 800980a:	3304      	adds	r3, #4
 800980c:	e00b      	b.n	8009826 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800980e:	7bbb      	ldrb	r3, [r7, #14]
 8009810:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	4413      	add	r3, r2
 8009824:	3304      	adds	r3, #4
 8009826:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2202      	movs	r2, #2
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fc43 	bl	800a0c0 <USBD_CtlSendData>
              break;
 800983a:	e06a      	b.n	8009912 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800983c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009840:	2b00      	cmp	r3, #0
 8009842:	da11      	bge.n	8009868 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009844:	7bbb      	ldrb	r3, [r7, #14]
 8009846:	f003 020f 	and.w	r2, r3, #15
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	3324      	adds	r3, #36	@ 0x24
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d117      	bne.n	800988e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fbb0 	bl	8009fc6 <USBD_CtlError>
                  break;
 8009866:	e054      	b.n	8009912 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	f003 020f 	and.w	r2, r3, #15
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d104      	bne.n	800988e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb9d 	bl	8009fc6 <USBD_CtlError>
                  break;
 800988c:	e041      	b.n	8009912 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800988e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009892:	2b00      	cmp	r3, #0
 8009894:	da0b      	bge.n	80098ae <USBD_StdEPReq+0x2b2>
 8009896:	7bbb      	ldrb	r3, [r7, #14]
 8009898:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800989c:	4613      	mov	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	3310      	adds	r3, #16
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	3304      	adds	r3, #4
 80098ac:	e00b      	b.n	80098c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b4:	4613      	mov	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	4413      	add	r3, r2
 80098c4:	3304      	adds	r3, #4
 80098c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <USBD_StdEPReq+0x2d8>
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b80      	cmp	r3, #128	@ 0x80
 80098d2:	d103      	bne.n	80098dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	e00e      	b.n	80098fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 f8c9 	bl	800aa78 <USBD_LL_IsStallEP>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2201      	movs	r2, #1
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	e002      	b.n	80098fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2202      	movs	r2, #2
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fbdd 	bl	800a0c0 <USBD_CtlSendData>
              break;
 8009906:	e004      	b.n	8009912 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fb5b 	bl	8009fc6 <USBD_CtlError>
              break;
 8009910:	bf00      	nop
          }
          break;
 8009912:	e004      	b.n	800991e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fb55 	bl	8009fc6 <USBD_CtlError>
          break;
 800991c:	bf00      	nop
      }
      break;
 800991e:	e005      	b.n	800992c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fb4f 	bl	8009fc6 <USBD_CtlError>
      break;
 8009928:	e000      	b.n	800992c <USBD_StdEPReq+0x330>
      break;
 800992a:	bf00      	nop
  }

  return ret;
 800992c:	7bfb      	ldrb	r3, [r7, #15]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
	...

08009938 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	885b      	ldrh	r3, [r3, #2]
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	b29b      	uxth	r3, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	2b06      	cmp	r3, #6
 800995a:	f200 8128 	bhi.w	8009bae <USBD_GetDescriptor+0x276>
 800995e:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <USBD_GetDescriptor+0x2c>)
 8009960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009964:	08009981 	.word	0x08009981
 8009968:	08009999 	.word	0x08009999
 800996c:	080099d9 	.word	0x080099d9
 8009970:	08009baf 	.word	0x08009baf
 8009974:	08009baf 	.word	0x08009baf
 8009978:	08009b4f 	.word	0x08009b4f
 800997c:	08009b7b 	.word	0x08009b7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	7c12      	ldrb	r2, [r2, #16]
 800998c:	f107 0108 	add.w	r1, r7, #8
 8009990:	4610      	mov	r0, r2
 8009992:	4798      	blx	r3
 8009994:	60f8      	str	r0, [r7, #12]
      break;
 8009996:	e112      	b.n	8009bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	7c1b      	ldrb	r3, [r3, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10d      	bne.n	80099bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a8:	f107 0208 	add.w	r2, r7, #8
 80099ac:	4610      	mov	r0, r2
 80099ae:	4798      	blx	r3
 80099b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3301      	adds	r3, #1
 80099b6:	2202      	movs	r2, #2
 80099b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099ba:	e100      	b.n	8009bbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c4:	f107 0208 	add.w	r2, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3301      	adds	r3, #1
 80099d2:	2202      	movs	r2, #2
 80099d4:	701a      	strb	r2, [r3, #0]
      break;
 80099d6:	e0f2      	b.n	8009bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	885b      	ldrh	r3, [r3, #2]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b05      	cmp	r3, #5
 80099e0:	f200 80ac 	bhi.w	8009b3c <USBD_GetDescriptor+0x204>
 80099e4:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <USBD_GetDescriptor+0xb4>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a05 	.word	0x08009a05
 80099f0:	08009a39 	.word	0x08009a39
 80099f4:	08009a6d 	.word	0x08009a6d
 80099f8:	08009aa1 	.word	0x08009aa1
 80099fc:	08009ad5 	.word	0x08009ad5
 8009a00:	08009b09 	.word	0x08009b09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	7c12      	ldrb	r2, [r2, #16]
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	4610      	mov	r0, r2
 8009a22:	4798      	blx	r3
 8009a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a26:	e091      	b.n	8009b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 facb 	bl	8009fc6 <USBD_CtlError>
            err++;
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	3301      	adds	r3, #1
 8009a34:	72fb      	strb	r3, [r7, #11]
          break;
 8009a36:	e089      	b.n	8009b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00b      	beq.n	8009a5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7c12      	ldrb	r2, [r2, #16]
 8009a50:	f107 0108 	add.w	r1, r7, #8
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
 8009a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5a:	e077      	b.n	8009b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fab1 	bl	8009fc6 <USBD_CtlError>
            err++;
 8009a64:	7afb      	ldrb	r3, [r7, #11]
 8009a66:	3301      	adds	r3, #1
 8009a68:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6a:	e06f      	b.n	8009b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00b      	beq.n	8009a90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7c12      	ldrb	r2, [r2, #16]
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a8e:	e05d      	b.n	8009b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fa97 	bl	8009fc6 <USBD_CtlError>
            err++;
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a9e:	e055      	b.n	8009b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7c12      	ldrb	r2, [r2, #16]
 8009ab8:	f107 0108 	add.w	r1, r7, #8
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac2:	e043      	b.n	8009b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa7d 	bl	8009fc6 <USBD_CtlError>
            err++;
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad2:	e03b      	b.n	8009b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af6:	e029      	b.n	8009b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa63 	bl	8009fc6 <USBD_CtlError>
            err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
          break;
 8009b06:	e021      	b.n	8009b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	7c12      	ldrb	r2, [r2, #16]
 8009b20:	f107 0108 	add.w	r1, r7, #8
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2a:	e00f      	b.n	8009b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa49 	bl	8009fc6 <USBD_CtlError>
            err++;
 8009b34:	7afb      	ldrb	r3, [r7, #11]
 8009b36:	3301      	adds	r3, #1
 8009b38:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3a:	e007      	b.n	8009b4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa41 	bl	8009fc6 <USBD_CtlError>
          err++;
 8009b44:	7afb      	ldrb	r3, [r7, #11]
 8009b46:	3301      	adds	r3, #1
 8009b48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b4a:	bf00      	nop
      }
      break;
 8009b4c:	e037      	b.n	8009bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7c1b      	ldrb	r3, [r3, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d109      	bne.n	8009b6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b5e:	f107 0208 	add.w	r2, r7, #8
 8009b62:	4610      	mov	r0, r2
 8009b64:	4798      	blx	r3
 8009b66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b68:	e029      	b.n	8009bbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fa2a 	bl	8009fc6 <USBD_CtlError>
        err++;
 8009b72:	7afb      	ldrb	r3, [r7, #11]
 8009b74:	3301      	adds	r3, #1
 8009b76:	72fb      	strb	r3, [r7, #11]
      break;
 8009b78:	e021      	b.n	8009bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	7c1b      	ldrb	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10d      	bne.n	8009b9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8a:	f107 0208 	add.w	r2, r7, #8
 8009b8e:	4610      	mov	r0, r2
 8009b90:	4798      	blx	r3
 8009b92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	3301      	adds	r3, #1
 8009b98:	2207      	movs	r2, #7
 8009b9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b9c:	e00f      	b.n	8009bbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fa10 	bl	8009fc6 <USBD_CtlError>
        err++;
 8009ba6:	7afb      	ldrb	r3, [r7, #11]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	72fb      	strb	r3, [r7, #11]
      break;
 8009bac:	e007      	b.n	8009bbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fa08 	bl	8009fc6 <USBD_CtlError>
      err++;
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	72fb      	strb	r3, [r7, #11]
      break;
 8009bbc:	bf00      	nop
  }

  if (err != 0U)
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d11e      	bne.n	8009c02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	88db      	ldrh	r3, [r3, #6]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d016      	beq.n	8009bfa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009bcc:	893b      	ldrh	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00e      	beq.n	8009bf0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	88da      	ldrh	r2, [r3, #6]
 8009bd6:	893b      	ldrh	r3, [r7, #8]
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	bf28      	it	cs
 8009bdc:	4613      	movcs	r3, r2
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009be2:	893b      	ldrh	r3, [r7, #8]
 8009be4:	461a      	mov	r2, r3
 8009be6:	68f9      	ldr	r1, [r7, #12]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fa69 	bl	800a0c0 <USBD_CtlSendData>
 8009bee:	e009      	b.n	8009c04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f9e7 	bl	8009fc6 <USBD_CtlError>
 8009bf8:	e004      	b.n	8009c04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 faba 	bl	800a174 <USBD_CtlSendStatus>
 8009c00:	e000      	b.n	8009c04 <USBD_GetDescriptor+0x2cc>
    return;
 8009c02:	bf00      	nop
  }
}
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop

08009c0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	889b      	ldrh	r3, [r3, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d131      	bne.n	8009c82 <USBD_SetAddress+0x76>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	88db      	ldrh	r3, [r3, #6]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d12d      	bne.n	8009c82 <USBD_SetAddress+0x76>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	885b      	ldrh	r3, [r3, #2]
 8009c2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c2c:	d829      	bhi.n	8009c82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	885b      	ldrh	r3, [r3, #2]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d104      	bne.n	8009c50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f9bc 	bl	8009fc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4e:	e01d      	b.n	8009c8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	7bfa      	ldrb	r2, [r7, #15]
 8009c54:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 ff37 	bl	800aad0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa86 	bl	800a174 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2202      	movs	r2, #2
 8009c72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c76:	e009      	b.n	8009c8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c80:	e004      	b.n	8009c8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f99e 	bl	8009fc6 <USBD_CtlError>
  }
}
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cac:	4b4d      	ldr	r3, [pc, #308]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d905      	bls.n	8009cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f985 	bl	8009fc6 <USBD_CtlError>
    return USBD_FAIL;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e08c      	b.n	8009dda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d002      	beq.n	8009cd2 <USBD_SetConfig+0x3e>
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d029      	beq.n	8009d24 <USBD_SetConfig+0x90>
 8009cd0:	e075      	b.n	8009dbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009cd2:	4b44      	ldr	r3, [pc, #272]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d020      	beq.n	8009d1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009cda:	4b42      	ldr	r3, [pc, #264]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7fe ffe3 	bl	8008cb6 <USBD_SetClassConfig>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d008      	beq.n	8009d0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f962 	bl	8009fc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2202      	movs	r2, #2
 8009d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d0a:	e065      	b.n	8009dd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fa31 	bl	800a174 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2203      	movs	r2, #3
 8009d16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d1a:	e05d      	b.n	8009dd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa29 	bl	800a174 <USBD_CtlSendStatus>
      break;
 8009d22:	e059      	b.n	8009dd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d24:	4b2f      	ldr	r3, [pc, #188]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d112      	bne.n	8009d52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009d34:	4b2b      	ldr	r3, [pc, #172]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d3e:	4b29      	ldr	r3, [pc, #164]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7fe ffd2 	bl	8008cee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fa12 	bl	800a174 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d50:	e042      	b.n	8009dd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d52:	4b24      	ldr	r3, [pc, #144]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d02a      	beq.n	8009db6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7fe ffc0 	bl	8008cee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d78:	4b1a      	ldr	r3, [pc, #104]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fe ff99 	bl	8008cb6 <USBD_SetClassConfig>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00f      	beq.n	8009dae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f918 	bl	8009fc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7fe ffa5 	bl	8008cee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009dac:	e014      	b.n	8009dd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f9e0 	bl	800a174 <USBD_CtlSendStatus>
      break;
 8009db4:	e010      	b.n	8009dd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f9dc 	bl	800a174 <USBD_CtlSendStatus>
      break;
 8009dbc:	e00c      	b.n	8009dd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f900 	bl	8009fc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dc6:	4b07      	ldr	r3, [pc, #28]	@ (8009de4 <USBD_SetConfig+0x150>)
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7fe ff8e 	bl	8008cee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8009dd6:	bf00      	nop
  }

  return ret;
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20006b0c 	.word	0x20006b0c

08009de8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	88db      	ldrh	r3, [r3, #6]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d004      	beq.n	8009e04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f8e2 	bl	8009fc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e02:	e023      	b.n	8009e4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	dc02      	bgt.n	8009e16 <USBD_GetConfig+0x2e>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dc03      	bgt.n	8009e1c <USBD_GetConfig+0x34>
 8009e14:	e015      	b.n	8009e42 <USBD_GetConfig+0x5a>
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d00b      	beq.n	8009e32 <USBD_GetConfig+0x4a>
 8009e1a:	e012      	b.n	8009e42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3308      	adds	r3, #8
 8009e26:	2201      	movs	r2, #1
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f948 	bl	800a0c0 <USBD_CtlSendData>
        break;
 8009e30:	e00c      	b.n	8009e4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3304      	adds	r3, #4
 8009e36:	2201      	movs	r2, #1
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f940 	bl	800a0c0 <USBD_CtlSendData>
        break;
 8009e40:	e004      	b.n	8009e4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f8be 	bl	8009fc6 <USBD_CtlError>
        break;
 8009e4a:	bf00      	nop
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	3b01      	subs	r3, #1
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d81e      	bhi.n	8009eaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	88db      	ldrh	r3, [r3, #6]
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d004      	beq.n	8009e7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f8a5 	bl	8009fc6 <USBD_CtlError>
        break;
 8009e7c:	e01a      	b.n	8009eb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	f043 0202 	orr.w	r2, r3, #2
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	330c      	adds	r3, #12
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f90c 	bl	800a0c0 <USBD_CtlSendData>
      break;
 8009ea8:	e004      	b.n	8009eb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f88a 	bl	8009fc6 <USBD_CtlError>
      break;
 8009eb2:	bf00      	nop
  }
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	885b      	ldrh	r3, [r3, #2]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d107      	bne.n	8009ede <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f94c 	bl	800a174 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009edc:	e013      	b.n	8009f06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	885b      	ldrh	r3, [r3, #2]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d10b      	bne.n	8009efe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	889b      	ldrh	r3, [r3, #4]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f93c 	bl	800a174 <USBD_CtlSendStatus>
}
 8009efc:	e003      	b.n	8009f06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f860 	bl	8009fc6 <USBD_CtlError>
}
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b082      	sub	sp, #8
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	3b01      	subs	r3, #1
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d80b      	bhi.n	8009f3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	885b      	ldrh	r3, [r3, #2]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d10c      	bne.n	8009f48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f91c 	bl	800a174 <USBD_CtlSendStatus>
      }
      break;
 8009f3c:	e004      	b.n	8009f48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f840 	bl	8009fc6 <USBD_CtlError>
      break;
 8009f46:	e000      	b.n	8009f4a <USBD_ClrFeature+0x3c>
      break;
 8009f48:	bf00      	nop
  }
}
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	781a      	ldrb	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7ff fa40 	bl	8009402 <SWAPBYTE>
 8009f82:	4603      	mov	r3, r0
 8009f84:	461a      	mov	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3301      	adds	r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f7ff fa33 	bl	8009402 <SWAPBYTE>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff fa26 	bl	8009402 <SWAPBYTE>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	80da      	strh	r2, [r3, #6]
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fd0:	2180      	movs	r1, #128	@ 0x80
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fd12 	bl	800a9fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fd8:	2100      	movs	r1, #0
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fd0e 	bl	800a9fc <USBD_LL_StallEP>
}
 8009fe0:	bf00      	nop
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d042      	beq.n	800a084 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a002:	6938      	ldr	r0, [r7, #16]
 800a004:	f000 f842 	bl	800a08c <USBD_GetLen>
 800a008:	4603      	mov	r3, r0
 800a00a:	3301      	adds	r3, #1
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a012:	d808      	bhi.n	800a026 <USBD_GetString+0x3e>
 800a014:	6938      	ldr	r0, [r7, #16]
 800a016:	f000 f839 	bl	800a08c <USBD_GetLen>
 800a01a:	4603      	mov	r3, r0
 800a01c:	3301      	adds	r3, #1
 800a01e:	b29b      	uxth	r3, r3
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	b29a      	uxth	r2, r3
 800a024:	e001      	b.n	800a02a <USBD_GetString+0x42>
 800a026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	4413      	add	r3, r2
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	7812      	ldrb	r2, [r2, #0]
 800a038:	701a      	strb	r2, [r3, #0]
  idx++;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	3301      	adds	r3, #1
 800a03e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	4413      	add	r3, r2
 800a046:	2203      	movs	r2, #3
 800a048:	701a      	strb	r2, [r3, #0]
  idx++;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	3301      	adds	r3, #1
 800a04e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a050:	e013      	b.n	800a07a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	4413      	add	r3, r2
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	7812      	ldrb	r2, [r2, #0]
 800a05c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	3301      	adds	r3, #1
 800a062:	613b      	str	r3, [r7, #16]
    idx++;
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	3301      	adds	r3, #1
 800a068:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	4413      	add	r3, r2
 800a070:	2200      	movs	r2, #0
 800a072:	701a      	strb	r2, [r3, #0]
    idx++;
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	3301      	adds	r3, #1
 800a078:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e7      	bne.n	800a052 <USBD_GetString+0x6a>
 800a082:	e000      	b.n	800a086 <USBD_GetString+0x9e>
    return;
 800a084:	bf00      	nop
  }
}
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a09c:	e005      	b.n	800a0aa <USBD_GetLen+0x1e>
  {
    len++;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f5      	bne.n	800a09e <USBD_GetLen+0x12>
  }

  return len;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 fd11 	bl	800ab0e <USBD_LL_Transmit>

  return USBD_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	60b9      	str	r1, [r7, #8]
 800a100:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	2100      	movs	r1, #0
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 fd00 	bl	800ab0e <USBD_LL_Transmit>

  return USBD_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2203      	movs	r2, #3
 800a128:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	2100      	movs	r1, #0
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f000 fd04 	bl	800ab50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	2100      	movs	r1, #0
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 fcf3 	bl	800ab50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2204      	movs	r2, #4
 800a180:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a184:	2300      	movs	r3, #0
 800a186:	2200      	movs	r2, #0
 800a188:	2100      	movs	r1, #0
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fcbf 	bl	800ab0e <USBD_LL_Transmit>

  return USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2205      	movs	r2, #5
 800a1a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fccd 	bl	800ab50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4912      	ldr	r1, [pc, #72]	@ (800a210 <MX_USB_DEVICE_Init+0x50>)
 800a1c8:	4812      	ldr	r0, [pc, #72]	@ (800a214 <MX_USB_DEVICE_Init+0x54>)
 800a1ca:	f7fe fcf7 	bl	8008bbc <USBD_Init>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1d4:	f7f6 fcb6 	bl	8000b44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1d8:	490f      	ldr	r1, [pc, #60]	@ (800a218 <MX_USB_DEVICE_Init+0x58>)
 800a1da:	480e      	ldr	r0, [pc, #56]	@ (800a214 <MX_USB_DEVICE_Init+0x54>)
 800a1dc:	f7fe fd1e 	bl	8008c1c <USBD_RegisterClass>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1e6:	f7f6 fcad 	bl	8000b44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1ea:	490c      	ldr	r1, [pc, #48]	@ (800a21c <MX_USB_DEVICE_Init+0x5c>)
 800a1ec:	4809      	ldr	r0, [pc, #36]	@ (800a214 <MX_USB_DEVICE_Init+0x54>)
 800a1ee:	f7fe fc15 	bl	8008a1c <USBD_CDC_RegisterInterface>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1f8:	f7f6 fca4 	bl	8000b44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1fc:	4805      	ldr	r0, [pc, #20]	@ (800a214 <MX_USB_DEVICE_Init+0x54>)
 800a1fe:	f7fe fd43 	bl	8008c88 <USBD_Start>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a208:	f7f6 fc9c 	bl	8000b44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a20c:	bf00      	nop
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	200000bc 	.word	0x200000bc
 800a214:	20006b10 	.word	0x20006b10
 800a218:	20000028 	.word	0x20000028
 800a21c:	200000a8 	.word	0x200000a8

0800a220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a224:	2200      	movs	r2, #0
 800a226:	4905      	ldr	r1, [pc, #20]	@ (800a23c <CDC_Init_FS+0x1c>)
 800a228:	4805      	ldr	r0, [pc, #20]	@ (800a240 <CDC_Init_FS+0x20>)
 800a22a:	f7fe fc11 	bl	8008a50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a22e:	4905      	ldr	r1, [pc, #20]	@ (800a244 <CDC_Init_FS+0x24>)
 800a230:	4803      	ldr	r0, [pc, #12]	@ (800a240 <CDC_Init_FS+0x20>)
 800a232:	f7fe fc2f 	bl	8008a94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a236:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a238:	4618      	mov	r0, r3
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	200075ec 	.word	0x200075ec
 800a240:	20006b10 	.word	0x20006b10
 800a244:	20006dec 	.word	0x20006dec

0800a248 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a248:	b480      	push	{r7}
 800a24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a24c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a24e:	4618      	mov	r0, r3
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	71fb      	strb	r3, [r7, #7]
 800a264:	4613      	mov	r3, r2
 800a266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	2b23      	cmp	r3, #35	@ 0x23
 800a26c:	d84a      	bhi.n	800a304 <CDC_Control_FS+0xac>
 800a26e:	a201      	add	r2, pc, #4	@ (adr r2, 800a274 <CDC_Control_FS+0x1c>)
 800a270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a274:	0800a305 	.word	0x0800a305
 800a278:	0800a305 	.word	0x0800a305
 800a27c:	0800a305 	.word	0x0800a305
 800a280:	0800a305 	.word	0x0800a305
 800a284:	0800a305 	.word	0x0800a305
 800a288:	0800a305 	.word	0x0800a305
 800a28c:	0800a305 	.word	0x0800a305
 800a290:	0800a305 	.word	0x0800a305
 800a294:	0800a305 	.word	0x0800a305
 800a298:	0800a305 	.word	0x0800a305
 800a29c:	0800a305 	.word	0x0800a305
 800a2a0:	0800a305 	.word	0x0800a305
 800a2a4:	0800a305 	.word	0x0800a305
 800a2a8:	0800a305 	.word	0x0800a305
 800a2ac:	0800a305 	.word	0x0800a305
 800a2b0:	0800a305 	.word	0x0800a305
 800a2b4:	0800a305 	.word	0x0800a305
 800a2b8:	0800a305 	.word	0x0800a305
 800a2bc:	0800a305 	.word	0x0800a305
 800a2c0:	0800a305 	.word	0x0800a305
 800a2c4:	0800a305 	.word	0x0800a305
 800a2c8:	0800a305 	.word	0x0800a305
 800a2cc:	0800a305 	.word	0x0800a305
 800a2d0:	0800a305 	.word	0x0800a305
 800a2d4:	0800a305 	.word	0x0800a305
 800a2d8:	0800a305 	.word	0x0800a305
 800a2dc:	0800a305 	.word	0x0800a305
 800a2e0:	0800a305 	.word	0x0800a305
 800a2e4:	0800a305 	.word	0x0800a305
 800a2e8:	0800a305 	.word	0x0800a305
 800a2ec:	0800a305 	.word	0x0800a305
 800a2f0:	0800a305 	.word	0x0800a305
 800a2f4:	0800a305 	.word	0x0800a305
 800a2f8:	0800a305 	.word	0x0800a305
 800a2fc:	0800a305 	.word	0x0800a305
 800a300:	0800a305 	.word	0x0800a305
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a304:	bf00      	nop
  }

  return (USBD_OK);
 800a306:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	4805      	ldr	r0, [pc, #20]	@ (800a338 <CDC_Receive_FS+0x24>)
 800a322:	f7fe fbb7 	bl	8008a94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a326:	4804      	ldr	r0, [pc, #16]	@ (800a338 <CDC_Receive_FS+0x24>)
 800a328:	f7fe fc12 	bl	8008b50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a32c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20006b10 	.word	0x20006b10

0800a33c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a34c:	4b0d      	ldr	r3, [pc, #52]	@ (800a384 <CDC_Transmit_FS+0x48>)
 800a34e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a352:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a35e:	2301      	movs	r3, #1
 800a360:	e00b      	b.n	800a37a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a362:	887b      	ldrh	r3, [r7, #2]
 800a364:	461a      	mov	r2, r3
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	4806      	ldr	r0, [pc, #24]	@ (800a384 <CDC_Transmit_FS+0x48>)
 800a36a:	f7fe fb71 	bl	8008a50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a36e:	4805      	ldr	r0, [pc, #20]	@ (800a384 <CDC_Transmit_FS+0x48>)
 800a370:	f7fe fbae 	bl	8008ad0 <USBD_CDC_TransmitPacket>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20006b10 	.word	0x20006b10

0800a388 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4613      	mov	r3, r2
 800a394:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a39a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void){
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3b2:	4b09      	ldr	r3, [pc, #36]	@ (800a3d8 <CDC_Transmit_Is_Busy+0x2c>)
 800a3b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3b8:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <CDC_Transmit_Is_Busy+0x1c>
    return USBD_BUSY;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e000      	b.n	800a3ca <CDC_Transmit_Is_Busy+0x1e>
  else
    return USBD_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	20006b10 	.word	0x20006b10

0800a3dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2212      	movs	r2, #18
 800a3ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3ee:	4b03      	ldr	r3, [pc, #12]	@ (800a3fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	200000d8 	.word	0x200000d8

0800a400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	6039      	str	r1, [r7, #0]
 800a40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2204      	movs	r2, #4
 800a410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a412:	4b03      	ldr	r3, [pc, #12]	@ (800a420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	200000ec 	.word	0x200000ec

0800a424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	6039      	str	r1, [r7, #0]
 800a42e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d105      	bne.n	800a442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	4907      	ldr	r1, [pc, #28]	@ (800a458 <USBD_FS_ProductStrDescriptor+0x34>)
 800a43a:	4808      	ldr	r0, [pc, #32]	@ (800a45c <USBD_FS_ProductStrDescriptor+0x38>)
 800a43c:	f7ff fdd4 	bl	8009fe8 <USBD_GetString>
 800a440:	e004      	b.n	800a44c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	4904      	ldr	r1, [pc, #16]	@ (800a458 <USBD_FS_ProductStrDescriptor+0x34>)
 800a446:	4805      	ldr	r0, [pc, #20]	@ (800a45c <USBD_FS_ProductStrDescriptor+0x38>)
 800a448:	f7ff fdce 	bl	8009fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a44c:	4b02      	ldr	r3, [pc, #8]	@ (800a458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20007dec 	.word	0x20007dec
 800a45c:	0800bc18 	.word	0x0800bc18

0800a460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	4904      	ldr	r1, [pc, #16]	@ (800a480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a470:	4804      	ldr	r0, [pc, #16]	@ (800a484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a472:	f7ff fdb9 	bl	8009fe8 <USBD_GetString>
  return USBD_StrDesc;
 800a476:	4b02      	ldr	r3, [pc, #8]	@ (800a480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20007dec 	.word	0x20007dec
 800a484:	0800bc30 	.word	0x0800bc30

0800a488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	6039      	str	r1, [r7, #0]
 800a492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	221a      	movs	r2, #26
 800a498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a49a:	f000 f843 	bl	800a524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a49e:	4b02      	ldr	r3, [pc, #8]	@ (800a4a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	200000f0 	.word	0x200000f0

0800a4ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	6039      	str	r1, [r7, #0]
 800a4b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d105      	bne.n	800a4ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	4907      	ldr	r1, [pc, #28]	@ (800a4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4c2:	4808      	ldr	r0, [pc, #32]	@ (800a4e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4c4:	f7ff fd90 	bl	8009fe8 <USBD_GetString>
 800a4c8:	e004      	b.n	800a4d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	4904      	ldr	r1, [pc, #16]	@ (800a4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4ce:	4805      	ldr	r0, [pc, #20]	@ (800a4e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4d0:	f7ff fd8a 	bl	8009fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4d4:	4b02      	ldr	r3, [pc, #8]	@ (800a4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20007dec 	.word	0x20007dec
 800a4e4:	0800bc44 	.word	0x0800bc44

0800a4e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	6039      	str	r1, [r7, #0]
 800a4f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d105      	bne.n	800a506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4907      	ldr	r1, [pc, #28]	@ (800a51c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4fe:	4808      	ldr	r0, [pc, #32]	@ (800a520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a500:	f7ff fd72 	bl	8009fe8 <USBD_GetString>
 800a504:	e004      	b.n	800a510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	4904      	ldr	r1, [pc, #16]	@ (800a51c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a50a:	4805      	ldr	r0, [pc, #20]	@ (800a520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a50c:	f7ff fd6c 	bl	8009fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a510:	4b02      	ldr	r3, [pc, #8]	@ (800a51c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20007dec 	.word	0x20007dec
 800a520:	0800bc50 	.word	0x0800bc50

0800a524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a52a:	4b0f      	ldr	r3, [pc, #60]	@ (800a568 <Get_SerialNum+0x44>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a530:	4b0e      	ldr	r3, [pc, #56]	@ (800a56c <Get_SerialNum+0x48>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a536:	4b0e      	ldr	r3, [pc, #56]	@ (800a570 <Get_SerialNum+0x4c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d009      	beq.n	800a55e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a54a:	2208      	movs	r2, #8
 800a54c:	4909      	ldr	r1, [pc, #36]	@ (800a574 <Get_SerialNum+0x50>)
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 f814 	bl	800a57c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a554:	2204      	movs	r2, #4
 800a556:	4908      	ldr	r1, [pc, #32]	@ (800a578 <Get_SerialNum+0x54>)
 800a558:	68b8      	ldr	r0, [r7, #8]
 800a55a:	f000 f80f 	bl	800a57c <IntToUnicode>
  }
}
 800a55e:	bf00      	nop
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	1fff7a10 	.word	0x1fff7a10
 800a56c:	1fff7a14 	.word	0x1fff7a14
 800a570:	1fff7a18 	.word	0x1fff7a18
 800a574:	200000f2 	.word	0x200000f2
 800a578:	20000102 	.word	0x20000102

0800a57c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a58e:	2300      	movs	r3, #0
 800a590:	75fb      	strb	r3, [r7, #23]
 800a592:	e027      	b.n	800a5e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	0f1b      	lsrs	r3, r3, #28
 800a598:	2b09      	cmp	r3, #9
 800a59a:	d80b      	bhi.n	800a5b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	0f1b      	lsrs	r3, r3, #28
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3230      	adds	r2, #48	@ 0x30
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	e00a      	b.n	800a5ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	0f1b      	lsrs	r3, r3, #28
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4619      	mov	r1, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	440b      	add	r3, r1
 800a5c4:	3237      	adds	r2, #55	@ 0x37
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	4413      	add	r3, r2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]
 800a5e4:	7dfa      	ldrb	r2, [r7, #23]
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d3d3      	bcc.n	800a594 <IntToUnicode+0x18>
  }
}
 800a5ec:	bf00      	nop
 800a5ee:	bf00      	nop
 800a5f0:	371c      	adds	r7, #28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
	...

0800a5fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08a      	sub	sp, #40	@ 0x28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a604:	f107 0314 	add.w	r3, r7, #20
 800a608:	2200      	movs	r2, #0
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	605a      	str	r2, [r3, #4]
 800a60e:	609a      	str	r2, [r3, #8]
 800a610:	60da      	str	r2, [r3, #12]
 800a612:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a61c:	d147      	bne.n	800a6ae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a61e:	2300      	movs	r3, #0
 800a620:	613b      	str	r3, [r7, #16]
 800a622:	4b25      	ldr	r3, [pc, #148]	@ (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a626:	4a24      	ldr	r2, [pc, #144]	@ (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a628:	f043 0301 	orr.w	r3, r3, #1
 800a62c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a62e:	4b22      	ldr	r3, [pc, #136]	@ (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	613b      	str	r3, [r7, #16]
 800a638:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a63a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800a63e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a640:	2302      	movs	r3, #2
 800a642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a644:	2300      	movs	r3, #0
 800a646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a648:	2303      	movs	r3, #3
 800a64a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a64c:	230a      	movs	r3, #10
 800a64e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a650:	f107 0314 	add.w	r3, r7, #20
 800a654:	4619      	mov	r1, r3
 800a656:	4819      	ldr	r0, [pc, #100]	@ (800a6bc <HAL_PCD_MspInit+0xc0>)
 800a658:	f7f8 fbac 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a65c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a662:	2300      	movs	r3, #0
 800a664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a666:	2300      	movs	r3, #0
 800a668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a66a:	f107 0314 	add.w	r3, r7, #20
 800a66e:	4619      	mov	r1, r3
 800a670:	4812      	ldr	r0, [pc, #72]	@ (800a6bc <HAL_PCD_MspInit+0xc0>)
 800a672:	f7f8 fb9f 	bl	8002db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a676:	4b10      	ldr	r3, [pc, #64]	@ (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a67a:	4a0f      	ldr	r2, [pc, #60]	@ (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a680:	6353      	str	r3, [r2, #52]	@ 0x34
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a68a:	4a0b      	ldr	r2, [pc, #44]	@ (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a68c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a690:	6453      	str	r3, [r2, #68]	@ 0x44
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <HAL_PCD_MspInit+0xbc>)
 800a694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	2043      	movs	r0, #67	@ 0x43
 800a6a4:	f7f7 fbfd 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a6a8:	2043      	movs	r0, #67	@ 0x43
 800a6aa:	f7f7 fc16 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a6ae:	bf00      	nop
 800a6b0:	3728      	adds	r7, #40	@ 0x28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	40023800 	.word	0x40023800
 800a6bc:	40020000 	.word	0x40020000

0800a6c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7fe fb23 	bl	8008d22 <USBD_LL_SetupStage>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	4619      	mov	r1, r3
 800a70e:	f7fe fb5d 	bl	8008dcc <USBD_LL_DataOutStage>
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b082      	sub	sp, #8
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	4613      	mov	r3, r2
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	3320      	adds	r3, #32
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	4619      	mov	r1, r3
 800a742:	f7fe fbf6 	bl	8008f32 <USBD_LL_DataInStage>
}
 800a746:	bf00      	nop
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe fd30 	bl	80091c2 <USBD_LL_SOF>
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a772:	2301      	movs	r3, #1
 800a774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	79db      	ldrb	r3, [r3, #7]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a77e:	2300      	movs	r3, #0
 800a780:	73fb      	strb	r3, [r7, #15]
 800a782:	e008      	b.n	800a796 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	79db      	ldrb	r3, [r3, #7]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d102      	bne.n	800a792 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a78c:	2301      	movs	r3, #1
 800a78e:	73fb      	strb	r3, [r7, #15]
 800a790:	e001      	b.n	800a796 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a792:	f7f6 f9d7 	bl	8000b44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a79c:	7bfa      	ldrb	r2, [r7, #15]
 800a79e:	4611      	mov	r1, r2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fe fcca 	bl	800913a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe fc72 	bl	8009096 <USBD_LL_Reset>
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fcc5 	bl	800915a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	6812      	ldr	r2, [r2, #0]
 800a7de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7e2:	f043 0301 	orr.w	r3, r3, #1
 800a7e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7adb      	ldrb	r3, [r3, #11]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7f0:	4b04      	ldr	r3, [pc, #16]	@ (800a804 <HAL_PCD_SuspendCallback+0x48>)
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	4a03      	ldr	r2, [pc, #12]	@ (800a804 <HAL_PCD_SuspendCallback+0x48>)
 800a7f6:	f043 0306 	orr.w	r3, r3, #6
 800a7fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	e000ed00 	.word	0xe000ed00

0800a808 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fcbb 	bl	8009192 <USBD_LL_Resume>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a836:	78fa      	ldrb	r2, [r7, #3]
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fd13 	bl	8009266 <USBD_LL_IsoOUTIncomplete>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a85a:	78fa      	ldrb	r2, [r7, #3]
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe fccf 	bl	8009202 <USBD_LL_IsoINIncomplete>
}
 800a864:	bf00      	nop
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe fd25 	bl	80092ca <USBD_LL_DevConnected>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe fd22 	bl	80092e0 <USBD_LL_DevDisconnected>
}
 800a89c:	bf00      	nop
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d13c      	bne.n	800a92e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a8b4:	4a20      	ldr	r2, [pc, #128]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a1e      	ldr	r2, [pc, #120]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a8ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a8cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8ce:	2204      	movs	r2, #4
 800a8d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8d2:	4b19      	ldr	r3, [pc, #100]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8d8:	4b17      	ldr	r3, [pc, #92]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8de:	4b16      	ldr	r3, [pc, #88]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a8e4:	4b14      	ldr	r3, [pc, #80]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8ea:	4b13      	ldr	r3, [pc, #76]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8f0:	4b11      	ldr	r3, [pc, #68]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a8f6:	4b10      	ldr	r3, [pc, #64]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a938 <USBD_LL_Init+0x94>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a902:	480d      	ldr	r0, [pc, #52]	@ (800a938 <USBD_LL_Init+0x94>)
 800a904:	f7f8 fc34 	bl	8003170 <HAL_PCD_Init>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a90e:	f7f6 f919 	bl	8000b44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a912:	2180      	movs	r1, #128	@ 0x80
 800a914:	4808      	ldr	r0, [pc, #32]	@ (800a938 <USBD_LL_Init+0x94>)
 800a916:	f7f9 fe60 	bl	80045da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a91a:	2240      	movs	r2, #64	@ 0x40
 800a91c:	2100      	movs	r1, #0
 800a91e:	4806      	ldr	r0, [pc, #24]	@ (800a938 <USBD_LL_Init+0x94>)
 800a920:	f7f9 fe14 	bl	800454c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a924:	2280      	movs	r2, #128	@ 0x80
 800a926:	2101      	movs	r1, #1
 800a928:	4803      	ldr	r0, [pc, #12]	@ (800a938 <USBD_LL_Init+0x94>)
 800a92a:	f7f9 fe0f 	bl	800454c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20007fec 	.word	0x20007fec

0800a93c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a952:	4618      	mov	r0, r3
 800a954:	f7f8 fd1b 	bl	800338e <HAL_PCD_Start>
 800a958:	4603      	mov	r3, r0
 800a95a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 f942 	bl	800abe8 <USBD_Get_USB_Status>
 800a964:	4603      	mov	r3, r0
 800a966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a968:	7bbb      	ldrb	r3, [r7, #14]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	4608      	mov	r0, r1
 800a97c:	4611      	mov	r1, r2
 800a97e:	461a      	mov	r2, r3
 800a980:	4603      	mov	r3, r0
 800a982:	70fb      	strb	r3, [r7, #3]
 800a984:	460b      	mov	r3, r1
 800a986:	70bb      	strb	r3, [r7, #2]
 800a988:	4613      	mov	r3, r2
 800a98a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a99a:	78bb      	ldrb	r3, [r7, #2]
 800a99c:	883a      	ldrh	r2, [r7, #0]
 800a99e:	78f9      	ldrb	r1, [r7, #3]
 800a9a0:	f7f9 f9ef 	bl	8003d82 <HAL_PCD_EP_Open>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 f91c 	bl	800abe8 <USBD_Get_USB_Status>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9d8:	78fa      	ldrb	r2, [r7, #3]
 800a9da:	4611      	mov	r1, r2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7f9 fa3a 	bl	8003e56 <HAL_PCD_EP_Close>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 f8fd 	bl	800abe8 <USBD_Get_USB_Status>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa16:	78fa      	ldrb	r2, [r7, #3]
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f9 faf2 	bl	8004004 <HAL_PCD_EP_SetStall>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 f8de 	bl	800abe8 <USBD_Get_USB_Status>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa54:	78fa      	ldrb	r2, [r7, #3]
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7f9 fb36 	bl	80040ca <HAL_PCD_EP_ClrStall>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 f8bf 	bl	800abe8 <USBD_Get_USB_Status>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	da0b      	bge.n	800aaac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa9a:	68f9      	ldr	r1, [r7, #12]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	440b      	add	r3, r1
 800aaa6:	3316      	adds	r3, #22
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	e00b      	b.n	800aac4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aab2:	68f9      	ldr	r1, [r7, #12]
 800aab4:	4613      	mov	r3, r2
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	440b      	add	r3, r1
 800aabe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaea:	78fa      	ldrb	r2, [r7, #3]
 800aaec:	4611      	mov	r1, r2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7f9 f923 	bl	8003d3a <HAL_PCD_SetAddress>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 f874 	bl	800abe8 <USBD_Get_USB_Status>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b086      	sub	sp, #24
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	60f8      	str	r0, [r7, #12]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab2c:	7af9      	ldrb	r1, [r7, #11]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	f7f9 fa2d 	bl	8003f90 <HAL_PCD_EP_Transmit>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 f853 	bl	800abe8 <USBD_Get_USB_Status>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab46:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3718      	adds	r7, #24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	607a      	str	r2, [r7, #4]
 800ab5a:	603b      	str	r3, [r7, #0]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab6e:	7af9      	ldrb	r1, [r7, #11]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	f7f9 f9b9 	bl	8003eea <HAL_PCD_EP_Receive>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 f832 	bl	800abe8 <USBD_Get_USB_Status>
 800ab84:	4603      	mov	r3, r0
 800ab86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab88:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b082      	sub	sp, #8
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aba4:	78fa      	ldrb	r2, [r7, #3]
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f9 f9d9 	bl	8003f60 <HAL_PCD_EP_GetRxCount>
 800abae:	4603      	mov	r3, r0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abc0:	4b03      	ldr	r3, [pc, #12]	@ (800abd0 <USBD_static_malloc+0x18>)
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	200084d0 	.word	0x200084d0

0800abd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]

}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d817      	bhi.n	800ac2c <USBD_Get_USB_Status+0x44>
 800abfc:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <USBD_Get_USB_Status+0x1c>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800ac15 	.word	0x0800ac15
 800ac08:	0800ac1b 	.word	0x0800ac1b
 800ac0c:	0800ac21 	.word	0x0800ac21
 800ac10:	0800ac27 	.word	0x0800ac27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]
    break;
 800ac18:	e00b      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac1e:	e008      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac20:	2301      	movs	r3, #1
 800ac22:	73fb      	strb	r3, [r7, #15]
    break;
 800ac24:	e005      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac26:	2303      	movs	r3, #3
 800ac28:	73fb      	strb	r3, [r7, #15]
    break;
 800ac2a:	e002      	b.n	800ac32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac30:	bf00      	nop
  }
  return usb_status;
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <std>:
 800ac40:	2300      	movs	r3, #0
 800ac42:	b510      	push	{r4, lr}
 800ac44:	4604      	mov	r4, r0
 800ac46:	e9c0 3300 	strd	r3, r3, [r0]
 800ac4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac4e:	6083      	str	r3, [r0, #8]
 800ac50:	8181      	strh	r1, [r0, #12]
 800ac52:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac54:	81c2      	strh	r2, [r0, #14]
 800ac56:	6183      	str	r3, [r0, #24]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	2208      	movs	r2, #8
 800ac5c:	305c      	adds	r0, #92	@ 0x5c
 800ac5e:	f000 f9f9 	bl	800b054 <memset>
 800ac62:	4b0d      	ldr	r3, [pc, #52]	@ (800ac98 <std+0x58>)
 800ac64:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac66:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <std+0x5c>)
 800ac68:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aca0 <std+0x60>)
 800ac6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aca4 <std+0x64>)
 800ac70:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac72:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <std+0x68>)
 800ac74:	6224      	str	r4, [r4, #32]
 800ac76:	429c      	cmp	r4, r3
 800ac78:	d006      	beq.n	800ac88 <std+0x48>
 800ac7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac7e:	4294      	cmp	r4, r2
 800ac80:	d002      	beq.n	800ac88 <std+0x48>
 800ac82:	33d0      	adds	r3, #208	@ 0xd0
 800ac84:	429c      	cmp	r4, r3
 800ac86:	d105      	bne.n	800ac94 <std+0x54>
 800ac88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac90:	f000 ba58 	b.w	800b144 <__retarget_lock_init_recursive>
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	bf00      	nop
 800ac98:	0800aea5 	.word	0x0800aea5
 800ac9c:	0800aec7 	.word	0x0800aec7
 800aca0:	0800aeff 	.word	0x0800aeff
 800aca4:	0800af23 	.word	0x0800af23
 800aca8:	200086f0 	.word	0x200086f0

0800acac <stdio_exit_handler>:
 800acac:	4a02      	ldr	r2, [pc, #8]	@ (800acb8 <stdio_exit_handler+0xc>)
 800acae:	4903      	ldr	r1, [pc, #12]	@ (800acbc <stdio_exit_handler+0x10>)
 800acb0:	4803      	ldr	r0, [pc, #12]	@ (800acc0 <stdio_exit_handler+0x14>)
 800acb2:	f000 b869 	b.w	800ad88 <_fwalk_sglue>
 800acb6:	bf00      	nop
 800acb8:	2000010c 	.word	0x2000010c
 800acbc:	0800ba01 	.word	0x0800ba01
 800acc0:	2000011c 	.word	0x2000011c

0800acc4 <cleanup_stdio>:
 800acc4:	6841      	ldr	r1, [r0, #4]
 800acc6:	4b0c      	ldr	r3, [pc, #48]	@ (800acf8 <cleanup_stdio+0x34>)
 800acc8:	4299      	cmp	r1, r3
 800acca:	b510      	push	{r4, lr}
 800accc:	4604      	mov	r4, r0
 800acce:	d001      	beq.n	800acd4 <cleanup_stdio+0x10>
 800acd0:	f000 fe96 	bl	800ba00 <_fflush_r>
 800acd4:	68a1      	ldr	r1, [r4, #8]
 800acd6:	4b09      	ldr	r3, [pc, #36]	@ (800acfc <cleanup_stdio+0x38>)
 800acd8:	4299      	cmp	r1, r3
 800acda:	d002      	beq.n	800ace2 <cleanup_stdio+0x1e>
 800acdc:	4620      	mov	r0, r4
 800acde:	f000 fe8f 	bl	800ba00 <_fflush_r>
 800ace2:	68e1      	ldr	r1, [r4, #12]
 800ace4:	4b06      	ldr	r3, [pc, #24]	@ (800ad00 <cleanup_stdio+0x3c>)
 800ace6:	4299      	cmp	r1, r3
 800ace8:	d004      	beq.n	800acf4 <cleanup_stdio+0x30>
 800acea:	4620      	mov	r0, r4
 800acec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf0:	f000 be86 	b.w	800ba00 <_fflush_r>
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	bf00      	nop
 800acf8:	200086f0 	.word	0x200086f0
 800acfc:	20008758 	.word	0x20008758
 800ad00:	200087c0 	.word	0x200087c0

0800ad04 <global_stdio_init.part.0>:
 800ad04:	b510      	push	{r4, lr}
 800ad06:	4b0b      	ldr	r3, [pc, #44]	@ (800ad34 <global_stdio_init.part.0+0x30>)
 800ad08:	4c0b      	ldr	r4, [pc, #44]	@ (800ad38 <global_stdio_init.part.0+0x34>)
 800ad0a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad3c <global_stdio_init.part.0+0x38>)
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	4620      	mov	r0, r4
 800ad10:	2200      	movs	r2, #0
 800ad12:	2104      	movs	r1, #4
 800ad14:	f7ff ff94 	bl	800ac40 <std>
 800ad18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	2109      	movs	r1, #9
 800ad20:	f7ff ff8e 	bl	800ac40 <std>
 800ad24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad28:	2202      	movs	r2, #2
 800ad2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2e:	2112      	movs	r1, #18
 800ad30:	f7ff bf86 	b.w	800ac40 <std>
 800ad34:	20008828 	.word	0x20008828
 800ad38:	200086f0 	.word	0x200086f0
 800ad3c:	0800acad 	.word	0x0800acad

0800ad40 <__sfp_lock_acquire>:
 800ad40:	4801      	ldr	r0, [pc, #4]	@ (800ad48 <__sfp_lock_acquire+0x8>)
 800ad42:	f000 ba00 	b.w	800b146 <__retarget_lock_acquire_recursive>
 800ad46:	bf00      	nop
 800ad48:	20008831 	.word	0x20008831

0800ad4c <__sfp_lock_release>:
 800ad4c:	4801      	ldr	r0, [pc, #4]	@ (800ad54 <__sfp_lock_release+0x8>)
 800ad4e:	f000 b9fb 	b.w	800b148 <__retarget_lock_release_recursive>
 800ad52:	bf00      	nop
 800ad54:	20008831 	.word	0x20008831

0800ad58 <__sinit>:
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	f7ff fff0 	bl	800ad40 <__sfp_lock_acquire>
 800ad60:	6a23      	ldr	r3, [r4, #32]
 800ad62:	b11b      	cbz	r3, 800ad6c <__sinit+0x14>
 800ad64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad68:	f7ff bff0 	b.w	800ad4c <__sfp_lock_release>
 800ad6c:	4b04      	ldr	r3, [pc, #16]	@ (800ad80 <__sinit+0x28>)
 800ad6e:	6223      	str	r3, [r4, #32]
 800ad70:	4b04      	ldr	r3, [pc, #16]	@ (800ad84 <__sinit+0x2c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1f5      	bne.n	800ad64 <__sinit+0xc>
 800ad78:	f7ff ffc4 	bl	800ad04 <global_stdio_init.part.0>
 800ad7c:	e7f2      	b.n	800ad64 <__sinit+0xc>
 800ad7e:	bf00      	nop
 800ad80:	0800acc5 	.word	0x0800acc5
 800ad84:	20008828 	.word	0x20008828

0800ad88 <_fwalk_sglue>:
 800ad88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad8c:	4607      	mov	r7, r0
 800ad8e:	4688      	mov	r8, r1
 800ad90:	4614      	mov	r4, r2
 800ad92:	2600      	movs	r6, #0
 800ad94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad98:	f1b9 0901 	subs.w	r9, r9, #1
 800ad9c:	d505      	bpl.n	800adaa <_fwalk_sglue+0x22>
 800ad9e:	6824      	ldr	r4, [r4, #0]
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	d1f7      	bne.n	800ad94 <_fwalk_sglue+0xc>
 800ada4:	4630      	mov	r0, r6
 800ada6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adaa:	89ab      	ldrh	r3, [r5, #12]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d907      	bls.n	800adc0 <_fwalk_sglue+0x38>
 800adb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adb4:	3301      	adds	r3, #1
 800adb6:	d003      	beq.n	800adc0 <_fwalk_sglue+0x38>
 800adb8:	4629      	mov	r1, r5
 800adba:	4638      	mov	r0, r7
 800adbc:	47c0      	blx	r8
 800adbe:	4306      	orrs	r6, r0
 800adc0:	3568      	adds	r5, #104	@ 0x68
 800adc2:	e7e9      	b.n	800ad98 <_fwalk_sglue+0x10>

0800adc4 <iprintf>:
 800adc4:	b40f      	push	{r0, r1, r2, r3}
 800adc6:	b507      	push	{r0, r1, r2, lr}
 800adc8:	4906      	ldr	r1, [pc, #24]	@ (800ade4 <iprintf+0x20>)
 800adca:	ab04      	add	r3, sp, #16
 800adcc:	6808      	ldr	r0, [r1, #0]
 800adce:	f853 2b04 	ldr.w	r2, [r3], #4
 800add2:	6881      	ldr	r1, [r0, #8]
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	f000 fae9 	bl	800b3ac <_vfiprintf_r>
 800adda:	b003      	add	sp, #12
 800addc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ade0:	b004      	add	sp, #16
 800ade2:	4770      	bx	lr
 800ade4:	20000118 	.word	0x20000118

0800ade8 <_puts_r>:
 800ade8:	6a03      	ldr	r3, [r0, #32]
 800adea:	b570      	push	{r4, r5, r6, lr}
 800adec:	6884      	ldr	r4, [r0, #8]
 800adee:	4605      	mov	r5, r0
 800adf0:	460e      	mov	r6, r1
 800adf2:	b90b      	cbnz	r3, 800adf8 <_puts_r+0x10>
 800adf4:	f7ff ffb0 	bl	800ad58 <__sinit>
 800adf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adfa:	07db      	lsls	r3, r3, #31
 800adfc:	d405      	bmi.n	800ae0a <_puts_r+0x22>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	0598      	lsls	r0, r3, #22
 800ae02:	d402      	bmi.n	800ae0a <_puts_r+0x22>
 800ae04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae06:	f000 f99e 	bl	800b146 <__retarget_lock_acquire_recursive>
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	0719      	lsls	r1, r3, #28
 800ae0e:	d502      	bpl.n	800ae16 <_puts_r+0x2e>
 800ae10:	6923      	ldr	r3, [r4, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d135      	bne.n	800ae82 <_puts_r+0x9a>
 800ae16:	4621      	mov	r1, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 f8c5 	bl	800afa8 <__swsetup_r>
 800ae1e:	b380      	cbz	r0, 800ae82 <_puts_r+0x9a>
 800ae20:	f04f 35ff 	mov.w	r5, #4294967295
 800ae24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae26:	07da      	lsls	r2, r3, #31
 800ae28:	d405      	bmi.n	800ae36 <_puts_r+0x4e>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	059b      	lsls	r3, r3, #22
 800ae2e:	d402      	bmi.n	800ae36 <_puts_r+0x4e>
 800ae30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae32:	f000 f989 	bl	800b148 <__retarget_lock_release_recursive>
 800ae36:	4628      	mov	r0, r5
 800ae38:	bd70      	pop	{r4, r5, r6, pc}
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	da04      	bge.n	800ae48 <_puts_r+0x60>
 800ae3e:	69a2      	ldr	r2, [r4, #24]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	dc17      	bgt.n	800ae74 <_puts_r+0x8c>
 800ae44:	290a      	cmp	r1, #10
 800ae46:	d015      	beq.n	800ae74 <_puts_r+0x8c>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	6022      	str	r2, [r4, #0]
 800ae4e:	7019      	strb	r1, [r3, #0]
 800ae50:	68a3      	ldr	r3, [r4, #8]
 800ae52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae56:	3b01      	subs	r3, #1
 800ae58:	60a3      	str	r3, [r4, #8]
 800ae5a:	2900      	cmp	r1, #0
 800ae5c:	d1ed      	bne.n	800ae3a <_puts_r+0x52>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	da11      	bge.n	800ae86 <_puts_r+0x9e>
 800ae62:	4622      	mov	r2, r4
 800ae64:	210a      	movs	r1, #10
 800ae66:	4628      	mov	r0, r5
 800ae68:	f000 f85f 	bl	800af2a <__swbuf_r>
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d0d7      	beq.n	800ae20 <_puts_r+0x38>
 800ae70:	250a      	movs	r5, #10
 800ae72:	e7d7      	b.n	800ae24 <_puts_r+0x3c>
 800ae74:	4622      	mov	r2, r4
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 f857 	bl	800af2a <__swbuf_r>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d1e7      	bne.n	800ae50 <_puts_r+0x68>
 800ae80:	e7ce      	b.n	800ae20 <_puts_r+0x38>
 800ae82:	3e01      	subs	r6, #1
 800ae84:	e7e4      	b.n	800ae50 <_puts_r+0x68>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	6022      	str	r2, [r4, #0]
 800ae8c:	220a      	movs	r2, #10
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	e7ee      	b.n	800ae70 <_puts_r+0x88>
	...

0800ae94 <puts>:
 800ae94:	4b02      	ldr	r3, [pc, #8]	@ (800aea0 <puts+0xc>)
 800ae96:	4601      	mov	r1, r0
 800ae98:	6818      	ldr	r0, [r3, #0]
 800ae9a:	f7ff bfa5 	b.w	800ade8 <_puts_r>
 800ae9e:	bf00      	nop
 800aea0:	20000118 	.word	0x20000118

0800aea4 <__sread>:
 800aea4:	b510      	push	{r4, lr}
 800aea6:	460c      	mov	r4, r1
 800aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeac:	f000 f8fc 	bl	800b0a8 <_read_r>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	bfab      	itete	ge
 800aeb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aeb6:	89a3      	ldrhlt	r3, [r4, #12]
 800aeb8:	181b      	addge	r3, r3, r0
 800aeba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aebe:	bfac      	ite	ge
 800aec0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aec2:	81a3      	strhlt	r3, [r4, #12]
 800aec4:	bd10      	pop	{r4, pc}

0800aec6 <__swrite>:
 800aec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	461f      	mov	r7, r3
 800aecc:	898b      	ldrh	r3, [r1, #12]
 800aece:	05db      	lsls	r3, r3, #23
 800aed0:	4605      	mov	r5, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	4616      	mov	r6, r2
 800aed6:	d505      	bpl.n	800aee4 <__swrite+0x1e>
 800aed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aedc:	2302      	movs	r3, #2
 800aede:	2200      	movs	r2, #0
 800aee0:	f000 f8d0 	bl	800b084 <_lseek_r>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	4632      	mov	r2, r6
 800aef2:	463b      	mov	r3, r7
 800aef4:	4628      	mov	r0, r5
 800aef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aefa:	f000 b8e7 	b.w	800b0cc <_write_r>

0800aefe <__sseek>:
 800aefe:	b510      	push	{r4, lr}
 800af00:	460c      	mov	r4, r1
 800af02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af06:	f000 f8bd 	bl	800b084 <_lseek_r>
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	bf15      	itete	ne
 800af10:	6560      	strne	r0, [r4, #84]	@ 0x54
 800af12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800af16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af1a:	81a3      	strheq	r3, [r4, #12]
 800af1c:	bf18      	it	ne
 800af1e:	81a3      	strhne	r3, [r4, #12]
 800af20:	bd10      	pop	{r4, pc}

0800af22 <__sclose>:
 800af22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af26:	f000 b89d 	b.w	800b064 <_close_r>

0800af2a <__swbuf_r>:
 800af2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2c:	460e      	mov	r6, r1
 800af2e:	4614      	mov	r4, r2
 800af30:	4605      	mov	r5, r0
 800af32:	b118      	cbz	r0, 800af3c <__swbuf_r+0x12>
 800af34:	6a03      	ldr	r3, [r0, #32]
 800af36:	b90b      	cbnz	r3, 800af3c <__swbuf_r+0x12>
 800af38:	f7ff ff0e 	bl	800ad58 <__sinit>
 800af3c:	69a3      	ldr	r3, [r4, #24]
 800af3e:	60a3      	str	r3, [r4, #8]
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	071a      	lsls	r2, r3, #28
 800af44:	d501      	bpl.n	800af4a <__swbuf_r+0x20>
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	b943      	cbnz	r3, 800af5c <__swbuf_r+0x32>
 800af4a:	4621      	mov	r1, r4
 800af4c:	4628      	mov	r0, r5
 800af4e:	f000 f82b 	bl	800afa8 <__swsetup_r>
 800af52:	b118      	cbz	r0, 800af5c <__swbuf_r+0x32>
 800af54:	f04f 37ff 	mov.w	r7, #4294967295
 800af58:	4638      	mov	r0, r7
 800af5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	6922      	ldr	r2, [r4, #16]
 800af60:	1a98      	subs	r0, r3, r2
 800af62:	6963      	ldr	r3, [r4, #20]
 800af64:	b2f6      	uxtb	r6, r6
 800af66:	4283      	cmp	r3, r0
 800af68:	4637      	mov	r7, r6
 800af6a:	dc05      	bgt.n	800af78 <__swbuf_r+0x4e>
 800af6c:	4621      	mov	r1, r4
 800af6e:	4628      	mov	r0, r5
 800af70:	f000 fd46 	bl	800ba00 <_fflush_r>
 800af74:	2800      	cmp	r0, #0
 800af76:	d1ed      	bne.n	800af54 <__swbuf_r+0x2a>
 800af78:	68a3      	ldr	r3, [r4, #8]
 800af7a:	3b01      	subs	r3, #1
 800af7c:	60a3      	str	r3, [r4, #8]
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	1c5a      	adds	r2, r3, #1
 800af82:	6022      	str	r2, [r4, #0]
 800af84:	701e      	strb	r6, [r3, #0]
 800af86:	6962      	ldr	r2, [r4, #20]
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d004      	beq.n	800af98 <__swbuf_r+0x6e>
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	07db      	lsls	r3, r3, #31
 800af92:	d5e1      	bpl.n	800af58 <__swbuf_r+0x2e>
 800af94:	2e0a      	cmp	r6, #10
 800af96:	d1df      	bne.n	800af58 <__swbuf_r+0x2e>
 800af98:	4621      	mov	r1, r4
 800af9a:	4628      	mov	r0, r5
 800af9c:	f000 fd30 	bl	800ba00 <_fflush_r>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d0d9      	beq.n	800af58 <__swbuf_r+0x2e>
 800afa4:	e7d6      	b.n	800af54 <__swbuf_r+0x2a>
	...

0800afa8 <__swsetup_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4b29      	ldr	r3, [pc, #164]	@ (800b050 <__swsetup_r+0xa8>)
 800afac:	4605      	mov	r5, r0
 800afae:	6818      	ldr	r0, [r3, #0]
 800afb0:	460c      	mov	r4, r1
 800afb2:	b118      	cbz	r0, 800afbc <__swsetup_r+0x14>
 800afb4:	6a03      	ldr	r3, [r0, #32]
 800afb6:	b90b      	cbnz	r3, 800afbc <__swsetup_r+0x14>
 800afb8:	f7ff fece 	bl	800ad58 <__sinit>
 800afbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc0:	0719      	lsls	r1, r3, #28
 800afc2:	d422      	bmi.n	800b00a <__swsetup_r+0x62>
 800afc4:	06da      	lsls	r2, r3, #27
 800afc6:	d407      	bmi.n	800afd8 <__swsetup_r+0x30>
 800afc8:	2209      	movs	r2, #9
 800afca:	602a      	str	r2, [r5, #0]
 800afcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afd0:	81a3      	strh	r3, [r4, #12]
 800afd2:	f04f 30ff 	mov.w	r0, #4294967295
 800afd6:	e033      	b.n	800b040 <__swsetup_r+0x98>
 800afd8:	0758      	lsls	r0, r3, #29
 800afda:	d512      	bpl.n	800b002 <__swsetup_r+0x5a>
 800afdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afde:	b141      	cbz	r1, 800aff2 <__swsetup_r+0x4a>
 800afe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afe4:	4299      	cmp	r1, r3
 800afe6:	d002      	beq.n	800afee <__swsetup_r+0x46>
 800afe8:	4628      	mov	r0, r5
 800afea:	f000 f8bd 	bl	800b168 <_free_r>
 800afee:	2300      	movs	r3, #0
 800aff0:	6363      	str	r3, [r4, #52]	@ 0x34
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aff8:	81a3      	strh	r3, [r4, #12]
 800affa:	2300      	movs	r3, #0
 800affc:	6063      	str	r3, [r4, #4]
 800affe:	6923      	ldr	r3, [r4, #16]
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f043 0308 	orr.w	r3, r3, #8
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	6923      	ldr	r3, [r4, #16]
 800b00c:	b94b      	cbnz	r3, 800b022 <__swsetup_r+0x7a>
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b018:	d003      	beq.n	800b022 <__swsetup_r+0x7a>
 800b01a:	4621      	mov	r1, r4
 800b01c:	4628      	mov	r0, r5
 800b01e:	f000 fd3d 	bl	800ba9c <__smakebuf_r>
 800b022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b026:	f013 0201 	ands.w	r2, r3, #1
 800b02a:	d00a      	beq.n	800b042 <__swsetup_r+0x9a>
 800b02c:	2200      	movs	r2, #0
 800b02e:	60a2      	str	r2, [r4, #8]
 800b030:	6962      	ldr	r2, [r4, #20]
 800b032:	4252      	negs	r2, r2
 800b034:	61a2      	str	r2, [r4, #24]
 800b036:	6922      	ldr	r2, [r4, #16]
 800b038:	b942      	cbnz	r2, 800b04c <__swsetup_r+0xa4>
 800b03a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b03e:	d1c5      	bne.n	800afcc <__swsetup_r+0x24>
 800b040:	bd38      	pop	{r3, r4, r5, pc}
 800b042:	0799      	lsls	r1, r3, #30
 800b044:	bf58      	it	pl
 800b046:	6962      	ldrpl	r2, [r4, #20]
 800b048:	60a2      	str	r2, [r4, #8]
 800b04a:	e7f4      	b.n	800b036 <__swsetup_r+0x8e>
 800b04c:	2000      	movs	r0, #0
 800b04e:	e7f7      	b.n	800b040 <__swsetup_r+0x98>
 800b050:	20000118 	.word	0x20000118

0800b054 <memset>:
 800b054:	4402      	add	r2, r0
 800b056:	4603      	mov	r3, r0
 800b058:	4293      	cmp	r3, r2
 800b05a:	d100      	bne.n	800b05e <memset+0xa>
 800b05c:	4770      	bx	lr
 800b05e:	f803 1b01 	strb.w	r1, [r3], #1
 800b062:	e7f9      	b.n	800b058 <memset+0x4>

0800b064 <_close_r>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	4d06      	ldr	r5, [pc, #24]	@ (800b080 <_close_r+0x1c>)
 800b068:	2300      	movs	r3, #0
 800b06a:	4604      	mov	r4, r0
 800b06c:	4608      	mov	r0, r1
 800b06e:	602b      	str	r3, [r5, #0]
 800b070:	f7f6 f859 	bl	8001126 <_close>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	d102      	bne.n	800b07e <_close_r+0x1a>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	b103      	cbz	r3, 800b07e <_close_r+0x1a>
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
 800b080:	2000882c 	.word	0x2000882c

0800b084 <_lseek_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d07      	ldr	r5, [pc, #28]	@ (800b0a4 <_lseek_r+0x20>)
 800b088:	4604      	mov	r4, r0
 800b08a:	4608      	mov	r0, r1
 800b08c:	4611      	mov	r1, r2
 800b08e:	2200      	movs	r2, #0
 800b090:	602a      	str	r2, [r5, #0]
 800b092:	461a      	mov	r2, r3
 800b094:	f7f6 f86e 	bl	8001174 <_lseek>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_lseek_r+0x1e>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_lseek_r+0x1e>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	2000882c 	.word	0x2000882c

0800b0a8 <_read_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	4d07      	ldr	r5, [pc, #28]	@ (800b0c8 <_read_r+0x20>)
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	4608      	mov	r0, r1
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	602a      	str	r2, [r5, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f7f6 f818 	bl	80010ec <_read>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_read_r+0x1e>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_read_r+0x1e>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	2000882c 	.word	0x2000882c

0800b0cc <_write_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4d07      	ldr	r5, [pc, #28]	@ (800b0ec <_write_r+0x20>)
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	4608      	mov	r0, r1
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	602a      	str	r2, [r5, #0]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	f7f5 fc62 	bl	80009a4 <_write>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_write_r+0x1e>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_write_r+0x1e>
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	2000882c 	.word	0x2000882c

0800b0f0 <__errno>:
 800b0f0:	4b01      	ldr	r3, [pc, #4]	@ (800b0f8 <__errno+0x8>)
 800b0f2:	6818      	ldr	r0, [r3, #0]
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	20000118 	.word	0x20000118

0800b0fc <__libc_init_array>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	4d0d      	ldr	r5, [pc, #52]	@ (800b134 <__libc_init_array+0x38>)
 800b100:	4c0d      	ldr	r4, [pc, #52]	@ (800b138 <__libc_init_array+0x3c>)
 800b102:	1b64      	subs	r4, r4, r5
 800b104:	10a4      	asrs	r4, r4, #2
 800b106:	2600      	movs	r6, #0
 800b108:	42a6      	cmp	r6, r4
 800b10a:	d109      	bne.n	800b120 <__libc_init_array+0x24>
 800b10c:	4d0b      	ldr	r5, [pc, #44]	@ (800b13c <__libc_init_array+0x40>)
 800b10e:	4c0c      	ldr	r4, [pc, #48]	@ (800b140 <__libc_init_array+0x44>)
 800b110:	f000 fd32 	bl	800bb78 <_init>
 800b114:	1b64      	subs	r4, r4, r5
 800b116:	10a4      	asrs	r4, r4, #2
 800b118:	2600      	movs	r6, #0
 800b11a:	42a6      	cmp	r6, r4
 800b11c:	d105      	bne.n	800b12a <__libc_init_array+0x2e>
 800b11e:	bd70      	pop	{r4, r5, r6, pc}
 800b120:	f855 3b04 	ldr.w	r3, [r5], #4
 800b124:	4798      	blx	r3
 800b126:	3601      	adds	r6, #1
 800b128:	e7ee      	b.n	800b108 <__libc_init_array+0xc>
 800b12a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b12e:	4798      	blx	r3
 800b130:	3601      	adds	r6, #1
 800b132:	e7f2      	b.n	800b11a <__libc_init_array+0x1e>
 800b134:	0800bcbc 	.word	0x0800bcbc
 800b138:	0800bcbc 	.word	0x0800bcbc
 800b13c:	0800bcbc 	.word	0x0800bcbc
 800b140:	0800bcc0 	.word	0x0800bcc0

0800b144 <__retarget_lock_init_recursive>:
 800b144:	4770      	bx	lr

0800b146 <__retarget_lock_acquire_recursive>:
 800b146:	4770      	bx	lr

0800b148 <__retarget_lock_release_recursive>:
 800b148:	4770      	bx	lr

0800b14a <memcpy>:
 800b14a:	440a      	add	r2, r1
 800b14c:	4291      	cmp	r1, r2
 800b14e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b152:	d100      	bne.n	800b156 <memcpy+0xc>
 800b154:	4770      	bx	lr
 800b156:	b510      	push	{r4, lr}
 800b158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b15c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b160:	4291      	cmp	r1, r2
 800b162:	d1f9      	bne.n	800b158 <memcpy+0xe>
 800b164:	bd10      	pop	{r4, pc}
	...

0800b168 <_free_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4605      	mov	r5, r0
 800b16c:	2900      	cmp	r1, #0
 800b16e:	d041      	beq.n	800b1f4 <_free_r+0x8c>
 800b170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b174:	1f0c      	subs	r4, r1, #4
 800b176:	2b00      	cmp	r3, #0
 800b178:	bfb8      	it	lt
 800b17a:	18e4      	addlt	r4, r4, r3
 800b17c:	f000 f8e0 	bl	800b340 <__malloc_lock>
 800b180:	4a1d      	ldr	r2, [pc, #116]	@ (800b1f8 <_free_r+0x90>)
 800b182:	6813      	ldr	r3, [r2, #0]
 800b184:	b933      	cbnz	r3, 800b194 <_free_r+0x2c>
 800b186:	6063      	str	r3, [r4, #4]
 800b188:	6014      	str	r4, [r2, #0]
 800b18a:	4628      	mov	r0, r5
 800b18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b190:	f000 b8dc 	b.w	800b34c <__malloc_unlock>
 800b194:	42a3      	cmp	r3, r4
 800b196:	d908      	bls.n	800b1aa <_free_r+0x42>
 800b198:	6820      	ldr	r0, [r4, #0]
 800b19a:	1821      	adds	r1, r4, r0
 800b19c:	428b      	cmp	r3, r1
 800b19e:	bf01      	itttt	eq
 800b1a0:	6819      	ldreq	r1, [r3, #0]
 800b1a2:	685b      	ldreq	r3, [r3, #4]
 800b1a4:	1809      	addeq	r1, r1, r0
 800b1a6:	6021      	streq	r1, [r4, #0]
 800b1a8:	e7ed      	b.n	800b186 <_free_r+0x1e>
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	b10b      	cbz	r3, 800b1b4 <_free_r+0x4c>
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	d9fa      	bls.n	800b1aa <_free_r+0x42>
 800b1b4:	6811      	ldr	r1, [r2, #0]
 800b1b6:	1850      	adds	r0, r2, r1
 800b1b8:	42a0      	cmp	r0, r4
 800b1ba:	d10b      	bne.n	800b1d4 <_free_r+0x6c>
 800b1bc:	6820      	ldr	r0, [r4, #0]
 800b1be:	4401      	add	r1, r0
 800b1c0:	1850      	adds	r0, r2, r1
 800b1c2:	4283      	cmp	r3, r0
 800b1c4:	6011      	str	r1, [r2, #0]
 800b1c6:	d1e0      	bne.n	800b18a <_free_r+0x22>
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	6053      	str	r3, [r2, #4]
 800b1ce:	4408      	add	r0, r1
 800b1d0:	6010      	str	r0, [r2, #0]
 800b1d2:	e7da      	b.n	800b18a <_free_r+0x22>
 800b1d4:	d902      	bls.n	800b1dc <_free_r+0x74>
 800b1d6:	230c      	movs	r3, #12
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	e7d6      	b.n	800b18a <_free_r+0x22>
 800b1dc:	6820      	ldr	r0, [r4, #0]
 800b1de:	1821      	adds	r1, r4, r0
 800b1e0:	428b      	cmp	r3, r1
 800b1e2:	bf04      	itt	eq
 800b1e4:	6819      	ldreq	r1, [r3, #0]
 800b1e6:	685b      	ldreq	r3, [r3, #4]
 800b1e8:	6063      	str	r3, [r4, #4]
 800b1ea:	bf04      	itt	eq
 800b1ec:	1809      	addeq	r1, r1, r0
 800b1ee:	6021      	streq	r1, [r4, #0]
 800b1f0:	6054      	str	r4, [r2, #4]
 800b1f2:	e7ca      	b.n	800b18a <_free_r+0x22>
 800b1f4:	bd38      	pop	{r3, r4, r5, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20008838 	.word	0x20008838

0800b1fc <sbrk_aligned>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	4e0f      	ldr	r6, [pc, #60]	@ (800b23c <sbrk_aligned+0x40>)
 800b200:	460c      	mov	r4, r1
 800b202:	6831      	ldr	r1, [r6, #0]
 800b204:	4605      	mov	r5, r0
 800b206:	b911      	cbnz	r1, 800b20e <sbrk_aligned+0x12>
 800b208:	f000 fca6 	bl	800bb58 <_sbrk_r>
 800b20c:	6030      	str	r0, [r6, #0]
 800b20e:	4621      	mov	r1, r4
 800b210:	4628      	mov	r0, r5
 800b212:	f000 fca1 	bl	800bb58 <_sbrk_r>
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	d103      	bne.n	800b222 <sbrk_aligned+0x26>
 800b21a:	f04f 34ff 	mov.w	r4, #4294967295
 800b21e:	4620      	mov	r0, r4
 800b220:	bd70      	pop	{r4, r5, r6, pc}
 800b222:	1cc4      	adds	r4, r0, #3
 800b224:	f024 0403 	bic.w	r4, r4, #3
 800b228:	42a0      	cmp	r0, r4
 800b22a:	d0f8      	beq.n	800b21e <sbrk_aligned+0x22>
 800b22c:	1a21      	subs	r1, r4, r0
 800b22e:	4628      	mov	r0, r5
 800b230:	f000 fc92 	bl	800bb58 <_sbrk_r>
 800b234:	3001      	adds	r0, #1
 800b236:	d1f2      	bne.n	800b21e <sbrk_aligned+0x22>
 800b238:	e7ef      	b.n	800b21a <sbrk_aligned+0x1e>
 800b23a:	bf00      	nop
 800b23c:	20008834 	.word	0x20008834

0800b240 <_malloc_r>:
 800b240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b244:	1ccd      	adds	r5, r1, #3
 800b246:	f025 0503 	bic.w	r5, r5, #3
 800b24a:	3508      	adds	r5, #8
 800b24c:	2d0c      	cmp	r5, #12
 800b24e:	bf38      	it	cc
 800b250:	250c      	movcc	r5, #12
 800b252:	2d00      	cmp	r5, #0
 800b254:	4606      	mov	r6, r0
 800b256:	db01      	blt.n	800b25c <_malloc_r+0x1c>
 800b258:	42a9      	cmp	r1, r5
 800b25a:	d904      	bls.n	800b266 <_malloc_r+0x26>
 800b25c:	230c      	movs	r3, #12
 800b25e:	6033      	str	r3, [r6, #0]
 800b260:	2000      	movs	r0, #0
 800b262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b33c <_malloc_r+0xfc>
 800b26a:	f000 f869 	bl	800b340 <__malloc_lock>
 800b26e:	f8d8 3000 	ldr.w	r3, [r8]
 800b272:	461c      	mov	r4, r3
 800b274:	bb44      	cbnz	r4, 800b2c8 <_malloc_r+0x88>
 800b276:	4629      	mov	r1, r5
 800b278:	4630      	mov	r0, r6
 800b27a:	f7ff ffbf 	bl	800b1fc <sbrk_aligned>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	4604      	mov	r4, r0
 800b282:	d158      	bne.n	800b336 <_malloc_r+0xf6>
 800b284:	f8d8 4000 	ldr.w	r4, [r8]
 800b288:	4627      	mov	r7, r4
 800b28a:	2f00      	cmp	r7, #0
 800b28c:	d143      	bne.n	800b316 <_malloc_r+0xd6>
 800b28e:	2c00      	cmp	r4, #0
 800b290:	d04b      	beq.n	800b32a <_malloc_r+0xea>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	4639      	mov	r1, r7
 800b296:	4630      	mov	r0, r6
 800b298:	eb04 0903 	add.w	r9, r4, r3
 800b29c:	f000 fc5c 	bl	800bb58 <_sbrk_r>
 800b2a0:	4581      	cmp	r9, r0
 800b2a2:	d142      	bne.n	800b32a <_malloc_r+0xea>
 800b2a4:	6821      	ldr	r1, [r4, #0]
 800b2a6:	1a6d      	subs	r5, r5, r1
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7ff ffa6 	bl	800b1fc <sbrk_aligned>
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d03a      	beq.n	800b32a <_malloc_r+0xea>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	442b      	add	r3, r5
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	bb62      	cbnz	r2, 800b31c <_malloc_r+0xdc>
 800b2c2:	f8c8 7000 	str.w	r7, [r8]
 800b2c6:	e00f      	b.n	800b2e8 <_malloc_r+0xa8>
 800b2c8:	6822      	ldr	r2, [r4, #0]
 800b2ca:	1b52      	subs	r2, r2, r5
 800b2cc:	d420      	bmi.n	800b310 <_malloc_r+0xd0>
 800b2ce:	2a0b      	cmp	r2, #11
 800b2d0:	d917      	bls.n	800b302 <_malloc_r+0xc2>
 800b2d2:	1961      	adds	r1, r4, r5
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	6025      	str	r5, [r4, #0]
 800b2d8:	bf18      	it	ne
 800b2da:	6059      	strne	r1, [r3, #4]
 800b2dc:	6863      	ldr	r3, [r4, #4]
 800b2de:	bf08      	it	eq
 800b2e0:	f8c8 1000 	streq.w	r1, [r8]
 800b2e4:	5162      	str	r2, [r4, r5]
 800b2e6:	604b      	str	r3, [r1, #4]
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f000 f82f 	bl	800b34c <__malloc_unlock>
 800b2ee:	f104 000b 	add.w	r0, r4, #11
 800b2f2:	1d23      	adds	r3, r4, #4
 800b2f4:	f020 0007 	bic.w	r0, r0, #7
 800b2f8:	1ac2      	subs	r2, r0, r3
 800b2fa:	bf1c      	itt	ne
 800b2fc:	1a1b      	subne	r3, r3, r0
 800b2fe:	50a3      	strne	r3, [r4, r2]
 800b300:	e7af      	b.n	800b262 <_malloc_r+0x22>
 800b302:	6862      	ldr	r2, [r4, #4]
 800b304:	42a3      	cmp	r3, r4
 800b306:	bf0c      	ite	eq
 800b308:	f8c8 2000 	streq.w	r2, [r8]
 800b30c:	605a      	strne	r2, [r3, #4]
 800b30e:	e7eb      	b.n	800b2e8 <_malloc_r+0xa8>
 800b310:	4623      	mov	r3, r4
 800b312:	6864      	ldr	r4, [r4, #4]
 800b314:	e7ae      	b.n	800b274 <_malloc_r+0x34>
 800b316:	463c      	mov	r4, r7
 800b318:	687f      	ldr	r7, [r7, #4]
 800b31a:	e7b6      	b.n	800b28a <_malloc_r+0x4a>
 800b31c:	461a      	mov	r2, r3
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	42a3      	cmp	r3, r4
 800b322:	d1fb      	bne.n	800b31c <_malloc_r+0xdc>
 800b324:	2300      	movs	r3, #0
 800b326:	6053      	str	r3, [r2, #4]
 800b328:	e7de      	b.n	800b2e8 <_malloc_r+0xa8>
 800b32a:	230c      	movs	r3, #12
 800b32c:	6033      	str	r3, [r6, #0]
 800b32e:	4630      	mov	r0, r6
 800b330:	f000 f80c 	bl	800b34c <__malloc_unlock>
 800b334:	e794      	b.n	800b260 <_malloc_r+0x20>
 800b336:	6005      	str	r5, [r0, #0]
 800b338:	e7d6      	b.n	800b2e8 <_malloc_r+0xa8>
 800b33a:	bf00      	nop
 800b33c:	20008838 	.word	0x20008838

0800b340 <__malloc_lock>:
 800b340:	4801      	ldr	r0, [pc, #4]	@ (800b348 <__malloc_lock+0x8>)
 800b342:	f7ff bf00 	b.w	800b146 <__retarget_lock_acquire_recursive>
 800b346:	bf00      	nop
 800b348:	20008830 	.word	0x20008830

0800b34c <__malloc_unlock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	@ (800b354 <__malloc_unlock+0x8>)
 800b34e:	f7ff befb 	b.w	800b148 <__retarget_lock_release_recursive>
 800b352:	bf00      	nop
 800b354:	20008830 	.word	0x20008830

0800b358 <__sfputc_r>:
 800b358:	6893      	ldr	r3, [r2, #8]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	b410      	push	{r4}
 800b360:	6093      	str	r3, [r2, #8]
 800b362:	da08      	bge.n	800b376 <__sfputc_r+0x1e>
 800b364:	6994      	ldr	r4, [r2, #24]
 800b366:	42a3      	cmp	r3, r4
 800b368:	db01      	blt.n	800b36e <__sfputc_r+0x16>
 800b36a:	290a      	cmp	r1, #10
 800b36c:	d103      	bne.n	800b376 <__sfputc_r+0x1e>
 800b36e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b372:	f7ff bdda 	b.w	800af2a <__swbuf_r>
 800b376:	6813      	ldr	r3, [r2, #0]
 800b378:	1c58      	adds	r0, r3, #1
 800b37a:	6010      	str	r0, [r2, #0]
 800b37c:	7019      	strb	r1, [r3, #0]
 800b37e:	4608      	mov	r0, r1
 800b380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <__sfputs_r>:
 800b386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b388:	4606      	mov	r6, r0
 800b38a:	460f      	mov	r7, r1
 800b38c:	4614      	mov	r4, r2
 800b38e:	18d5      	adds	r5, r2, r3
 800b390:	42ac      	cmp	r4, r5
 800b392:	d101      	bne.n	800b398 <__sfputs_r+0x12>
 800b394:	2000      	movs	r0, #0
 800b396:	e007      	b.n	800b3a8 <__sfputs_r+0x22>
 800b398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b39c:	463a      	mov	r2, r7
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f7ff ffda 	bl	800b358 <__sfputc_r>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d1f3      	bne.n	800b390 <__sfputs_r+0xa>
 800b3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3ac <_vfiprintf_r>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	460d      	mov	r5, r1
 800b3b2:	b09d      	sub	sp, #116	@ 0x74
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	4698      	mov	r8, r3
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	b118      	cbz	r0, 800b3c4 <_vfiprintf_r+0x18>
 800b3bc:	6a03      	ldr	r3, [r0, #32]
 800b3be:	b90b      	cbnz	r3, 800b3c4 <_vfiprintf_r+0x18>
 800b3c0:	f7ff fcca 	bl	800ad58 <__sinit>
 800b3c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3c6:	07d9      	lsls	r1, r3, #31
 800b3c8:	d405      	bmi.n	800b3d6 <_vfiprintf_r+0x2a>
 800b3ca:	89ab      	ldrh	r3, [r5, #12]
 800b3cc:	059a      	lsls	r2, r3, #22
 800b3ce:	d402      	bmi.n	800b3d6 <_vfiprintf_r+0x2a>
 800b3d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3d2:	f7ff feb8 	bl	800b146 <__retarget_lock_acquire_recursive>
 800b3d6:	89ab      	ldrh	r3, [r5, #12]
 800b3d8:	071b      	lsls	r3, r3, #28
 800b3da:	d501      	bpl.n	800b3e0 <_vfiprintf_r+0x34>
 800b3dc:	692b      	ldr	r3, [r5, #16]
 800b3de:	b99b      	cbnz	r3, 800b408 <_vfiprintf_r+0x5c>
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7ff fde0 	bl	800afa8 <__swsetup_r>
 800b3e8:	b170      	cbz	r0, 800b408 <_vfiprintf_r+0x5c>
 800b3ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3ec:	07dc      	lsls	r4, r3, #31
 800b3ee:	d504      	bpl.n	800b3fa <_vfiprintf_r+0x4e>
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f4:	b01d      	add	sp, #116	@ 0x74
 800b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fa:	89ab      	ldrh	r3, [r5, #12]
 800b3fc:	0598      	lsls	r0, r3, #22
 800b3fe:	d4f7      	bmi.n	800b3f0 <_vfiprintf_r+0x44>
 800b400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b402:	f7ff fea1 	bl	800b148 <__retarget_lock_release_recursive>
 800b406:	e7f3      	b.n	800b3f0 <_vfiprintf_r+0x44>
 800b408:	2300      	movs	r3, #0
 800b40a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b40c:	2320      	movs	r3, #32
 800b40e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b412:	f8cd 800c 	str.w	r8, [sp, #12]
 800b416:	2330      	movs	r3, #48	@ 0x30
 800b418:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5c8 <_vfiprintf_r+0x21c>
 800b41c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b420:	f04f 0901 	mov.w	r9, #1
 800b424:	4623      	mov	r3, r4
 800b426:	469a      	mov	sl, r3
 800b428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b42c:	b10a      	cbz	r2, 800b432 <_vfiprintf_r+0x86>
 800b42e:	2a25      	cmp	r2, #37	@ 0x25
 800b430:	d1f9      	bne.n	800b426 <_vfiprintf_r+0x7a>
 800b432:	ebba 0b04 	subs.w	fp, sl, r4
 800b436:	d00b      	beq.n	800b450 <_vfiprintf_r+0xa4>
 800b438:	465b      	mov	r3, fp
 800b43a:	4622      	mov	r2, r4
 800b43c:	4629      	mov	r1, r5
 800b43e:	4630      	mov	r0, r6
 800b440:	f7ff ffa1 	bl	800b386 <__sfputs_r>
 800b444:	3001      	adds	r0, #1
 800b446:	f000 80a7 	beq.w	800b598 <_vfiprintf_r+0x1ec>
 800b44a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b44c:	445a      	add	r2, fp
 800b44e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b450:	f89a 3000 	ldrb.w	r3, [sl]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 809f 	beq.w	800b598 <_vfiprintf_r+0x1ec>
 800b45a:	2300      	movs	r3, #0
 800b45c:	f04f 32ff 	mov.w	r2, #4294967295
 800b460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b464:	f10a 0a01 	add.w	sl, sl, #1
 800b468:	9304      	str	r3, [sp, #16]
 800b46a:	9307      	str	r3, [sp, #28]
 800b46c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b470:	931a      	str	r3, [sp, #104]	@ 0x68
 800b472:	4654      	mov	r4, sl
 800b474:	2205      	movs	r2, #5
 800b476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b47a:	4853      	ldr	r0, [pc, #332]	@ (800b5c8 <_vfiprintf_r+0x21c>)
 800b47c:	f7f4 feb8 	bl	80001f0 <memchr>
 800b480:	9a04      	ldr	r2, [sp, #16]
 800b482:	b9d8      	cbnz	r0, 800b4bc <_vfiprintf_r+0x110>
 800b484:	06d1      	lsls	r1, r2, #27
 800b486:	bf44      	itt	mi
 800b488:	2320      	movmi	r3, #32
 800b48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b48e:	0713      	lsls	r3, r2, #28
 800b490:	bf44      	itt	mi
 800b492:	232b      	movmi	r3, #43	@ 0x2b
 800b494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b498:	f89a 3000 	ldrb.w	r3, [sl]
 800b49c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b49e:	d015      	beq.n	800b4cc <_vfiprintf_r+0x120>
 800b4a0:	9a07      	ldr	r2, [sp, #28]
 800b4a2:	4654      	mov	r4, sl
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	f04f 0c0a 	mov.w	ip, #10
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4b0:	3b30      	subs	r3, #48	@ 0x30
 800b4b2:	2b09      	cmp	r3, #9
 800b4b4:	d94b      	bls.n	800b54e <_vfiprintf_r+0x1a2>
 800b4b6:	b1b0      	cbz	r0, 800b4e6 <_vfiprintf_r+0x13a>
 800b4b8:	9207      	str	r2, [sp, #28]
 800b4ba:	e014      	b.n	800b4e6 <_vfiprintf_r+0x13a>
 800b4bc:	eba0 0308 	sub.w	r3, r0, r8
 800b4c0:	fa09 f303 	lsl.w	r3, r9, r3
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	9304      	str	r3, [sp, #16]
 800b4c8:	46a2      	mov	sl, r4
 800b4ca:	e7d2      	b.n	800b472 <_vfiprintf_r+0xc6>
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	1d19      	adds	r1, r3, #4
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	9103      	str	r1, [sp, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	bfbb      	ittet	lt
 800b4d8:	425b      	neglt	r3, r3
 800b4da:	f042 0202 	orrlt.w	r2, r2, #2
 800b4de:	9307      	strge	r3, [sp, #28]
 800b4e0:	9307      	strlt	r3, [sp, #28]
 800b4e2:	bfb8      	it	lt
 800b4e4:	9204      	strlt	r2, [sp, #16]
 800b4e6:	7823      	ldrb	r3, [r4, #0]
 800b4e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4ea:	d10a      	bne.n	800b502 <_vfiprintf_r+0x156>
 800b4ec:	7863      	ldrb	r3, [r4, #1]
 800b4ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4f0:	d132      	bne.n	800b558 <_vfiprintf_r+0x1ac>
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	1d1a      	adds	r2, r3, #4
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	9203      	str	r2, [sp, #12]
 800b4fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4fe:	3402      	adds	r4, #2
 800b500:	9305      	str	r3, [sp, #20]
 800b502:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5d8 <_vfiprintf_r+0x22c>
 800b506:	7821      	ldrb	r1, [r4, #0]
 800b508:	2203      	movs	r2, #3
 800b50a:	4650      	mov	r0, sl
 800b50c:	f7f4 fe70 	bl	80001f0 <memchr>
 800b510:	b138      	cbz	r0, 800b522 <_vfiprintf_r+0x176>
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	eba0 000a 	sub.w	r0, r0, sl
 800b518:	2240      	movs	r2, #64	@ 0x40
 800b51a:	4082      	lsls	r2, r0
 800b51c:	4313      	orrs	r3, r2
 800b51e:	3401      	adds	r4, #1
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b526:	4829      	ldr	r0, [pc, #164]	@ (800b5cc <_vfiprintf_r+0x220>)
 800b528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b52c:	2206      	movs	r2, #6
 800b52e:	f7f4 fe5f 	bl	80001f0 <memchr>
 800b532:	2800      	cmp	r0, #0
 800b534:	d03f      	beq.n	800b5b6 <_vfiprintf_r+0x20a>
 800b536:	4b26      	ldr	r3, [pc, #152]	@ (800b5d0 <_vfiprintf_r+0x224>)
 800b538:	bb1b      	cbnz	r3, 800b582 <_vfiprintf_r+0x1d6>
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	3307      	adds	r3, #7
 800b53e:	f023 0307 	bic.w	r3, r3, #7
 800b542:	3308      	adds	r3, #8
 800b544:	9303      	str	r3, [sp, #12]
 800b546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b548:	443b      	add	r3, r7
 800b54a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b54c:	e76a      	b.n	800b424 <_vfiprintf_r+0x78>
 800b54e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b552:	460c      	mov	r4, r1
 800b554:	2001      	movs	r0, #1
 800b556:	e7a8      	b.n	800b4aa <_vfiprintf_r+0xfe>
 800b558:	2300      	movs	r3, #0
 800b55a:	3401      	adds	r4, #1
 800b55c:	9305      	str	r3, [sp, #20]
 800b55e:	4619      	mov	r1, r3
 800b560:	f04f 0c0a 	mov.w	ip, #10
 800b564:	4620      	mov	r0, r4
 800b566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b56a:	3a30      	subs	r2, #48	@ 0x30
 800b56c:	2a09      	cmp	r2, #9
 800b56e:	d903      	bls.n	800b578 <_vfiprintf_r+0x1cc>
 800b570:	2b00      	cmp	r3, #0
 800b572:	d0c6      	beq.n	800b502 <_vfiprintf_r+0x156>
 800b574:	9105      	str	r1, [sp, #20]
 800b576:	e7c4      	b.n	800b502 <_vfiprintf_r+0x156>
 800b578:	fb0c 2101 	mla	r1, ip, r1, r2
 800b57c:	4604      	mov	r4, r0
 800b57e:	2301      	movs	r3, #1
 800b580:	e7f0      	b.n	800b564 <_vfiprintf_r+0x1b8>
 800b582:	ab03      	add	r3, sp, #12
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	462a      	mov	r2, r5
 800b588:	4b12      	ldr	r3, [pc, #72]	@ (800b5d4 <_vfiprintf_r+0x228>)
 800b58a:	a904      	add	r1, sp, #16
 800b58c:	4630      	mov	r0, r6
 800b58e:	f3af 8000 	nop.w
 800b592:	4607      	mov	r7, r0
 800b594:	1c78      	adds	r0, r7, #1
 800b596:	d1d6      	bne.n	800b546 <_vfiprintf_r+0x19a>
 800b598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b59a:	07d9      	lsls	r1, r3, #31
 800b59c:	d405      	bmi.n	800b5aa <_vfiprintf_r+0x1fe>
 800b59e:	89ab      	ldrh	r3, [r5, #12]
 800b5a0:	059a      	lsls	r2, r3, #22
 800b5a2:	d402      	bmi.n	800b5aa <_vfiprintf_r+0x1fe>
 800b5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5a6:	f7ff fdcf 	bl	800b148 <__retarget_lock_release_recursive>
 800b5aa:	89ab      	ldrh	r3, [r5, #12]
 800b5ac:	065b      	lsls	r3, r3, #25
 800b5ae:	f53f af1f 	bmi.w	800b3f0 <_vfiprintf_r+0x44>
 800b5b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5b4:	e71e      	b.n	800b3f4 <_vfiprintf_r+0x48>
 800b5b6:	ab03      	add	r3, sp, #12
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	462a      	mov	r2, r5
 800b5bc:	4b05      	ldr	r3, [pc, #20]	@ (800b5d4 <_vfiprintf_r+0x228>)
 800b5be:	a904      	add	r1, sp, #16
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f000 f879 	bl	800b6b8 <_printf_i>
 800b5c6:	e7e4      	b.n	800b592 <_vfiprintf_r+0x1e6>
 800b5c8:	0800bc80 	.word	0x0800bc80
 800b5cc:	0800bc8a 	.word	0x0800bc8a
 800b5d0:	00000000 	.word	0x00000000
 800b5d4:	0800b387 	.word	0x0800b387
 800b5d8:	0800bc86 	.word	0x0800bc86

0800b5dc <_printf_common>:
 800b5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e0:	4616      	mov	r6, r2
 800b5e2:	4698      	mov	r8, r3
 800b5e4:	688a      	ldr	r2, [r1, #8]
 800b5e6:	690b      	ldr	r3, [r1, #16]
 800b5e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	bfb8      	it	lt
 800b5f0:	4613      	movlt	r3, r2
 800b5f2:	6033      	str	r3, [r6, #0]
 800b5f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	b10a      	cbz	r2, 800b602 <_printf_common+0x26>
 800b5fe:	3301      	adds	r3, #1
 800b600:	6033      	str	r3, [r6, #0]
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	0699      	lsls	r1, r3, #26
 800b606:	bf42      	ittt	mi
 800b608:	6833      	ldrmi	r3, [r6, #0]
 800b60a:	3302      	addmi	r3, #2
 800b60c:	6033      	strmi	r3, [r6, #0]
 800b60e:	6825      	ldr	r5, [r4, #0]
 800b610:	f015 0506 	ands.w	r5, r5, #6
 800b614:	d106      	bne.n	800b624 <_printf_common+0x48>
 800b616:	f104 0a19 	add.w	sl, r4, #25
 800b61a:	68e3      	ldr	r3, [r4, #12]
 800b61c:	6832      	ldr	r2, [r6, #0]
 800b61e:	1a9b      	subs	r3, r3, r2
 800b620:	42ab      	cmp	r3, r5
 800b622:	dc26      	bgt.n	800b672 <_printf_common+0x96>
 800b624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b628:	6822      	ldr	r2, [r4, #0]
 800b62a:	3b00      	subs	r3, #0
 800b62c:	bf18      	it	ne
 800b62e:	2301      	movne	r3, #1
 800b630:	0692      	lsls	r2, r2, #26
 800b632:	d42b      	bmi.n	800b68c <_printf_common+0xb0>
 800b634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b638:	4641      	mov	r1, r8
 800b63a:	4638      	mov	r0, r7
 800b63c:	47c8      	blx	r9
 800b63e:	3001      	adds	r0, #1
 800b640:	d01e      	beq.n	800b680 <_printf_common+0xa4>
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	6922      	ldr	r2, [r4, #16]
 800b646:	f003 0306 	and.w	r3, r3, #6
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	bf02      	ittt	eq
 800b64e:	68e5      	ldreq	r5, [r4, #12]
 800b650:	6833      	ldreq	r3, [r6, #0]
 800b652:	1aed      	subeq	r5, r5, r3
 800b654:	68a3      	ldr	r3, [r4, #8]
 800b656:	bf0c      	ite	eq
 800b658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b65c:	2500      	movne	r5, #0
 800b65e:	4293      	cmp	r3, r2
 800b660:	bfc4      	itt	gt
 800b662:	1a9b      	subgt	r3, r3, r2
 800b664:	18ed      	addgt	r5, r5, r3
 800b666:	2600      	movs	r6, #0
 800b668:	341a      	adds	r4, #26
 800b66a:	42b5      	cmp	r5, r6
 800b66c:	d11a      	bne.n	800b6a4 <_printf_common+0xc8>
 800b66e:	2000      	movs	r0, #0
 800b670:	e008      	b.n	800b684 <_printf_common+0xa8>
 800b672:	2301      	movs	r3, #1
 800b674:	4652      	mov	r2, sl
 800b676:	4641      	mov	r1, r8
 800b678:	4638      	mov	r0, r7
 800b67a:	47c8      	blx	r9
 800b67c:	3001      	adds	r0, #1
 800b67e:	d103      	bne.n	800b688 <_printf_common+0xac>
 800b680:	f04f 30ff 	mov.w	r0, #4294967295
 800b684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b688:	3501      	adds	r5, #1
 800b68a:	e7c6      	b.n	800b61a <_printf_common+0x3e>
 800b68c:	18e1      	adds	r1, r4, r3
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	2030      	movs	r0, #48	@ 0x30
 800b692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b696:	4422      	add	r2, r4
 800b698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b69c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6a0:	3302      	adds	r3, #2
 800b6a2:	e7c7      	b.n	800b634 <_printf_common+0x58>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	4641      	mov	r1, r8
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	47c8      	blx	r9
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	d0e6      	beq.n	800b680 <_printf_common+0xa4>
 800b6b2:	3601      	adds	r6, #1
 800b6b4:	e7d9      	b.n	800b66a <_printf_common+0x8e>
	...

0800b6b8 <_printf_i>:
 800b6b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6bc:	7e0f      	ldrb	r7, [r1, #24]
 800b6be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6c0:	2f78      	cmp	r7, #120	@ 0x78
 800b6c2:	4691      	mov	r9, r2
 800b6c4:	4680      	mov	r8, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	469a      	mov	sl, r3
 800b6ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6ce:	d807      	bhi.n	800b6e0 <_printf_i+0x28>
 800b6d0:	2f62      	cmp	r7, #98	@ 0x62
 800b6d2:	d80a      	bhi.n	800b6ea <_printf_i+0x32>
 800b6d4:	2f00      	cmp	r7, #0
 800b6d6:	f000 80d2 	beq.w	800b87e <_printf_i+0x1c6>
 800b6da:	2f58      	cmp	r7, #88	@ 0x58
 800b6dc:	f000 80b9 	beq.w	800b852 <_printf_i+0x19a>
 800b6e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6e8:	e03a      	b.n	800b760 <_printf_i+0xa8>
 800b6ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6ee:	2b15      	cmp	r3, #21
 800b6f0:	d8f6      	bhi.n	800b6e0 <_printf_i+0x28>
 800b6f2:	a101      	add	r1, pc, #4	@ (adr r1, 800b6f8 <_printf_i+0x40>)
 800b6f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6f8:	0800b751 	.word	0x0800b751
 800b6fc:	0800b765 	.word	0x0800b765
 800b700:	0800b6e1 	.word	0x0800b6e1
 800b704:	0800b6e1 	.word	0x0800b6e1
 800b708:	0800b6e1 	.word	0x0800b6e1
 800b70c:	0800b6e1 	.word	0x0800b6e1
 800b710:	0800b765 	.word	0x0800b765
 800b714:	0800b6e1 	.word	0x0800b6e1
 800b718:	0800b6e1 	.word	0x0800b6e1
 800b71c:	0800b6e1 	.word	0x0800b6e1
 800b720:	0800b6e1 	.word	0x0800b6e1
 800b724:	0800b865 	.word	0x0800b865
 800b728:	0800b78f 	.word	0x0800b78f
 800b72c:	0800b81f 	.word	0x0800b81f
 800b730:	0800b6e1 	.word	0x0800b6e1
 800b734:	0800b6e1 	.word	0x0800b6e1
 800b738:	0800b887 	.word	0x0800b887
 800b73c:	0800b6e1 	.word	0x0800b6e1
 800b740:	0800b78f 	.word	0x0800b78f
 800b744:	0800b6e1 	.word	0x0800b6e1
 800b748:	0800b6e1 	.word	0x0800b6e1
 800b74c:	0800b827 	.word	0x0800b827
 800b750:	6833      	ldr	r3, [r6, #0]
 800b752:	1d1a      	adds	r2, r3, #4
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6032      	str	r2, [r6, #0]
 800b758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b75c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b760:	2301      	movs	r3, #1
 800b762:	e09d      	b.n	800b8a0 <_printf_i+0x1e8>
 800b764:	6833      	ldr	r3, [r6, #0]
 800b766:	6820      	ldr	r0, [r4, #0]
 800b768:	1d19      	adds	r1, r3, #4
 800b76a:	6031      	str	r1, [r6, #0]
 800b76c:	0606      	lsls	r6, r0, #24
 800b76e:	d501      	bpl.n	800b774 <_printf_i+0xbc>
 800b770:	681d      	ldr	r5, [r3, #0]
 800b772:	e003      	b.n	800b77c <_printf_i+0xc4>
 800b774:	0645      	lsls	r5, r0, #25
 800b776:	d5fb      	bpl.n	800b770 <_printf_i+0xb8>
 800b778:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b77c:	2d00      	cmp	r5, #0
 800b77e:	da03      	bge.n	800b788 <_printf_i+0xd0>
 800b780:	232d      	movs	r3, #45	@ 0x2d
 800b782:	426d      	negs	r5, r5
 800b784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b788:	4859      	ldr	r0, [pc, #356]	@ (800b8f0 <_printf_i+0x238>)
 800b78a:	230a      	movs	r3, #10
 800b78c:	e011      	b.n	800b7b2 <_printf_i+0xfa>
 800b78e:	6821      	ldr	r1, [r4, #0]
 800b790:	6833      	ldr	r3, [r6, #0]
 800b792:	0608      	lsls	r0, r1, #24
 800b794:	f853 5b04 	ldr.w	r5, [r3], #4
 800b798:	d402      	bmi.n	800b7a0 <_printf_i+0xe8>
 800b79a:	0649      	lsls	r1, r1, #25
 800b79c:	bf48      	it	mi
 800b79e:	b2ad      	uxthmi	r5, r5
 800b7a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7a2:	4853      	ldr	r0, [pc, #332]	@ (800b8f0 <_printf_i+0x238>)
 800b7a4:	6033      	str	r3, [r6, #0]
 800b7a6:	bf14      	ite	ne
 800b7a8:	230a      	movne	r3, #10
 800b7aa:	2308      	moveq	r3, #8
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7b2:	6866      	ldr	r6, [r4, #4]
 800b7b4:	60a6      	str	r6, [r4, #8]
 800b7b6:	2e00      	cmp	r6, #0
 800b7b8:	bfa2      	ittt	ge
 800b7ba:	6821      	ldrge	r1, [r4, #0]
 800b7bc:	f021 0104 	bicge.w	r1, r1, #4
 800b7c0:	6021      	strge	r1, [r4, #0]
 800b7c2:	b90d      	cbnz	r5, 800b7c8 <_printf_i+0x110>
 800b7c4:	2e00      	cmp	r6, #0
 800b7c6:	d04b      	beq.n	800b860 <_printf_i+0x1a8>
 800b7c8:	4616      	mov	r6, r2
 800b7ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7ce:	fb03 5711 	mls	r7, r3, r1, r5
 800b7d2:	5dc7      	ldrb	r7, [r0, r7]
 800b7d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7d8:	462f      	mov	r7, r5
 800b7da:	42bb      	cmp	r3, r7
 800b7dc:	460d      	mov	r5, r1
 800b7de:	d9f4      	bls.n	800b7ca <_printf_i+0x112>
 800b7e0:	2b08      	cmp	r3, #8
 800b7e2:	d10b      	bne.n	800b7fc <_printf_i+0x144>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	07df      	lsls	r7, r3, #31
 800b7e8:	d508      	bpl.n	800b7fc <_printf_i+0x144>
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	6861      	ldr	r1, [r4, #4]
 800b7ee:	4299      	cmp	r1, r3
 800b7f0:	bfde      	ittt	le
 800b7f2:	2330      	movle	r3, #48	@ 0x30
 800b7f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7fc:	1b92      	subs	r2, r2, r6
 800b7fe:	6122      	str	r2, [r4, #16]
 800b800:	f8cd a000 	str.w	sl, [sp]
 800b804:	464b      	mov	r3, r9
 800b806:	aa03      	add	r2, sp, #12
 800b808:	4621      	mov	r1, r4
 800b80a:	4640      	mov	r0, r8
 800b80c:	f7ff fee6 	bl	800b5dc <_printf_common>
 800b810:	3001      	adds	r0, #1
 800b812:	d14a      	bne.n	800b8aa <_printf_i+0x1f2>
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	b004      	add	sp, #16
 800b81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	f043 0320 	orr.w	r3, r3, #32
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	4833      	ldr	r0, [pc, #204]	@ (800b8f4 <_printf_i+0x23c>)
 800b828:	2778      	movs	r7, #120	@ 0x78
 800b82a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	6831      	ldr	r1, [r6, #0]
 800b832:	061f      	lsls	r7, r3, #24
 800b834:	f851 5b04 	ldr.w	r5, [r1], #4
 800b838:	d402      	bmi.n	800b840 <_printf_i+0x188>
 800b83a:	065f      	lsls	r7, r3, #25
 800b83c:	bf48      	it	mi
 800b83e:	b2ad      	uxthmi	r5, r5
 800b840:	6031      	str	r1, [r6, #0]
 800b842:	07d9      	lsls	r1, r3, #31
 800b844:	bf44      	itt	mi
 800b846:	f043 0320 	orrmi.w	r3, r3, #32
 800b84a:	6023      	strmi	r3, [r4, #0]
 800b84c:	b11d      	cbz	r5, 800b856 <_printf_i+0x19e>
 800b84e:	2310      	movs	r3, #16
 800b850:	e7ac      	b.n	800b7ac <_printf_i+0xf4>
 800b852:	4827      	ldr	r0, [pc, #156]	@ (800b8f0 <_printf_i+0x238>)
 800b854:	e7e9      	b.n	800b82a <_printf_i+0x172>
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	f023 0320 	bic.w	r3, r3, #32
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	e7f6      	b.n	800b84e <_printf_i+0x196>
 800b860:	4616      	mov	r6, r2
 800b862:	e7bd      	b.n	800b7e0 <_printf_i+0x128>
 800b864:	6833      	ldr	r3, [r6, #0]
 800b866:	6825      	ldr	r5, [r4, #0]
 800b868:	6961      	ldr	r1, [r4, #20]
 800b86a:	1d18      	adds	r0, r3, #4
 800b86c:	6030      	str	r0, [r6, #0]
 800b86e:	062e      	lsls	r6, r5, #24
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	d501      	bpl.n	800b878 <_printf_i+0x1c0>
 800b874:	6019      	str	r1, [r3, #0]
 800b876:	e002      	b.n	800b87e <_printf_i+0x1c6>
 800b878:	0668      	lsls	r0, r5, #25
 800b87a:	d5fb      	bpl.n	800b874 <_printf_i+0x1bc>
 800b87c:	8019      	strh	r1, [r3, #0]
 800b87e:	2300      	movs	r3, #0
 800b880:	6123      	str	r3, [r4, #16]
 800b882:	4616      	mov	r6, r2
 800b884:	e7bc      	b.n	800b800 <_printf_i+0x148>
 800b886:	6833      	ldr	r3, [r6, #0]
 800b888:	1d1a      	adds	r2, r3, #4
 800b88a:	6032      	str	r2, [r6, #0]
 800b88c:	681e      	ldr	r6, [r3, #0]
 800b88e:	6862      	ldr	r2, [r4, #4]
 800b890:	2100      	movs	r1, #0
 800b892:	4630      	mov	r0, r6
 800b894:	f7f4 fcac 	bl	80001f0 <memchr>
 800b898:	b108      	cbz	r0, 800b89e <_printf_i+0x1e6>
 800b89a:	1b80      	subs	r0, r0, r6
 800b89c:	6060      	str	r0, [r4, #4]
 800b89e:	6863      	ldr	r3, [r4, #4]
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8a8:	e7aa      	b.n	800b800 <_printf_i+0x148>
 800b8aa:	6923      	ldr	r3, [r4, #16]
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	47d0      	blx	sl
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	d0ad      	beq.n	800b814 <_printf_i+0x15c>
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	079b      	lsls	r3, r3, #30
 800b8bc:	d413      	bmi.n	800b8e6 <_printf_i+0x22e>
 800b8be:	68e0      	ldr	r0, [r4, #12]
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	4298      	cmp	r0, r3
 800b8c4:	bfb8      	it	lt
 800b8c6:	4618      	movlt	r0, r3
 800b8c8:	e7a6      	b.n	800b818 <_printf_i+0x160>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	47d0      	blx	sl
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d09d      	beq.n	800b814 <_printf_i+0x15c>
 800b8d8:	3501      	adds	r5, #1
 800b8da:	68e3      	ldr	r3, [r4, #12]
 800b8dc:	9903      	ldr	r1, [sp, #12]
 800b8de:	1a5b      	subs	r3, r3, r1
 800b8e0:	42ab      	cmp	r3, r5
 800b8e2:	dcf2      	bgt.n	800b8ca <_printf_i+0x212>
 800b8e4:	e7eb      	b.n	800b8be <_printf_i+0x206>
 800b8e6:	2500      	movs	r5, #0
 800b8e8:	f104 0619 	add.w	r6, r4, #25
 800b8ec:	e7f5      	b.n	800b8da <_printf_i+0x222>
 800b8ee:	bf00      	nop
 800b8f0:	0800bc91 	.word	0x0800bc91
 800b8f4:	0800bca2 	.word	0x0800bca2

0800b8f8 <__sflush_r>:
 800b8f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b900:	0716      	lsls	r6, r2, #28
 800b902:	4605      	mov	r5, r0
 800b904:	460c      	mov	r4, r1
 800b906:	d454      	bmi.n	800b9b2 <__sflush_r+0xba>
 800b908:	684b      	ldr	r3, [r1, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	dc02      	bgt.n	800b914 <__sflush_r+0x1c>
 800b90e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b910:	2b00      	cmp	r3, #0
 800b912:	dd48      	ble.n	800b9a6 <__sflush_r+0xae>
 800b914:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b916:	2e00      	cmp	r6, #0
 800b918:	d045      	beq.n	800b9a6 <__sflush_r+0xae>
 800b91a:	2300      	movs	r3, #0
 800b91c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b920:	682f      	ldr	r7, [r5, #0]
 800b922:	6a21      	ldr	r1, [r4, #32]
 800b924:	602b      	str	r3, [r5, #0]
 800b926:	d030      	beq.n	800b98a <__sflush_r+0x92>
 800b928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	0759      	lsls	r1, r3, #29
 800b92e:	d505      	bpl.n	800b93c <__sflush_r+0x44>
 800b930:	6863      	ldr	r3, [r4, #4]
 800b932:	1ad2      	subs	r2, r2, r3
 800b934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b936:	b10b      	cbz	r3, 800b93c <__sflush_r+0x44>
 800b938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b93a:	1ad2      	subs	r2, r2, r3
 800b93c:	2300      	movs	r3, #0
 800b93e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b940:	6a21      	ldr	r1, [r4, #32]
 800b942:	4628      	mov	r0, r5
 800b944:	47b0      	blx	r6
 800b946:	1c43      	adds	r3, r0, #1
 800b948:	89a3      	ldrh	r3, [r4, #12]
 800b94a:	d106      	bne.n	800b95a <__sflush_r+0x62>
 800b94c:	6829      	ldr	r1, [r5, #0]
 800b94e:	291d      	cmp	r1, #29
 800b950:	d82b      	bhi.n	800b9aa <__sflush_r+0xb2>
 800b952:	4a2a      	ldr	r2, [pc, #168]	@ (800b9fc <__sflush_r+0x104>)
 800b954:	410a      	asrs	r2, r1
 800b956:	07d6      	lsls	r6, r2, #31
 800b958:	d427      	bmi.n	800b9aa <__sflush_r+0xb2>
 800b95a:	2200      	movs	r2, #0
 800b95c:	6062      	str	r2, [r4, #4]
 800b95e:	04d9      	lsls	r1, r3, #19
 800b960:	6922      	ldr	r2, [r4, #16]
 800b962:	6022      	str	r2, [r4, #0]
 800b964:	d504      	bpl.n	800b970 <__sflush_r+0x78>
 800b966:	1c42      	adds	r2, r0, #1
 800b968:	d101      	bne.n	800b96e <__sflush_r+0x76>
 800b96a:	682b      	ldr	r3, [r5, #0]
 800b96c:	b903      	cbnz	r3, 800b970 <__sflush_r+0x78>
 800b96e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b972:	602f      	str	r7, [r5, #0]
 800b974:	b1b9      	cbz	r1, 800b9a6 <__sflush_r+0xae>
 800b976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b97a:	4299      	cmp	r1, r3
 800b97c:	d002      	beq.n	800b984 <__sflush_r+0x8c>
 800b97e:	4628      	mov	r0, r5
 800b980:	f7ff fbf2 	bl	800b168 <_free_r>
 800b984:	2300      	movs	r3, #0
 800b986:	6363      	str	r3, [r4, #52]	@ 0x34
 800b988:	e00d      	b.n	800b9a6 <__sflush_r+0xae>
 800b98a:	2301      	movs	r3, #1
 800b98c:	4628      	mov	r0, r5
 800b98e:	47b0      	blx	r6
 800b990:	4602      	mov	r2, r0
 800b992:	1c50      	adds	r0, r2, #1
 800b994:	d1c9      	bne.n	800b92a <__sflush_r+0x32>
 800b996:	682b      	ldr	r3, [r5, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0c6      	beq.n	800b92a <__sflush_r+0x32>
 800b99c:	2b1d      	cmp	r3, #29
 800b99e:	d001      	beq.n	800b9a4 <__sflush_r+0xac>
 800b9a0:	2b16      	cmp	r3, #22
 800b9a2:	d11e      	bne.n	800b9e2 <__sflush_r+0xea>
 800b9a4:	602f      	str	r7, [r5, #0]
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	e022      	b.n	800b9f0 <__sflush_r+0xf8>
 800b9aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9ae:	b21b      	sxth	r3, r3
 800b9b0:	e01b      	b.n	800b9ea <__sflush_r+0xf2>
 800b9b2:	690f      	ldr	r7, [r1, #16]
 800b9b4:	2f00      	cmp	r7, #0
 800b9b6:	d0f6      	beq.n	800b9a6 <__sflush_r+0xae>
 800b9b8:	0793      	lsls	r3, r2, #30
 800b9ba:	680e      	ldr	r6, [r1, #0]
 800b9bc:	bf08      	it	eq
 800b9be:	694b      	ldreq	r3, [r1, #20]
 800b9c0:	600f      	str	r7, [r1, #0]
 800b9c2:	bf18      	it	ne
 800b9c4:	2300      	movne	r3, #0
 800b9c6:	eba6 0807 	sub.w	r8, r6, r7
 800b9ca:	608b      	str	r3, [r1, #8]
 800b9cc:	f1b8 0f00 	cmp.w	r8, #0
 800b9d0:	dde9      	ble.n	800b9a6 <__sflush_r+0xae>
 800b9d2:	6a21      	ldr	r1, [r4, #32]
 800b9d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b9d6:	4643      	mov	r3, r8
 800b9d8:	463a      	mov	r2, r7
 800b9da:	4628      	mov	r0, r5
 800b9dc:	47b0      	blx	r6
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	dc08      	bgt.n	800b9f4 <__sflush_r+0xfc>
 800b9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f4:	4407      	add	r7, r0
 800b9f6:	eba8 0800 	sub.w	r8, r8, r0
 800b9fa:	e7e7      	b.n	800b9cc <__sflush_r+0xd4>
 800b9fc:	dfbffffe 	.word	0xdfbffffe

0800ba00 <_fflush_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	690b      	ldr	r3, [r1, #16]
 800ba04:	4605      	mov	r5, r0
 800ba06:	460c      	mov	r4, r1
 800ba08:	b913      	cbnz	r3, 800ba10 <_fflush_r+0x10>
 800ba0a:	2500      	movs	r5, #0
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	b118      	cbz	r0, 800ba1a <_fflush_r+0x1a>
 800ba12:	6a03      	ldr	r3, [r0, #32]
 800ba14:	b90b      	cbnz	r3, 800ba1a <_fflush_r+0x1a>
 800ba16:	f7ff f99f 	bl	800ad58 <__sinit>
 800ba1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0f3      	beq.n	800ba0a <_fflush_r+0xa>
 800ba22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba24:	07d0      	lsls	r0, r2, #31
 800ba26:	d404      	bmi.n	800ba32 <_fflush_r+0x32>
 800ba28:	0599      	lsls	r1, r3, #22
 800ba2a:	d402      	bmi.n	800ba32 <_fflush_r+0x32>
 800ba2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba2e:	f7ff fb8a 	bl	800b146 <__retarget_lock_acquire_recursive>
 800ba32:	4628      	mov	r0, r5
 800ba34:	4621      	mov	r1, r4
 800ba36:	f7ff ff5f 	bl	800b8f8 <__sflush_r>
 800ba3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba3c:	07da      	lsls	r2, r3, #31
 800ba3e:	4605      	mov	r5, r0
 800ba40:	d4e4      	bmi.n	800ba0c <_fflush_r+0xc>
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	059b      	lsls	r3, r3, #22
 800ba46:	d4e1      	bmi.n	800ba0c <_fflush_r+0xc>
 800ba48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba4a:	f7ff fb7d 	bl	800b148 <__retarget_lock_release_recursive>
 800ba4e:	e7dd      	b.n	800ba0c <_fflush_r+0xc>

0800ba50 <__swhatbuf_r>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	460c      	mov	r4, r1
 800ba54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba58:	2900      	cmp	r1, #0
 800ba5a:	b096      	sub	sp, #88	@ 0x58
 800ba5c:	4615      	mov	r5, r2
 800ba5e:	461e      	mov	r6, r3
 800ba60:	da0d      	bge.n	800ba7e <__swhatbuf_r+0x2e>
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba68:	f04f 0100 	mov.w	r1, #0
 800ba6c:	bf14      	ite	ne
 800ba6e:	2340      	movne	r3, #64	@ 0x40
 800ba70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba74:	2000      	movs	r0, #0
 800ba76:	6031      	str	r1, [r6, #0]
 800ba78:	602b      	str	r3, [r5, #0]
 800ba7a:	b016      	add	sp, #88	@ 0x58
 800ba7c:	bd70      	pop	{r4, r5, r6, pc}
 800ba7e:	466a      	mov	r2, sp
 800ba80:	f000 f848 	bl	800bb14 <_fstat_r>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	dbec      	blt.n	800ba62 <__swhatbuf_r+0x12>
 800ba88:	9901      	ldr	r1, [sp, #4]
 800ba8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba92:	4259      	negs	r1, r3
 800ba94:	4159      	adcs	r1, r3
 800ba96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba9a:	e7eb      	b.n	800ba74 <__swhatbuf_r+0x24>

0800ba9c <__smakebuf_r>:
 800ba9c:	898b      	ldrh	r3, [r1, #12]
 800ba9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baa0:	079d      	lsls	r5, r3, #30
 800baa2:	4606      	mov	r6, r0
 800baa4:	460c      	mov	r4, r1
 800baa6:	d507      	bpl.n	800bab8 <__smakebuf_r+0x1c>
 800baa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	6123      	str	r3, [r4, #16]
 800bab0:	2301      	movs	r3, #1
 800bab2:	6163      	str	r3, [r4, #20]
 800bab4:	b003      	add	sp, #12
 800bab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab8:	ab01      	add	r3, sp, #4
 800baba:	466a      	mov	r2, sp
 800babc:	f7ff ffc8 	bl	800ba50 <__swhatbuf_r>
 800bac0:	9f00      	ldr	r7, [sp, #0]
 800bac2:	4605      	mov	r5, r0
 800bac4:	4639      	mov	r1, r7
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7ff fbba 	bl	800b240 <_malloc_r>
 800bacc:	b948      	cbnz	r0, 800bae2 <__smakebuf_r+0x46>
 800bace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bad2:	059a      	lsls	r2, r3, #22
 800bad4:	d4ee      	bmi.n	800bab4 <__smakebuf_r+0x18>
 800bad6:	f023 0303 	bic.w	r3, r3, #3
 800bada:	f043 0302 	orr.w	r3, r3, #2
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	e7e2      	b.n	800baa8 <__smakebuf_r+0xc>
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	6020      	str	r0, [r4, #0]
 800bae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800baf2:	b15b      	cbz	r3, 800bb0c <__smakebuf_r+0x70>
 800baf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baf8:	4630      	mov	r0, r6
 800bafa:	f000 f81d 	bl	800bb38 <_isatty_r>
 800bafe:	b128      	cbz	r0, 800bb0c <__smakebuf_r+0x70>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	f023 0303 	bic.w	r3, r3, #3
 800bb06:	f043 0301 	orr.w	r3, r3, #1
 800bb0a:	81a3      	strh	r3, [r4, #12]
 800bb0c:	89a3      	ldrh	r3, [r4, #12]
 800bb0e:	431d      	orrs	r5, r3
 800bb10:	81a5      	strh	r5, [r4, #12]
 800bb12:	e7cf      	b.n	800bab4 <__smakebuf_r+0x18>

0800bb14 <_fstat_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d07      	ldr	r5, [pc, #28]	@ (800bb34 <_fstat_r+0x20>)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	4611      	mov	r1, r2
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	f7f5 fb0c 	bl	800113e <_fstat>
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	d102      	bne.n	800bb30 <_fstat_r+0x1c>
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	b103      	cbz	r3, 800bb30 <_fstat_r+0x1c>
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	bd38      	pop	{r3, r4, r5, pc}
 800bb32:	bf00      	nop
 800bb34:	2000882c 	.word	0x2000882c

0800bb38 <_isatty_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4d06      	ldr	r5, [pc, #24]	@ (800bb54 <_isatty_r+0x1c>)
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4608      	mov	r0, r1
 800bb42:	602b      	str	r3, [r5, #0]
 800bb44:	f7f5 fb0b 	bl	800115e <_isatty>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d102      	bne.n	800bb52 <_isatty_r+0x1a>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	b103      	cbz	r3, 800bb52 <_isatty_r+0x1a>
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	2000882c 	.word	0x2000882c

0800bb58 <_sbrk_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4d06      	ldr	r5, [pc, #24]	@ (800bb74 <_sbrk_r+0x1c>)
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	602b      	str	r3, [r5, #0]
 800bb64:	f7f5 fb14 	bl	8001190 <_sbrk>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_sbrk_r+0x1a>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_sbrk_r+0x1a>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	2000882c 	.word	0x2000882c

0800bb78 <_init>:
 800bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7a:	bf00      	nop
 800bb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb7e:	bc08      	pop	{r3}
 800bb80:	469e      	mov	lr, r3
 800bb82:	4770      	bx	lr

0800bb84 <_fini>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	bf00      	nop
 800bb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb8a:	bc08      	pop	{r3}
 800bb8c:	469e      	mov	lr, r3
 800bb8e:	4770      	bx	lr
