
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000868c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008838  08008838  00009838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a0  080088a0  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080088a0  080088a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a8  080088a8  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a8  080088a8  000098a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088ac  080088ac  000098ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080088b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001e4c  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f48  20001f48  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017944  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cc5  00000000  00000000  00021a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00025738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f63  00000000  00000000  00026b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027066  00000000  00000000  00027acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b759  00000000  00000000  0004eb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de2c2  00000000  00000000  0006a28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014854c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052a8  00000000  00000000  00148590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0014d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008820 	.word	0x08008820

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000100 	.word	0x20000100
 80001e8:	08008820 	.word	0x08008820

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_DMA_Init+0x78>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000554 <MX_DMA_Init+0x78>)
 80004ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_DMA_Init+0x78>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	603b      	str	r3, [r7, #0]
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_DMA_Init+0x78>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	4a13      	ldr	r2, [pc, #76]	@ (8000554 <MX_DMA_Init+0x78>)
 8000508:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800050c:	6313      	str	r3, [r2, #48]	@ 0x30
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_DMA_Init+0x78>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	200c      	movs	r0, #12
 8000520:	f000 fdfd 	bl	800111e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000524:	200c      	movs	r0, #12
 8000526:	f000 fe16 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2010      	movs	r0, #16
 8000530:	f000 fdf5 	bl	800111e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000534:	2010      	movs	r0, #16
 8000536:	f000 fe0e 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	203a      	movs	r0, #58	@ 0x3a
 8000540:	f000 fded 	bl	800111e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000544:	203a      	movs	r0, #58	@ 0x3a
 8000546:	f000 fe06 	bl	8001156 <HAL_NVIC_EnableIRQ>

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023800 	.word	0x40023800

08000558 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	@ 0x28
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	4b37      	ldr	r3, [pc, #220]	@ (8000650 <MX_GPIO_Init+0xf8>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a36      	ldr	r2, [pc, #216]	@ (8000650 <MX_GPIO_Init+0xf8>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b34      	ldr	r3, [pc, #208]	@ (8000650 <MX_GPIO_Init+0xf8>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	4b30      	ldr	r3, [pc, #192]	@ (8000650 <MX_GPIO_Init+0xf8>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a2f      	ldr	r2, [pc, #188]	@ (8000650 <MX_GPIO_Init+0xf8>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b2d      	ldr	r3, [pc, #180]	@ (8000650 <MX_GPIO_Init+0xf8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <MX_GPIO_Init+0xf8>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a28      	ldr	r2, [pc, #160]	@ (8000650 <MX_GPIO_Init+0xf8>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <MX_GPIO_Init+0xf8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <MX_GPIO_Init+0xf8>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a21      	ldr	r2, [pc, #132]	@ (8000650 <MX_GPIO_Init+0xf8>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_GPIO_Init+0xf8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005e4:	481b      	ldr	r0, [pc, #108]	@ (8000654 <MX_GPIO_Init+0xfc>)
 80005e6:	f001 fa67 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4815      	ldr	r0, [pc, #84]	@ (8000658 <MX_GPIO_Init+0x100>)
 8000602:	f001 f8ad 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000606:	f244 0381 	movw	r3, #16513	@ 0x4081
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	480d      	ldr	r0, [pc, #52]	@ (8000654 <MX_GPIO_Init+0xfc>)
 8000620:	f001 f89e 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	@ (8000658 <MX_GPIO_Init+0x100>)
 8000642:	f001 f88d 	bl	8001760 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	@ 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fbec 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f818 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f7ff ff76 	bl	8000558 <MX_GPIO_Init>
  MX_DMA_Init();
 800066c:	f7ff ff36 	bl	80004dc <MX_DMA_Init>
  MX_TIM1_Init();
 8000670:	f000 f93c 	bl	80008ec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000674:	f000 f9b2 	bl	80009dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000678:	f000 f9da 	bl	8000a30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800067c:	f000 fa02 	bl	8000a84 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000680:	f007 fba0 	bl	8007dc4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <main+0x38>)
 8000686:	f003 f9eb 	bl	8003a60 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 800068a:	f000 fba7 	bl	8000ddc <GPIO_Proc>
  {
 800068e:	bf00      	nop
 8000690:	e7fb      	b.n	800068a <main+0x2e>
 8000692:	bf00      	nop
 8000694:	20000118 	.word	0x20000118

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f008 f88e 	bl	80087c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <SystemClock_Config+0xd8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000770 <SystemClock_Config+0xd8>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <SystemClock_Config+0xd8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <SystemClock_Config+0xdc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a24      	ldr	r2, [pc, #144]	@ (8000774 <SystemClock_Config+0xdc>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <SystemClock_Config+0xdc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800070c:	23a8      	movs	r3, #168	@ 0xa8
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fc4f 	bl	8002fc0 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 f826 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2105      	movs	r1, #5
 800074a:	4618      	mov	r0, r3
 800074c:	f002 feb0 	bl	80034b0 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 f80f 	bl	8000778 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 800075a:	2200      	movs	r2, #0
 800075c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8000760:	2001      	movs	r0, #1
 8000762:	f002 ff8b 	bl	800367c <HAL_RCC_MCOConfig>
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <NMI_Handler+0x4>

080007dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <MemManage_Handler+0x4>

080007ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082a:	f000 fb59 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000838:	4802      	ldr	r0, [pc, #8]	@ (8000844 <DMA1_Stream1_IRQHandler+0x10>)
 800083a:	f000 fd55 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200002f8 	.word	0x200002f8

08000848 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800084c:	4802      	ldr	r0, [pc, #8]	@ (8000858 <DMA1_Stream5_IRQHandler+0x10>)
 800084e:	f000 fd4b 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000298 	.word	0x20000298

0800085c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000862:	f003 f96d 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000118 	.word	0x20000118

08000870 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000874:	4802      	ldr	r0, [pc, #8]	@ (8000880 <DMA2_Stream2_IRQHandler+0x10>)
 8000876:	f000 fd37 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000238 	.word	0x20000238

08000884 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <OTG_FS_IRQHandler+0x10>)
 800088a:	f001 fa8c 	bl	8001da6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20001844 	.word	0x20001844

08000898 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  TIM1_CNT_1++;
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008a8:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	20000358 	.word	0x20000358
 80008c4:	2000035c 	.word	0x2000035c

080008c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000908:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <MX_TIM1_Init+0x98>)
 800090a:	4a1f      	ldr	r2, [pc, #124]	@ (8000988 <MX_TIM1_Init+0x9c>)
 800090c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800090e:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <MX_TIM1_Init+0x98>)
 8000910:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000914:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_TIM1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_TIM1_Init+0x98>)
 800091e:	22a7      	movs	r2, #167	@ 0xa7
 8000920:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_TIM1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_TIM1_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <MX_TIM1_Init+0x98>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000934:	4813      	ldr	r0, [pc, #76]	@ (8000984 <MX_TIM1_Init+0x98>)
 8000936:	f003 f843 	bl	80039c0 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000940:	f7ff ff1a 	bl	8000778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_TIM1_Init+0x98>)
 8000952:	f003 f9e5 	bl	8003d20 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800095c:	f7ff ff0c 	bl	8000778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_TIM1_Init+0x98>)
 800096e:	f003 fc0d 	bl	800418c <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000978:	f7ff fefe 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000118 	.word	0x20000118
 8000988:	40010000 	.word	0x40010000

0800098c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0e      	ldr	r2, [pc, #56]	@ (80009d4 <HAL_TIM_Base_MspInit+0x48>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d115      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <HAL_TIM_Base_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <HAL_TIM_Base_MspInit+0x4c>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_TIM_Base_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2019      	movs	r0, #25
 80009c0:	f000 fbad 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009c4:	2019      	movs	r0, #25
 80009c6:	f000 fbc6 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40010000 	.word	0x40010000
 80009d8:	40023800 	.word	0x40023800

080009dc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <MX_USART1_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f003 fc4a 	bl	80042ac <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f7ff feab 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000160 	.word	0x20000160
 8000a2c:	40011000 	.word	0x40011000

08000a30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <MX_USART2_UART_Init+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a68:	f003 fc20 	bl	80042ac <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a72:	f7ff fe81 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200001a8 	.word	0x200001a8
 8000a80:	40004400 	.word	0x40004400

08000a84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <MX_USART3_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_USART3_UART_Init+0x4c>)
 8000abc:	f003 fbf6 	bl	80042ac <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f7ff fe57 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001f0 	.word	0x200001f0
 8000ad4:	40004800 	.word	0x40004800

08000ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	@ 0x38
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a6e      	ldr	r2, [pc, #440]	@ (8000cb0 <HAL_UART_MspInit+0x1d8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d179      	bne.n	8000bee <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	4b6d      	ldr	r3, [pc, #436]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a6c      	ldr	r2, [pc, #432]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	4b66      	ldr	r3, [pc, #408]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a65      	ldr	r2, [pc, #404]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b63      	ldr	r3, [pc, #396]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	4b5f      	ldr	r3, [pc, #380]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b5c      	ldr	r3, [pc, #368]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b60:	2307      	movs	r3, #7
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4853      	ldr	r0, [pc, #332]	@ (8000cb8 <HAL_UART_MspInit+0x1e0>)
 8000b6c:	f000 fdf8 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b70:	2340      	movs	r3, #64	@ 0x40
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b80:	2307      	movs	r3, #7
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	484c      	ldr	r0, [pc, #304]	@ (8000cbc <HAL_UART_MspInit+0x1e4>)
 8000b8c:	f000 fde8 	bl	8001760 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b90:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000b92:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc4 <HAL_UART_MspInit+0x1ec>)
 8000b94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b96:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000b98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9e:	4b48      	ldr	r3, [pc, #288]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba4:	4b46      	ldr	r3, [pc, #280]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000baa:	4b45      	ldr	r3, [pc, #276]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000bac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb2:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bb8:	4b41      	ldr	r3, [pc, #260]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000bbe:	4b40      	ldr	r3, [pc, #256]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bca:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bd0:	483b      	ldr	r0, [pc, #236]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000bd2:	f000 fadb 	bl	800118c <HAL_DMA_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000bdc:	f7ff fdcc 	bl	8000778 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a37      	ldr	r2, [pc, #220]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000be4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be6:	4a36      	ldr	r2, [pc, #216]	@ (8000cc0 <HAL_UART_MspInit+0x1e8>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bec:	e0d2      	b.n	8000d94 <HAL_UART_MspInit+0x2bc>
  else if(uartHandle->Instance==USART2)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a35      	ldr	r2, [pc, #212]	@ (8000cc8 <HAL_UART_MspInit+0x1f0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d16d      	bne.n	8000cd4 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c00:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c08:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	4a25      	ldr	r2, [pc, #148]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c24:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <HAL_UART_MspInit+0x1dc>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c30:	230c      	movs	r3, #12
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c40:	2307      	movs	r3, #7
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481b      	ldr	r0, [pc, #108]	@ (8000cb8 <HAL_UART_MspInit+0x1e0>)
 8000c4c:	f000 fd88 	bl	8001760 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c52:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <HAL_UART_MspInit+0x1f8>)
 8000c54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c58:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c64:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c70:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c72:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c90:	480e      	ldr	r0, [pc, #56]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000c92:	f000 fa7b 	bl	800118c <HAL_DMA_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8000c9c:	f7ff fd6c 	bl	8000778 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ca6:	4a09      	ldr	r2, [pc, #36]	@ (8000ccc <HAL_UART_MspInit+0x1f4>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000cac:	e072      	b.n	8000d94 <HAL_UART_MspInit+0x2bc>
 8000cae:	bf00      	nop
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	20000238 	.word	0x20000238
 8000cc4:	40026440 	.word	0x40026440
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	20000298 	.word	0x20000298
 8000cd0:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a30      	ldr	r2, [pc, #192]	@ (8000d9c <HAL_UART_MspInit+0x2c4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d15a      	bne.n	8000d94 <HAL_UART_MspInit+0x2bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8000da0 <HAL_UART_MspInit+0x2c8>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8000da0 <HAL_UART_MspInit+0x2c8>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cee:	4b2c      	ldr	r3, [pc, #176]	@ (8000da0 <HAL_UART_MspInit+0x2c8>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <HAL_UART_MspInit+0x2c8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a27      	ldr	r2, [pc, #156]	@ (8000da0 <HAL_UART_MspInit+0x2c8>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <HAL_UART_MspInit+0x2c8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	481c      	ldr	r0, [pc, #112]	@ (8000da4 <HAL_UART_MspInit+0x2cc>)
 8000d34:	f000 fd14 	bl	8001760 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <HAL_UART_MspInit+0x2d4>)
 8000d3c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d44:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d58:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d78:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d7a:	f000 fa07 	bl	800118c <HAL_DMA_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8000d84:	f7ff fcf8 	bl	8000778 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a07      	ldr	r2, [pc, #28]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d8e:	4a06      	ldr	r2, [pc, #24]	@ (8000da8 <HAL_UART_MspInit+0x2d0>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000d94:	bf00      	nop
 8000d96:	3738      	adds	r7, #56	@ 0x38
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40004800 	.word	0x40004800
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400
 8000da8:	200002f8 	.word	0x200002f8
 8000dac:	40026028 	.word	0x40026028

08000db0 <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <LED_Proc+0x24>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dbc:	d307      	bcc.n	8000dce <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <LED_Proc+0x24>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 8000dc4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <LED_Proc+0x28>)
 8000dca:	f000 fe8e 	bl	8001aea <HAL_GPIO_TogglePin>
    }    
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000358 	.word	0x20000358
 8000dd8:	40020400 	.word	0x40020400

08000ddc <GPIO_Proc>:

void GPIO_Proc (void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    LED_Proc();
 8000de0:	f7ff ffe6 	bl	8000db0 <LED_Proc>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dec:	f7ff fd6c 	bl	80008c8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f007 fcdf 	bl	80087d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fc1f 	bl	800065c <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e2c:	080088b0 	.word	0x080088b0
  ldr r2, =_sbss
 8000e30:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e34:	20001f48 	.word	0x20001f48

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f94f 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fc88 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f967 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f92f 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	@ (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000360 	.word	0x20000360

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000360 	.word	0x20000360

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	@ (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	@ (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	@ (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff feb6 	bl	8000f08 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e099      	b.n	80012dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c8:	e00f      	b.n	80011ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ca:	f7ff fe9d 	bl	8000f08 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d908      	bls.n	80011ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2220      	movs	r2, #32
 80011dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e078      	b.n	80012dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e8      	bne.n	80011ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4b38      	ldr	r3, [pc, #224]	@ (80012e4 <HAL_DMA_Init+0x158>)
 8001204:	4013      	ands	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001216:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001240:	2b04      	cmp	r3, #4
 8001242:	d107      	bne.n	8001254 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	4313      	orrs	r3, r2
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f023 0307 	bic.w	r3, r3, #7
 800126a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	4313      	orrs	r3, r2
 8001274:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127a:	2b04      	cmp	r3, #4
 800127c:	d117      	bne.n	80012ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00e      	beq.n	80012ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f9e9 	bl	8001668 <DMA_CheckFifoParam>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2240      	movs	r2, #64	@ 0x40
 80012a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80012aa:	2301      	movs	r3, #1
 80012ac:	e016      	b.n	80012dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f9a0 	bl	80015fc <DMA_CalcBaseAndBitshift>
 80012bc:	4603      	mov	r3, r0
 80012be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c4:	223f      	movs	r2, #63	@ 0x3f
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	f010803f 	.word	0xf010803f

080012e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001530 <HAL_DMA_IRQHandler+0x248>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a8e      	ldr	r2, [pc, #568]	@ (8001534 <HAL_DMA_IRQHandler+0x24c>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0a9b      	lsrs	r3, r3, #10
 8001300:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001306:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001312:	2208      	movs	r2, #8
 8001314:	409a      	lsls	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d01a      	beq.n	8001354 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0204 	bic.w	r2, r2, #4
 800133a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001340:	2208      	movs	r2, #8
 8001342:	409a      	lsls	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001358:	2201      	movs	r2, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d012      	beq.n	800138a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001376:	2201      	movs	r2, #1
 8001378:	409a      	lsls	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001382:	f043 0202 	orr.w	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138e:	2204      	movs	r2, #4
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d012      	beq.n	80013c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00b      	beq.n	80013c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ac:	2204      	movs	r2, #4
 80013ae:	409a      	lsls	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b8:	f043 0204 	orr.w	r2, r3, #4
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c4:	2210      	movs	r2, #16
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d043      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d03c      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e2:	2210      	movs	r2, #16
 80013e4:	409a      	lsls	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d018      	beq.n	800142a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d108      	bne.n	8001418 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d024      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
 8001416:	e01f      	b.n	8001458 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01b      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
 8001428:	e016      	b.n	8001458 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001434:	2b00      	cmp	r3, #0
 8001436:	d107      	bne.n	8001448 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0208 	bic.w	r2, r2, #8
 8001446:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145c:	2220      	movs	r2, #32
 800145e:	409a      	lsls	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 808f 	beq.w	8001588 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8087 	beq.w	8001588 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147e:	2220      	movs	r2, #32
 8001480:	409a      	lsls	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b05      	cmp	r3, #5
 8001490:	d136      	bne.n	8001500 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0216 	bic.w	r2, r2, #22
 80014a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d103      	bne.n	80014c2 <HAL_DMA_IRQHandler+0x1da>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0208 	bic.w	r2, r2, #8
 80014d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d6:	223f      	movs	r2, #63	@ 0x3f
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d07e      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	4798      	blx	r3
        }
        return;
 80014fe:	e079      	b.n	80015f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d01d      	beq.n	800154a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10d      	bne.n	8001538 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001520:	2b00      	cmp	r3, #0
 8001522:	d031      	beq.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
 800152c:	e02c      	b.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000
 8001534:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800153c:	2b00      	cmp	r3, #0
 800153e:	d023      	beq.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
 8001548:	e01e      	b.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0210 	bic.w	r2, r2, #16
 8001566:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158c:	2b00      	cmp	r3, #0
 800158e:	d032      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d022      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2205      	movs	r2, #5
 80015a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d307      	bcc.n	80015d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f2      	bne.n	80015b4 <HAL_DMA_IRQHandler+0x2cc>
 80015ce:	e000      	b.n	80015d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
 80015f2:	e000      	b.n	80015f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80015f4:	bf00      	nop
    }
  }
}
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	3b10      	subs	r3, #16
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <DMA_CalcBaseAndBitshift+0x64>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001616:	4a13      	ldr	r2, [pc, #76]	@ (8001664 <DMA_CalcBaseAndBitshift+0x68>)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d909      	bls.n	800163e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	1d1a      	adds	r2, r3, #4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	659a      	str	r2, [r3, #88]	@ 0x58
 800163c:	e007      	b.n	800164e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001646:	f023 0303 	bic.w	r3, r3, #3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	aaaaaaab 	.word	0xaaaaaaab
 8001664:	08008898 	.word	0x08008898

08001668 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001678:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d11f      	bne.n	80016c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d856      	bhi.n	8001736 <DMA_CheckFifoParam+0xce>
 8001688:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <DMA_CheckFifoParam+0x28>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016b3 	.word	0x080016b3
 8001698:	080016a1 	.word	0x080016a1
 800169c:	08001737 	.word	0x08001737
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d046      	beq.n	800173a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b0:	e043      	b.n	800173a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016ba:	d140      	bne.n	800173e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016c0:	e03d      	b.n	800173e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016ca:	d121      	bne.n	8001710 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d837      	bhi.n	8001742 <DMA_CheckFifoParam+0xda>
 80016d2:	a201      	add	r2, pc, #4	@ (adr r2, 80016d8 <DMA_CheckFifoParam+0x70>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	080016e9 	.word	0x080016e9
 80016dc:	080016ef 	.word	0x080016ef
 80016e0:	080016e9 	.word	0x080016e9
 80016e4:	08001701 	.word	0x08001701
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
      break;
 80016ec:	e030      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d025      	beq.n	8001746 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016fe:	e022      	b.n	8001746 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001704:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001708:	d11f      	bne.n	800174a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800170e:	e01c      	b.n	800174a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d903      	bls.n	800171e <DMA_CheckFifoParam+0xb6>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d003      	beq.n	8001724 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800171c:	e018      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
      break;
 8001722:	e015      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00e      	beq.n	800174e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
      break;
 8001734:	e00b      	b.n	800174e <DMA_CheckFifoParam+0xe6>
      break;
 8001736:	bf00      	nop
 8001738:	e00a      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
      break;
 800173a:	bf00      	nop
 800173c:	e008      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
      break;
 800173e:	bf00      	nop
 8001740:	e006      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
      break;
 8001742:	bf00      	nop
 8001744:	e004      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
      break;
 8001746:	bf00      	nop
 8001748:	e002      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
      break;   
 800174a:	bf00      	nop
 800174c:	e000      	b.n	8001750 <DMA_CheckFifoParam+0xe8>
      break;
 800174e:	bf00      	nop
    }
  } 
  
  return status; 
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	@ 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e177      	b.n	8001a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8166 	bne.w	8001a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d130      	bne.n	8001814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80c0 	beq.w	8001a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b66      	ldr	r3, [pc, #408]	@ (8001a84 <HAL_GPIO_Init+0x324>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	4a65      	ldr	r2, [pc, #404]	@ (8001a84 <HAL_GPIO_Init+0x324>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f6:	4b63      	ldr	r3, [pc, #396]	@ (8001a84 <HAL_GPIO_Init+0x324>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a61      	ldr	r2, [pc, #388]	@ (8001a88 <HAL_GPIO_Init+0x328>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a58      	ldr	r2, [pc, #352]	@ (8001a8c <HAL_GPIO_Init+0x32c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d037      	beq.n	800199e <HAL_GPIO_Init+0x23e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a57      	ldr	r2, [pc, #348]	@ (8001a90 <HAL_GPIO_Init+0x330>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d031      	beq.n	800199a <HAL_GPIO_Init+0x23a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a56      	ldr	r2, [pc, #344]	@ (8001a94 <HAL_GPIO_Init+0x334>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02b      	beq.n	8001996 <HAL_GPIO_Init+0x236>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a55      	ldr	r2, [pc, #340]	@ (8001a98 <HAL_GPIO_Init+0x338>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d025      	beq.n	8001992 <HAL_GPIO_Init+0x232>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a54      	ldr	r2, [pc, #336]	@ (8001a9c <HAL_GPIO_Init+0x33c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x22e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a53      	ldr	r2, [pc, #332]	@ (8001aa0 <HAL_GPIO_Init+0x340>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x22a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <HAL_GPIO_Init+0x344>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x226>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a51      	ldr	r2, [pc, #324]	@ (8001aa8 <HAL_GPIO_Init+0x348>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x222>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a50      	ldr	r2, [pc, #320]	@ (8001aac <HAL_GPIO_Init+0x34c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x21e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab0 <HAL_GPIO_Init+0x350>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x21a>
 8001976:	2309      	movs	r3, #9
 8001978:	e012      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197a:	230a      	movs	r3, #10
 800197c:	e010      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197e:	2308      	movs	r3, #8
 8001980:	e00e      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001982:	2307      	movs	r3, #7
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001986:	2306      	movs	r3, #6
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	@ (8001a88 <HAL_GPIO_Init+0x328>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a34      	ldr	r2, [pc, #208]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b32      	ldr	r3, [pc, #200]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a29      	ldr	r2, [pc, #164]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a12:	4b28      	ldr	r3, [pc, #160]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a36:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a60:	4a14      	ldr	r2, [pc, #80]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae84 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022400 	.word	0x40022400
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af02      	add	r7, sp, #8
 8001b24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e101      	b.n	8001d34 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f006 fb1a 	bl	8008184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b5e:	d102      	bne.n	8001b66 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 ff79 	bl	8004a62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7c1a      	ldrb	r2, [r3, #16]
 8001b78:	f88d 2000 	strb.w	r2, [sp]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b80:	f002 fe58 	bl	8004834 <USB_CoreInit>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0ce      	b.n	8001d34 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 ff71 	bl	8004a84 <USB_SetCurrentMode>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0bf      	b.n	8001d34 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e04a      	b.n	8001c50 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3315      	adds	r3, #21
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	3314      	adds	r3, #20
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	b298      	uxth	r0, r3
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	332e      	adds	r3, #46	@ 0x2e
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3318      	adds	r3, #24
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	331c      	adds	r3, #28
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3320      	adds	r3, #32
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	3324      	adds	r3, #36	@ 0x24
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d3af      	bcc.n	8001bba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e044      	b.n	8001cea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	791b      	ldrb	r3, [r3, #4]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d3b5      	bcc.n	8001c60 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7c1a      	ldrb	r2, [r3, #16]
 8001cfc:	f88d 2000 	strb.w	r2, [sp]
 8001d00:	3304      	adds	r3, #4
 8001d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d04:	f002 ff0a 	bl	8004b1c <USB_DevInit>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00c      	b.n	8001d34 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 ff4e 	bl	8005bce <USB_DevDisconnect>

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_Start+0x1c>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e022      	b.n	8001d9e <HAL_PCD_Start+0x62>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d009      	beq.n	8001d80 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fe5b 	bl	8004a40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fefc 	bl	8005b8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001da6:	b590      	push	{r4, r7, lr}
 8001da8:	b08d      	sub	sp, #52	@ 0x34
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 ffba 	bl	8005d36 <USB_GetMode>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f040 848c 	bne.w	80026e2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 ff1e 	bl	8005c10 <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8482 	beq.w	80026e0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 ff0b 	bl	8005c10 <USB_ReadInterrupts>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d107      	bne.n	8001e14 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f002 0202 	and.w	r2, r2, #2
 8001e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fef9 	bl	8005c10 <USB_ReadInterrupts>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b10      	cmp	r3, #16
 8001e26:	d161      	bne.n	8001eec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0210 	bic.w	r2, r2, #16
 8001e36:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	0c5b      	lsrs	r3, r3, #17
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d124      	bne.n	8001eae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d035      	beq.n	8001edc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	6a38      	ldr	r0, [r7, #32]
 8001e84:	f003 fd30 	bl	80058e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e94:	441a      	add	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ea6:	441a      	add	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	e016      	b.n	8001edc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	0c5b      	lsrs	r3, r3, #17
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d110      	bne.n	8001edc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6a38      	ldr	r0, [r7, #32]
 8001ec6:	f003 fd0f 	bl	80058e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ed6:	441a      	add	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0210 	orr.w	r2, r2, #16
 8001eea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fe8d 	bl	8005c10 <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001efc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f00:	f040 80a7 	bne.w	8002052 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fe92 	bl	8005c36 <USB_ReadDevAllOutEpInterrupt>
 8001f12:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001f14:	e099      	b.n	800204a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 808e 	beq.w	800203e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 feb6 	bl	8005c9e <USB_ReadDevOutEPInterrupt>
 8001f32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00c      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fea2 	bl	8002c9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2308      	movs	r3, #8
 8001f72:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 ff78 	bl	8002e6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f92:	461a      	mov	r2, r3
 8001f94:	2310      	movs	r3, #16
 8001f96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d030      	beq.n	8002004 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001faa:	2b80      	cmp	r3, #128	@ 0x80
 8001fac:	d109      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fc0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	78db      	ldrb	r3, [r3, #3]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f006 f9dd 	bl	80083ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ffe:	461a      	mov	r2, r3
 8002000:	2302      	movs	r3, #2
 8002002:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800201a:	461a      	mov	r2, r3
 800201c:	2320      	movs	r3, #32
 800201e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002036:	461a      	mov	r2, r3
 8002038:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800203c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	3301      	adds	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f af62 	bne.w	8001f16 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fdda 	bl	8005c10 <USB_ReadInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002062:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002066:	f040 80db 	bne.w	8002220 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f003 fdfb 	bl	8005c6a <USB_ReadDevAllInEpInterrupt>
 8002074:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800207a:	e0cd      	b.n	8002218 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800207c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80c2 	beq.w	800220c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fe21 	bl	8005cda <USB_ReadDevInEPInterrupt>
 8002098:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d057      	beq.n	8002154 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	2201      	movs	r2, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69f9      	ldr	r1, [r7, #28]
 80020c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020c4:	4013      	ands	r3, r2
 80020c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020d4:	461a      	mov	r2, r3
 80020d6:	2301      	movs	r3, #1
 80020d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	799b      	ldrb	r3, [r3, #6]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d132      	bne.n	8002148 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3320      	adds	r3, #32
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4403      	add	r3, r0
 8002102:	331c      	adds	r3, #28
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4419      	add	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4403      	add	r3, r0
 8002116:	3320      	adds	r3, #32
 8002118:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	2b00      	cmp	r3, #0
 800211e:	d113      	bne.n	8002148 <HAL_PCD_IRQHandler+0x3a2>
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3324      	adds	r3, #36	@ 0x24
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002140:	461a      	mov	r2, r3
 8002142:	2101      	movs	r1, #1
 8002144:	f003 fe28 	bl	8005d98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f006 f8a7 	bl	80082a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800216a:	461a      	mov	r2, r3
 800216c:	2308      	movs	r3, #8
 800216e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002186:	461a      	mov	r2, r3
 8002188:	2310      	movs	r3, #16
 800218a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021a2:	461a      	mov	r2, r3
 80021a4:	2340      	movs	r3, #64	@ 0x40
 80021a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d023      	beq.n	80021fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021b4:	6a38      	ldr	r0, [r7, #32]
 80021b6:	f002 fe15 	bl	8004de4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	3310      	adds	r3, #16
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	3304      	adds	r3, #4
 80021cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	78db      	ldrb	r3, [r3, #3]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f006 f8f4 	bl	80083d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021f4:	461a      	mov	r2, r3
 80021f6:	2302      	movs	r3, #2
 80021f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fcbb 	bl	8002b82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	3301      	adds	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	2b00      	cmp	r3, #0
 800221c:	f47f af2e 	bne.w	800207c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f003 fcf3 	bl	8005c10 <USB_ReadInterrupts>
 800222a:	4603      	mov	r3, r0
 800222c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002234:	d122      	bne.n	800227c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800225c:	2100      	movs	r1, #0
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fea2 	bl	8002fa8 <HAL_PCDEx_LPM_Callback>
 8002264:	e002      	b.n	800226c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f006 f892 	bl	8008390 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800227a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 fcc5 	bl	8005c10 <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800228c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002290:	d112      	bne.n	80022b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f006 f84e 	bl	8008344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80022b6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 fca7 	bl	8005c10 <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022cc:	f040 80b7 	bne.w	800243e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2110      	movs	r1, #16
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 fd7a 	bl	8004de4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f4:	e046      	b.n	8002384 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002302:	461a      	mov	r2, r3
 8002304:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002308:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800230a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800231a:	0151      	lsls	r1, r2, #5
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	440a      	add	r2, r1
 8002320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002324:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002328:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800232a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002336:	461a      	mov	r2, r3
 8002338:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800233c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800233e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800234e:	0151      	lsls	r1, r2, #5
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	440a      	add	r2, r1
 8002354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002358:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800235c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800235e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800236e:	0151      	lsls	r1, r2, #5
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	440a      	add	r2, r1
 8002374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002378:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800237c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002380:	3301      	adds	r3, #1
 8002382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	791b      	ldrb	r3, [r3, #4]
 8002388:	461a      	mov	r2, r3
 800238a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238c:	4293      	cmp	r3, r2
 800238e:	d3b2      	bcc.n	80022f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800239e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80023a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7bdb      	ldrb	r3, [r3, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d016      	beq.n	80023da <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023bc:	f043 030b 	orr.w	r3, r3, #11
 80023c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023d2:	f043 030b 	orr.w	r3, r3, #11
 80023d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d8:	e015      	b.n	8002406 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023ec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80023f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002400:	f043 030b 	orr.w	r3, r3, #11
 8002404:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002414:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002418:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002428:	461a      	mov	r2, r3
 800242a:	f003 fcb5 	bl	8005d98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800243c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fbe4 	bl	8005c10 <USB_ReadInterrupts>
 8002448:	4603      	mov	r3, r0
 800244a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800244e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002452:	d123      	bne.n	800249c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fc7a 	bl	8005d52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f002 fd37 	bl	8004ed6 <USB_GetDevSpeed>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681c      	ldr	r4, [r3, #0]
 8002474:	f001 fa70 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8002478:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800247e:	461a      	mov	r2, r3
 8002480:	4620      	mov	r0, r4
 8002482:	f002 fa3b 	bl	80048fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f005 ff33 	bl	80082f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800249a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fbb5 	bl	8005c10 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d10a      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f005 ff10 	bl	80082d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f002 0208 	and.w	r2, r2, #8
 80024c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 fba0 	bl	8005c10 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d6:	2b80      	cmp	r3, #128	@ 0x80
 80024d8:	d123      	bne.n	8002522 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024e6:	2301      	movs	r3, #1
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ea:	e014      	b.n	8002516 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fb08 	bl	8002b20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	3301      	adds	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	791b      	ldrb	r3, [r3, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	4293      	cmp	r3, r2
 8002520:	d3e4      	bcc.n	80024ec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f003 fb72 	bl	8005c10 <USB_ReadInterrupts>
 800252c:	4603      	mov	r3, r0
 800252e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002536:	d13c      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002538:	2301      	movs	r3, #1
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
 800253c:	e02b      	b.n	8002596 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3318      	adds	r3, #24
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d115      	bne.n	8002590 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002564:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002566:	2b00      	cmp	r3, #0
 8002568:	da12      	bge.n	8002590 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3317      	adds	r3, #23
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fac8 	bl	8002b20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	3301      	adds	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	791b      	ldrb	r3, [r3, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	4293      	cmp	r3, r2
 80025a0:	d3cd      	bcc.n	800253e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80025b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fb2a 	bl	8005c10 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025c6:	d156      	bne.n	8002676 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c8:	2301      	movs	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80025cc:	e045      	b.n	800265a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12e      	bne.n	8002654 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da2b      	bge.n	8002654 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002608:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800260c:	429a      	cmp	r2, r3
 800260e:	d121      	bne.n	8002654 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800264c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002650:	6053      	str	r3, [r2, #4]
            break;
 8002652:	e008      	b.n	8002666 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	791b      	ldrb	r3, [r3, #4]
 800265e:	461a      	mov	r2, r3
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	4293      	cmp	r3, r2
 8002664:	d3b3      	bcc.n	80025ce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f003 fac8 	bl	8005c10 <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800268a:	d10a      	bne.n	80026a2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f005 feb1 	bl	80083f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80026a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fab2 	bl	8005c10 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d115      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f005 fea1 	bl	8008410 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	e000      	b.n	80026e2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80026e0:	bf00      	nop
    }
  }
}
 80026e2:	3734      	adds	r7, #52	@ 0x34
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd90      	pop	{r4, r7, pc}

080026e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_PCD_SetAddress+0x1a>
 80026fe:	2302      	movs	r3, #2
 8002700:	e012      	b.n	8002728 <HAL_PCD_SetAddress+0x40>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fa11 	bl	8005b40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	4608      	mov	r0, r1
 800273a:	4611      	mov	r1, r2
 800273c:	461a      	mov	r2, r3
 800273e:	4603      	mov	r3, r0
 8002740:	70fb      	strb	r3, [r7, #3]
 8002742:	460b      	mov	r3, r1
 8002744:	803b      	strh	r3, [r7, #0]
 8002746:	4613      	mov	r3, r2
 8002748:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800274e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002752:	2b00      	cmp	r3, #0
 8002754:	da0f      	bge.n	8002776 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	3310      	adds	r3, #16
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	705a      	strb	r2, [r3, #1]
 8002774:	e00f      	b.n	8002796 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 020f 	and.w	r2, r3, #15
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027a2:	883a      	ldrh	r2, [r7, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	78ba      	ldrb	r2, [r7, #2]
 80027ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027c0:	78bb      	ldrb	r3, [r7, #2]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d102      	bne.n	80027cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_PCD_EP_Open+0xaa>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e00e      	b.n	80027f8 <HAL_PCD_EP_Open+0xc8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fb99 	bl	8004f20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80027f6:	7afb      	ldrb	r3, [r7, #11]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800280c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002810:	2b00      	cmp	r3, #0
 8002812:	da0f      	bge.n	8002834 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	3310      	adds	r3, #16
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	3304      	adds	r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	705a      	strb	r2, [r3, #1]
 8002832:	e00f      	b.n	8002854 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 020f 	and.w	r2, r3, #15
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	3304      	adds	r3, #4
 800284c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	b2da      	uxtb	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_PCD_EP_Close+0x6e>
 800286a:	2302      	movs	r3, #2
 800286c:	e00e      	b.n	800288c <HAL_PCD_EP_Close+0x8c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68f9      	ldr	r1, [r7, #12]
 800287c:	4618      	mov	r0, r3
 800287e:	f002 fbd7 	bl	8005030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	460b      	mov	r3, r1
 80028a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028a4:	7afb      	ldrb	r3, [r7, #11]
 80028a6:	f003 020f 	and.w	r2, r3, #15
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d6:	7afb      	ldrb	r3, [r7, #11]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	799b      	ldrb	r3, [r3, #6]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	799b      	ldrb	r3, [r3, #6]
 80028f8:	461a      	mov	r2, r3
 80028fa:	6979      	ldr	r1, [r7, #20]
 80028fc:	f002 fc74 	bl	80051e8 <USB_EPStartXfer>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800292c:	681b      	ldr	r3, [r3, #0]
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	460b      	mov	r3, r1
 8002948:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	7afb      	ldrb	r3, [r7, #11]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	3310      	adds	r3, #16
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	3304      	adds	r3, #4
 8002960:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2201      	movs	r2, #1
 8002978:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	b2da      	uxtb	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	799b      	ldrb	r3, [r3, #6]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	799b      	ldrb	r3, [r3, #6]
 800299c:	461a      	mov	r2, r3
 800299e:	6979      	ldr	r1, [r7, #20]
 80029a0:	f002 fc22 	bl	80051e8 <USB_EPStartXfer>

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	7912      	ldrb	r2, [r2, #4]
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e04f      	b.n	8002a6c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da0f      	bge.n	80029f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	3310      	adds	r3, #16
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	705a      	strb	r2, [r3, #1]
 80029f2:	e00d      	b.n	8002a10 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	3304      	adds	r3, #4
 8002a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_PCD_EP_SetStall+0x82>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e01d      	b.n	8002a6c <HAL_PCD_EP_SetStall+0xbe>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68f9      	ldr	r1, [r7, #12]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 ffaa 	bl	8005998 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7999      	ldrb	r1, [r3, #6]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f003 f99b 	bl	8005d98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	7912      	ldrb	r2, [r2, #4]
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e042      	b.n	8002b18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da0f      	bge.n	8002aba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	3310      	adds	r3, #16
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	705a      	strb	r2, [r3, #1]
 8002ab8:	e00f      	b.n	8002ada <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_PCD_EP_ClrStall+0x86>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e00e      	b.n	8002b18 <HAL_PCD_EP_ClrStall+0xa4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 ffb3 	bl	8005a74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	da0c      	bge.n	8002b4e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3310      	adds	r3, #16
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e00c      	b.n	8002b68 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fdd2 	bl	8005718 <USB_EPStopXfer>
 8002b74:	4603      	mov	r3, r0
 8002b76:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b78:	7afb      	ldrb	r3, [r7, #11]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b08a      	sub	sp, #40	@ 0x28
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3310      	adds	r3, #16
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d901      	bls.n	8002bba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06b      	b.n	8002c92 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d902      	bls.n	8002bd6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3303      	adds	r3, #3
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bde:	e02a      	b.n	8002c36 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d902      	bls.n	8002bfc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	3303      	adds	r3, #3
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68d9      	ldr	r1, [r3, #12]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4603      	mov	r3, r0
 8002c18:	6978      	ldr	r0, [r7, #20]
 8002c1a:	f002 fe27 	bl	800586c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	441a      	add	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	441a      	add	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d809      	bhi.n	8002c60 <PCD_WriteEmptyTxFifo+0xde>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d203      	bcs.n	8002c60 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1bf      	bne.n	8002be0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d811      	bhi.n	8002c90 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	2201      	movs	r2, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	6939      	ldr	r1, [r7, #16]
 8002c88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	333c      	adds	r3, #60	@ 0x3c
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	799b      	ldrb	r3, [r3, #6]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d17b      	bne.n	8002dca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d015      	beq.n	8002d08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4a61      	ldr	r2, [pc, #388]	@ (8002e64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	f240 80b9 	bls.w	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80b3 	beq.w	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d04:	6093      	str	r3, [r2, #8]
 8002d06:	e0a7      	b.n	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2320      	movs	r3, #32
 8002d22:	6093      	str	r3, [r2, #8]
 8002d24:	e098      	b.n	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 8093 	bne.w	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	4a4b      	ldr	r2, [pc, #300]	@ (8002e64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d90f      	bls.n	8002d5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d50:	461a      	mov	r2, r3
 8002d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d56:	6093      	str	r3, [r2, #8]
 8002d58:	e07e      	b.n	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d114      	bne.n	8002dbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002da4:	461a      	mov	r2, r3
 8002da6:	2101      	movs	r1, #1
 8002da8:	f002 fff6 	bl	8005d98 <USB_EP0_OutStart>
 8002dac:	e006      	b.n	8002dbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	441a      	add	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f005 fa52 	bl	800826c <HAL_PCD_DataOutStageCallback>
 8002dc8:	e046      	b.n	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	4a26      	ldr	r2, [pc, #152]	@ (8002e68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d124      	bne.n	8002e1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dee:	6093      	str	r3, [r2, #8]
 8002df0:	e032      	b.n	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f005 fa29 	bl	800826c <HAL_PCD_DataOutStageCallback>
 8002e1a:	e01d      	b.n	8002e58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d114      	bne.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d108      	bne.n	8002e4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e44:	461a      	mov	r2, r3
 8002e46:	2100      	movs	r1, #0
 8002e48:	f002 ffa6 	bl	8005d98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f005 fa0a 	bl	800826c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	4f54300a 	.word	0x4f54300a
 8002e68:	4f54310a 	.word	0x4f54310a

08002e6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	333c      	adds	r3, #60	@ 0x3c
 8002e84:	3304      	adds	r3, #4
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	@ (8002ef4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d90e      	bls.n	8002ec0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ebe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f005 f9c1 	bl	8008248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d90c      	bls.n	8002ee8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	799b      	ldrb	r3, [r3, #6]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	f002 ff58 	bl	8005d98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	4f54300a 	.word	0x4f54300a

08002ef8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
 8002f04:	4613      	mov	r3, r2
 8002f06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f16:	883b      	ldrh	r3, [r7, #0]
 8002f18:	0419      	lsls	r1, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f24:	e028      	b.n	8002f78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4413      	add	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e00d      	b.n	8002f56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	3340      	adds	r3, #64	@ 0x40
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	3301      	adds	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d3ec      	bcc.n	8002f3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f60:	883b      	ldrh	r3, [r7, #0]
 8002f62:	0418      	lsls	r0, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	4302      	orrs	r2, r0
 8002f70:	3340      	adds	r3, #64	@ 0x40
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e267      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d075      	beq.n	80030ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	4b88      	ldr	r3, [pc, #544]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d00c      	beq.n	8003004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fea:	4b85      	ldr	r3, [pc, #532]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d112      	bne.n	800301c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff6:	4b82      	ldr	r3, [pc, #520]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003002:	d10b      	bne.n	800301c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	4b7e      	ldr	r3, [pc, #504]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d05b      	beq.n	80030c8 <HAL_RCC_OscConfig+0x108>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d157      	bne.n	80030c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e242      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003024:	d106      	bne.n	8003034 <HAL_RCC_OscConfig+0x74>
 8003026:	4b76      	ldr	r3, [pc, #472]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a75      	ldr	r2, [pc, #468]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e01d      	b.n	8003070 <HAL_RCC_OscConfig+0xb0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x98>
 800303e:	4b70      	ldr	r3, [pc, #448]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6f      	ldr	r2, [pc, #444]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b6d      	ldr	r3, [pc, #436]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6c      	ldr	r2, [pc, #432]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xb0>
 8003058:	4b69      	ldr	r3, [pc, #420]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a68      	ldr	r2, [pc, #416]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 800305e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b66      	ldr	r3, [pc, #408]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a65      	ldr	r2, [pc, #404]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 800306a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800306e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fd ff46 	bl	8000f08 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003080:	f7fd ff42 	bl	8000f08 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	@ 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e207      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b5b      	ldr	r3, [pc, #364]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0xc0>
 800309e:	e014      	b.n	80030ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fd ff32 	bl	8000f08 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fd ff2e 	bl	8000f08 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	@ 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1f3      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0xe8>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ee:	4b44      	ldr	r3, [pc, #272]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b41      	ldr	r3, [pc, #260]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x152>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1c7      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b3b      	ldr	r3, [pc, #236]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4937      	ldr	r1, [pc, #220]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b34      	ldr	r3, [pc, #208]	@ (8003204 <HAL_RCC_OscConfig+0x244>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fd fee7 	bl	8000f08 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313e:	f7fd fee3 	bl	8000f08 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1a8      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4925      	ldr	r1, [pc, #148]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b24      	ldr	r3, [pc, #144]	@ (8003204 <HAL_RCC_OscConfig+0x244>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fd fec6 	bl	8000f08 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003180:	f7fd fec2 	bl	8000f08 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e187      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d036      	beq.n	8003218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <HAL_RCC_OscConfig+0x248>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fd fea6 	bl	8000f08 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fd fea2 	bl	8000f08 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e167      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <HAL_RCC_OscConfig+0x240>)
 80031d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x200>
 80031de:	e01b      	b.n	8003218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e0:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <HAL_RCC_OscConfig+0x248>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7fd fe8f 	bl	8000f08 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	e00e      	b.n	800320c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ee:	f7fd fe8b 	bl	8000f08 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d907      	bls.n	800320c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e150      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
 8003200:	40023800 	.word	0x40023800
 8003204:	42470000 	.word	0x42470000
 8003208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	4b88      	ldr	r3, [pc, #544]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 800320e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ea      	bne.n	80031ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8097 	beq.w	8003354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322a:	4b81      	ldr	r3, [pc, #516]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	4b7d      	ldr	r3, [pc, #500]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	4a7c      	ldr	r2, [pc, #496]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	@ 0x40
 8003246:	4b7a      	ldr	r3, [pc, #488]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b77      	ldr	r3, [pc, #476]	@ (8003434 <HAL_RCC_OscConfig+0x474>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	4b74      	ldr	r3, [pc, #464]	@ (8003434 <HAL_RCC_OscConfig+0x474>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a73      	ldr	r2, [pc, #460]	@ (8003434 <HAL_RCC_OscConfig+0x474>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fd fe4b 	bl	8000f08 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fd fe47 	bl	8000f08 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e10c      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b6a      	ldr	r3, [pc, #424]	@ (8003434 <HAL_RCC_OscConfig+0x474>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x2ea>
 800329c:	4b64      	ldr	r3, [pc, #400]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a0:	4a63      	ldr	r2, [pc, #396]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a8:	e01c      	b.n	80032e4 <HAL_RCC_OscConfig+0x324>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x30c>
 80032b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032be:	4b5c      	ldr	r3, [pc, #368]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x324>
 80032cc:	4b58      	ldr	r3, [pc, #352]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4a57      	ldr	r2, [pc, #348]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d8:	4b55      	ldr	r3, [pc, #340]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032dc:	4a54      	ldr	r2, [pc, #336]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fd fe0c 	bl	8000f08 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fd fe08 	bl	8000f08 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0cb      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	4b49      	ldr	r3, [pc, #292]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ee      	beq.n	80032f4 <HAL_RCC_OscConfig+0x334>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003318:	f7fd fdf6 	bl	8000f08 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fd fdf2 	bl	8000f08 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0b5      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003336:	4b3e      	ldr	r3, [pc, #248]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ee      	bne.n	8003320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	4b39      	ldr	r3, [pc, #228]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	4a38      	ldr	r2, [pc, #224]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 800334e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003352:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a1 	beq.w	80034a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335e:	4b34      	ldr	r3, [pc, #208]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b08      	cmp	r3, #8
 8003368:	d05c      	beq.n	8003424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d141      	bne.n	80033f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b31      	ldr	r3, [pc, #196]	@ (8003438 <HAL_RCC_OscConfig+0x478>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd fdc6 	bl	8000f08 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd fdc2 	bl	8000f08 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e087      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	019b      	lsls	r3, r3, #6
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	491b      	ldr	r1, [pc, #108]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_RCC_OscConfig+0x478>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd fd9b 	bl	8000f08 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fd fd97 	bl	8000f08 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e05c      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e8:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x416>
 80033f4:	e054      	b.n	80034a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <HAL_RCC_OscConfig+0x478>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fd fd84 	bl	8000f08 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd fd80 	bl	8000f08 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e045      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <HAL_RCC_OscConfig+0x470>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x444>
 8003422:	e03d      	b.n	80034a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d107      	bne.n	800343c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e038      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
 8003430:	40023800 	.word	0x40023800
 8003434:	40007000 	.word	0x40007000
 8003438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800343c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <HAL_RCC_OscConfig+0x4ec>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d028      	beq.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d121      	bne.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003462:	429a      	cmp	r2, r3
 8003464:	d11a      	bne.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800346c:	4013      	ands	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003474:	4293      	cmp	r3, r2
 8003476:	d111      	bne.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	3b01      	subs	r3, #1
 8003486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800

080034b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0cc      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b68      	ldr	r3, [pc, #416]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d90c      	bls.n	80034ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b65      	ldr	r3, [pc, #404]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a58      	ldr	r2, [pc, #352]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800350e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a52      	ldr	r2, [pc, #328]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d044      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d119      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d003      	beq.n	800356e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	2b03      	cmp	r3, #3
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b3f      	ldr	r3, [pc, #252]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3b      	ldr	r3, [pc, #236]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e067      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b37      	ldr	r3, [pc, #220]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4934      	ldr	r1, [pc, #208]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a0:	f7fd fcb2 	bl	8000f08 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fd fcae 	bl	8000f08 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d20c      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b22      	ldr	r3, [pc, #136]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	@ (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003622:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003636:	f000 f889 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	@ (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fc12 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	08008880 	.word	0x08008880
 8003674:	20000000 	.word	0x20000000
 8003678:	20000004 	.word	0x20000004

0800367c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	@ 0x30
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d129      	bne.n	80036e2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	4a2a      	ldr	r2, [pc, #168]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6313      	str	r3, [r2, #48]	@ 0x30
 800369e:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80036aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b4:	2303      	movs	r3, #3
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	4619      	mov	r1, r3
 80036c6:	481f      	ldr	r0, [pc, #124]	@ (8003744 <HAL_RCC_MCOConfig+0xc8>)
 80036c8:	f7fe f84a 	bl	8001760 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80036cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	430b      	orrs	r3, r1
 80036da:	4919      	ldr	r1, [pc, #100]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80036e0:	e029      	b.n	8003736 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	4b16      	ldr	r3, [pc, #88]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	4a15      	ldr	r2, [pc, #84]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f2:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80036fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	2302      	movs	r3, #2
 8003706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003708:	2303      	movs	r3, #3
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003710:	2300      	movs	r3, #0
 8003712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	4619      	mov	r1, r3
 800371a:	480b      	ldr	r0, [pc, #44]	@ (8003748 <HAL_RCC_MCOConfig+0xcc>)
 800371c:	f7fe f820 	bl	8001760 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003720:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	00d9      	lsls	r1, r3, #3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	430b      	orrs	r3, r1
 8003730:	4903      	ldr	r1, [pc, #12]	@ (8003740 <HAL_RCC_MCOConfig+0xc4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
}
 8003736:	bf00      	nop
 8003738:	3730      	adds	r7, #48	@ 0x30
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	40020000 	.word	0x40020000
 8003748:	40020800 	.word	0x40020800

0800374c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003750:	b094      	sub	sp, #80	@ 0x50
 8003752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	647b      	str	r3, [r7, #68]	@ 0x44
 8003758:	2300      	movs	r3, #0
 800375a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800375c:	2300      	movs	r3, #0
 800375e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003764:	4b79      	ldr	r3, [pc, #484]	@ (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b08      	cmp	r3, #8
 800376e:	d00d      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x40>
 8003770:	2b08      	cmp	r3, #8
 8003772:	f200 80e1 	bhi.w	8003938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x34>
 800377a:	2b04      	cmp	r3, #4
 800377c:	d003      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x3a>
 800377e:	e0db      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b73      	ldr	r3, [pc, #460]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x204>)
 8003782:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003784:	e0db      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003786:	4b73      	ldr	r3, [pc, #460]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x208>)
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800378a:	e0d8      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378c:	4b6f      	ldr	r3, [pc, #444]	@ (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003794:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003796:	4b6d      	ldr	r3, [pc, #436]	@ (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d063      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b6a      	ldr	r3, [pc, #424]	@ (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	2200      	movs	r2, #0
 80037aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037be:	4622      	mov	r2, r4
 80037c0:	462b      	mov	r3, r5
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	0159      	lsls	r1, r3, #5
 80037cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d0:	0150      	lsls	r0, r2, #5
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4621      	mov	r1, r4
 80037d8:	1a51      	subs	r1, r2, r1
 80037da:	6139      	str	r1, [r7, #16]
 80037dc:	4629      	mov	r1, r5
 80037de:	eb63 0301 	sbc.w	r3, r3, r1
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f0:	4659      	mov	r1, fp
 80037f2:	018b      	lsls	r3, r1, #6
 80037f4:	4651      	mov	r1, sl
 80037f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fa:	4651      	mov	r1, sl
 80037fc:	018a      	lsls	r2, r1, #6
 80037fe:	4651      	mov	r1, sl
 8003800:	ebb2 0801 	subs.w	r8, r2, r1
 8003804:	4659      	mov	r1, fp
 8003806:	eb63 0901 	sbc.w	r9, r3, r1
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	4623      	mov	r3, r4
 8003824:	eb18 0303 	adds.w	r3, r8, r3
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	462b      	mov	r3, r5
 800382c:	eb49 0303 	adc.w	r3, r9, r3
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800383e:	4629      	mov	r1, r5
 8003840:	024b      	lsls	r3, r1, #9
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003848:	4621      	mov	r1, r4
 800384a:	024a      	lsls	r2, r1, #9
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800385c:	f7fc fcc6 	bl	80001ec <__aeabi_uldivmod>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4613      	mov	r3, r2
 8003866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003868:	e058      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386a:	4b38      	ldr	r3, [pc, #224]	@ (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	2200      	movs	r2, #0
 8003872:	4618      	mov	r0, r3
 8003874:	4611      	mov	r1, r2
 8003876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	0159      	lsls	r1, r3, #5
 8003892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003896:	0150      	lsls	r0, r2, #5
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4641      	mov	r1, r8
 800389e:	ebb2 0a01 	subs.w	sl, r2, r1
 80038a2:	4649      	mov	r1, r9
 80038a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038bc:	ebb2 040a 	subs.w	r4, r2, sl
 80038c0:	eb63 050b 	sbc.w	r5, r3, fp
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	464b      	mov	r3, r9
 80038e0:	eb45 0303 	adc.w	r3, r5, r3
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f2:	4629      	mov	r1, r5
 80038f4:	028b      	lsls	r3, r1, #10
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038fc:	4621      	mov	r1, r4
 80038fe:	028a      	lsls	r2, r1, #10
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003906:	2200      	movs	r2, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	61fa      	str	r2, [r7, #28]
 800390c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003910:	f7fc fc6c 	bl	80001ec <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800391c:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	3301      	adds	r3, #1
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800392c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800392e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003936:	e002      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003938:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x204>)
 800393a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800393c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003940:	4618      	mov	r0, r3
 8003942:	3750      	adds	r7, #80	@ 0x50
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

08003958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b03      	ldr	r3, [pc, #12]	@ (800396c <HAL_RCC_GetHCLKFreq+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000000 	.word	0x20000000

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003974:	f7ff fff0 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0a9b      	lsrs	r3, r3, #10
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	@ (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	08008890 	.word	0x08008890

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800399c:	f7ff ffdc 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0b5b      	lsrs	r3, r3, #13
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	@ (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08008890 	.word	0x08008890

080039c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e041      	b.n	8003a56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fc ffd0 	bl	800098c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 fa7e 	bl	8003f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d001      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e04e      	b.n	8003b16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a23      	ldr	r2, [pc, #140]	@ (8003b24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	@ (8003b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d111      	bne.n	8003b04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d010      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	e007      	b.n	8003b14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40010400 	.word	0x40010400
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40001800 	.word	0x40001800

08003b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d020      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01b      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0202 	mvn.w	r2, #2
 8003b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f999 	bl	8003ec2 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f98b 	bl	8003eae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f99c 	bl	8003ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d020      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01b      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0204 	mvn.w	r2, #4
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f973 	bl	8003ec2 <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f965 	bl	8003eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f976 	bl	8003ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d020      	beq.n	8003c3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01b      	beq.n	8003c3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0208 	mvn.w	r2, #8
 8003c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2204      	movs	r2, #4
 8003c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f94d 	bl	8003ec2 <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f93f 	bl	8003eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f950 	bl	8003ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d020      	beq.n	8003c88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01b      	beq.n	8003c88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0210 	mvn.w	r2, #16
 8003c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f927 	bl	8003ec2 <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f919 	bl	8003eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f92a 	bl	8003ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00c      	beq.n	8003cac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0201 	mvn.w	r2, #1
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fc fdf6 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fae4 	bl	8004298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f8fb 	bl	8003eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00c      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0220 	mvn.w	r2, #32
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fab6 	bl	8004284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_ConfigClockSource+0x1c>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e0b4      	b.n	8003ea6 <HAL_TIM_ConfigClockSource+0x186>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d74:	d03e      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0xd4>
 8003d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d7a:	f200 8087 	bhi.w	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
 8003d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d82:	f000 8086 	beq.w	8003e92 <HAL_TIM_ConfigClockSource+0x172>
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8a:	d87f      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b70      	cmp	r3, #112	@ 0x70
 8003d8e:	d01a      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0xa6>
 8003d90:	2b70      	cmp	r3, #112	@ 0x70
 8003d92:	d87b      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b60      	cmp	r3, #96	@ 0x60
 8003d96:	d050      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0x11a>
 8003d98:	2b60      	cmp	r3, #96	@ 0x60
 8003d9a:	d877      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b50      	cmp	r3, #80	@ 0x50
 8003d9e:	d03c      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xfa>
 8003da0:	2b50      	cmp	r3, #80	@ 0x50
 8003da2:	d873      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b40      	cmp	r3, #64	@ 0x40
 8003da6:	d058      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x13a>
 8003da8:	2b40      	cmp	r3, #64	@ 0x40
 8003daa:	d86f      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b30      	cmp	r3, #48	@ 0x30
 8003dae:	d064      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x15a>
 8003db0:	2b30      	cmp	r3, #48	@ 0x30
 8003db2:	d86b      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d060      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x15a>
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d867      	bhi.n	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d05c      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x15a>
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d05a      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x15a>
 8003dc4:	e062      	b.n	8003e8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dd6:	f000 f9b9 	bl	800414c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003de8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	609a      	str	r2, [r3, #8]
      break;
 8003df2:	e04f      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e04:	f000 f9a2 	bl	800414c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e16:	609a      	str	r2, [r3, #8]
      break;
 8003e18:	e03c      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e26:	461a      	mov	r2, r3
 8003e28:	f000 f916 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2150      	movs	r1, #80	@ 0x50
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f96f 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e38:	e02c      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e46:	461a      	mov	r2, r3
 8003e48:	f000 f935 	bl	80040b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2160      	movs	r1, #96	@ 0x60
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f95f 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e58:	e01c      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e66:	461a      	mov	r2, r3
 8003e68:	f000 f8f6 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2140      	movs	r1, #64	@ 0x40
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f94f 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e78:	e00c      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f000 f946 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003e8a:	e003      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e90:	e000      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a46      	ldr	r2, [pc, #280]	@ (800402c <TIM_Base_SetConfig+0x12c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1e:	d00f      	beq.n	8003f40 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a43      	ldr	r2, [pc, #268]	@ (8004030 <TIM_Base_SetConfig+0x130>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a42      	ldr	r2, [pc, #264]	@ (8004034 <TIM_Base_SetConfig+0x134>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a41      	ldr	r2, [pc, #260]	@ (8004038 <TIM_Base_SetConfig+0x138>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a40      	ldr	r2, [pc, #256]	@ (800403c <TIM_Base_SetConfig+0x13c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d108      	bne.n	8003f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a35      	ldr	r2, [pc, #212]	@ (800402c <TIM_Base_SetConfig+0x12c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02b      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f60:	d027      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a32      	ldr	r2, [pc, #200]	@ (8004030 <TIM_Base_SetConfig+0x130>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d023      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a31      	ldr	r2, [pc, #196]	@ (8004034 <TIM_Base_SetConfig+0x134>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01f      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a30      	ldr	r2, [pc, #192]	@ (8004038 <TIM_Base_SetConfig+0x138>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01b      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800403c <TIM_Base_SetConfig+0x13c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d017      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2e      	ldr	r2, [pc, #184]	@ (8004040 <TIM_Base_SetConfig+0x140>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004044 <TIM_Base_SetConfig+0x144>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00f      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2c      	ldr	r2, [pc, #176]	@ (8004048 <TIM_Base_SetConfig+0x148>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800404c <TIM_Base_SetConfig+0x14c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8004050 <TIM_Base_SetConfig+0x150>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a29      	ldr	r2, [pc, #164]	@ (8004054 <TIM_Base_SetConfig+0x154>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d108      	bne.n	8003fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a10      	ldr	r2, [pc, #64]	@ (800402c <TIM_Base_SetConfig+0x12c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_Base_SetConfig+0xf8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a12      	ldr	r2, [pc, #72]	@ (800403c <TIM_Base_SetConfig+0x13c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d103      	bne.n	8004000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]
  }
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	f043 0307 	orr.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	431a      	orrs	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e05a      	b.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a21      	ldr	r2, [pc, #132]	@ (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f0:	d01d      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1b      	ldr	r2, [pc, #108]	@ (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1a      	ldr	r2, [pc, #104]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	@ (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	@ (800427c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a15      	ldr	r2, [pc, #84]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d10c      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40010400 	.word	0x40010400
 800427c:	40014000 	.word	0x40014000
 8004280:	40001800 	.word	0x40001800

08004284 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e042      	b.n	8004344 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc fc00 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2224      	movs	r2, #36	@ 0x24
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f82b 	bl	800434c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b0c0      	sub	sp, #256	@ 0x100
 8004352:	af00      	add	r7, sp, #0
 8004354:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	68d9      	ldr	r1, [r3, #12]
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	ea40 0301 	orr.w	r3, r0, r1
 8004374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	431a      	orrs	r2, r3
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043a4:	f021 010c 	bic.w	r1, r1, #12
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043b2:	430b      	orrs	r3, r1
 80043b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c6:	6999      	ldr	r1, [r3, #24]
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	ea40 0301 	orr.w	r3, r0, r1
 80043d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b8f      	ldr	r3, [pc, #572]	@ (8004618 <UART_SetConfig+0x2cc>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d005      	beq.n	80043ec <UART_SetConfig+0xa0>
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b8d      	ldr	r3, [pc, #564]	@ (800461c <UART_SetConfig+0x2d0>)
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d104      	bne.n	80043f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7ff fad4 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 80043f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043f4:	e003      	b.n	80043fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f6:	f7ff fabb 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 80043fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004408:	f040 810c 	bne.w	8004624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800440c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004410:	2200      	movs	r2, #0
 8004412:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004416:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800441a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	1891      	adds	r1, r2, r2
 8004424:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004426:	415b      	adcs	r3, r3
 8004428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800442a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800442e:	4621      	mov	r1, r4
 8004430:	eb12 0801 	adds.w	r8, r2, r1
 8004434:	4629      	mov	r1, r5
 8004436:	eb43 0901 	adc.w	r9, r3, r1
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800444a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444e:	4690      	mov	r8, r2
 8004450:	4699      	mov	r9, r3
 8004452:	4623      	mov	r3, r4
 8004454:	eb18 0303 	adds.w	r3, r8, r3
 8004458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800445c:	462b      	mov	r3, r5
 800445e:	eb49 0303 	adc.w	r3, r9, r3
 8004462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004472:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800447a:	460b      	mov	r3, r1
 800447c:	18db      	adds	r3, r3, r3
 800447e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004480:	4613      	mov	r3, r2
 8004482:	eb42 0303 	adc.w	r3, r2, r3
 8004486:	657b      	str	r3, [r7, #84]	@ 0x54
 8004488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800448c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004490:	f7fb feac 	bl	80001ec <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b61      	ldr	r3, [pc, #388]	@ (8004620 <UART_SetConfig+0x2d4>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044bc:	415b      	adcs	r3, r3
 80044be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044c4:	4641      	mov	r1, r8
 80044c6:	eb12 0a01 	adds.w	sl, r2, r1
 80044ca:	4649      	mov	r1, r9
 80044cc:	eb43 0b01 	adc.w	fp, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e4:	4692      	mov	sl, r2
 80044e6:	469b      	mov	fp, r3
 80044e8:	4643      	mov	r3, r8
 80044ea:	eb1a 0303 	adds.w	r3, sl, r3
 80044ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044f2:	464b      	mov	r3, r9
 80044f4:	eb4b 0303 	adc.w	r3, fp, r3
 80044f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004508:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800450c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004510:	460b      	mov	r3, r1
 8004512:	18db      	adds	r3, r3, r3
 8004514:	643b      	str	r3, [r7, #64]	@ 0x40
 8004516:	4613      	mov	r3, r2
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	647b      	str	r3, [r7, #68]	@ 0x44
 800451e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004526:	f7fb fe61 	bl	80001ec <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4611      	mov	r1, r2
 8004530:	4b3b      	ldr	r3, [pc, #236]	@ (8004620 <UART_SetConfig+0x2d4>)
 8004532:	fba3 2301 	umull	r2, r3, r3, r1
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2264      	movs	r2, #100	@ 0x64
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	1acb      	subs	r3, r1, r3
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004546:	4b36      	ldr	r3, [pc, #216]	@ (8004620 <UART_SetConfig+0x2d4>)
 8004548:	fba3 2302 	umull	r2, r3, r3, r2
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004554:	441c      	add	r4, r3
 8004556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800455a:	2200      	movs	r2, #0
 800455c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004560:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004568:	4642      	mov	r2, r8
 800456a:	464b      	mov	r3, r9
 800456c:	1891      	adds	r1, r2, r2
 800456e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004570:	415b      	adcs	r3, r3
 8004572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004578:	4641      	mov	r1, r8
 800457a:	1851      	adds	r1, r2, r1
 800457c:	6339      	str	r1, [r7, #48]	@ 0x30
 800457e:	4649      	mov	r1, r9
 8004580:	414b      	adcs	r3, r1
 8004582:	637b      	str	r3, [r7, #52]	@ 0x34
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004590:	4659      	mov	r1, fp
 8004592:	00cb      	lsls	r3, r1, #3
 8004594:	4651      	mov	r1, sl
 8004596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800459a:	4651      	mov	r1, sl
 800459c:	00ca      	lsls	r2, r1, #3
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	4642      	mov	r2, r8
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045ac:	464b      	mov	r3, r9
 80045ae:	460a      	mov	r2, r1
 80045b0:	eb42 0303 	adc.w	r3, r2, r3
 80045b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045cc:	460b      	mov	r3, r1
 80045ce:	18db      	adds	r3, r3, r3
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d2:	4613      	mov	r3, r2
 80045d4:	eb42 0303 	adc.w	r3, r2, r3
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045e2:	f7fb fe03 	bl	80001ec <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <UART_SetConfig+0x2d4>)
 80045ec:	fba3 1302 	umull	r1, r3, r3, r2
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	2164      	movs	r1, #100	@ 0x64
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	3332      	adds	r3, #50	@ 0x32
 80045fe:	4a08      	ldr	r2, [pc, #32]	@ (8004620 <UART_SetConfig+0x2d4>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	f003 0207 	and.w	r2, r3, #7
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4422      	add	r2, r4
 8004612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004614:	e106      	b.n	8004824 <UART_SetConfig+0x4d8>
 8004616:	bf00      	nop
 8004618:	40011000 	.word	0x40011000
 800461c:	40011400 	.word	0x40011400
 8004620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800462e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004636:	4642      	mov	r2, r8
 8004638:	464b      	mov	r3, r9
 800463a:	1891      	adds	r1, r2, r2
 800463c:	6239      	str	r1, [r7, #32]
 800463e:	415b      	adcs	r3, r3
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
 8004642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004646:	4641      	mov	r1, r8
 8004648:	1854      	adds	r4, r2, r1
 800464a:	4649      	mov	r1, r9
 800464c:	eb43 0501 	adc.w	r5, r3, r1
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	00eb      	lsls	r3, r5, #3
 800465a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800465e:	00e2      	lsls	r2, r4, #3
 8004660:	4614      	mov	r4, r2
 8004662:	461d      	mov	r5, r3
 8004664:	4643      	mov	r3, r8
 8004666:	18e3      	adds	r3, r4, r3
 8004668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800466c:	464b      	mov	r3, r9
 800466e:	eb45 0303 	adc.w	r3, r5, r3
 8004672:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004692:	4629      	mov	r1, r5
 8004694:	008b      	lsls	r3, r1, #2
 8004696:	4621      	mov	r1, r4
 8004698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469c:	4621      	mov	r1, r4
 800469e:	008a      	lsls	r2, r1, #2
 80046a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046a4:	f7fb fda2 	bl	80001ec <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b60      	ldr	r3, [pc, #384]	@ (8004830 <UART_SetConfig+0x4e4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	61b9      	str	r1, [r7, #24]
 80046d0:	415b      	adcs	r3, r3
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d8:	4641      	mov	r1, r8
 80046da:	1851      	adds	r1, r2, r1
 80046dc:	6139      	str	r1, [r7, #16]
 80046de:	4649      	mov	r1, r9
 80046e0:	414b      	adcs	r3, r1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046f0:	4659      	mov	r1, fp
 80046f2:	00cb      	lsls	r3, r1, #3
 80046f4:	4651      	mov	r1, sl
 80046f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fa:	4651      	mov	r1, sl
 80046fc:	00ca      	lsls	r2, r1, #3
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	4603      	mov	r3, r0
 8004704:	4642      	mov	r2, r8
 8004706:	189b      	adds	r3, r3, r2
 8004708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800470c:	464b      	mov	r3, r9
 800470e:	460a      	mov	r2, r1
 8004710:	eb42 0303 	adc.w	r3, r2, r3
 8004714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004722:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004730:	4649      	mov	r1, r9
 8004732:	008b      	lsls	r3, r1, #2
 8004734:	4641      	mov	r1, r8
 8004736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800473a:	4641      	mov	r1, r8
 800473c:	008a      	lsls	r2, r1, #2
 800473e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004742:	f7fb fd53 	bl	80001ec <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4611      	mov	r1, r2
 800474c:	4b38      	ldr	r3, [pc, #224]	@ (8004830 <UART_SetConfig+0x4e4>)
 800474e:	fba3 2301 	umull	r2, r3, r3, r1
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2264      	movs	r2, #100	@ 0x64
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	1acb      	subs	r3, r1, r3
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	3332      	adds	r3, #50	@ 0x32
 8004760:	4a33      	ldr	r2, [pc, #204]	@ (8004830 <UART_SetConfig+0x4e4>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800476c:	441c      	add	r4, r3
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	673b      	str	r3, [r7, #112]	@ 0x70
 8004776:	677a      	str	r2, [r7, #116]	@ 0x74
 8004778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	415b      	adcs	r3, r3
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047be:	464b      	mov	r3, r9
 80047c0:	460a      	mov	r2, r1
 80047c2:	eb42 0303 	adc.w	r3, r2, r3
 80047c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047e0:	4649      	mov	r1, r9
 80047e2:	008b      	lsls	r3, r1, #2
 80047e4:	4641      	mov	r1, r8
 80047e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ea:	4641      	mov	r1, r8
 80047ec:	008a      	lsls	r2, r1, #2
 80047ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047f2:	f7fb fcfb 	bl	80001ec <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <UART_SetConfig+0x4e4>)
 80047fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2164      	movs	r1, #100	@ 0x64
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	3332      	adds	r3, #50	@ 0x32
 800480e:	4a08      	ldr	r2, [pc, #32]	@ (8004830 <UART_SetConfig+0x4e4>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4422      	add	r2, r4
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800482a:	46bd      	mov	sp, r7
 800482c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004830:	51eb851f 	.word	0x51eb851f

08004834 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004834:	b084      	sub	sp, #16
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	f107 001c 	add.w	r0, r7, #28
 8004842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004846:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800484a:	2b01      	cmp	r3, #1
 800484c:	d123      	bne.n	8004896 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004876:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f001 fae2 	bl	8005e54 <USB_CoreReset>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]
 8004894:	e01b      	b.n	80048ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f001 fad6 	bl	8005e54 <USB_CoreReset>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38
 80048c0:	e005      	b.n	80048ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048ce:	7fbb      	ldrb	r3, [r7, #30]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10b      	bne.n	80048ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f043 0206 	orr.w	r2, r3, #6
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048f8:	b004      	add	sp, #16
 80048fa:	4770      	bx	lr

080048fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d165      	bne.n	80049dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4a41      	ldr	r2, [pc, #260]	@ (8004a18 <USB_SetTurnaroundTime+0x11c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d906      	bls.n	8004926 <USB_SetTurnaroundTime+0x2a>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4a40      	ldr	r2, [pc, #256]	@ (8004a1c <USB_SetTurnaroundTime+0x120>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d202      	bcs.n	8004926 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004920:	230f      	movs	r3, #15
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e062      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4a3c      	ldr	r2, [pc, #240]	@ (8004a1c <USB_SetTurnaroundTime+0x120>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d306      	bcc.n	800493c <USB_SetTurnaroundTime+0x40>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4a3b      	ldr	r2, [pc, #236]	@ (8004a20 <USB_SetTurnaroundTime+0x124>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d202      	bcs.n	800493c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004936:	230e      	movs	r3, #14
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e057      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a38      	ldr	r2, [pc, #224]	@ (8004a20 <USB_SetTurnaroundTime+0x124>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d306      	bcc.n	8004952 <USB_SetTurnaroundTime+0x56>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a37      	ldr	r2, [pc, #220]	@ (8004a24 <USB_SetTurnaroundTime+0x128>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d202      	bcs.n	8004952 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800494c:	230d      	movs	r3, #13
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e04c      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4a33      	ldr	r2, [pc, #204]	@ (8004a24 <USB_SetTurnaroundTime+0x128>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d306      	bcc.n	8004968 <USB_SetTurnaroundTime+0x6c>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4a32      	ldr	r2, [pc, #200]	@ (8004a28 <USB_SetTurnaroundTime+0x12c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d802      	bhi.n	8004968 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004962:	230c      	movs	r3, #12
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e041      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a28 <USB_SetTurnaroundTime+0x12c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d906      	bls.n	800497e <USB_SetTurnaroundTime+0x82>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4a2e      	ldr	r2, [pc, #184]	@ (8004a2c <USB_SetTurnaroundTime+0x130>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d802      	bhi.n	800497e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004978:	230b      	movs	r3, #11
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e036      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4a2a      	ldr	r2, [pc, #168]	@ (8004a2c <USB_SetTurnaroundTime+0x130>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d906      	bls.n	8004994 <USB_SetTurnaroundTime+0x98>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4a29      	ldr	r2, [pc, #164]	@ (8004a30 <USB_SetTurnaroundTime+0x134>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d802      	bhi.n	8004994 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800498e:	230a      	movs	r3, #10
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	e02b      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4a26      	ldr	r2, [pc, #152]	@ (8004a30 <USB_SetTurnaroundTime+0x134>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d906      	bls.n	80049aa <USB_SetTurnaroundTime+0xae>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4a25      	ldr	r2, [pc, #148]	@ (8004a34 <USB_SetTurnaroundTime+0x138>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d202      	bcs.n	80049aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80049a4:	2309      	movs	r3, #9
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e020      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4a21      	ldr	r2, [pc, #132]	@ (8004a34 <USB_SetTurnaroundTime+0x138>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d306      	bcc.n	80049c0 <USB_SetTurnaroundTime+0xc4>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4a20      	ldr	r2, [pc, #128]	@ (8004a38 <USB_SetTurnaroundTime+0x13c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d802      	bhi.n	80049c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80049ba:	2308      	movs	r3, #8
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e015      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a38 <USB_SetTurnaroundTime+0x13c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d906      	bls.n	80049d6 <USB_SetTurnaroundTime+0xda>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4a1c      	ldr	r2, [pc, #112]	@ (8004a3c <USB_SetTurnaroundTime+0x140>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d202      	bcs.n	80049d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80049d0:	2307      	movs	r3, #7
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	e00a      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80049d6:	2306      	movs	r3, #6
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e007      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80049e2:	2309      	movs	r3, #9
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e001      	b.n	80049ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049e8:	2309      	movs	r3, #9
 80049ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004a04:	431a      	orrs	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	00d8acbf 	.word	0x00d8acbf
 8004a1c:	00e4e1c0 	.word	0x00e4e1c0
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	01067380 	.word	0x01067380
 8004a28:	011a499f 	.word	0x011a499f
 8004a2c:	01312cff 	.word	0x01312cff
 8004a30:	014ca43f 	.word	0x014ca43f
 8004a34:	016e3600 	.word	0x016e3600
 8004a38:	01a6ab1f 	.word	0x01a6ab1f
 8004a3c:	01e84800 	.word	0x01e84800

08004a40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 0201 	bic.w	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d115      	bne.n	8004ad2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ab2:	200a      	movs	r0, #10
 8004ab4:	f7fc fa34 	bl	8000f20 <HAL_Delay>
      ms += 10U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	330a      	adds	r3, #10
 8004abc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 f939 	bl	8005d36 <USB_GetMode>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d01e      	beq.n	8004b08 <USB_SetCurrentMode+0x84>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ace:	d9f0      	bls.n	8004ab2 <USB_SetCurrentMode+0x2e>
 8004ad0:	e01a      	b.n	8004b08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d115      	bne.n	8004b04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	f7fc fa1b 	bl	8000f20 <HAL_Delay>
      ms += 10U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	330a      	adds	r3, #10
 8004aee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f001 f920 	bl	8005d36 <USB_GetMode>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <USB_SetCurrentMode+0x84>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b00:	d9f0      	bls.n	8004ae4 <USB_SetCurrentMode+0x60>
 8004b02:	e001      	b.n	8004b08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e005      	b.n	8004b14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b0c:	d101      	bne.n	8004b12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e009      	b.n	8004b50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3340      	adds	r3, #64	@ 0x40
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	2200      	movs	r2, #0
 8004b48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0e      	cmp	r3, #14
 8004b54:	d9f2      	bls.n	8004b3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11c      	bne.n	8004b98 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b6c:	f043 0302 	orr.w	r3, r3, #2
 8004b70:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b96:	e00b      	b.n	8004bb0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d10d      	bne.n	8004be0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bcc:	2100      	movs	r1, #0
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f968 	bl	8004ea4 <USB_SetDevSpeed>
 8004bd4:	e008      	b.n	8004be8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f963 	bl	8004ea4 <USB_SetDevSpeed>
 8004bde:	e003      	b.n	8004be8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004be0:	2103      	movs	r1, #3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f95e 	bl	8004ea4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004be8:	2110      	movs	r1, #16
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f8fa 	bl	8004de4 <USB_FlushTxFifo>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f924 	bl	8004e48 <USB_FlushRxFifo>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c10:	461a      	mov	r2, r3
 8004c12:	2300      	movs	r3, #0
 8004c14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	e043      	b.n	8004cbc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c4a:	d118      	bne.n	8004c7e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e013      	b.n	8004c90 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c74:	461a      	mov	r2, r3
 8004c76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	e008      	b.n	8004c90 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d3b5      	bcc.n	8004c34 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	e043      	b.n	8004d56 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ce4:	d118      	bne.n	8004d18 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e013      	b.n	8004d2a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e008      	b.n	8004d2a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	461a      	mov	r2, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d36:	461a      	mov	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3301      	adds	r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d3b5      	bcc.n	8004cce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f043 0210 	orr.w	r2, r3, #16
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	4b10      	ldr	r3, [pc, #64]	@ (8004de0 <USB_DevInit+0x2c4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004da4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f043 0208 	orr.w	r2, r3, #8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004db8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d107      	bne.n	8004dd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dc8:	f043 0304 	orr.w	r3, r3, #4
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ddc:	b004      	add	sp, #16
 8004dde:	4770      	bx	lr
 8004de0:	803c3800 	.word	0x803c3800

08004de4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dfe:	d901      	bls.n	8004e04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e01b      	b.n	8004e3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	daf2      	bge.n	8004df2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	019b      	lsls	r3, r3, #6
 8004e14:	f043 0220 	orr.w	r2, r3, #32
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e28:	d901      	bls.n	8004e2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e006      	b.n	8004e3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d0f0      	beq.n	8004e1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e60:	d901      	bls.n	8004e66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e018      	b.n	8004e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	daf2      	bge.n	8004e54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2210      	movs	r2, #16
 8004e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e84:	d901      	bls.n	8004e8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e006      	b.n	8004e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d0f0      	beq.n	8004e78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b087      	sub	sp, #28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
 8004efa:	e00a      	b.n	8004f12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d002      	beq.n	8004f08 <USB_GetDevSpeed+0x32>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d102      	bne.n	8004f0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	75fb      	strb	r3, [r7, #23]
 8004f0c:	e001      	b.n	8004f12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f0e:	230f      	movs	r3, #15
 8004f10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d13a      	bne.n	8004fb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d155      	bne.n	8005020 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	791b      	ldrb	r3, [r3, #4]
 8004f8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	059b      	lsls	r3, r3, #22
 8004f96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e036      	b.n	8005020 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11a      	bne.n	8005020 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	791b      	ldrb	r3, [r3, #4]
 8005004:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005006:	430b      	orrs	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800501a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800501e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	785b      	ldrb	r3, [r3, #1]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d161      	bne.n	8005110 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800505e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005062:	d11f      	bne.n	80050a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800507e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005082:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050c4:	4013      	ands	r3, r2
 80050c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	2101      	movs	r1, #1
 80050da:	fa01 f303 	lsl.w	r3, r1, r3
 80050de:	b29b      	uxth	r3, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050e8:	4013      	ands	r3, r2
 80050ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	0159      	lsls	r1, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	440b      	add	r3, r1
 8005102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005106:	4619      	mov	r1, r3
 8005108:	4b35      	ldr	r3, [pc, #212]	@ (80051e0 <USB_DeactivateEndpoint+0x1b0>)
 800510a:	4013      	ands	r3, r2
 800510c:	600b      	str	r3, [r1, #0]
 800510e:	e060      	b.n	80051d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005122:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005126:	d11f      	bne.n	8005168 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005142:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005146:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005162:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005166:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	2101      	movs	r1, #1
 800517a:	fa01 f303 	lsl.w	r3, r1, r3
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	43db      	mvns	r3, r3
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005188:	4013      	ands	r3, r2
 800518a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	2101      	movs	r1, #1
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	43db      	mvns	r3, r3
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051ac:	4013      	ands	r3, r2
 80051ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	0159      	lsls	r1, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	440b      	add	r3, r1
 80051c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ca:	4619      	mov	r1, r3
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <USB_DeactivateEndpoint+0x1b4>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	ec337800 	.word	0xec337800
 80051e4:	eff37800 	.word	0xeff37800

080051e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	@ 0x28
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b01      	cmp	r3, #1
 8005206:	f040 817a 	bne.w	80054fe <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d132      	bne.n	8005278 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800522c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005230:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	0151      	lsls	r1, r2, #5
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	440a      	add	r2, r1
 800524c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005250:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005254:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005270:	0cdb      	lsrs	r3, r3, #19
 8005272:	04db      	lsls	r3, r3, #19
 8005274:	6113      	str	r3, [r2, #16]
 8005276:	e092      	b.n	800539e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005292:	0cdb      	lsrs	r3, r3, #19
 8005294:	04db      	lsls	r3, r3, #19
 8005296:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80052b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80052ba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d11a      	bne.n	80052f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d903      	bls.n	80052d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	0151      	lsls	r1, r2, #5
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	440a      	add	r2, r1
 80052ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052f4:	6113      	str	r3, [r2, #16]
 80052f6:	e01b      	b.n	8005330 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005304:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6919      	ldr	r1, [r3, #16]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	440b      	add	r3, r1
 8005310:	1e59      	subs	r1, r3, #1
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	fbb1 f3f3 	udiv	r3, r1, r3
 800531a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800531c:	4ba2      	ldr	r3, [pc, #648]	@ (80055a8 <USB_EPStartXfer+0x3c0>)
 800531e:	400b      	ands	r3, r1
 8005320:	69b9      	ldr	r1, [r7, #24]
 8005322:	0148      	lsls	r0, r1, #5
 8005324:	69f9      	ldr	r1, [r7, #28]
 8005326:	4401      	add	r1, r0
 8005328:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800532c:	4313      	orrs	r3, r2
 800532e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005346:	69b9      	ldr	r1, [r7, #24]
 8005348:	0148      	lsls	r0, r1, #5
 800534a:	69f9      	ldr	r1, [r7, #28]
 800534c:	4401      	add	r1, r0
 800534e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005352:	4313      	orrs	r3, r2
 8005354:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	791b      	ldrb	r3, [r3, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d11f      	bne.n	800539e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	440a      	add	r2, r1
 8005374:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005378:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800537c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005398:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800539c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d14b      	bne.n	800543c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b8:	461a      	mov	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	791b      	ldrb	r3, [r3, #4]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d128      	bne.n	800541a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d110      	bne.n	80053fa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e00f      	b.n	800541a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	440a      	add	r2, r1
 8005410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005418:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005434:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e165      	b.n	8005708 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005456:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800545a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	791b      	ldrb	r3, [r3, #4]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d015      	beq.n	8005490 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 814d 	beq.w	8005708 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	2101      	movs	r1, #1
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	69f9      	ldr	r1, [r7, #28]
 8005486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800548a:	4313      	orrs	r3, r2
 800548c:	634b      	str	r3, [r1, #52]	@ 0x34
 800548e:	e13b      	b.n	8005708 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d110      	bne.n	80054c2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e00f      	b.n	80054e2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	68d9      	ldr	r1, [r3, #12]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	b298      	uxth	r0, r3
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	4603      	mov	r3, r0
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f9b8 	bl	800586c <USB_WritePacket>
 80054fc:	e104      	b.n	8005708 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005518:	0cdb      	lsrs	r3, r3, #19
 800551a:	04db      	lsls	r3, r3, #19
 800551c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005538:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800553c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005540:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d131      	bne.n	80055ac <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005576:	69b9      	ldr	r1, [r7, #24]
 8005578:	0148      	lsls	r0, r1, #5
 800557a:	69f9      	ldr	r1, [r7, #28]
 800557c:	4401      	add	r1, r0
 800557e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055a4:	6113      	str	r3, [r2, #16]
 80055a6:	e061      	b.n	800566c <USB_EPStartXfer+0x484>
 80055a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d123      	bne.n	80055fc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	0148      	lsls	r0, r1, #5
 80055ce:	69f9      	ldr	r1, [r7, #28]
 80055d0:	4401      	add	r1, r0
 80055d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055d6:	4313      	orrs	r3, r2
 80055d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055f8:	6113      	str	r3, [r2, #16]
 80055fa:	e037      	b.n	800566c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4413      	add	r3, r2
 8005606:	1e5a      	subs	r2, r3, #1
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	8afa      	ldrh	r2, [r7, #22]
 8005618:	fb03 f202 	mul.w	r2, r3, r2
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	8afb      	ldrh	r3, [r7, #22]
 8005630:	04d9      	lsls	r1, r3, #19
 8005632:	4b38      	ldr	r3, [pc, #224]	@ (8005714 <USB_EPStartXfer+0x52c>)
 8005634:	400b      	ands	r3, r1
 8005636:	69b9      	ldr	r1, [r7, #24]
 8005638:	0148      	lsls	r0, r1, #5
 800563a:	69f9      	ldr	r1, [r7, #28]
 800563c:	4401      	add	r1, r0
 800563e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005642:	4313      	orrs	r3, r2
 8005644:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800565c:	69b9      	ldr	r1, [r7, #24]
 800565e:	0148      	lsls	r0, r1, #5
 8005660:	69f9      	ldr	r1, [r7, #28]
 8005662:	4401      	add	r1, r0
 8005664:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005668:	4313      	orrs	r3, r2
 800566a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10d      	bne.n	800568e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	68d9      	ldr	r1, [r3, #12]
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568a:	460a      	mov	r2, r1
 800568c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	791b      	ldrb	r3, [r3, #4]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d128      	bne.n	80056e8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d110      	bne.n	80056c8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e00f      	b.n	80056e8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005702:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005706:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	1ff80000 	.word	0x1ff80000

08005718 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d14a      	bne.n	80057cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800574a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800574e:	f040 8086 	bne.w	800585e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	7812      	ldrb	r2, [r2, #0]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005770:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005774:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005794:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005798:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d902      	bls.n	80057b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
          break;
 80057ae:	e056      	b.n	800585e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c8:	d0e7      	beq.n	800579a <USB_EPStopXfer+0x82>
 80057ca:	e048      	b.n	800585e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057e4:	d13b      	bne.n	800585e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005804:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005808:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800582c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f242 7210 	movw	r2, #10000	@ 0x2710
 800583a:	4293      	cmp	r3, r2
 800583c:	d902      	bls.n	8005844 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	75fb      	strb	r3, [r7, #23]
          break;
 8005842:	e00c      	b.n	800585e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585c:	d0e7      	beq.n	800582e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800585e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005860:	4618      	mov	r0, r3
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	@ 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	460b      	mov	r3, r1
 800587c:	71fb      	strb	r3, [r7, #7]
 800587e:	4613      	mov	r3, r2
 8005880:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800588a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d123      	bne.n	80058da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005892:	88bb      	ldrh	r3, [r7, #4]
 8005894:	3303      	adds	r3, #3
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e018      	b.n	80058d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	031a      	lsls	r2, r3, #12
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ac:	461a      	mov	r2, r3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3301      	adds	r3, #1
 80058be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	3301      	adds	r3, #1
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d3e2      	bcc.n	80058a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3724      	adds	r7, #36	@ 0x24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b08b      	sub	sp, #44	@ 0x2c
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	b29b      	uxth	r3, r3
 8005904:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800590e:	2300      	movs	r3, #0
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e014      	b.n	800593e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	3301      	adds	r3, #1
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	3301      	adds	r3, #1
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	3301      	adds	r3, #1
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	3301      	adds	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	3301      	adds	r3, #1
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	429a      	cmp	r2, r3
 8005944:	d3e6      	bcc.n	8005914 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005946:	8bfb      	ldrh	r3, [r7, #30]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01e      	beq.n	800598a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005956:	461a      	mov	r2, r3
 8005958:	f107 0310 	add.w	r3, r7, #16
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	b2da      	uxtb	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	701a      	strb	r2, [r3, #0]
      i++;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	3301      	adds	r3, #1
 8005976:	623b      	str	r3, [r7, #32]
      pDest++;
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	3301      	adds	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800597e:	8bfb      	ldrh	r3, [r7, #30]
 8005980:	3b01      	subs	r3, #1
 8005982:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005984:	8bfb      	ldrh	r3, [r7, #30]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ea      	bne.n	8005960 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800598c:	4618      	mov	r0, r3
 800598e:	372c      	adds	r7, #44	@ 0x2c
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d12c      	bne.n	8005a0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	db12      	blt.n	80059ec <USB_EPSetStall+0x54>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00f      	beq.n	80059ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	e02b      	b.n	8005a66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	db12      	blt.n	8005a46 <USB_EPSetStall+0xae>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00f      	beq.n	8005a46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d128      	bne.n	8005ae2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005aae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	791b      	ldrb	r3, [r3, #4]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d003      	beq.n	8005ac0 <USB_EPClearStall+0x4c>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	791b      	ldrb	r3, [r3, #4]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d138      	bne.n	8005b32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e027      	b.n	8005b32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005afc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	791b      	ldrb	r3, [r3, #4]
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d003      	beq.n	8005b12 <USB_EPClearStall+0x9e>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	791b      	ldrb	r3, [r3, #4]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d10f      	bne.n	8005b32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005b74:	68f9      	ldr	r1, [r7, #12]
 8005b76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bba:	f023 0302 	bic.w	r3, r3, #2
 8005bbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005be8:	f023 0303 	bic.w	r3, r3, #3
 8005bec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bfc:	f043 0302 	orr.w	r3, r3, #2
 8005c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4013      	ands	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c28:	68fb      	ldr	r3, [r7, #12]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	b29b      	uxth	r3, r3
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b087      	sub	sp, #28
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0a:	01db      	lsls	r3, r3, #7
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4013      	ands	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d28:	68bb      	ldr	r3, [r7, #8]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0301 	and.w	r3, r3, #1
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d70:	f023 0307 	bic.w	r3, r3, #7
 8005d74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	460b      	mov	r3, r1
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	333c      	adds	r3, #60	@ 0x3c
 8005dae:	3304      	adds	r3, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4a26      	ldr	r2, [pc, #152]	@ (8005e50 <USB_EP0_OutStart+0xb8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d90a      	bls.n	8005dd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dcc:	d101      	bne.n	8005dd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e037      	b.n	8005e42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005df0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e00:	f043 0318 	orr.w	r3, r3, #24
 8005e04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e14:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005e18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e1a:	7afb      	ldrb	r3, [r7, #11]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d10f      	bne.n	8005e40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e26:	461a      	mov	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e3a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	4f54300a 	.word	0x4f54300a

08005e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e6c:	d901      	bls.n	8005e72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e01b      	b.n	8005eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	daf2      	bge.n	8005e60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e96:	d901      	bls.n	8005e9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e006      	b.n	8005eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d0f0      	beq.n	8005e8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ec4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005ec8:	f002 fc3a 	bl	8008740 <USBD_static_malloc>
 8005ecc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	32b0      	adds	r2, #176	@ 0xb0
 8005ede:	2100      	movs	r1, #0
 8005ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e0d4      	b.n	8006092 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ee8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005eec:	2100      	movs	r1, #0
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f002 fc6a 	bl	80087c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32b0      	adds	r2, #176	@ 0xb0
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	32b0      	adds	r2, #176	@ 0xb0
 8005f0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7c1b      	ldrb	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d138      	bne.n	8005f92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f20:	4b5e      	ldr	r3, [pc, #376]	@ (800609c <USBD_CDC_Init+0x1e4>)
 8005f22:	7819      	ldrb	r1, [r3, #0]
 8005f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f28:	2202      	movs	r2, #2
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f002 fae5 	bl	80084fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f30:	4b5a      	ldr	r3, [pc, #360]	@ (800609c <USBD_CDC_Init+0x1e4>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	3324      	adds	r3, #36	@ 0x24
 8005f46:	2201      	movs	r2, #1
 8005f48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f4a:	4b55      	ldr	r3, [pc, #340]	@ (80060a0 <USBD_CDC_Init+0x1e8>)
 8005f4c:	7819      	ldrb	r1, [r3, #0]
 8005f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f52:	2202      	movs	r2, #2
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f002 fad0 	bl	80084fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f5a:	4b51      	ldr	r3, [pc, #324]	@ (80060a0 <USBD_CDC_Init+0x1e8>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	f003 020f 	and.w	r2, r3, #15
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f72:	2201      	movs	r2, #1
 8005f74:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f76:	4b4b      	ldr	r3, [pc, #300]	@ (80060a4 <USBD_CDC_Init+0x1ec>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	f003 020f 	and.w	r2, r3, #15
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	3326      	adds	r3, #38	@ 0x26
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e035      	b.n	8005ffe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f92:	4b42      	ldr	r3, [pc, #264]	@ (800609c <USBD_CDC_Init+0x1e4>)
 8005f94:	7819      	ldrb	r1, [r3, #0]
 8005f96:	2340      	movs	r3, #64	@ 0x40
 8005f98:	2202      	movs	r2, #2
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f002 faad 	bl	80084fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800609c <USBD_CDC_Init+0x1e4>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3324      	adds	r3, #36	@ 0x24
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005fba:	4b39      	ldr	r3, [pc, #228]	@ (80060a0 <USBD_CDC_Init+0x1e8>)
 8005fbc:	7819      	ldrb	r1, [r3, #0]
 8005fbe:	2340      	movs	r3, #64	@ 0x40
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 fa99 	bl	80084fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fc8:	4b35      	ldr	r3, [pc, #212]	@ (80060a0 <USBD_CDC_Init+0x1e8>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80060a4 <USBD_CDC_Init+0x1ec>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f003 020f 	and.w	r2, r3, #15
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	3326      	adds	r3, #38	@ 0x26
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ffe:	4b29      	ldr	r3, [pc, #164]	@ (80060a4 <USBD_CDC_Init+0x1ec>)
 8006000:	7819      	ldrb	r1, [r3, #0]
 8006002:	2308      	movs	r3, #8
 8006004:	2203      	movs	r2, #3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f002 fa77 	bl	80084fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800600c:	4b25      	ldr	r3, [pc, #148]	@ (80060a4 <USBD_CDC_Init+0x1ec>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	3324      	adds	r3, #36	@ 0x24
 8006022:	2201      	movs	r2, #1
 8006024:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	33b0      	adds	r3, #176	@ 0xb0
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800605c:	2302      	movs	r3, #2
 800605e:	e018      	b.n	8006092 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7c1b      	ldrb	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006068:	4b0d      	ldr	r3, [pc, #52]	@ (80060a0 <USBD_CDC_Init+0x1e8>)
 800606a:	7819      	ldrb	r1, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006072:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f002 fb2e 	bl	80086d8 <USBD_LL_PrepareReceive>
 800607c:	e008      	b.n	8006090 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800607e:	4b08      	ldr	r3, [pc, #32]	@ (80060a0 <USBD_CDC_Init+0x1e8>)
 8006080:	7819      	ldrb	r1, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006088:	2340      	movs	r3, #64	@ 0x40
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f002 fb24 	bl	80086d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000093 	.word	0x20000093
 80060a0:	20000094 	.word	0x20000094
 80060a4:	20000095 	.word	0x20000095

080060a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060b4:	4b3a      	ldr	r3, [pc, #232]	@ (80061a0 <USBD_CDC_DeInit+0xf8>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f002 fa43 	bl	8008546 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060c0:	4b37      	ldr	r3, [pc, #220]	@ (80061a0 <USBD_CDC_DeInit+0xf8>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 020f 	and.w	r2, r3, #15
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	3324      	adds	r3, #36	@ 0x24
 80060d6:	2200      	movs	r2, #0
 80060d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060da:	4b32      	ldr	r3, [pc, #200]	@ (80061a4 <USBD_CDC_DeInit+0xfc>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 fa30 	bl	8008546 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060e6:	4b2f      	ldr	r3, [pc, #188]	@ (80061a4 <USBD_CDC_DeInit+0xfc>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	f003 020f 	and.w	r2, r3, #15
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060fe:	2200      	movs	r2, #0
 8006100:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006102:	4b29      	ldr	r3, [pc, #164]	@ (80061a8 <USBD_CDC_DeInit+0x100>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f002 fa1c 	bl	8008546 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800610e:	4b26      	ldr	r3, [pc, #152]	@ (80061a8 <USBD_CDC_DeInit+0x100>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	f003 020f 	and.w	r2, r3, #15
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	3324      	adds	r3, #36	@ 0x24
 8006124:	2200      	movs	r2, #0
 8006126:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006128:	4b1f      	ldr	r3, [pc, #124]	@ (80061a8 <USBD_CDC_DeInit+0x100>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	3326      	adds	r3, #38	@ 0x26
 800613e:	2200      	movs	r2, #0
 8006140:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	32b0      	adds	r2, #176	@ 0xb0
 800614c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01f      	beq.n	8006194 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	33b0      	adds	r3, #176	@ 0xb0
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	32b0      	adds	r2, #176	@ 0xb0
 8006172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006176:	4618      	mov	r0, r3
 8006178:	f002 faf0 	bl	800875c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	32b0      	adds	r2, #176	@ 0xb0
 8006186:	2100      	movs	r1, #0
 8006188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000093 	.word	0x20000093
 80061a4:	20000094 	.word	0x20000094
 80061a8:	20000095 	.word	0x20000095

080061ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	32b0      	adds	r2, #176	@ 0xb0
 80061c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061d8:	2303      	movs	r3, #3
 80061da:	e0bf      	b.n	800635c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d050      	beq.n	800628a <USBD_CDC_Setup+0xde>
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	f040 80af 	bne.w	800634c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	88db      	ldrh	r3, [r3, #6]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d03a      	beq.n	800626c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	da1b      	bge.n	8006238 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	33b0      	adds	r3, #176	@ 0xb0
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006216:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	88d2      	ldrh	r2, [r2, #6]
 800621c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	88db      	ldrh	r3, [r3, #6]
 8006222:	2b07      	cmp	r3, #7
 8006224:	bf28      	it	cs
 8006226:	2307      	movcs	r3, #7
 8006228:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	89fa      	ldrh	r2, [r7, #14]
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 fd47 	bl	8007cc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006236:	e090      	b.n	800635a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	785a      	ldrb	r2, [r3, #1]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	88db      	ldrh	r3, [r3, #6]
 8006246:	2b3f      	cmp	r3, #63	@ 0x3f
 8006248:	d803      	bhi.n	8006252 <USBD_CDC_Setup+0xa6>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	e000      	b.n	8006254 <USBD_CDC_Setup+0xa8>
 8006252:	2240      	movs	r2, #64	@ 0x40
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800625a:	6939      	ldr	r1, [r7, #16]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006262:	461a      	mov	r2, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fd59 	bl	8007d1c <USBD_CtlPrepareRx>
      break;
 800626a:	e076      	b.n	800635a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	33b0      	adds	r3, #176	@ 0xb0
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	7850      	ldrb	r0, [r2, #1]
 8006282:	2200      	movs	r2, #0
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	4798      	blx	r3
      break;
 8006288:	e067      	b.n	800635a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b0b      	cmp	r3, #11
 8006290:	d851      	bhi.n	8006336 <USBD_CDC_Setup+0x18a>
 8006292:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <USBD_CDC_Setup+0xec>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062c9 	.word	0x080062c9
 800629c:	08006345 	.word	0x08006345
 80062a0:	08006337 	.word	0x08006337
 80062a4:	08006337 	.word	0x08006337
 80062a8:	08006337 	.word	0x08006337
 80062ac:	08006337 	.word	0x08006337
 80062b0:	08006337 	.word	0x08006337
 80062b4:	08006337 	.word	0x08006337
 80062b8:	08006337 	.word	0x08006337
 80062bc:	08006337 	.word	0x08006337
 80062c0:	080062f3 	.word	0x080062f3
 80062c4:	0800631d 	.word	0x0800631d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d107      	bne.n	80062e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062d4:	f107 030a 	add.w	r3, r7, #10
 80062d8:	2202      	movs	r2, #2
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 fcf1 	bl	8007cc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062e2:	e032      	b.n	800634a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fc7b 	bl	8007be2 <USBD_CtlError>
            ret = USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	75fb      	strb	r3, [r7, #23]
          break;
 80062f0:	e02b      	b.n	800634a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d107      	bne.n	800630e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062fe:	f107 030d 	add.w	r3, r7, #13
 8006302:	2201      	movs	r2, #1
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 fcdc 	bl	8007cc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800630c:	e01d      	b.n	800634a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 fc66 	bl	8007be2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006316:	2303      	movs	r3, #3
 8006318:	75fb      	strb	r3, [r7, #23]
          break;
 800631a:	e016      	b.n	800634a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b03      	cmp	r3, #3
 8006326:	d00f      	beq.n	8006348 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fc59 	bl	8007be2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006334:	e008      	b.n	8006348 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 fc52 	bl	8007be2 <USBD_CtlError>
          ret = USBD_FAIL;
 800633e:	2303      	movs	r3, #3
 8006340:	75fb      	strb	r3, [r7, #23]
          break;
 8006342:	e002      	b.n	800634a <USBD_CDC_Setup+0x19e>
          break;
 8006344:	bf00      	nop
 8006346:	e008      	b.n	800635a <USBD_CDC_Setup+0x1ae>
          break;
 8006348:	bf00      	nop
      }
      break;
 800634a:	e006      	b.n	800635a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fc47 	bl	8007be2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006354:	2303      	movs	r3, #3
 8006356:	75fb      	strb	r3, [r7, #23]
      break;
 8006358:	bf00      	nop
  }

  return (uint8_t)ret;
 800635a:	7dfb      	ldrb	r3, [r7, #23]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006376:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	32b0      	adds	r2, #176	@ 0xb0
 8006382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800638a:	2303      	movs	r3, #3
 800638c:	e065      	b.n	800645a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	32b0      	adds	r2, #176	@ 0xb0
 8006398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	3318      	adds	r3, #24
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02f      	beq.n	8006418 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	f003 020f 	and.w	r2, r3, #15
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	3318      	adds	r3, #24
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	f003 010f 	and.w	r1, r3, #15
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	460b      	mov	r3, r1
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4403      	add	r3, r0
 80063e0:	331c      	adds	r3, #28
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80063e8:	fb01 f303 	mul.w	r3, r1, r3
 80063ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d112      	bne.n	8006418 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	f003 020f 	and.w	r2, r3, #15
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	3318      	adds	r3, #24
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800640a:	78f9      	ldrb	r1, [r7, #3]
 800640c:	2300      	movs	r3, #0
 800640e:	2200      	movs	r2, #0
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f002 f940 	bl	8008696 <USBD_LL_Transmit>
 8006416:	e01f      	b.n	8006458 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	33b0      	adds	r3, #176	@ 0xb0
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d010      	beq.n	8006458 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	33b0      	adds	r3, #176	@ 0xb0
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006454:	78fa      	ldrb	r2, [r7, #3]
 8006456:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	32b0      	adds	r2, #176	@ 0xb0
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	32b0      	adds	r2, #176	@ 0xb0
 8006488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006490:	2303      	movs	r3, #3
 8006492:	e01a      	b.n	80064ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f002 f93e 	bl	800871a <USBD_LL_GetRxDataSize>
 800649e:	4602      	mov	r2, r0
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	33b0      	adds	r3, #176	@ 0xb0
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80064c4:	4611      	mov	r1, r2
 80064c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	32b0      	adds	r2, #176	@ 0xb0
 80064e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e024      	b.n	800653e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	33b0      	adds	r3, #176	@ 0xb0
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d019      	beq.n	800653c <USBD_CDC_EP0_RxReady+0x6a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800650e:	2bff      	cmp	r3, #255	@ 0xff
 8006510:	d014      	beq.n	800653c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	33b0      	adds	r3, #176	@ 0xb0
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800652a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006532:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	22ff      	movs	r2, #255	@ 0xff
 8006538:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006550:	2182      	movs	r1, #130	@ 0x82
 8006552:	4818      	ldr	r0, [pc, #96]	@ (80065b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006554:	f000 fd0f 	bl	8006f76 <USBD_GetEpDesc>
 8006558:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800655a:	2101      	movs	r1, #1
 800655c:	4815      	ldr	r0, [pc, #84]	@ (80065b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800655e:	f000 fd0a 	bl	8006f76 <USBD_GetEpDesc>
 8006562:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006564:	2181      	movs	r1, #129	@ 0x81
 8006566:	4813      	ldr	r0, [pc, #76]	@ (80065b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006568:	f000 fd05 	bl	8006f76 <USBD_GetEpDesc>
 800656c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2210      	movs	r2, #16
 8006578:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d006      	beq.n	800658e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2200      	movs	r2, #0
 8006584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006588:	711a      	strb	r2, [r3, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d006      	beq.n	80065a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800659c:	711a      	strb	r2, [r3, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2243      	movs	r2, #67	@ 0x43
 80065a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065a8:	4b02      	ldr	r3, [pc, #8]	@ (80065b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000050 	.word	0x20000050

080065b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065c0:	2182      	movs	r1, #130	@ 0x82
 80065c2:	4818      	ldr	r0, [pc, #96]	@ (8006624 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065c4:	f000 fcd7 	bl	8006f76 <USBD_GetEpDesc>
 80065c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065ca:	2101      	movs	r1, #1
 80065cc:	4815      	ldr	r0, [pc, #84]	@ (8006624 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065ce:	f000 fcd2 	bl	8006f76 <USBD_GetEpDesc>
 80065d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065d4:	2181      	movs	r1, #129	@ 0x81
 80065d6:	4813      	ldr	r0, [pc, #76]	@ (8006624 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065d8:	f000 fccd 	bl	8006f76 <USBD_GetEpDesc>
 80065dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2210      	movs	r2, #16
 80065e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d006      	beq.n	80065fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2200      	movs	r2, #0
 80065f4:	711a      	strb	r2, [r3, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f042 0202 	orr.w	r2, r2, #2
 80065fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d006      	beq.n	8006612 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	711a      	strb	r2, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f042 0202 	orr.w	r2, r2, #2
 8006610:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2243      	movs	r2, #67	@ 0x43
 8006616:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006618:	4b02      	ldr	r3, [pc, #8]	@ (8006624 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000050 	.word	0x20000050

08006628 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006630:	2182      	movs	r1, #130	@ 0x82
 8006632:	4818      	ldr	r0, [pc, #96]	@ (8006694 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006634:	f000 fc9f 	bl	8006f76 <USBD_GetEpDesc>
 8006638:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800663a:	2101      	movs	r1, #1
 800663c:	4815      	ldr	r0, [pc, #84]	@ (8006694 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800663e:	f000 fc9a 	bl	8006f76 <USBD_GetEpDesc>
 8006642:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006644:	2181      	movs	r1, #129	@ 0x81
 8006646:	4813      	ldr	r0, [pc, #76]	@ (8006694 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006648:	f000 fc95 	bl	8006f76 <USBD_GetEpDesc>
 800664c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2210      	movs	r2, #16
 8006658:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d006      	beq.n	800666e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2200      	movs	r2, #0
 8006664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006668:	711a      	strb	r2, [r3, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d006      	beq.n	8006682 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800667c:	711a      	strb	r2, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2243      	movs	r2, #67	@ 0x43
 8006686:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006688:	4b02      	ldr	r3, [pc, #8]	@ (8006694 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000050 	.word	0x20000050

08006698 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	220a      	movs	r2, #10
 80066a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80066a6:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	2000000c 	.word	0x2000000c

080066b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e009      	b.n	80066e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	33b0      	adds	r3, #176	@ 0xb0
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	32b0      	adds	r2, #176	@ 0xb0
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	e008      	b.n	8006724 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	32b0      	adds	r2, #176	@ 0xb0
 8006744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006748:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006750:	2303      	movs	r3, #3
 8006752:	e004      	b.n	800675e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	32b0      	adds	r2, #176	@ 0xb0
 800677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006782:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	32b0      	adds	r2, #176	@ 0xb0
 800678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006796:	2303      	movs	r3, #3
 8006798:	e018      	b.n	80067cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	7c1b      	ldrb	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a2:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <USBD_CDC_ReceivePacket+0x68>)
 80067a4:	7819      	ldrb	r1, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 ff91 	bl	80086d8 <USBD_LL_PrepareReceive>
 80067b6:	e008      	b.n	80067ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067b8:	4b06      	ldr	r3, [pc, #24]	@ (80067d4 <USBD_CDC_ReceivePacket+0x68>)
 80067ba:	7819      	ldrb	r1, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067c2:	2340      	movs	r3, #64	@ 0x40
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 ff87 	bl	80086d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000094 	.word	0x20000094

080067d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e01f      	b.n	8006830 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	79fa      	ldrb	r2, [r7, #7]
 8006822:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f001 fe01 	bl	800842c <USBD_LL_Init>
 800682a:	4603      	mov	r3, r0
 800682c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	e025      	b.n	800689c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	32ae      	adds	r2, #174	@ 0xae
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00f      	beq.n	800688c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	32ae      	adds	r2, #174	@ 0xae
 8006876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	f107 020e 	add.w	r2, r7, #14
 8006880:	4610      	mov	r0, r2
 8006882:	4798      	blx	r3
 8006884:	4602      	mov	r2, r0
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fe09 	bl	80084c4 <USBD_LL_Start>
 80068b2:	4603      	mov	r3, r0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d009      	beq.n	8006900 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	78fa      	ldrb	r2, [r7, #3]
 80068f6:	4611      	mov	r1, r2
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	4611      	mov	r1, r2
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006930:	2303      	movs	r3, #3
 8006932:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f001 f90c 	bl	8007b6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	2b02      	cmp	r3, #2
 8006978:	d01a      	beq.n	80069b0 <USBD_LL_SetupStage+0x72>
 800697a:	2b02      	cmp	r3, #2
 800697c:	d822      	bhi.n	80069c4 <USBD_LL_SetupStage+0x86>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <USBD_LL_SetupStage+0x4a>
 8006982:	2b01      	cmp	r3, #1
 8006984:	d00a      	beq.n	800699c <USBD_LL_SetupStage+0x5e>
 8006986:	e01d      	b.n	80069c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fb63 	bl	800705c <USBD_StdDevReq>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
      break;
 800699a:	e020      	b.n	80069de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fbcb 	bl	8007140 <USBD_StdItfReq>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]
      break;
 80069ae:	e016      	b.n	80069de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc2d 	bl	8007218 <USBD_StdEPReq>
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]
      break;
 80069c2:	e00c      	b.n	80069de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fdd6 	bl	8008584 <USBD_LL_StallEP>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
      break;
 80069dc:	bf00      	nop
  }

  return ret;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	460b      	mov	r3, r1
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d16e      	bne.n	8006ade <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	f040 8098 	bne.w	8006b44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d913      	bls.n	8006a48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	1ad2      	subs	r2, r2, r3
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4293      	cmp	r3, r2
 8006a38:	bf28      	it	cs
 8006a3a:	4613      	movcs	r3, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f001 f988 	bl	8007d56 <USBD_CtlContinueRx>
 8006a46:	e07d      	b.n	8006b44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d014      	beq.n	8006a80 <USBD_LL_DataOutStage+0x98>
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d81d      	bhi.n	8006a96 <USBD_LL_DataOutStage+0xae>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <USBD_LL_DataOutStage+0x7c>
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d003      	beq.n	8006a6a <USBD_LL_DataOutStage+0x82>
 8006a62:	e018      	b.n	8006a96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	75bb      	strb	r3, [r7, #22]
            break;
 8006a68:	e018      	b.n	8006a9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	4619      	mov	r1, r3
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fa64 	bl	8006f42 <USBD_CoreFindIF>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a7e:	e00d      	b.n	8006a9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	4619      	mov	r1, r3
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fa66 	bl	8006f5c <USBD_CoreFindEP>
 8006a90:	4603      	mov	r3, r0
 8006a92:	75bb      	strb	r3, [r7, #22]
            break;
 8006a94:	e002      	b.n	8006a9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	75bb      	strb	r3, [r7, #22]
            break;
 8006a9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a9c:	7dbb      	ldrb	r3, [r7, #22]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d119      	bne.n	8006ad6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d113      	bne.n	8006ad6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006aae:	7dba      	ldrb	r2, [r7, #22]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	32ae      	adds	r2, #174	@ 0xae
 8006ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006abe:	7dba      	ldrb	r2, [r7, #22]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ac6:	7dba      	ldrb	r2, [r7, #22]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	32ae      	adds	r2, #174	@ 0xae
 8006acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f001 f94e 	bl	8007d78 <USBD_CtlSendStatus>
 8006adc:	e032      	b.n	8006b44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fa37 	bl	8006f5c <USBD_CoreFindEP>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006af2:	7dbb      	ldrb	r3, [r7, #22]
 8006af4:	2bff      	cmp	r3, #255	@ 0xff
 8006af6:	d025      	beq.n	8006b44 <USBD_LL_DataOutStage+0x15c>
 8006af8:	7dbb      	ldrb	r3, [r7, #22]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d122      	bne.n	8006b44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d117      	bne.n	8006b3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b0a:	7dba      	ldrb	r2, [r7, #22]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	32ae      	adds	r2, #174	@ 0xae
 8006b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00f      	beq.n	8006b3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b1a:	7dba      	ldrb	r2, [r7, #22]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b22:	7dba      	ldrb	r2, [r7, #22]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	32ae      	adds	r2, #174	@ 0xae
 8006b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	7afa      	ldrb	r2, [r7, #11]
 8006b30:	4611      	mov	r1, r2
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	4798      	blx	r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	e000      	b.n	8006b46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b086      	sub	sp, #24
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	460b      	mov	r3, r1
 8006b58:	607a      	str	r2, [r7, #4]
 8006b5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d16f      	bne.n	8006c42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3314      	adds	r3, #20
 8006b66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d15a      	bne.n	8006c28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d914      	bls.n	8006ba8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f001 f8b0 	bl	8007cfa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f001 fd99 	bl	80086d8 <USBD_LL_PrepareReceive>
 8006ba6:	e03f      	b.n	8006c28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d11c      	bne.n	8006bee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d316      	bcc.n	8006bee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d20f      	bcs.n	8006bee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f001 f891 	bl	8007cfa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006be0:	2300      	movs	r3, #0
 8006be2:	2200      	movs	r2, #0
 8006be4:	2100      	movs	r1, #0
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f001 fd76 	bl	80086d8 <USBD_LL_PrepareReceive>
 8006bec:	e01c      	b.n	8006c28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d10f      	bne.n	8006c1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c1a:	2180      	movs	r1, #128	@ 0x80
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f001 fcb1 	bl	8008584 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f001 f8bb 	bl	8007d9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d03a      	beq.n	8006ca8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff fe42 	bl	80068bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006c40:	e032      	b.n	8006ca8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c42:	7afb      	ldrb	r3, [r7, #11]
 8006c44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f985 	bl	8006f5c <USBD_CoreFindEP>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	2bff      	cmp	r3, #255	@ 0xff
 8006c5a:	d025      	beq.n	8006ca8 <USBD_LL_DataInStage+0x15a>
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d122      	bne.n	8006ca8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d11c      	bne.n	8006ca8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c6e:	7dfa      	ldrb	r2, [r7, #23]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	32ae      	adds	r2, #174	@ 0xae
 8006c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d014      	beq.n	8006ca8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c7e:	7dfa      	ldrb	r2, [r7, #23]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c86:	7dfa      	ldrb	r2, [r7, #23]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	32ae      	adds	r2, #174	@ 0xae
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	7afa      	ldrb	r2, [r7, #11]
 8006c94:	4611      	mov	r1, r2
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	4798      	blx	r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ca4:	7dbb      	ldrb	r3, [r7, #22]
 8006ca6:	e000      	b.n	8006caa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d014      	beq.n	8006d18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00e      	beq.n	8006d18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6852      	ldr	r2, [r2, #4]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	4611      	mov	r1, r2
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d14:	2303      	movs	r3, #3
 8006d16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d18:	2340      	movs	r3, #64	@ 0x40
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fbeb 	bl	80084fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2240      	movs	r2, #64	@ 0x40
 8006d30:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d34:	2340      	movs	r3, #64	@ 0x40
 8006d36:	2200      	movs	r2, #0
 8006d38:	2180      	movs	r1, #128	@ 0x80
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fbdd 	bl	80084fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2240      	movs	r2, #64	@ 0x40
 8006d4a:	621a      	str	r2, [r3, #32]

  return ret;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d006      	beq.n	8006d98 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d106      	bne.n	8006dd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d110      	bne.n	8006e14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	32ae      	adds	r2, #174	@ 0xae
 8006e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e01c      	b.n	8006e7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d115      	bne.n	8006e78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32ae      	adds	r2, #174	@ 0xae
 8006e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	32ae      	adds	r2, #174	@ 0xae
 8006e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	4611      	mov	r1, r2
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	32ae      	adds	r2, #174	@ 0xae
 8006e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e01c      	b.n	8006ede <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d115      	bne.n	8006edc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32ae      	adds	r2, #174	@ 0xae
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32ae      	adds	r2, #174	@ 0xae
 8006ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	78fa      	ldrb	r2, [r7, #3]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00e      	beq.n	8006f38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6852      	ldr	r2, [r2, #4]
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	4611      	mov	r1, r2
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b086      	sub	sp, #24
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	885b      	ldrh	r3, [r3, #2]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d91f      	bls.n	8006fdc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006fa2:	e013      	b.n	8006fcc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006fa4:	f107 030a 	add.w	r3, r7, #10
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6978      	ldr	r0, [r7, #20]
 8006fac:	f000 f81b 	bl	8006fe6 <USBD_GetNextDesc>
 8006fb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b05      	cmp	r3, #5
 8006fb8:	d108      	bne.n	8006fcc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	789b      	ldrb	r3, [r3, #2]
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d008      	beq.n	8006fda <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	885b      	ldrh	r3, [r3, #2]
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	897b      	ldrh	r3, [r7, #10]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d8e5      	bhi.n	8006fa4 <USBD_GetEpDesc+0x2e>
 8006fd8:	e000      	b.n	8006fdc <USBD_GetEpDesc+0x66>
          break;
 8006fda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006fdc:	693b      	ldr	r3, [r7, #16]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007010:	68fb      	ldr	r3, [r7, #12]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800701e:	b480      	push	{r7}
 8007020:	b087      	sub	sp, #28
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	3301      	adds	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800703c:	8a3b      	ldrh	r3, [r7, #16]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	b21a      	sxth	r2, r3
 8007042:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007046:	4313      	orrs	r3, r2
 8007048:	b21b      	sxth	r3, r3
 800704a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800704c:	89fb      	ldrh	r3, [r7, #14]
}
 800704e:	4618      	mov	r0, r3
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	d005      	beq.n	8007082 <USBD_StdDevReq+0x26>
 8007076:	2b40      	cmp	r3, #64	@ 0x40
 8007078:	d857      	bhi.n	800712a <USBD_StdDevReq+0xce>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00f      	beq.n	800709e <USBD_StdDevReq+0x42>
 800707e:	2b20      	cmp	r3, #32
 8007080:	d153      	bne.n	800712a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	32ae      	adds	r2, #174	@ 0xae
 800708c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
 8007098:	4603      	mov	r3, r0
 800709a:	73fb      	strb	r3, [r7, #15]
      break;
 800709c:	e04a      	b.n	8007134 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	2b09      	cmp	r3, #9
 80070a4:	d83b      	bhi.n	800711e <USBD_StdDevReq+0xc2>
 80070a6:	a201      	add	r2, pc, #4	@ (adr r2, 80070ac <USBD_StdDevReq+0x50>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	08007101 	.word	0x08007101
 80070b0:	08007115 	.word	0x08007115
 80070b4:	0800711f 	.word	0x0800711f
 80070b8:	0800710b 	.word	0x0800710b
 80070bc:	0800711f 	.word	0x0800711f
 80070c0:	080070df 	.word	0x080070df
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	0800711f 	.word	0x0800711f
 80070cc:	080070f7 	.word	0x080070f7
 80070d0:	080070e9 	.word	0x080070e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa3c 	bl	8007554 <USBD_GetDescriptor>
          break;
 80070dc:	e024      	b.n	8007128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fba1 	bl	8007828 <USBD_SetAddress>
          break;
 80070e6:	e01f      	b.n	8007128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fbe0 	bl	80078b0 <USBD_SetConfig>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
          break;
 80070f4:	e018      	b.n	8007128 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fc83 	bl	8007a04 <USBD_GetConfig>
          break;
 80070fe:	e013      	b.n	8007128 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fcb4 	bl	8007a70 <USBD_GetStatus>
          break;
 8007108:	e00e      	b.n	8007128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fce3 	bl	8007ad8 <USBD_SetFeature>
          break;
 8007112:	e009      	b.n	8007128 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fd07 	bl	8007b2a <USBD_ClrFeature>
          break;
 800711c:	e004      	b.n	8007128 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fd5e 	bl	8007be2 <USBD_CtlError>
          break;
 8007126:	bf00      	nop
      }
      break;
 8007128:	e004      	b.n	8007134 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fd58 	bl	8007be2 <USBD_CtlError>
      break;
 8007132:	bf00      	nop
  }

  return ret;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop

08007140 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007156:	2b40      	cmp	r3, #64	@ 0x40
 8007158:	d005      	beq.n	8007166 <USBD_StdItfReq+0x26>
 800715a:	2b40      	cmp	r3, #64	@ 0x40
 800715c:	d852      	bhi.n	8007204 <USBD_StdItfReq+0xc4>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <USBD_StdItfReq+0x26>
 8007162:	2b20      	cmp	r3, #32
 8007164:	d14e      	bne.n	8007204 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800716c:	b2db      	uxtb	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	2b02      	cmp	r3, #2
 8007172:	d840      	bhi.n	80071f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	889b      	ldrh	r3, [r3, #4]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d836      	bhi.n	80071ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	889b      	ldrh	r3, [r3, #4]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fedb 	bl	8006f42 <USBD_CoreFindIF>
 800718c:	4603      	mov	r3, r0
 800718e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2bff      	cmp	r3, #255	@ 0xff
 8007194:	d01d      	beq.n	80071d2 <USBD_StdItfReq+0x92>
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d11a      	bne.n	80071d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800719c:	7bba      	ldrb	r2, [r7, #14]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	32ae      	adds	r2, #174	@ 0xae
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00f      	beq.n	80071cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80071ac:	7bba      	ldrb	r2, [r7, #14]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071b4:	7bba      	ldrb	r2, [r7, #14]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	32ae      	adds	r2, #174	@ 0xae
 80071ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071ca:	e004      	b.n	80071d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071d0:	e001      	b.n	80071d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	88db      	ldrh	r3, [r3, #6]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d110      	bne.n	8007200 <USBD_StdItfReq+0xc0>
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fdc7 	bl	8007d78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071ea:	e009      	b.n	8007200 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fcf7 	bl	8007be2 <USBD_CtlError>
          break;
 80071f4:	e004      	b.n	8007200 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fcf2 	bl	8007be2 <USBD_CtlError>
          break;
 80071fe:	e000      	b.n	8007202 <USBD_StdItfReq+0xc2>
          break;
 8007200:	bf00      	nop
      }
      break;
 8007202:	e004      	b.n	800720e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fceb 	bl	8007be2 <USBD_CtlError>
      break;
 800720c:	bf00      	nop
  }

  return ret;
 800720e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	889b      	ldrh	r3, [r3, #4]
 800722a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007234:	2b40      	cmp	r3, #64	@ 0x40
 8007236:	d007      	beq.n	8007248 <USBD_StdEPReq+0x30>
 8007238:	2b40      	cmp	r3, #64	@ 0x40
 800723a:	f200 817f 	bhi.w	800753c <USBD_StdEPReq+0x324>
 800723e:	2b00      	cmp	r3, #0
 8007240:	d02a      	beq.n	8007298 <USBD_StdEPReq+0x80>
 8007242:	2b20      	cmp	r3, #32
 8007244:	f040 817a 	bne.w	800753c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fe85 	bl	8006f5c <USBD_CoreFindEP>
 8007252:	4603      	mov	r3, r0
 8007254:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007256:	7b7b      	ldrb	r3, [r7, #13]
 8007258:	2bff      	cmp	r3, #255	@ 0xff
 800725a:	f000 8174 	beq.w	8007546 <USBD_StdEPReq+0x32e>
 800725e:	7b7b      	ldrb	r3, [r7, #13]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f040 8170 	bne.w	8007546 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007266:	7b7a      	ldrb	r2, [r7, #13]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800726e:	7b7a      	ldrb	r2, [r7, #13]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	32ae      	adds	r2, #174	@ 0xae
 8007274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8163 	beq.w	8007546 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007280:	7b7a      	ldrb	r2, [r7, #13]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	32ae      	adds	r2, #174	@ 0xae
 8007286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
 8007292:	4603      	mov	r3, r0
 8007294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007296:	e156      	b.n	8007546 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	785b      	ldrb	r3, [r3, #1]
 800729c:	2b03      	cmp	r3, #3
 800729e:	d008      	beq.n	80072b2 <USBD_StdEPReq+0x9a>
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	f300 8145 	bgt.w	8007530 <USBD_StdEPReq+0x318>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 809b 	beq.w	80073e2 <USBD_StdEPReq+0x1ca>
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d03c      	beq.n	800732a <USBD_StdEPReq+0x112>
 80072b0:	e13e      	b.n	8007530 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d002      	beq.n	80072c4 <USBD_StdEPReq+0xac>
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d016      	beq.n	80072f0 <USBD_StdEPReq+0xd8>
 80072c2:	e02c      	b.n	800731e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00d      	beq.n	80072e6 <USBD_StdEPReq+0xce>
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b80      	cmp	r3, #128	@ 0x80
 80072ce:	d00a      	beq.n	80072e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 f955 	bl	8008584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072da:	2180      	movs	r1, #128	@ 0x80
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f951 	bl	8008584 <USBD_LL_StallEP>
 80072e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072e4:	e020      	b.n	8007328 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc7a 	bl	8007be2 <USBD_CtlError>
              break;
 80072ee:	e01b      	b.n	8007328 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	885b      	ldrh	r3, [r3, #2]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10e      	bne.n	8007316 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00b      	beq.n	8007316 <USBD_StdEPReq+0xfe>
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b80      	cmp	r3, #128	@ 0x80
 8007302:	d008      	beq.n	8007316 <USBD_StdEPReq+0xfe>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	88db      	ldrh	r3, [r3, #6]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 f937 	bl	8008584 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fd2e 	bl	8007d78 <USBD_CtlSendStatus>

              break;
 800731c:	e004      	b.n	8007328 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fc5e 	bl	8007be2 <USBD_CtlError>
              break;
 8007326:	bf00      	nop
          }
          break;
 8007328:	e107      	b.n	800753a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d002      	beq.n	800733c <USBD_StdEPReq+0x124>
 8007336:	2b03      	cmp	r3, #3
 8007338:	d016      	beq.n	8007368 <USBD_StdEPReq+0x150>
 800733a:	e04b      	b.n	80073d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00d      	beq.n	800735e <USBD_StdEPReq+0x146>
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b80      	cmp	r3, #128	@ 0x80
 8007346:	d00a      	beq.n	800735e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 f919 	bl	8008584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007352:	2180      	movs	r1, #128	@ 0x80
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 f915 	bl	8008584 <USBD_LL_StallEP>
 800735a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800735c:	e040      	b.n	80073e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fc3e 	bl	8007be2 <USBD_CtlError>
              break;
 8007366:	e03b      	b.n	80073e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	885b      	ldrh	r3, [r3, #2]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d136      	bne.n	80073de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007376:	2b00      	cmp	r3, #0
 8007378:	d004      	beq.n	8007384 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 f91f 	bl	80085c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fcf7 	bl	8007d78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff fde4 	bl	8006f5c <USBD_CoreFindEP>
 8007394:	4603      	mov	r3, r0
 8007396:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007398:	7b7b      	ldrb	r3, [r7, #13]
 800739a:	2bff      	cmp	r3, #255	@ 0xff
 800739c:	d01f      	beq.n	80073de <USBD_StdEPReq+0x1c6>
 800739e:	7b7b      	ldrb	r3, [r7, #13]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11c      	bne.n	80073de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80073a4:	7b7a      	ldrb	r2, [r7, #13]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80073ac:	7b7a      	ldrb	r2, [r7, #13]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	32ae      	adds	r2, #174	@ 0xae
 80073b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d010      	beq.n	80073de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073bc:	7b7a      	ldrb	r2, [r7, #13]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	32ae      	adds	r2, #174	@ 0xae
 80073c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80073d2:	e004      	b.n	80073de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fc03 	bl	8007be2 <USBD_CtlError>
              break;
 80073dc:	e000      	b.n	80073e0 <USBD_StdEPReq+0x1c8>
              break;
 80073de:	bf00      	nop
          }
          break;
 80073e0:	e0ab      	b.n	800753a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d002      	beq.n	80073f4 <USBD_StdEPReq+0x1dc>
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d032      	beq.n	8007458 <USBD_StdEPReq+0x240>
 80073f2:	e097      	b.n	8007524 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <USBD_StdEPReq+0x1f2>
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b80      	cmp	r3, #128	@ 0x80
 80073fe:	d004      	beq.n	800740a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fbed 	bl	8007be2 <USBD_CtlError>
                break;
 8007408:	e091      	b.n	800752e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800740a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800740e:	2b00      	cmp	r3, #0
 8007410:	da0b      	bge.n	800742a <USBD_StdEPReq+0x212>
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	3310      	adds	r3, #16
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4413      	add	r3, r2
 8007426:	3304      	adds	r3, #4
 8007428:	e00b      	b.n	8007442 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	3304      	adds	r3, #4
 8007442:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2202      	movs	r2, #2
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fc37 	bl	8007cc4 <USBD_CtlSendData>
              break;
 8007456:	e06a      	b.n	800752e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800745c:	2b00      	cmp	r3, #0
 800745e:	da11      	bge.n	8007484 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	f003 020f 	and.w	r2, r3, #15
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	4613      	mov	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	440b      	add	r3, r1
 8007472:	3324      	adds	r3, #36	@ 0x24
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d117      	bne.n	80074aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbb0 	bl	8007be2 <USBD_CtlError>
                  break;
 8007482:	e054      	b.n	800752e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	f003 020f 	and.w	r2, r3, #15
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fb9d 	bl	8007be2 <USBD_CtlError>
                  break;
 80074a8:	e041      	b.n	800752e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da0b      	bge.n	80074ca <USBD_StdEPReq+0x2b2>
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	3310      	adds	r3, #16
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	4413      	add	r3, r2
 80074c6:	3304      	adds	r3, #4
 80074c8:	e00b      	b.n	80074e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4413      	add	r3, r2
 80074e0:	3304      	adds	r3, #4
 80074e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <USBD_StdEPReq+0x2d8>
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b80      	cmp	r3, #128	@ 0x80
 80074ee:	d103      	bne.n	80074f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	e00e      	b.n	8007516 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f87f 	bl	8008600 <USBD_LL_IsStallEP>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	e002      	b.n	8007516 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2202      	movs	r2, #2
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fbd1 	bl	8007cc4 <USBD_CtlSendData>
              break;
 8007522:	e004      	b.n	800752e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fb5b 	bl	8007be2 <USBD_CtlError>
              break;
 800752c:	bf00      	nop
          }
          break;
 800752e:	e004      	b.n	800753a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fb55 	bl	8007be2 <USBD_CtlError>
          break;
 8007538:	bf00      	nop
      }
      break;
 800753a:	e005      	b.n	8007548 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fb4f 	bl	8007be2 <USBD_CtlError>
      break;
 8007544:	e000      	b.n	8007548 <USBD_StdEPReq+0x330>
      break;
 8007546:	bf00      	nop
  }

  return ret;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	885b      	ldrh	r3, [r3, #2]
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	2b06      	cmp	r3, #6
 8007576:	f200 8128 	bhi.w	80077ca <USBD_GetDescriptor+0x276>
 800757a:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <USBD_GetDescriptor+0x2c>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	0800759d 	.word	0x0800759d
 8007584:	080075b5 	.word	0x080075b5
 8007588:	080075f5 	.word	0x080075f5
 800758c:	080077cb 	.word	0x080077cb
 8007590:	080077cb 	.word	0x080077cb
 8007594:	0800776b 	.word	0x0800776b
 8007598:	08007797 	.word	0x08007797
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	7c12      	ldrb	r2, [r2, #16]
 80075a8:	f107 0108 	add.w	r1, r7, #8
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	60f8      	str	r0, [r7, #12]
      break;
 80075b2:	e112      	b.n	80077da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	7c1b      	ldrb	r3, [r3, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c4:	f107 0208 	add.w	r2, r7, #8
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
 80075cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	2202      	movs	r2, #2
 80075d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075d6:	e100      	b.n	80077da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	f107 0208 	add.w	r2, r7, #8
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
 80075e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	2202      	movs	r2, #2
 80075f0:	701a      	strb	r2, [r3, #0]
      break;
 80075f2:	e0f2      	b.n	80077da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	885b      	ldrh	r3, [r3, #2]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	f200 80ac 	bhi.w	8007758 <USBD_GetDescriptor+0x204>
 8007600:	a201      	add	r2, pc, #4	@ (adr r2, 8007608 <USBD_GetDescriptor+0xb4>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	08007621 	.word	0x08007621
 800760c:	08007655 	.word	0x08007655
 8007610:	08007689 	.word	0x08007689
 8007614:	080076bd 	.word	0x080076bd
 8007618:	080076f1 	.word	0x080076f1
 800761c:	08007725 	.word	0x08007725
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	7c12      	ldrb	r2, [r2, #16]
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007642:	e091      	b.n	8007768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 facb 	bl	8007be2 <USBD_CtlError>
            err++;
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	3301      	adds	r3, #1
 8007650:	72fb      	strb	r3, [r7, #11]
          break;
 8007652:	e089      	b.n	8007768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	7c12      	ldrb	r2, [r2, #16]
 800766c:	f107 0108 	add.w	r1, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007676:	e077      	b.n	8007768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fab1 	bl	8007be2 <USBD_CtlError>
            err++;
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	3301      	adds	r3, #1
 8007684:	72fb      	strb	r3, [r7, #11]
          break;
 8007686:	e06f      	b.n	8007768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7c12      	ldrb	r2, [r2, #16]
 80076a0:	f107 0108 	add.w	r1, r7, #8
 80076a4:	4610      	mov	r0, r2
 80076a6:	4798      	blx	r3
 80076a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076aa:	e05d      	b.n	8007768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa97 	bl	8007be2 <USBD_CtlError>
            err++;
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	3301      	adds	r3, #1
 80076b8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ba:	e055      	b.n	8007768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7c12      	ldrb	r2, [r2, #16]
 80076d4:	f107 0108 	add.w	r1, r7, #8
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076de:	e043      	b.n	8007768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa7d 	bl	8007be2 <USBD_CtlError>
            err++;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	3301      	adds	r3, #1
 80076ec:	72fb      	strb	r3, [r7, #11]
          break;
 80076ee:	e03b      	b.n	8007768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	7c12      	ldrb	r2, [r2, #16]
 8007708:	f107 0108 	add.w	r1, r7, #8
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007712:	e029      	b.n	8007768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa63 	bl	8007be2 <USBD_CtlError>
            err++;
 800771c:	7afb      	ldrb	r3, [r7, #11]
 800771e:	3301      	adds	r3, #1
 8007720:	72fb      	strb	r3, [r7, #11]
          break;
 8007722:	e021      	b.n	8007768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	7c12      	ldrb	r2, [r2, #16]
 800773c:	f107 0108 	add.w	r1, r7, #8
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007746:	e00f      	b.n	8007768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa49 	bl	8007be2 <USBD_CtlError>
            err++;
 8007750:	7afb      	ldrb	r3, [r7, #11]
 8007752:	3301      	adds	r3, #1
 8007754:	72fb      	strb	r3, [r7, #11]
          break;
 8007756:	e007      	b.n	8007768 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa41 	bl	8007be2 <USBD_CtlError>
          err++;
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	3301      	adds	r3, #1
 8007764:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007766:	bf00      	nop
      }
      break;
 8007768:	e037      	b.n	80077da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7c1b      	ldrb	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777a:	f107 0208 	add.w	r2, r7, #8
 800777e:	4610      	mov	r0, r2
 8007780:	4798      	blx	r3
 8007782:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007784:	e029      	b.n	80077da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa2a 	bl	8007be2 <USBD_CtlError>
        err++;
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	3301      	adds	r3, #1
 8007792:	72fb      	strb	r3, [r7, #11]
      break;
 8007794:	e021      	b.n	80077da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7c1b      	ldrb	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10d      	bne.n	80077ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a6:	f107 0208 	add.w	r2, r7, #8
 80077aa:	4610      	mov	r0, r2
 80077ac:	4798      	blx	r3
 80077ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3301      	adds	r3, #1
 80077b4:	2207      	movs	r2, #7
 80077b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077b8:	e00f      	b.n	80077da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fa10 	bl	8007be2 <USBD_CtlError>
        err++;
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	3301      	adds	r3, #1
 80077c6:	72fb      	strb	r3, [r7, #11]
      break;
 80077c8:	e007      	b.n	80077da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fa08 	bl	8007be2 <USBD_CtlError>
      err++;
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	3301      	adds	r3, #1
 80077d6:	72fb      	strb	r3, [r7, #11]
      break;
 80077d8:	bf00      	nop
  }

  if (err != 0U)
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d11e      	bne.n	800781e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	88db      	ldrh	r3, [r3, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d016      	beq.n	8007816 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80077e8:	893b      	ldrh	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00e      	beq.n	800780c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	88da      	ldrh	r2, [r3, #6]
 80077f2:	893b      	ldrh	r3, [r7, #8]
 80077f4:	4293      	cmp	r3, r2
 80077f6:	bf28      	it	cs
 80077f8:	4613      	movcs	r3, r2
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077fe:	893b      	ldrh	r3, [r7, #8]
 8007800:	461a      	mov	r2, r3
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fa5d 	bl	8007cc4 <USBD_CtlSendData>
 800780a:	e009      	b.n	8007820 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f9e7 	bl	8007be2 <USBD_CtlError>
 8007814:	e004      	b.n	8007820 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 faae 	bl	8007d78 <USBD_CtlSendStatus>
 800781c:	e000      	b.n	8007820 <USBD_GetDescriptor+0x2cc>
    return;
 800781e:	bf00      	nop
  }
}
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop

08007828 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	889b      	ldrh	r3, [r3, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d131      	bne.n	800789e <USBD_SetAddress+0x76>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	88db      	ldrh	r3, [r3, #6]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d12d      	bne.n	800789e <USBD_SetAddress+0x76>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	885b      	ldrh	r3, [r3, #2]
 8007846:	2b7f      	cmp	r3, #127	@ 0x7f
 8007848:	d829      	bhi.n	800789e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	885b      	ldrh	r3, [r3, #2]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007854:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d104      	bne.n	800786c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f9bc 	bl	8007be2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786a:	e01d      	b.n	80078a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7bfa      	ldrb	r2, [r7, #15]
 8007870:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 feed 	bl	8008658 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa7a 	bl	8007d78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d004      	beq.n	8007894 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007892:	e009      	b.n	80078a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789c:	e004      	b.n	80078a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f99e 	bl	8007be2 <USBD_CtlError>
  }
}
 80078a6:	bf00      	nop
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	885b      	ldrh	r3, [r3, #2]
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	4b4e      	ldr	r3, [pc, #312]	@ (8007a00 <USBD_SetConfig+0x150>)
 80078c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007a00 <USBD_SetConfig+0x150>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d905      	bls.n	80078dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f985 	bl	8007be2 <USBD_CtlError>
    return USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	e08c      	b.n	80079f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d002      	beq.n	80078ee <USBD_SetConfig+0x3e>
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d029      	beq.n	8007940 <USBD_SetConfig+0x90>
 80078ec:	e075      	b.n	80079da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80078ee:	4b44      	ldr	r3, [pc, #272]	@ (8007a00 <USBD_SetConfig+0x150>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d020      	beq.n	8007938 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80078f6:	4b42      	ldr	r3, [pc, #264]	@ (8007a00 <USBD_SetConfig+0x150>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007900:	4b3f      	ldr	r3, [pc, #252]	@ (8007a00 <USBD_SetConfig+0x150>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fe ffe3 	bl	80068d2 <USBD_SetClassConfig>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f962 	bl	8007be2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2202      	movs	r2, #2
 8007922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007926:	e065      	b.n	80079f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fa25 	bl	8007d78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2203      	movs	r2, #3
 8007932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007936:	e05d      	b.n	80079f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fa1d 	bl	8007d78 <USBD_CtlSendStatus>
      break;
 800793e:	e059      	b.n	80079f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007940:	4b2f      	ldr	r3, [pc, #188]	@ (8007a00 <USBD_SetConfig+0x150>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d112      	bne.n	800796e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007950:	4b2b      	ldr	r3, [pc, #172]	@ (8007a00 <USBD_SetConfig+0x150>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800795a:	4b29      	ldr	r3, [pc, #164]	@ (8007a00 <USBD_SetConfig+0x150>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7fe ffd2 	bl	800690a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa06 	bl	8007d78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800796c:	e042      	b.n	80079f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800796e:	4b24      	ldr	r3, [pc, #144]	@ (8007a00 <USBD_SetConfig+0x150>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	429a      	cmp	r2, r3
 800797a:	d02a      	beq.n	80079d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fe ffc0 	bl	800690a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800798a:	4b1d      	ldr	r3, [pc, #116]	@ (8007a00 <USBD_SetConfig+0x150>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007994:	4b1a      	ldr	r3, [pc, #104]	@ (8007a00 <USBD_SetConfig+0x150>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fe ff99 	bl	80068d2 <USBD_SetClassConfig>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00f      	beq.n	80079ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f918 	bl	8007be2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fe ffa5 	bl	800690a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079c8:	e014      	b.n	80079f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f9d4 	bl	8007d78 <USBD_CtlSendStatus>
      break;
 80079d0:	e010      	b.n	80079f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9d0 	bl	8007d78 <USBD_CtlSendStatus>
      break;
 80079d8:	e00c      	b.n	80079f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f900 	bl	8007be2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079e2:	4b07      	ldr	r3, [pc, #28]	@ (8007a00 <USBD_SetConfig+0x150>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fe ff8e 	bl	800690a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	73fb      	strb	r3, [r7, #15]
      break;
 80079f2:	bf00      	nop
  }

  return ret;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000364 	.word	0x20000364

08007a04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	88db      	ldrh	r3, [r3, #6]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d004      	beq.n	8007a20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f8e2 	bl	8007be2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a1e:	e023      	b.n	8007a68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	dc02      	bgt.n	8007a32 <USBD_GetConfig+0x2e>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dc03      	bgt.n	8007a38 <USBD_GetConfig+0x34>
 8007a30:	e015      	b.n	8007a5e <USBD_GetConfig+0x5a>
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d00b      	beq.n	8007a4e <USBD_GetConfig+0x4a>
 8007a36:	e012      	b.n	8007a5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3308      	adds	r3, #8
 8007a42:	2201      	movs	r2, #1
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f93c 	bl	8007cc4 <USBD_CtlSendData>
        break;
 8007a4c:	e00c      	b.n	8007a68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3304      	adds	r3, #4
 8007a52:	2201      	movs	r2, #1
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f934 	bl	8007cc4 <USBD_CtlSendData>
        break;
 8007a5c:	e004      	b.n	8007a68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8be 	bl	8007be2 <USBD_CtlError>
        break;
 8007a66:	bf00      	nop
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d81e      	bhi.n	8007ac6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d004      	beq.n	8007a9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f8a5 	bl	8007be2 <USBD_CtlError>
        break;
 8007a98:	e01a      	b.n	8007ad0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f043 0202 	orr.w	r2, r3, #2
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	330c      	adds	r3, #12
 8007aba:	2202      	movs	r2, #2
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f900 	bl	8007cc4 <USBD_CtlSendData>
      break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f88a 	bl	8007be2 <USBD_CtlError>
      break;
 8007ace:	bf00      	nop
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d107      	bne.n	8007afa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f940 	bl	8007d78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007af8:	e013      	b.n	8007b22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d10b      	bne.n	8007b1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	889b      	ldrh	r3, [r3, #4]
 8007b06:	0a1b      	lsrs	r3, r3, #8
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f930 	bl	8007d78 <USBD_CtlSendStatus>
}
 8007b18:	e003      	b.n	8007b22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f860 	bl	8007be2 <USBD_CtlError>
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d80b      	bhi.n	8007b5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	885b      	ldrh	r3, [r3, #2]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d10c      	bne.n	8007b64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f910 	bl	8007d78 <USBD_CtlSendStatus>
      }
      break;
 8007b58:	e004      	b.n	8007b64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f840 	bl	8007be2 <USBD_CtlError>
      break;
 8007b62:	e000      	b.n	8007b66 <USBD_ClrFeature+0x3c>
      break;
 8007b64:	bf00      	nop
  }
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	781a      	ldrb	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff fa40 	bl	800701e <SWAPBYTE>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff fa33 	bl	800701e <SWAPBYTE>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff fa26 	bl	800701e <SWAPBYTE>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	80da      	strh	r2, [r3, #6]
}
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bec:	2180      	movs	r1, #128	@ 0x80
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fcc8 	bl	8008584 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fcc4 	bl	8008584 <USBD_LL_StallEP>
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d036      	beq.n	8007c88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c1e:	6938      	ldr	r0, [r7, #16]
 8007c20:	f000 f836 	bl	8007c90 <USBD_GetLen>
 8007c24:	4603      	mov	r3, r0
 8007c26:	3301      	adds	r3, #1
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	4413      	add	r3, r2
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7812      	ldrb	r2, [r2, #0]
 8007c3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	3301      	adds	r3, #1
 8007c42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	4413      	add	r3, r2
 8007c4a:	2203      	movs	r2, #3
 8007c4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	3301      	adds	r3, #1
 8007c52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c54:	e013      	b.n	8007c7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	7812      	ldrb	r2, [r2, #0]
 8007c60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	3301      	adds	r3, #1
 8007c66:	613b      	str	r3, [r7, #16]
    idx++;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	4413      	add	r3, r2
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e7      	bne.n	8007c56 <USBD_GetString+0x52>
 8007c86:	e000      	b.n	8007c8a <USBD_GetString+0x86>
    return;
 8007c88:	bf00      	nop
  }
}
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ca0:	e005      	b.n	8007cae <USBD_GetLen+0x1e>
  {
    len++;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f5      	bne.n	8007ca2 <USBD_GetLen+0x12>
  }

  return len;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fcd3 	bl	8008696 <USBD_LL_Transmit>

  return USBD_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fcc2 	bl	8008696 <USBD_LL_Transmit>

  return USBD_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	2100      	movs	r1, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fcc6 	bl	80086d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	2100      	movs	r1, #0
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fcb5 	bl	80086d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2204      	movs	r2, #4
 8007d84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fc81 	bl	8008696 <USBD_LL_Transmit>

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2205      	movs	r2, #5
 8007daa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dae:	2300      	movs	r3, #0
 8007db0:	2200      	movs	r2, #0
 8007db2:	2100      	movs	r1, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fc8f 	bl	80086d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4912      	ldr	r1, [pc, #72]	@ (8007e14 <MX_USB_DEVICE_Init+0x50>)
 8007dcc:	4812      	ldr	r0, [pc, #72]	@ (8007e18 <MX_USB_DEVICE_Init+0x54>)
 8007dce:	f7fe fd03 	bl	80067d8 <USBD_Init>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dd8:	f7f8 fcce 	bl	8000778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ddc:	490f      	ldr	r1, [pc, #60]	@ (8007e1c <MX_USB_DEVICE_Init+0x58>)
 8007dde:	480e      	ldr	r0, [pc, #56]	@ (8007e18 <MX_USB_DEVICE_Init+0x54>)
 8007de0:	f7fe fd2a 	bl	8006838 <USBD_RegisterClass>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dea:	f7f8 fcc5 	bl	8000778 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dee:	490c      	ldr	r1, [pc, #48]	@ (8007e20 <MX_USB_DEVICE_Init+0x5c>)
 8007df0:	4809      	ldr	r0, [pc, #36]	@ (8007e18 <MX_USB_DEVICE_Init+0x54>)
 8007df2:	f7fe fc61 	bl	80066b8 <USBD_CDC_RegisterInterface>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007dfc:	f7f8 fcbc 	bl	8000778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e00:	4805      	ldr	r0, [pc, #20]	@ (8007e18 <MX_USB_DEVICE_Init+0x54>)
 8007e02:	f7fe fd4f 	bl	80068a4 <USBD_Start>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e0c:	f7f8 fcb4 	bl	8000778 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e10:	bf00      	nop
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	200000ac 	.word	0x200000ac
 8007e18:	20000368 	.word	0x20000368
 8007e1c:	20000018 	.word	0x20000018
 8007e20:	20000098 	.word	0x20000098

08007e24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4905      	ldr	r1, [pc, #20]	@ (8007e40 <CDC_Init_FS+0x1c>)
 8007e2c:	4805      	ldr	r0, [pc, #20]	@ (8007e44 <CDC_Init_FS+0x20>)
 8007e2e:	f7fe fc5d 	bl	80066ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e32:	4905      	ldr	r1, [pc, #20]	@ (8007e48 <CDC_Init_FS+0x24>)
 8007e34:	4803      	ldr	r0, [pc, #12]	@ (8007e44 <CDC_Init_FS+0x20>)
 8007e36:	f7fe fc7b 	bl	8006730 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000e44 	.word	0x20000e44
 8007e44:	20000368 	.word	0x20000368
 8007e48:	20000644 	.word	0x20000644

08007e4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	2b23      	cmp	r3, #35	@ 0x23
 8007e70:	d84a      	bhi.n	8007f08 <CDC_Control_FS+0xac>
 8007e72:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <CDC_Control_FS+0x1c>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007f09 	.word	0x08007f09
 8007e7c:	08007f09 	.word	0x08007f09
 8007e80:	08007f09 	.word	0x08007f09
 8007e84:	08007f09 	.word	0x08007f09
 8007e88:	08007f09 	.word	0x08007f09
 8007e8c:	08007f09 	.word	0x08007f09
 8007e90:	08007f09 	.word	0x08007f09
 8007e94:	08007f09 	.word	0x08007f09
 8007e98:	08007f09 	.word	0x08007f09
 8007e9c:	08007f09 	.word	0x08007f09
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007f09 	.word	0x08007f09
 8007ea8:	08007f09 	.word	0x08007f09
 8007eac:	08007f09 	.word	0x08007f09
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	08007f09 	.word	0x08007f09
 8007ec0:	08007f09 	.word	0x08007f09
 8007ec4:	08007f09 	.word	0x08007f09
 8007ec8:	08007f09 	.word	0x08007f09
 8007ecc:	08007f09 	.word	0x08007f09
 8007ed0:	08007f09 	.word	0x08007f09
 8007ed4:	08007f09 	.word	0x08007f09
 8007ed8:	08007f09 	.word	0x08007f09
 8007edc:	08007f09 	.word	0x08007f09
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f09 	.word	0x08007f09
 8007ee8:	08007f09 	.word	0x08007f09
 8007eec:	08007f09 	.word	0x08007f09
 8007ef0:	08007f09 	.word	0x08007f09
 8007ef4:	08007f09 	.word	0x08007f09
 8007ef8:	08007f09 	.word	0x08007f09
 8007efc:	08007f09 	.word	0x08007f09
 8007f00:	08007f09 	.word	0x08007f09
 8007f04:	08007f09 	.word	0x08007f09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f08:	bf00      	nop
  }

  return (USBD_OK);
 8007f0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4805      	ldr	r0, [pc, #20]	@ (8007f3c <CDC_Receive_FS+0x24>)
 8007f26:	f7fe fc03 	bl	8006730 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f2a:	4804      	ldr	r0, [pc, #16]	@ (8007f3c <CDC_Receive_FS+0x24>)
 8007f2c:	f7fe fc1e 	bl	800676c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000368 	.word	0x20000368

08007f40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	6039      	str	r1, [r7, #0]
 8007f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2212      	movs	r2, #18
 8007f74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f76:	4b03      	ldr	r3, [pc, #12]	@ (8007f84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	200000c8 	.word	0x200000c8

08007f88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2204      	movs	r2, #4
 8007f98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f9a:	4b03      	ldr	r3, [pc, #12]	@ (8007fa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	200000dc 	.word	0x200000dc

08007fac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d105      	bne.n	8007fca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4907      	ldr	r1, [pc, #28]	@ (8007fe0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fc2:	4808      	ldr	r0, [pc, #32]	@ (8007fe4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fc4:	f7ff fe1e 	bl	8007c04 <USBD_GetString>
 8007fc8:	e004      	b.n	8007fd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	4904      	ldr	r1, [pc, #16]	@ (8007fe0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fce:	4805      	ldr	r0, [pc, #20]	@ (8007fe4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fd0:	f7ff fe18 	bl	8007c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fd4:	4b02      	ldr	r3, [pc, #8]	@ (8007fe0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20001644 	.word	0x20001644
 8007fe4:	08008838 	.word	0x08008838

08007fe8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	4904      	ldr	r1, [pc, #16]	@ (8008008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ff8:	4804      	ldr	r0, [pc, #16]	@ (800800c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ffa:	f7ff fe03 	bl	8007c04 <USBD_GetString>
  return USBD_StrDesc;
 8007ffe:	4b02      	ldr	r3, [pc, #8]	@ (8008008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20001644 	.word	0x20001644
 800800c:	08008850 	.word	0x08008850

08008010 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	4603      	mov	r3, r0
 8008018:	6039      	str	r1, [r7, #0]
 800801a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	221a      	movs	r2, #26
 8008020:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008022:	f000 f843 	bl	80080ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008026:	4b02      	ldr	r3, [pc, #8]	@ (8008030 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	200000e0 	.word	0x200000e0

08008034 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	6039      	str	r1, [r7, #0]
 800803e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d105      	bne.n	8008052 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	4907      	ldr	r1, [pc, #28]	@ (8008068 <USBD_FS_ConfigStrDescriptor+0x34>)
 800804a:	4808      	ldr	r0, [pc, #32]	@ (800806c <USBD_FS_ConfigStrDescriptor+0x38>)
 800804c:	f7ff fdda 	bl	8007c04 <USBD_GetString>
 8008050:	e004      	b.n	800805c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	4904      	ldr	r1, [pc, #16]	@ (8008068 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008056:	4805      	ldr	r0, [pc, #20]	@ (800806c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008058:	f7ff fdd4 	bl	8007c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800805c:	4b02      	ldr	r3, [pc, #8]	@ (8008068 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20001644 	.word	0x20001644
 800806c:	08008864 	.word	0x08008864

08008070 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d105      	bne.n	800808e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	4907      	ldr	r1, [pc, #28]	@ (80080a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008086:	4808      	ldr	r0, [pc, #32]	@ (80080a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008088:	f7ff fdbc 	bl	8007c04 <USBD_GetString>
 800808c:	e004      	b.n	8008098 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	4904      	ldr	r1, [pc, #16]	@ (80080a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008092:	4805      	ldr	r0, [pc, #20]	@ (80080a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008094:	f7ff fdb6 	bl	8007c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008098:	4b02      	ldr	r3, [pc, #8]	@ (80080a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20001644 	.word	0x20001644
 80080a8:	08008870 	.word	0x08008870

080080ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080b2:	4b0f      	ldr	r3, [pc, #60]	@ (80080f0 <Get_SerialNum+0x44>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080b8:	4b0e      	ldr	r3, [pc, #56]	@ (80080f4 <Get_SerialNum+0x48>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080be:	4b0e      	ldr	r3, [pc, #56]	@ (80080f8 <Get_SerialNum+0x4c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4413      	add	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d009      	beq.n	80080e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080d2:	2208      	movs	r2, #8
 80080d4:	4909      	ldr	r1, [pc, #36]	@ (80080fc <Get_SerialNum+0x50>)
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f814 	bl	8008104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080dc:	2204      	movs	r2, #4
 80080de:	4908      	ldr	r1, [pc, #32]	@ (8008100 <Get_SerialNum+0x54>)
 80080e0:	68b8      	ldr	r0, [r7, #8]
 80080e2:	f000 f80f 	bl	8008104 <IntToUnicode>
  }
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	1fff7a10 	.word	0x1fff7a10
 80080f4:	1fff7a14 	.word	0x1fff7a14
 80080f8:	1fff7a18 	.word	0x1fff7a18
 80080fc:	200000e2 	.word	0x200000e2
 8008100:	200000f2 	.word	0x200000f2

08008104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
 800811a:	e027      	b.n	800816c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	0f1b      	lsrs	r3, r3, #28
 8008120:	2b09      	cmp	r3, #9
 8008122:	d80b      	bhi.n	800813c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	0f1b      	lsrs	r3, r3, #28
 8008128:	b2da      	uxtb	r2, r3
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	4619      	mov	r1, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	440b      	add	r3, r1
 8008134:	3230      	adds	r2, #48	@ 0x30
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	e00a      	b.n	8008152 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	0f1b      	lsrs	r3, r3, #28
 8008140:	b2da      	uxtb	r2, r3
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	4619      	mov	r1, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	440b      	add	r3, r1
 800814c:	3237      	adds	r2, #55	@ 0x37
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	3301      	adds	r3, #1
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	4413      	add	r3, r2
 8008162:	2200      	movs	r2, #0
 8008164:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	3301      	adds	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
 800816c:	7dfa      	ldrb	r2, [r7, #23]
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	429a      	cmp	r2, r3
 8008172:	d3d3      	bcc.n	800811c <IntToUnicode+0x18>
  }
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
	...

08008184 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08a      	sub	sp, #40	@ 0x28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	605a      	str	r2, [r3, #4]
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081a4:	d147      	bne.n	8008236 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a6:	2300      	movs	r3, #0
 80081a8:	613b      	str	r3, [r7, #16]
 80081aa:	4b25      	ldr	r3, [pc, #148]	@ (8008240 <HAL_PCD_MspInit+0xbc>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ae:	4a24      	ldr	r2, [pc, #144]	@ (8008240 <HAL_PCD_MspInit+0xbc>)
 80081b0:	f043 0301 	orr.w	r3, r3, #1
 80081b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80081b6:	4b22      	ldr	r3, [pc, #136]	@ (8008240 <HAL_PCD_MspInit+0xbc>)
 80081b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80081c2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80081c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c8:	2302      	movs	r3, #2
 80081ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081d0:	2303      	movs	r3, #3
 80081d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081d4:	230a      	movs	r3, #10
 80081d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081d8:	f107 0314 	add.w	r3, r7, #20
 80081dc:	4619      	mov	r1, r3
 80081de:	4819      	ldr	r0, [pc, #100]	@ (8008244 <HAL_PCD_MspInit+0xc0>)
 80081e0:	f7f9 fabe 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80081e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081f2:	f107 0314 	add.w	r3, r7, #20
 80081f6:	4619      	mov	r1, r3
 80081f8:	4812      	ldr	r0, [pc, #72]	@ (8008244 <HAL_PCD_MspInit+0xc0>)
 80081fa:	f7f9 fab1 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081fe:	4b10      	ldr	r3, [pc, #64]	@ (8008240 <HAL_PCD_MspInit+0xbc>)
 8008200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008202:	4a0f      	ldr	r2, [pc, #60]	@ (8008240 <HAL_PCD_MspInit+0xbc>)
 8008204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008208:	6353      	str	r3, [r2, #52]	@ 0x34
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	4b0c      	ldr	r3, [pc, #48]	@ (8008240 <HAL_PCD_MspInit+0xbc>)
 8008210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008212:	4a0b      	ldr	r2, [pc, #44]	@ (8008240 <HAL_PCD_MspInit+0xbc>)
 8008214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008218:	6453      	str	r3, [r2, #68]	@ 0x44
 800821a:	4b09      	ldr	r3, [pc, #36]	@ (8008240 <HAL_PCD_MspInit+0xbc>)
 800821c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800821e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008226:	2200      	movs	r2, #0
 8008228:	2100      	movs	r1, #0
 800822a:	2043      	movs	r0, #67	@ 0x43
 800822c:	f7f8 ff77 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008230:	2043      	movs	r0, #67	@ 0x43
 8008232:	f7f8 ff90 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008236:	bf00      	nop
 8008238:	3728      	adds	r7, #40	@ 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40023800 	.word	0x40023800
 8008244:	40020000 	.word	0x40020000

08008248 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f7fe fb6d 	bl	800693e <USBD_LL_SetupStage>
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	4619      	mov	r1, r3
 8008296:	f7fe fba7 	bl	80069e8 <USBD_LL_DataOutStage>
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	3320      	adds	r3, #32
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	4619      	mov	r1, r3
 80082ca:	f7fe fc40 	bl	8006b4e <USBD_LL_DataInStage>
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe fd7a 	bl	8006dde <USBD_LL_SOF>
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082fa:	2301      	movs	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	79db      	ldrb	r3, [r3, #7]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]
 800830a:	e008      	b.n	800831e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	79db      	ldrb	r3, [r3, #7]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d102      	bne.n	800831a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
 8008318:	e001      	b.n	800831e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800831a:	f7f8 fa2d 	bl	8000778 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008324:	7bfa      	ldrb	r2, [r7, #15]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fd14 	bl	8006d56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe fcbc 	bl	8006cb2 <USBD_LL_Reset>
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fd0f 	bl	8006d76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800836a:	f043 0301 	orr.w	r3, r3, #1
 800836e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	7adb      	ldrb	r3, [r3, #11]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008378:	4b04      	ldr	r3, [pc, #16]	@ (800838c <HAL_PCD_SuspendCallback+0x48>)
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	4a03      	ldr	r2, [pc, #12]	@ (800838c <HAL_PCD_SuspendCallback+0x48>)
 800837e:	f043 0306 	orr.w	r3, r3, #6
 8008382:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	e000ed00 	.word	0xe000ed00

08008390 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe fd05 	bl	8006dae <USBD_LL_Resume>
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	4611      	mov	r1, r2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fd5d 	bl	8006e82 <USBD_LL_IsoOUTIncomplete>
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083e2:	78fa      	ldrb	r2, [r7, #3]
 80083e4:	4611      	mov	r1, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fd19 	bl	8006e1e <USBD_LL_IsoINIncomplete>
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fd6f 	bl	8006ee6 <USBD_LL_DevConnected>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fd6c 	bl	8006efc <USBD_LL_DevDisconnected>
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d13c      	bne.n	80084b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800843c:	4a20      	ldr	r2, [pc, #128]	@ (80084c0 <USBD_LL_Init+0x94>)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a1e      	ldr	r2, [pc, #120]	@ (80084c0 <USBD_LL_Init+0x94>)
 8008448:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800844c:	4b1c      	ldr	r3, [pc, #112]	@ (80084c0 <USBD_LL_Init+0x94>)
 800844e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008452:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008454:	4b1a      	ldr	r3, [pc, #104]	@ (80084c0 <USBD_LL_Init+0x94>)
 8008456:	2204      	movs	r2, #4
 8008458:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800845a:	4b19      	ldr	r3, [pc, #100]	@ (80084c0 <USBD_LL_Init+0x94>)
 800845c:	2202      	movs	r2, #2
 800845e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008460:	4b17      	ldr	r3, [pc, #92]	@ (80084c0 <USBD_LL_Init+0x94>)
 8008462:	2200      	movs	r2, #0
 8008464:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008466:	4b16      	ldr	r3, [pc, #88]	@ (80084c0 <USBD_LL_Init+0x94>)
 8008468:	2202      	movs	r2, #2
 800846a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800846c:	4b14      	ldr	r3, [pc, #80]	@ (80084c0 <USBD_LL_Init+0x94>)
 800846e:	2201      	movs	r2, #1
 8008470:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008472:	4b13      	ldr	r3, [pc, #76]	@ (80084c0 <USBD_LL_Init+0x94>)
 8008474:	2200      	movs	r2, #0
 8008476:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008478:	4b11      	ldr	r3, [pc, #68]	@ (80084c0 <USBD_LL_Init+0x94>)
 800847a:	2200      	movs	r2, #0
 800847c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800847e:	4b10      	ldr	r3, [pc, #64]	@ (80084c0 <USBD_LL_Init+0x94>)
 8008480:	2201      	movs	r2, #1
 8008482:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008484:	4b0e      	ldr	r3, [pc, #56]	@ (80084c0 <USBD_LL_Init+0x94>)
 8008486:	2200      	movs	r2, #0
 8008488:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800848a:	480d      	ldr	r0, [pc, #52]	@ (80084c0 <USBD_LL_Init+0x94>)
 800848c:	f7f9 fb47 	bl	8001b1e <HAL_PCD_Init>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008496:	f7f8 f96f 	bl	8000778 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800849a:	2180      	movs	r1, #128	@ 0x80
 800849c:	4808      	ldr	r0, [pc, #32]	@ (80084c0 <USBD_LL_Init+0x94>)
 800849e:	f7fa fd72 	bl	8002f86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80084a2:	2240      	movs	r2, #64	@ 0x40
 80084a4:	2100      	movs	r1, #0
 80084a6:	4806      	ldr	r0, [pc, #24]	@ (80084c0 <USBD_LL_Init+0x94>)
 80084a8:	f7fa fd26 	bl	8002ef8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80084ac:	2280      	movs	r2, #128	@ 0x80
 80084ae:	2101      	movs	r1, #1
 80084b0:	4803      	ldr	r0, [pc, #12]	@ (80084c0 <USBD_LL_Init+0x94>)
 80084b2:	f7fa fd21 	bl	8002ef8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20001844 	.word	0x20001844

080084c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f9 fc2e 	bl	8001d3c <HAL_PCD_Start>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f942 	bl	8008770 <USBD_Get_USB_Status>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	4608      	mov	r0, r1
 8008504:	4611      	mov	r1, r2
 8008506:	461a      	mov	r2, r3
 8008508:	4603      	mov	r3, r0
 800850a:	70fb      	strb	r3, [r7, #3]
 800850c:	460b      	mov	r3, r1
 800850e:	70bb      	strb	r3, [r7, #2]
 8008510:	4613      	mov	r3, r2
 8008512:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008522:	78bb      	ldrb	r3, [r7, #2]
 8008524:	883a      	ldrh	r2, [r7, #0]
 8008526:	78f9      	ldrb	r1, [r7, #3]
 8008528:	f7fa f902 	bl	8002730 <HAL_PCD_EP_Open>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f91c 	bl	8008770 <USBD_Get_USB_Status>
 8008538:	4603      	mov	r3, r0
 800853a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853c:	7bbb      	ldrb	r3, [r7, #14]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f7fa f94b 	bl	8002800 <HAL_PCD_EP_Close>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f8fd 	bl	8008770 <USBD_Get_USB_Status>
 8008576:	4603      	mov	r3, r0
 8008578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800857a:	7bbb      	ldrb	r3, [r7, #14]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fa fa03 	bl	80029ae <HAL_PCD_EP_SetStall>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 f8de 	bl	8008770 <USBD_Get_USB_Status>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	4611      	mov	r1, r2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fa fa47 	bl	8002a74 <HAL_PCD_EP_ClrStall>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f8bf 	bl	8008770 <USBD_Get_USB_Status>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008612:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008618:	2b00      	cmp	r3, #0
 800861a:	da0b      	bge.n	8008634 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008622:	68f9      	ldr	r1, [r7, #12]
 8008624:	4613      	mov	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	440b      	add	r3, r1
 800862e:	3316      	adds	r3, #22
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	e00b      	b.n	800864c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	4613      	mov	r3, r2
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800864a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008672:	78fa      	ldrb	r2, [r7, #3]
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f7fa f836 	bl	80026e8 <HAL_PCD_SetAddress>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f874 	bl	8008770 <USBD_Get_USB_Status>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800868c:	7bbb      	ldrb	r3, [r7, #14]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
 80086a2:	460b      	mov	r3, r1
 80086a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086b4:	7af9      	ldrb	r1, [r7, #11]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	f7fa f93e 	bl	800293a <HAL_PCD_EP_Transmit>
 80086be:	4603      	mov	r3, r0
 80086c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f853 	bl	8008770 <USBD_Get_USB_Status>
 80086ca:	4603      	mov	r3, r0
 80086cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	460b      	mov	r3, r1
 80086e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086f6:	7af9      	ldrb	r1, [r7, #11]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	f7fa f8ca 	bl	8002894 <HAL_PCD_EP_Receive>
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f832 	bl	8008770 <USBD_Get_USB_Status>
 800870c:	4603      	mov	r3, r0
 800870e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008710:	7dbb      	ldrb	r3, [r7, #22]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800872c:	78fa      	ldrb	r2, [r7, #3]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f7fa f8ea 	bl	800290a <HAL_PCD_EP_GetRxCount>
 8008736:	4603      	mov	r3, r0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008748:	4b03      	ldr	r3, [pc, #12]	@ (8008758 <USBD_static_malloc+0x18>)
}
 800874a:	4618      	mov	r0, r3
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	20001d28 	.word	0x20001d28

0800875c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]

}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	2b03      	cmp	r3, #3
 8008782:	d817      	bhi.n	80087b4 <USBD_Get_USB_Status+0x44>
 8008784:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <USBD_Get_USB_Status+0x1c>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	0800879d 	.word	0x0800879d
 8008790:	080087a3 	.word	0x080087a3
 8008794:	080087a9 	.word	0x080087a9
 8008798:	080087af 	.word	0x080087af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
    break;
 80087a0:	e00b      	b.n	80087ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	73fb      	strb	r3, [r7, #15]
    break;
 80087a6:	e008      	b.n	80087ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
    break;
 80087ac:	e005      	b.n	80087ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087ae:	2303      	movs	r3, #3
 80087b0:	73fb      	strb	r3, [r7, #15]
    break;
 80087b2:	e002      	b.n	80087ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087b4:	2303      	movs	r3, #3
 80087b6:	73fb      	strb	r3, [r7, #15]
    break;
 80087b8:	bf00      	nop
  }
  return usb_status;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <memset>:
 80087c8:	4402      	add	r2, r0
 80087ca:	4603      	mov	r3, r0
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d100      	bne.n	80087d2 <memset+0xa>
 80087d0:	4770      	bx	lr
 80087d2:	f803 1b01 	strb.w	r1, [r3], #1
 80087d6:	e7f9      	b.n	80087cc <memset+0x4>

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4d0d      	ldr	r5, [pc, #52]	@ (8008810 <__libc_init_array+0x38>)
 80087dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008814 <__libc_init_array+0x3c>)
 80087de:	1b64      	subs	r4, r4, r5
 80087e0:	10a4      	asrs	r4, r4, #2
 80087e2:	2600      	movs	r6, #0
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008818 <__libc_init_array+0x40>)
 80087ea:	4c0c      	ldr	r4, [pc, #48]	@ (800881c <__libc_init_array+0x44>)
 80087ec:	f000 f818 	bl	8008820 <_init>
 80087f0:	1b64      	subs	r4, r4, r5
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	2600      	movs	r6, #0
 80087f6:	42a6      	cmp	r6, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008800:	4798      	blx	r3
 8008802:	3601      	adds	r6, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f855 3b04 	ldr.w	r3, [r5], #4
 800880a:	4798      	blx	r3
 800880c:	3601      	adds	r6, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	080088a8 	.word	0x080088a8
 8008814:	080088a8 	.word	0x080088a8
 8008818:	080088a8 	.word	0x080088a8
 800881c:	080088ac 	.word	0x080088ac

08008820 <_init>:
 8008820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008822:	bf00      	nop
 8008824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008826:	bc08      	pop	{r3}
 8008828:	469e      	mov	lr, r3
 800882a:	4770      	bx	lr

0800882c <_fini>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	bf00      	nop
 8008830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008832:	bc08      	pop	{r3}
 8008834:	469e      	mov	lr, r3
 8008836:	4770      	bx	lr
