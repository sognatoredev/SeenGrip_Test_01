
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a724  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800a8d4  0800a8d4  0000b8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abcc  0800abcc  0000c14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800abcc  0800abcc  0000bbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd4  0800abd4  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd4  0800abd4  0000bbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abd8  0800abd8  0000bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800abdc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c14c  2**0
                  CONTENTS
 10 .bss          00002fa4  2000014c  2000014c  0000c14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200030f0  200030f0  0000c14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e50  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041e5  00000000  00000000  00024fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  000291b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fda  00000000  00000000  0002a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028867  00000000  00000000  0002b65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e52c  00000000  00000000  00053ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dec51  00000000  00000000  000723ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015103e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059a4  00000000  00000000  00151084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00156a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a8bc 	.word	0x0800a8bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000150 	.word	0x20000150
 80001ec:	0800a8bc 	.word	0x0800a8bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_DMA_Init+0x78>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a1a      	ldr	r2, [pc, #104]	@ (8000608 <MX_DMA_Init+0x78>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_DMA_Init+0x78>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_DMA_Init+0x78>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 f94d 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005d8:	200c      	movs	r0, #12
 80005da:	f001 f966 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2010      	movs	r0, #16
 80005e4:	f001 f945 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f001 f95e 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	203a      	movs	r0, #58	@ 0x3a
 80005f4:	f001 f93d 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f001 f956 	bl	80018aa <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a2f      	ldr	r2, [pc, #188]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a28      	ldr	r2, [pc, #160]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000698:	481b      	ldr	r0, [pc, #108]	@ (8000708 <MX_GPIO_Init+0xfc>)
 800069a:	f001 fed3 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800069e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <MX_GPIO_Init+0x100>)
 80006b6:	f001 fd19 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80006ba:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <MX_GPIO_Init+0xfc>)
 80006d4:	f001 fd0a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_GPIO_Init+0x100>)
 80006f6:	f001 fcf9 	bl	80020ec <HAL_GPIO_Init>

}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	@ 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400
 800070c:	40020800 	.word	0x40020800

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 ff26 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f85e 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff76 	bl	800060c <MX_GPIO_Init>
  MX_DMA_Init();
 8000720:	f7ff ff36 	bl	8000590 <MX_DMA_Init>
  MX_TIM1_Init();
 8000724:	f000 fa48 	bl	8000bb8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000728:	f000 fae8 	bl	8000cfc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800072c:	f000 fb10 	bl	8000d50 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000730:	f008 fec4 	bl	80094bc <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000734:	f000 fab8 	bl	8000ca8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buffer, UART_RX_BUFFER_MAX_SIZE);
 8000738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800073c:	491f      	ldr	r1, [pc, #124]	@ (80007bc <main+0xac>)
 800073e:	4820      	ldr	r0, [pc, #128]	@ (80007c0 <main+0xb0>)
 8000740:	f004 faca 	bl	8004cd8 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_buffer, UART_RX_BUFFER_MAX_SIZE);
 8000744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000748:	491e      	ldr	r1, [pc, #120]	@ (80007c4 <main+0xb4>)
 800074a:	481f      	ldr	r0, [pc, #124]	@ (80007c8 <main+0xb8>)
 800074c:	f004 fac4 	bl	8004cd8 <HAL_UARTEx_ReceiveToIdle_DMA>
  // __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <main+0xbc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <main+0xbc>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f022 0208 	bic.w	r2, r2, #8
 800075e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_TC);
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <main+0xbc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <main+0xbc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f022 0210 	bic.w	r2, r2, #16
 800076e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <main+0xc0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <main+0xc0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f022 0208 	bic.w	r2, r2, #8
 800077e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <main+0xc0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <main+0xc0>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0210 	bic.w	r2, r2, #16
 800078e:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 8000790:	4810      	ldr	r0, [pc, #64]	@ (80007d4 <main+0xc4>)
 8000792:	f003 fe2b 	bl	80043ec <HAL_TIM_Base_Start_IT>
  
  HAL_Delay(5000);
 8000796:	f241 3088 	movw	r0, #5000	@ 0x1388
 800079a:	f000 ff55 	bl	8001648 <HAL_Delay>
  BootMessagePrint();
 800079e:	f000 fc5d 	bl	800105c <BootMessagePrint>
  GetClockSourcePrint();
 80007a2:	f000 fcc9 	bl	8001138 <GetClockSourcePrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 80007a6:	f000 fd6d 	bl	8001284 <GPIO_Proc>
    USB_CDC_Proc();
 80007aa:	f000 fddb 	bl	8001364 <USB_CDC_Proc>
    USB_CDC_RX_Proc();
 80007ae:	f000 fe1b 	bl	80013e8 <USB_CDC_RX_Proc>
    UART1_RX_Proc();
 80007b2:	f000 fd6d 	bl	8001290 <UART1_RX_Proc>
  {
 80007b6:	bf00      	nop
 80007b8:	e7f5      	b.n	80007a6 <main+0x96>
 80007ba:	bf00      	nop
 80007bc:	20000fb8 	.word	0x20000fb8
 80007c0:	200001fc 	.word	0x200001fc
 80007c4:	20000bb8 	.word	0x20000bb8
 80007c8:	200001b4 	.word	0x200001b4
 80007cc:	200002ec 	.word	0x200002ec
 80007d0:	2000028c 	.word	0x2000028c
 80007d4:	2000016c 	.word	0x2000016c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	@ 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	@ 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f009 fbc2 	bl	8009f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <SystemClock_Config+0xd8>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	4a2a      	ldr	r2, [pc, #168]	@ (80008b0 <SystemClock_Config+0xd8>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	@ 0x40
 800080c:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <SystemClock_Config+0xd8>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <SystemClock_Config+0xdc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a24      	ldr	r2, [pc, #144]	@ (80008b4 <SystemClock_Config+0xdc>)
 8000822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <SystemClock_Config+0xdc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000838:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800084c:	23a8      	movs	r3, #168	@ 0xa8
 800084e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000854:	2307      	movs	r3, #7
 8000856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f003 f875 	bl	800394c <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000868:	f000 f826 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000878:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000882:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2105      	movs	r1, #5
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fad6 	bl	8003e3c <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000896:	f000 f80f 	bl	80008b8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 800089a:	2200      	movs	r2, #0
 800089c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80008a0:	2001      	movs	r0, #1
 80008a2:	f003 fbb1 	bl	8004008 <HAL_RCC_MCOConfig>
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	@ 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <NMI_Handler+0x4>

0800091c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <UsageFault_Handler+0x4>

0800093c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096a:	f000 fe4d 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <DMA1_Stream1_IRQHandler+0x10>)
 800097a:	f001 f94d 	bl	8001c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000034c 	.word	0x2000034c

08000988 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <DMA1_Stream5_IRQHandler+0x10>)
 800098e:	f001 f943 	bl	8001c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200002ec 	.word	0x200002ec

0800099c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009a2:	f003 fd93 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000016c 	.word	0x2000016c

080009b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <USART1_IRQHandler+0x10>)
 80009b6:	f004 f9ed 	bl	8004d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001b4 	.word	0x200001b4

080009c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <USART2_IRQHandler+0x10>)
 80009ca:	f004 f9e3 	bl	8004d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001fc 	.word	0x200001fc

080009d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <DMA2_Stream2_IRQHandler+0x10>)
 80009de:	f001 f91b 	bl	8001c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000028c 	.word	0x2000028c

080009ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <OTG_FS_IRQHandler+0x10>)
 80009f2:	f001 fe9e 	bl	8002732 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200028a4 	.word	0x200028a4

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  TIM1_CNT_1++;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	4a06      	ldr	r2, [pc, #24]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a10:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++;
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	200003ac 	.word	0x200003ac
 8000a2c:	200003b0 	.word	0x200003b0

08000a30 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b093      	sub	sp, #76	@ 0x4c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  UNUSED(Size);
  uint16_t tmp_cnt = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

  Uart_Rx_IdlelineSize = Size;
 8000a42:	4a33      	ldr	r2, [pc, #204]	@ (8000b10 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	8013      	strh	r3, [r2, #0]

  Uart_Rx_IdlelineIT_Flag = 0x01;
 8000a48:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <HAL_UARTEx_RxEventCallback+0xe4>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]

  if (huart->Instance == USART1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a31      	ldr	r2, [pc, #196]	@ (8000b18 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d127      	bne.n	8000aa8 <HAL_UARTEx_RxEventCallback+0x78>
  {
    uart1_rx_flag = 1;
 8000a58:	4b30      	ldr	r3, [pc, #192]	@ (8000b1c <HAL_UARTEx_RxEventCallback+0xec>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_buffer, UART_RX_BUFFER_MAX_SIZE);

		// __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
		// __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
    // __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	330c      	adds	r3, #12
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a7e:	e853 3f00 	ldrex	r3, [r3]
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8000a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	330c      	adds	r3, #12
 8000a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000a94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a9c:	e841 2300 	strex	r3, r2, [r1]
 8000aa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8000aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1e5      	bne.n	8000a74 <HAL_UARTEx_RxEventCallback+0x44>
  }
  if (huart->Instance == USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1c      	ldr	r2, [pc, #112]	@ (8000b20 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d127      	bne.n	8000b02 <HAL_UARTEx_RxEventCallback+0xd2>
  {
    uart2_rx_flag = 1;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buffer, UART_RX_BUFFER_MAX_SIZE);

		// __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    // __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	330c      	adds	r3, #12
 8000ad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	e853 3f00 	ldrex	r3, [r3]
 8000adc:	617b      	str	r3, [r7, #20]
   return(result);
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	330c      	adds	r3, #12
 8000aec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000aee:	627a      	str	r2, [r7, #36]	@ 0x24
 8000af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000af2:	6a39      	ldr	r1, [r7, #32]
 8000af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000af6:	e841 2300 	strex	r3, r2, [r1]
 8000afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1e5      	bne.n	8000ace <HAL_UARTEx_RxEventCallback+0x9e>
  }
}
 8000b02:	bf00      	nop
 8000b04:	374c      	adds	r7, #76	@ 0x4c
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200013ba 	.word	0x200013ba
 8000b14:	200013bc 	.word	0x200013bc
 8000b18:	40011000 	.word	0x40011000
 8000b1c:	200013b8 	.word	0x200013b8
 8000b20:	40004400 	.word	0x40004400
 8000b24:	200013b9 	.word	0x200013b9

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	@ (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f009 fa38 	bl	8009fcc <__errno>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20030000 	.word	0x20030000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	20000168 	.word	0x20000168
 8000b90:	200030f0 	.word	0x200030f0

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c54 <MX_TIM1_Init+0x9c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000bdc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000be0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000bea:	22a7      	movs	r2, #167	@ 0xa7
 8000bec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c00:	4813      	ldr	r0, [pc, #76]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000c02:	f003 fba3 	bl	800434c <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f7ff fe54 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000c1e:	f003 fd45 	bl	80046ac <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c28:	f7ff fe46 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_TIM1_Init+0x98>)
 8000c3a:	f003 ff6d 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c44:	f7ff fe38 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000016c 	.word	0x2000016c
 8000c54:	40010000 	.word	0x40010000

08000c58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d115      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2019      	movs	r0, #25
 8000c8c:	f000 fdf1 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c90:	2019      	movs	r0, #25
 8000c92:	f000 fe0a 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <MX_USART1_UART_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cb4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000ce0:	f003 ffaa 	bl	8004c38 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cea:	f7ff fde5 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001b4 	.word	0x200001b4
 8000cf8:	40011000 	.word	0x40011000

08000cfc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <MX_USART2_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d08:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d34:	f003 ff80 	bl	8004c38 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f7ff fdbb 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200001fc 	.word	0x200001fc
 8000d4c:	40004400 	.word	0x40004400

08000d50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <MX_USART3_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d88:	f003 ff56 	bl	8004c38 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f7ff fd91 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000244 	.word	0x20000244
 8000da0:	40004800 	.word	0x40004800

08000da4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	@ 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a9a      	ldr	r2, [pc, #616]	@ (800102c <HAL_UART_MspInit+0x288>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d164      	bne.n	8000e90 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
 8000dca:	4b99      	ldr	r3, [pc, #612]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	4a98      	ldr	r2, [pc, #608]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000dd0:	f043 0310 	orr.w	r3, r3, #16
 8000dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd6:	4b96      	ldr	r3, [pc, #600]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	623b      	str	r3, [r7, #32]
 8000de0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	4b92      	ldr	r3, [pc, #584]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a91      	ldr	r2, [pc, #580]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b8f      	ldr	r3, [pc, #572]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e10:	2307      	movs	r3, #7
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4886      	ldr	r0, [pc, #536]	@ (8001034 <HAL_UART_MspInit+0x290>)
 8000e1c:	f001 f966 	bl	80020ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000e20:	4b85      	ldr	r3, [pc, #532]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e22:	4a86      	ldr	r2, [pc, #536]	@ (800103c <HAL_UART_MspInit+0x298>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000e26:	4b84      	ldr	r3, [pc, #528]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2e:	4b82      	ldr	r3, [pc, #520]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b80      	ldr	r3, [pc, #512]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e40:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e42:	4b7d      	ldr	r3, [pc, #500]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e48:	4b7b      	ldr	r3, [pc, #492]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e56:	4b78      	ldr	r3, [pc, #480]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5c:	4b76      	ldr	r3, [pc, #472]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e62:	4875      	ldr	r0, [pc, #468]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e64:	f000 fd40 	bl	80018e8 <HAL_DMA_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e6e:	f7ff fd23 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a70      	ldr	r2, [pc, #448]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e78:	4a6f      	ldr	r2, [pc, #444]	@ (8001038 <HAL_UART_MspInit+0x294>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2025      	movs	r0, #37	@ 0x25
 8000e84:	f000 fcf5 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e88:	2025      	movs	r0, #37	@ 0x25
 8000e8a:	f000 fd0e 	bl	80018aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e8e:	e0c8      	b.n	8001022 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a6a      	ldr	r2, [pc, #424]	@ (8001040 <HAL_UART_MspInit+0x29c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d163      	bne.n	8000f62 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	4b64      	ldr	r3, [pc, #400]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a63      	ldr	r2, [pc, #396]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eaa:	4b61      	ldr	r3, [pc, #388]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	4b5d      	ldr	r3, [pc, #372]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a5c      	ldr	r2, [pc, #368]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b5a      	ldr	r3, [pc, #360]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4851      	ldr	r0, [pc, #324]	@ (8001034 <HAL_UART_MspInit+0x290>)
 8000eee:	f001 f8fd 	bl	80020ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ef2:	4b54      	ldr	r3, [pc, #336]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000ef4:	4a54      	ldr	r2, [pc, #336]	@ (8001048 <HAL_UART_MspInit+0x2a4>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ef8:	4b52      	ldr	r3, [pc, #328]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000efa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000efe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f00:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f06:	4b4f      	ldr	r3, [pc, #316]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f14:	4b4b      	ldr	r3, [pc, #300]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f20:	4b48      	ldr	r3, [pc, #288]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f28:	4b46      	ldr	r3, [pc, #280]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2e:	4b45      	ldr	r3, [pc, #276]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f34:	4843      	ldr	r0, [pc, #268]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f36:	f000 fcd7 	bl	80018e8 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8000f40:	f7ff fcba 	bl	80008b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3f      	ldr	r2, [pc, #252]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001044 <HAL_UART_MspInit+0x2a0>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2026      	movs	r0, #38	@ 0x26
 8000f56:	f000 fc8c 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f5a:	2026      	movs	r0, #38	@ 0x26
 8000f5c:	f000 fca5 	bl	80018aa <HAL_NVIC_EnableIRQ>
}
 8000f60:	e05f      	b.n	8001022 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a39      	ldr	r2, [pc, #228]	@ (800104c <HAL_UART_MspInit+0x2a8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d15a      	bne.n	8001022 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a2e      	ldr	r2, [pc, #184]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000f76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <HAL_UART_MspInit+0x28c>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fa4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4823      	ldr	r0, [pc, #140]	@ (8001050 <HAL_UART_MspInit+0x2ac>)
 8000fc2:	f001 f893 	bl	80020ec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000fc8:	4a23      	ldr	r2, [pc, #140]	@ (8001058 <HAL_UART_MspInit+0x2b4>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000fce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fd2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000fe2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001006:	4813      	ldr	r0, [pc, #76]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 8001008:	f000 fc6e 	bl	80018e8 <HAL_DMA_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001012:	f7ff fc51 	bl	80008b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <HAL_UART_MspInit+0x2b0>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001022:	bf00      	nop
 8001024:	3738      	adds	r7, #56	@ 0x38
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40011000 	.word	0x40011000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000
 8001038:	2000028c 	.word	0x2000028c
 800103c:	40026440 	.word	0x40026440
 8001040:	40004400 	.word	0x40004400
 8001044:	200002ec 	.word	0x200002ec
 8001048:	40026088 	.word	0x40026088
 800104c:	40004800 	.word	0x40004800
 8001050:	40020400 	.word	0x40020400
 8001054:	2000034c 	.word	0x2000034c
 8001058:	40026028 	.word	0x40026028

0800105c <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 8001060:	492a      	ldr	r1, [pc, #168]	@ (800110c <BootMessagePrint+0xb0>)
 8001062:	482b      	ldr	r0, [pc, #172]	@ (8001110 <BootMessagePrint+0xb4>)
 8001064:	f008 ff64 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001068:	4829      	ldr	r0, [pc, #164]	@ (8001110 <BootMessagePrint+0xb4>)
 800106a:	f7ff f8c1 	bl	80001f0 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29b      	uxth	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	4826      	ldr	r0, [pc, #152]	@ (8001110 <BootMessagePrint+0xb4>)
 8001076:	f000 f8df 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " Project Name        : %s\r\n", PROJECT_NAME );
 800107a:	4a26      	ldr	r2, [pc, #152]	@ (8001114 <BootMessagePrint+0xb8>)
 800107c:	4926      	ldr	r1, [pc, #152]	@ (8001118 <BootMessagePrint+0xbc>)
 800107e:	4824      	ldr	r0, [pc, #144]	@ (8001110 <BootMessagePrint+0xb4>)
 8001080:	f008 ff56 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001084:	4822      	ldr	r0, [pc, #136]	@ (8001110 <BootMessagePrint+0xb4>)
 8001086:	f7ff f8b3 	bl	80001f0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29b      	uxth	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	481f      	ldr	r0, [pc, #124]	@ (8001110 <BootMessagePrint+0xb4>)
 8001092:	f000 f8d1 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HW VERSION        : %s\r\n", STR_HW_VER );
 8001096:	4a21      	ldr	r2, [pc, #132]	@ (800111c <BootMessagePrint+0xc0>)
 8001098:	4921      	ldr	r1, [pc, #132]	@ (8001120 <BootMessagePrint+0xc4>)
 800109a:	481d      	ldr	r0, [pc, #116]	@ (8001110 <BootMessagePrint+0xb4>)
 800109c:	f008 ff48 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010a0:	481b      	ldr	r0, [pc, #108]	@ (8001110 <BootMessagePrint+0xb4>)
 80010a2:	f7ff f8a5 	bl	80001f0 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	4818      	ldr	r0, [pc, #96]	@ (8001110 <BootMessagePrint+0xb4>)
 80010ae:	f000 f8c3 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - FW VERSION        : %s\r\n", STR_FW_VER );
 80010b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <BootMessagePrint+0xc8>)
 80010b4:	491c      	ldr	r1, [pc, #112]	@ (8001128 <BootMessagePrint+0xcc>)
 80010b6:	4816      	ldr	r0, [pc, #88]	@ (8001110 <BootMessagePrint+0xb4>)
 80010b8:	f008 ff3a 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010bc:	4814      	ldr	r0, [pc, #80]	@ (8001110 <BootMessagePrint+0xb4>)
 80010be:	f7ff f897 	bl	80001f0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	4811      	ldr	r0, [pc, #68]	@ (8001110 <BootMessagePrint+0xb4>)
 80010ca:	f000 f8b5 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <BootMessagePrint+0xd0>)
 80010d0:	4a17      	ldr	r2, [pc, #92]	@ (8001130 <BootMessagePrint+0xd4>)
 80010d2:	4918      	ldr	r1, [pc, #96]	@ (8001134 <BootMessagePrint+0xd8>)
 80010d4:	480e      	ldr	r0, [pc, #56]	@ (8001110 <BootMessagePrint+0xb4>)
 80010d6:	f008 ff2b 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010da:	480d      	ldr	r0, [pc, #52]	@ (8001110 <BootMessagePrint+0xb4>)
 80010dc:	f7ff f888 	bl	80001f0 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	480a      	ldr	r0, [pc, #40]	@ (8001110 <BootMessagePrint+0xb4>)
 80010e8:	f000 f8a6 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 80010ec:	4907      	ldr	r1, [pc, #28]	@ (800110c <BootMessagePrint+0xb0>)
 80010ee:	4808      	ldr	r0, [pc, #32]	@ (8001110 <BootMessagePrint+0xb4>)
 80010f0:	f008 ff1e 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010f4:	4806      	ldr	r0, [pc, #24]	@ (8001110 <BootMessagePrint+0xb4>)
 80010f6:	f7ff f87b 	bl	80001f0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <BootMessagePrint+0xb4>)
 8001102:	f000 f899 	bl	8001238 <User_CDC_Transmit_FS>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800a8d4 	.word	0x0800a8d4
 8001110:	200007b4 	.word	0x200007b4
 8001114:	0800a904 	.word	0x0800a904
 8001118:	0800a918 	.word	0x0800a918
 800111c:	0800a934 	.word	0x0800a934
 8001120:	0800a93c 	.word	0x0800a93c
 8001124:	0800a958 	.word	0x0800a958
 8001128:	0800a96c 	.word	0x0800a96c
 800112c:	0800a988 	.word	0x0800a988
 8001130:	0800a994 	.word	0x0800a994
 8001134:	0800a9a0 	.word	0x0800a9a0

08001138 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 800113c:	4937      	ldr	r1, [pc, #220]	@ (800121c <GetClockSourcePrint+0xe4>)
 800113e:	4838      	ldr	r0, [pc, #224]	@ (8001220 <GetClockSourcePrint+0xe8>)
 8001140:	f008 fef6 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001144:	4836      	ldr	r0, [pc, #216]	@ (8001220 <GetClockSourcePrint+0xe8>)
 8001146:	f7ff f853 	bl	80001f0 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29b      	uxth	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	4833      	ldr	r0, [pc, #204]	@ (8001220 <GetClockSourcePrint+0xe8>)
 8001152:	f000 f871 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8001156:	f002 ffbf 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 800115a:	4603      	mov	r3, r0
 800115c:	4a31      	ldr	r2, [pc, #196]	@ (8001224 <GetClockSourcePrint+0xec>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9b      	lsrs	r3, r3, #18
 8001164:	461a      	mov	r2, r3
 8001166:	4930      	ldr	r1, [pc, #192]	@ (8001228 <GetClockSourcePrint+0xf0>)
 8001168:	482d      	ldr	r0, [pc, #180]	@ (8001220 <GetClockSourcePrint+0xe8>)
 800116a:	f008 fee1 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800116e:	482c      	ldr	r0, [pc, #176]	@ (8001220 <GetClockSourcePrint+0xe8>)
 8001170:	f7ff f83e 	bl	80001f0 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29b      	uxth	r3, r3
 8001178:	4619      	mov	r1, r3
 800117a:	4829      	ldr	r0, [pc, #164]	@ (8001220 <GetClockSourcePrint+0xe8>)
 800117c:	f000 f85c 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 8001180:	f003 f8b0 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8001184:	4603      	mov	r3, r0
 8001186:	4a27      	ldr	r2, [pc, #156]	@ (8001224 <GetClockSourcePrint+0xec>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	0c9b      	lsrs	r3, r3, #18
 800118e:	461a      	mov	r2, r3
 8001190:	4926      	ldr	r1, [pc, #152]	@ (800122c <GetClockSourcePrint+0xf4>)
 8001192:	4823      	ldr	r0, [pc, #140]	@ (8001220 <GetClockSourcePrint+0xe8>)
 8001194:	f008 fecc 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001198:	4821      	ldr	r0, [pc, #132]	@ (8001220 <GetClockSourcePrint+0xe8>)
 800119a:	f7ff f829 	bl	80001f0 <strlen>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	481e      	ldr	r0, [pc, #120]	@ (8001220 <GetClockSourcePrint+0xe8>)
 80011a6:	f000 f847 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80011aa:	f003 f8a7 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001224 <GetClockSourcePrint+0xec>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9b      	lsrs	r3, r3, #18
 80011b8:	461a      	mov	r2, r3
 80011ba:	491d      	ldr	r1, [pc, #116]	@ (8001230 <GetClockSourcePrint+0xf8>)
 80011bc:	4818      	ldr	r0, [pc, #96]	@ (8001220 <GetClockSourcePrint+0xe8>)
 80011be:	f008 feb7 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80011c2:	4817      	ldr	r0, [pc, #92]	@ (8001220 <GetClockSourcePrint+0xe8>)
 80011c4:	f7ff f814 	bl	80001f0 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	4814      	ldr	r0, [pc, #80]	@ (8001220 <GetClockSourcePrint+0xe8>)
 80011d0:	f000 f832 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 80011d4:	f003 f8a6 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <GetClockSourcePrint+0xec>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	0c9b      	lsrs	r3, r3, #18
 80011e2:	461a      	mov	r2, r3
 80011e4:	4913      	ldr	r1, [pc, #76]	@ (8001234 <GetClockSourcePrint+0xfc>)
 80011e6:	480e      	ldr	r0, [pc, #56]	@ (8001220 <GetClockSourcePrint+0xe8>)
 80011e8:	f008 fea2 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <GetClockSourcePrint+0xe8>)
 80011ee:	f7fe ffff 	bl	80001f0 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4619      	mov	r1, r3
 80011f8:	4809      	ldr	r0, [pc, #36]	@ (8001220 <GetClockSourcePrint+0xe8>)
 80011fa:	f000 f81d 	bl	8001238 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 80011fe:	4907      	ldr	r1, [pc, #28]	@ (800121c <GetClockSourcePrint+0xe4>)
 8001200:	4807      	ldr	r0, [pc, #28]	@ (8001220 <GetClockSourcePrint+0xe8>)
 8001202:	f008 fe95 	bl	8009f30 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001206:	4806      	ldr	r0, [pc, #24]	@ (8001220 <GetClockSourcePrint+0xe8>)
 8001208:	f7fe fff2 	bl	80001f0 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29b      	uxth	r3, r3
 8001210:	4619      	mov	r1, r3
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <GetClockSourcePrint+0xe8>)
 8001214:	f000 f810 	bl	8001238 <User_CDC_Transmit_FS>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800a8d4 	.word	0x0800a8d4
 8001220:	200007b4 	.word	0x200007b4
 8001224:	431bde83 	.word	0x431bde83
 8001228:	0800a9c0 	.word	0x0800a9c0
 800122c:	0800a9f0 	.word	0x0800a9f0
 8001230:	0800aa20 	.word	0x0800aa20
 8001234:	0800aa50 	.word	0x0800aa50

08001238 <User_CDC_Transmit_FS>:

void User_CDC_Transmit_FS(uint8_t * pdata, uint16_t datalength)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
    // while(CDC_Transmit_FS((uint8_t *) pdata, datalength) == USBD_BUSY);
    CDC_Transmit_FS((uint8_t *) pdata, datalength);
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	4619      	mov	r1, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f008 fa03 	bl	8009654 <CDC_Transmit_FS>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <LED_Proc+0x24>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001264:	d307      	bcc.n	8001276 <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <LED_Proc+0x24>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 800126c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <LED_Proc+0x28>)
 8001272:	f001 f900 	bl	8002476 <HAL_GPIO_TogglePin>
    }    
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200003ac 	.word	0x200003ac
 8001280:	40020400 	.word	0x40020400

08001284 <GPIO_Proc>:

void GPIO_Proc (void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    LED_Proc();
 8001288:	f7ff ffe6 	bl	8001258 <LED_Proc>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <UART1_RX_Proc>:
        Uart_Rx_IdlelineIT_Flag = NULL;
    }
}
#else
void UART1_RX_Proc (void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    // if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)))
    if ( Uart_Rx_IdlelineIT_Flag != NULL )
 8001294:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <UART1_RX_Proc+0xb0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d04f      	beq.n	800133c <UART1_RX_Proc+0xac>
    {
        if (uart1_rx_flag != NULL)
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <UART1_RX_Proc+0xb4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d022      	beq.n	80012ea <UART1_RX_Proc+0x5a>
        {
            uart1_rx_flag = NULL;
 80012a4:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <UART1_RX_Proc+0xb4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]

            __HAL_DMA_DISABLE(&hdma_usart1_rx);
 80012aa:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <UART1_RX_Proc+0xb8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <UART1_RX_Proc+0xb8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
            hdma_usart1_rx.Instance->NDTR = UART_RX_BUFFER_MAX_SIZE; // rx buff index init
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <UART1_RX_Proc+0xb8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012c2:	605a      	str	r2, [r3, #4]
            __HAL_DMA_ENABLE(&hdma_usart1_rx);
 80012c4:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <UART1_RX_Proc+0xb8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <UART1_RX_Proc+0xb8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

            sprintf(USB_CdcTxBuffer_FS, &uart1_rx_buffer);
 80012d4:	491d      	ldr	r1, [pc, #116]	@ (800134c <UART1_RX_Proc+0xbc>)
 80012d6:	481e      	ldr	r0, [pc, #120]	@ (8001350 <UART1_RX_Proc+0xc0>)
 80012d8:	f008 fe2a 	bl	8009f30 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, Uart_Rx_IdlelineSize);
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <UART1_RX_Proc+0xc4>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	481b      	ldr	r0, [pc, #108]	@ (8001350 <UART1_RX_Proc+0xc0>)
 80012e4:	f7ff ffa8 	bl	8001238 <User_CDC_Transmit_FS>
 80012e8:	e025      	b.n	8001336 <UART1_RX_Proc+0xa6>
            // User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));

            // memset(uart2_rx_buffer, 0, Uart_Rx_IdlelineSize);
            // Uart_Rx_IdlelineSize = 0;
        }
        else if ( uart2_rx_flag != NULL)
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <UART1_RX_Proc+0xc8>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d021      	beq.n	8001336 <UART1_RX_Proc+0xa6>
        {
            uart2_rx_flag = NULL;
 80012f2:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <UART1_RX_Proc+0xc8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]

            __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <UART1_RX_Proc+0xcc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <UART1_RX_Proc+0xcc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]
            hdma_usart2_rx.Instance->NDTR = UART_RX_BUFFER_MAX_SIZE; // rx buff index init
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <UART1_RX_Proc+0xcc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001310:	605a      	str	r2, [r3, #4]
            __HAL_DMA_ENABLE(&hdma_usart2_rx);
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <UART1_RX_Proc+0xcc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b10      	ldr	r3, [pc, #64]	@ (800135c <UART1_RX_Proc+0xcc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0201 	orr.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]

            sprintf(USB_CdcTxBuffer_FS, &uart2_rx_buffer);
 8001322:	490f      	ldr	r1, [pc, #60]	@ (8001360 <UART1_RX_Proc+0xd0>)
 8001324:	480a      	ldr	r0, [pc, #40]	@ (8001350 <UART1_RX_Proc+0xc0>)
 8001326:	f008 fe03 	bl	8009f30 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, Uart_Rx_IdlelineSize);
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <UART1_RX_Proc+0xc4>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <UART1_RX_Proc+0xc0>)
 8001332:	f7ff ff81 	bl	8001238 <User_CDC_Transmit_FS>
            // memset(uart2_rx_buffer, 0, Uart_Rx_IdlelineSize);
            // Uart_Rx_IdlelineSize = 0;
        
        }

        Uart_Rx_IdlelineIT_Flag = NULL;
 8001336:	4b02      	ldr	r3, [pc, #8]	@ (8001340 <UART1_RX_Proc+0xb0>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
    }
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200013bc 	.word	0x200013bc
 8001344:	200013b8 	.word	0x200013b8
 8001348:	2000028c 	.word	0x2000028c
 800134c:	20000bb8 	.word	0x20000bb8
 8001350:	200007b4 	.word	0x200007b4
 8001354:	200013ba 	.word	0x200013ba
 8001358:	200013b9 	.word	0x200013b9
 800135c:	200002ec 	.word	0x200002ec
 8001360:	20000fb8 	.word	0x20000fb8

08001364 <USB_CDC_Proc>:
/*----------------------------------------------------------------------------*/
static uint16_t count = 0;

/* USER CODE BEGIN 1 */
void USB_CDC_Proc (void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
    #if 1
    if (TIM1_CNT_2 >= 1000)
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <USB_CDC_Proc+0x70>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001370:	d32e      	bcc.n	80013d0 <USB_CDC_Proc+0x6c>
    {
        TIM1_CNT_2 = 0;
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <USB_CDC_Proc+0x70>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "USB CDC TEST %d\r\n", count);
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <USB_CDC_Proc+0x74>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4917      	ldr	r1, [pc, #92]	@ (80013dc <USB_CDC_Proc+0x78>)
 8001380:	4817      	ldr	r0, [pc, #92]	@ (80013e0 <USB_CDC_Proc+0x7c>)
 8001382:	f008 fdd5 	bl	8009f30 <siprintf>
        User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001386:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <USB_CDC_Proc+0x7c>)
 8001388:	f7fe ff32 	bl	80001f0 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29b      	uxth	r3, r3
 8001390:	4619      	mov	r1, r3
 8001392:	4813      	ldr	r0, [pc, #76]	@ (80013e0 <USB_CDC_Proc+0x7c>)
 8001394:	f7ff ff50 	bl	8001238 <User_CDC_Transmit_FS>

        sprintf(USB_CdcTxBuffer_FS, "USB CDC Transmit OK.\r\n");
 8001398:	4912      	ldr	r1, [pc, #72]	@ (80013e4 <USB_CDC_Proc+0x80>)
 800139a:	4811      	ldr	r0, [pc, #68]	@ (80013e0 <USB_CDC_Proc+0x7c>)
 800139c:	f008 fdc8 	bl	8009f30 <siprintf>
        User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <USB_CDC_Proc+0x7c>)
 80013a2:	f7fe ff25 	bl	80001f0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <USB_CDC_Proc+0x7c>)
 80013ae:	f7ff ff43 	bl	8001238 <User_CDC_Transmit_FS>
        
        memset(USB_CdcTxBuffer_FS, 0, strlen(USB_CdcTxBuffer_FS));
 80013b2:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <USB_CDC_Proc+0x7c>)
 80013b4:	f7fe ff1c 	bl	80001f0 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <USB_CDC_Proc+0x7c>)
 80013c0:	f008 fdd6 	bl	8009f70 <memset>
        
        count++;
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <USB_CDC_Proc+0x74>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b02      	ldr	r3, [pc, #8]	@ (80013d8 <USB_CDC_Proc+0x74>)
 80013ce:	801a      	strh	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
        CDC_Transmit_FS(USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
    }
    #endif
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200003b0 	.word	0x200003b0
 80013d8:	200013be 	.word	0x200013be
 80013dc:	0800aa80 	.word	0x0800aa80
 80013e0:	200007b4 	.word	0x200007b4
 80013e4:	0800aa94 	.word	0x0800aa94

080013e8 <USB_CDC_RX_Proc>:

void USB_CDC_RX_Proc(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    if (USB_CdcRxBuffer_FS_cnt != NULL)
 80013ec:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <USB_CDC_RX_Proc+0xfc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d075      	beq.n	80014e0 <USB_CDC_RX_Proc+0xf8>
    {
        if (!strncmp("RXBUF ALL PRINT", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 80013f4:	4b3b      	ldr	r3, [pc, #236]	@ (80014e4 <USB_CDC_RX_Proc+0xfc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3b02      	subs	r3, #2
 80013fa:	461a      	mov	r2, r3
 80013fc:	493a      	ldr	r1, [pc, #232]	@ (80014e8 <USB_CDC_RX_Proc+0x100>)
 80013fe:	483b      	ldr	r0, [pc, #236]	@ (80014ec <USB_CDC_RX_Proc+0x104>)
 8001400:	f008 fdbe 	bl	8009f80 <strncmp>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10d      	bne.n	8001426 <USB_CDC_RX_Proc+0x3e>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB ALL\r\n");
 800140a:	4939      	ldr	r1, [pc, #228]	@ (80014f0 <USB_CDC_RX_Proc+0x108>)
 800140c:	4839      	ldr	r0, [pc, #228]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 800140e:	f008 fd8f 	bl	8009f30 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001412:	4838      	ldr	r0, [pc, #224]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 8001414:	f7fe feec 	bl	80001f0 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	b29b      	uxth	r3, r3
 800141c:	4619      	mov	r1, r3
 800141e:	4835      	ldr	r0, [pc, #212]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 8001420:	f7ff ff0a 	bl	8001238 <User_CDC_Transmit_FS>
 8001424:	e052      	b.n	80014cc <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("RXBUF CLEAR", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001426:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <USB_CDC_RX_Proc+0xfc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3b02      	subs	r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	492e      	ldr	r1, [pc, #184]	@ (80014e8 <USB_CDC_RX_Proc+0x100>)
 8001430:	4831      	ldr	r0, [pc, #196]	@ (80014f8 <USB_CDC_RX_Proc+0x110>)
 8001432:	f008 fda5 	bl	8009f80 <strncmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10d      	bne.n	8001458 <USB_CDC_RX_Proc+0x70>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB RX Buffer Clear\r\n");
 800143c:	492f      	ldr	r1, [pc, #188]	@ (80014fc <USB_CDC_RX_Proc+0x114>)
 800143e:	482d      	ldr	r0, [pc, #180]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 8001440:	f008 fd76 	bl	8009f30 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001444:	482b      	ldr	r0, [pc, #172]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 8001446:	f7fe fed3 	bl	80001f0 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29b      	uxth	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	4828      	ldr	r0, [pc, #160]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 8001452:	f7ff fef1 	bl	8001238 <User_CDC_Transmit_FS>
 8001456:	e039      	b.n	80014cc <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("SYSTEM RESET", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <USB_CDC_RX_Proc+0xfc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b02      	subs	r3, #2
 800145e:	461a      	mov	r2, r3
 8001460:	4921      	ldr	r1, [pc, #132]	@ (80014e8 <USB_CDC_RX_Proc+0x100>)
 8001462:	4827      	ldr	r0, [pc, #156]	@ (8001500 <USB_CDC_RX_Proc+0x118>)
 8001464:	f008 fd8c 	bl	8009f80 <strncmp>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d112      	bne.n	8001494 <USB_CDC_RX_Proc+0xac>
        {
            sprintf(USB_CdcTxBuffer_FS, "SYSTEM Reset\r\n");
 800146e:	4925      	ldr	r1, [pc, #148]	@ (8001504 <USB_CDC_RX_Proc+0x11c>)
 8001470:	4820      	ldr	r0, [pc, #128]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 8001472:	f008 fd5d 	bl	8009f30 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001476:	481f      	ldr	r0, [pc, #124]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 8001478:	f7fe feba 	bl	80001f0 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	b29b      	uxth	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	481c      	ldr	r0, [pc, #112]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 8001484:	f7ff fed8 	bl	8001238 <User_CDC_Transmit_FS>
            HAL_Delay(100);
 8001488:	2064      	movs	r0, #100	@ 0x64
 800148a:	f000 f8dd 	bl	8001648 <HAL_Delay>
            HAL_NVIC_SystemReset();
 800148e:	f000 fa1a 	bl	80018c6 <HAL_NVIC_SystemReset>
 8001492:	e01b      	b.n	80014cc <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("SYSTEM INFO", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <USB_CDC_RX_Proc+0xfc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b02      	subs	r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	4912      	ldr	r1, [pc, #72]	@ (80014e8 <USB_CDC_RX_Proc+0x100>)
 800149e:	481a      	ldr	r0, [pc, #104]	@ (8001508 <USB_CDC_RX_Proc+0x120>)
 80014a0:	f008 fd6e 	bl	8009f80 <strncmp>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d110      	bne.n	80014cc <USB_CDC_RX_Proc+0xe4>
        {
            sprintf(USB_CdcTxBuffer_FS, "[ System Infomation ]\r\n");
 80014aa:	4918      	ldr	r1, [pc, #96]	@ (800150c <USB_CDC_RX_Proc+0x124>)
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 80014ae:	f008 fd3f 	bl	8009f30 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80014b2:	4810      	ldr	r0, [pc, #64]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 80014b4:	f7fe fe9c 	bl	80001f0 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <USB_CDC_RX_Proc+0x10c>)
 80014c0:	f7ff feba 	bl	8001238 <User_CDC_Transmit_FS>

            BootMessagePrint();
 80014c4:	f7ff fdca 	bl	800105c <BootMessagePrint>
            GetClockSourcePrint();
 80014c8:	f7ff fe36 	bl	8001138 <GetClockSourcePrint>
        }

        memset(USB_CdcRxBuffer_FS, 0, USB_CdcRxBuffer_FS_cnt);
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <USB_CDC_RX_Proc+0xfc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	2100      	movs	r1, #0
 80014d4:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <USB_CDC_RX_Proc+0x100>)
 80014d6:	f008 fd4b 	bl	8009f70 <memset>
        USB_CdcRxBuffer_FS_cnt = NULL;
 80014da:	4b02      	ldr	r3, [pc, #8]	@ (80014e4 <USB_CDC_RX_Proc+0xfc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
    }
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000bb4 	.word	0x20000bb4
 80014e8:	200003b4 	.word	0x200003b4
 80014ec:	0800aaac 	.word	0x0800aaac
 80014f0:	0800aabc 	.word	0x0800aabc
 80014f4:	200007b4 	.word	0x200007b4
 80014f8:	0800aac8 	.word	0x0800aac8
 80014fc:	0800aad4 	.word	0x0800aad4
 8001500:	0800aaec 	.word	0x0800aaec
 8001504:	0800aafc 	.word	0x0800aafc
 8001508:	0800ab0c 	.word	0x0800ab0c
 800150c:	0800ab18 	.word	0x0800ab18

08001510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001548 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001514:	f7ff fb3e 	bl	8000b94 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151a:	490d      	ldr	r1, [pc, #52]	@ (8001550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800151c:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001530:	4c0a      	ldr	r4, [pc, #40]	@ (800155c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800153e:	f008 fd4b 	bl	8009fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001542:	f7ff f8e5 	bl	8000710 <main>
  bx  lr    
 8001546:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001548:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001554:	0800abdc 	.word	0x0800abdc
  ldr r2, =_sbss
 8001558:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800155c:	200030f0 	.word	0x200030f0

08001560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC_IRQHandler>
	...

08001564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <HAL_Init+0x40>)
 800156e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <HAL_Init+0x40>)
 800157a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800157e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a07      	ldr	r2, [pc, #28]	@ (80015a4 <HAL_Init+0x40>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158c:	2003      	movs	r0, #3
 800158e:	f000 f965 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001592:	200f      	movs	r0, #15
 8001594:	f000 f808 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001598:	f7ff f994 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023c00 	.word	0x40023c00

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_InitTick+0x54>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_InitTick+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015be:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f981 	bl	80018ce <HAL_SYSTICK_Config>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00e      	b.n	80015f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d80a      	bhi.n	80015f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f000 f945 	bl	8001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4a06      	ldr	r2, [pc, #24]	@ (8001604 <HAL_InitTick+0x5c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000008 	.word	0x20000008
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008
 800162c:	200013c0 	.word	0x200013c0

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	200013c0 	.word	0x200013c0

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff ffee 	bl	8001630 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffde 	bl	8001630 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008

08001690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016ac:	4013      	ands	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c2:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	60d3      	str	r3, [r2, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <__NVIC_GetPriorityGrouping+0x18>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	f003 0307 	and.w	r3, r3, #7
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	db0b      	blt.n	800171e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	f003 021f 	and.w	r2, r3, #31
 800170c:	4907      	ldr	r1, [pc, #28]	@ (800172c <__NVIC_EnableIRQ+0x38>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	2001      	movs	r0, #1
 8001716:	fa00 f202 	lsl.w	r2, r0, r2
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	@ (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	@ (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	@ 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80017f0:	f3bf 8f4f 	dsb	sy
}
 80017f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <__NVIC_SystemReset+0x24>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80017fe:	4904      	ldr	r1, [pc, #16]	@ (8001810 <__NVIC_SystemReset+0x24>)
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <__NVIC_SystemReset+0x28>)
 8001802:	4313      	orrs	r3, r2
 8001804:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001806:	f3bf 8f4f 	dsb	sy
}
 800180a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <__NVIC_SystemReset+0x20>
 8001810:	e000ed00 	.word	0xe000ed00
 8001814:	05fa0004 	.word	0x05fa0004

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f7ff ff78 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff13 	bl	8001690 <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff28 	bl	80016d8 <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff78 	bl	8001784 <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff47 	bl	8001730 <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff1b 	bl	80016f4 <__NVIC_EnableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80018ca:	f7ff ff8f 	bl	80017ec <__NVIC_SystemReset>

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff9e 	bl	8001818 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff fe9c 	bl	8001630 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e099      	b.n	8001a38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001924:	e00f      	b.n	8001946 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001926:	f7ff fe83 	bl	8001630 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b05      	cmp	r3, #5
 8001932:	d908      	bls.n	8001946 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2203      	movs	r2, #3
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e078      	b.n	8001a38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e8      	bne.n	8001926 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4b38      	ldr	r3, [pc, #224]	@ (8001a40 <HAL_DMA_Init+0x158>)
 8001960:	4013      	ands	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001972:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	2b04      	cmp	r3, #4
 800199e:	d107      	bne.n	80019b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	4313      	orrs	r3, r2
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f023 0307 	bic.w	r3, r3, #7
 80019c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d117      	bne.n	8001a0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fb01 	bl	8001ff4 <DMA_CheckFifoParam>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2240      	movs	r2, #64	@ 0x40
 80019fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a06:	2301      	movs	r3, #1
 8001a08:	e016      	b.n	8001a38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fab8 	bl	8001f88 <DMA_CalcBaseAndBitshift>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	223f      	movs	r2, #63	@ 0x3f
 8001a22:	409a      	lsls	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	f010803f 	.word	0xf010803f

08001a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_Start_IT+0x26>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e040      	b.n	8001aec <HAL_DMA_Start_IT+0xa8>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d12f      	bne.n	8001ade <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2202      	movs	r2, #2
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fa4a 	bl	8001f2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9c:	223f      	movs	r2, #63	@ 0x3f
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0216 	orr.w	r2, r2, #22
 8001ab2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0208 	orr.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e005      	b.n	8001aea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b02:	f7ff fd95 	bl	8001630 <HAL_GetTick>
 8001b06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d008      	beq.n	8001b26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e052      	b.n	8001bcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0216 	bic.w	r2, r2, #22
 8001b34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <HAL_DMA_Abort+0x62>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0208 	bic.w	r2, r2, #8
 8001b64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b76:	e013      	b.n	8001ba0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b78:	f7ff fd5a 	bl	8001630 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d90c      	bls.n	8001ba0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e015      	b.n	8001bcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1e4      	bne.n	8001b78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb2:	223f      	movs	r2, #63	@ 0x3f
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d004      	beq.n	8001bf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2280      	movs	r2, #128	@ 0x80
 8001bec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00c      	b.n	8001c0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c24:	4b8e      	ldr	r3, [pc, #568]	@ (8001e60 <HAL_DMA_IRQHandler+0x248>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a8e      	ldr	r2, [pc, #568]	@ (8001e64 <HAL_DMA_IRQHandler+0x24c>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	2208      	movs	r2, #8
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01a      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c70:	2208      	movs	r2, #8
 8001c72:	409a      	lsls	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c88:	2201      	movs	r2, #1
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cdc:	2204      	movs	r2, #4
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d043      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03c      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d12:	2210      	movs	r2, #16
 8001d14:	409a      	lsls	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d018      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d024      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
 8001d46:	e01f      	b.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0208 	bic.w	r2, r2, #8
 8001d76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 808f 	beq.w	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8087 	beq.w	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dae:	2220      	movs	r2, #32
 8001db0:	409a      	lsls	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d136      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0216 	bic.w	r2, r2, #22
 8001dd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <HAL_DMA_IRQHandler+0x1da>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0208 	bic.w	r2, r2, #8
 8001e00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e06:	223f      	movs	r2, #63	@ 0x3f
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d07e      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
        }
        return;
 8001e2e:	e079      	b.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01d      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10d      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d031      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
 8001e5c:	e02c      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000
 8001e64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d023      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
 8001e78:	e01e      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10f      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0210 	bic.w	r2, r2, #16
 8001e96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d032      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2205      	movs	r2, #5
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d307      	bcc.n	8001f00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x2cc>
 8001efe:	e000      	b.n	8001f02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
 8001f22:	e000      	b.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f24:	bf00      	nop
    }
  }
}
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b40      	cmp	r3, #64	@ 0x40
 8001f58:	d108      	bne.n	8001f6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f6a:	e007      	b.n	8001f7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3b10      	subs	r3, #16
 8001f98:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <DMA_CalcBaseAndBitshift+0x64>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fa2:	4a13      	ldr	r2, [pc, #76]	@ (8001ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d909      	bls.n	8001fca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	1d1a      	adds	r2, r3, #4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fc8:	e007      	b.n	8001fda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	aaaaaaab 	.word	0xaaaaaaab
 8001ff0:	0800ab90 	.word	0x0800ab90

08001ff4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002004:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11f      	bne.n	800204e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d856      	bhi.n	80020c2 <DMA_CheckFifoParam+0xce>
 8002014:	a201      	add	r2, pc, #4	@ (adr r2, 800201c <DMA_CheckFifoParam+0x28>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	0800202d 	.word	0x0800202d
 8002020:	0800203f 	.word	0x0800203f
 8002024:	0800202d 	.word	0x0800202d
 8002028:	080020c3 	.word	0x080020c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002030:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d046      	beq.n	80020c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203c:	e043      	b.n	80020c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002046:	d140      	bne.n	80020ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204c:	e03d      	b.n	80020ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002056:	d121      	bne.n	800209c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d837      	bhi.n	80020ce <DMA_CheckFifoParam+0xda>
 800205e:	a201      	add	r2, pc, #4	@ (adr r2, 8002064 <DMA_CheckFifoParam+0x70>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002075 	.word	0x08002075
 8002068:	0800207b 	.word	0x0800207b
 800206c:	08002075 	.word	0x08002075
 8002070:	0800208d 	.word	0x0800208d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e030      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d025      	beq.n	80020d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208a:	e022      	b.n	80020d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002094:	d11f      	bne.n	80020d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800209a:	e01c      	b.n	80020d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d903      	bls.n	80020aa <DMA_CheckFifoParam+0xb6>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d003      	beq.n	80020b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020a8:	e018      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
      break;
 80020ae:	e015      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e00b      	b.n	80020da <DMA_CheckFifoParam+0xe6>
      break;
 80020c2:	bf00      	nop
 80020c4:	e00a      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020c6:	bf00      	nop
 80020c8:	e008      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020ca:	bf00      	nop
 80020cc:	e006      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020ce:	bf00      	nop
 80020d0:	e004      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e002      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;   
 80020d6:	bf00      	nop
 80020d8:	e000      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
    }
  } 
  
  return status; 
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e177      	b.n	80023f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 8166 	bne.w	80023f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d005      	beq.n	800213e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	2b02      	cmp	r3, #2
 800213c:	d130      	bne.n	80021a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 0201 	and.w	r2, r3, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d017      	beq.n	80021dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d123      	bne.n	8002230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80c0 	beq.w	80023f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b66      	ldr	r3, [pc, #408]	@ (8002410 <HAL_GPIO_Init+0x324>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	4a65      	ldr	r2, [pc, #404]	@ (8002410 <HAL_GPIO_Init+0x324>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002280:	6453      	str	r3, [r2, #68]	@ 0x44
 8002282:	4b63      	ldr	r3, [pc, #396]	@ (8002410 <HAL_GPIO_Init+0x324>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228e:	4a61      	ldr	r2, [pc, #388]	@ (8002414 <HAL_GPIO_Init+0x328>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a58      	ldr	r2, [pc, #352]	@ (8002418 <HAL_GPIO_Init+0x32c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d037      	beq.n	800232a <HAL_GPIO_Init+0x23e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a57      	ldr	r2, [pc, #348]	@ (800241c <HAL_GPIO_Init+0x330>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <HAL_GPIO_Init+0x23a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a56      	ldr	r2, [pc, #344]	@ (8002420 <HAL_GPIO_Init+0x334>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02b      	beq.n	8002322 <HAL_GPIO_Init+0x236>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a55      	ldr	r2, [pc, #340]	@ (8002424 <HAL_GPIO_Init+0x338>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d025      	beq.n	800231e <HAL_GPIO_Init+0x232>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a54      	ldr	r2, [pc, #336]	@ (8002428 <HAL_GPIO_Init+0x33c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01f      	beq.n	800231a <HAL_GPIO_Init+0x22e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a53      	ldr	r2, [pc, #332]	@ (800242c <HAL_GPIO_Init+0x340>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x22a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a52      	ldr	r2, [pc, #328]	@ (8002430 <HAL_GPIO_Init+0x344>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x226>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a51      	ldr	r2, [pc, #324]	@ (8002434 <HAL_GPIO_Init+0x348>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x222>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a50      	ldr	r2, [pc, #320]	@ (8002438 <HAL_GPIO_Init+0x34c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x21e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4f      	ldr	r2, [pc, #316]	@ (800243c <HAL_GPIO_Init+0x350>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x21a>
 8002302:	2309      	movs	r3, #9
 8002304:	e012      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002306:	230a      	movs	r3, #10
 8002308:	e010      	b.n	800232c <HAL_GPIO_Init+0x240>
 800230a:	2308      	movs	r3, #8
 800230c:	e00e      	b.n	800232c <HAL_GPIO_Init+0x240>
 800230e:	2307      	movs	r3, #7
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002312:	2306      	movs	r3, #6
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x240>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x240>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x240>
 800232a:	2300      	movs	r3, #0
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800233c:	4935      	ldr	r1, [pc, #212]	@ (8002414 <HAL_GPIO_Init+0x328>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234a:	4b3d      	ldr	r3, [pc, #244]	@ (8002440 <HAL_GPIO_Init+0x354>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236e:	4a34      	ldr	r2, [pc, #208]	@ (8002440 <HAL_GPIO_Init+0x354>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002374:	4b32      	ldr	r3, [pc, #200]	@ (8002440 <HAL_GPIO_Init+0x354>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002398:	4a29      	ldr	r2, [pc, #164]	@ (8002440 <HAL_GPIO_Init+0x354>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800239e:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <HAL_GPIO_Init+0x354>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002440 <HAL_GPIO_Init+0x354>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <HAL_GPIO_Init+0x354>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ec:	4a14      	ldr	r2, [pc, #80]	@ (8002440 <HAL_GPIO_Init+0x354>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	f67f ae84 	bls.w	8002108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3724      	adds	r7, #36	@ 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40013800 	.word	0x40013800
 8002418:	40020000 	.word	0x40020000
 800241c:	40020400 	.word	0x40020400
 8002420:	40020800 	.word	0x40020800
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40021000 	.word	0x40021000
 800242c:	40021400 	.word	0x40021400
 8002430:	40021800 	.word	0x40021800
 8002434:	40021c00 	.word	0x40021c00
 8002438:	40022000 	.word	0x40022000
 800243c:	40022400 	.word	0x40022400
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43d9      	mvns	r1, r3
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af02      	add	r7, sp, #8
 80024b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e101      	b.n	80026c0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f007 fa16 	bl	8009908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2203      	movs	r2, #3
 80024e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ea:	d102      	bne.n	80024f2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fdef 	bl	80060da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7c1a      	ldrb	r2, [r3, #16]
 8002504:	f88d 2000 	strb.w	r2, [sp]
 8002508:	3304      	adds	r3, #4
 800250a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800250c:	f003 fcce 	bl	8005eac <USB_CoreInit>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0ce      	b.n	80026c0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fde7 	bl	80060fc <USB_SetCurrentMode>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0bf      	b.n	80026c0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e04a      	b.n	80025dc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	3315      	adds	r3, #21
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3314      	adds	r3, #20
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	b298      	uxth	r0, r3
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	332e      	adds	r3, #46	@ 0x2e
 8002582:	4602      	mov	r2, r0
 8002584:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	3318      	adds	r3, #24
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	331c      	adds	r3, #28
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3320      	adds	r3, #32
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	3324      	adds	r3, #36	@ 0x24
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	3301      	adds	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	791b      	ldrb	r3, [r3, #4]
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3af      	bcc.n	8002546 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e044      	b.n	8002676 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	3301      	adds	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	429a      	cmp	r2, r3
 800267e:	d3b5      	bcc.n	80025ec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7c1a      	ldrb	r2, [r3, #16]
 8002688:	f88d 2000 	strb.w	r2, [sp]
 800268c:	3304      	adds	r3, #4
 800268e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002690:	f003 fd80 	bl	8006194 <USB_DevInit>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00c      	b.n	80026c0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f004 fdc4 	bl	8007246 <USB_DevDisconnect>

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_PCD_Start+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e022      	b.n	800272a <HAL_PCD_Start+0x62>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d009      	beq.n	800270c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fcd1 	bl	80060b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fd72 	bl	8007204 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002732:	b590      	push	{r4, r7, lr}
 8002734:	b08d      	sub	sp, #52	@ 0x34
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fe30 	bl	80073ae <USB_GetMode>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 848c 	bne.w	800306e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fd94 	bl	8007288 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8482 	beq.w	800306c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f004 fd81 	bl	8007288 <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f002 0202 	and.w	r2, r2, #2
 800279e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 fd6f 	bl	8007288 <USB_ReadInterrupts>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d161      	bne.n	8002878 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0210 	bic.w	r2, r2, #16
 80027c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 020f 	and.w	r2, r3, #15
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	0c5b      	lsrs	r3, r3, #17
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d124      	bne.n	800283a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d035      	beq.n	8002868 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	6a38      	ldr	r0, [r7, #32]
 8002810:	f004 fba6 	bl	8006f60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002820:	441a      	add	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002832:	441a      	add	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	615a      	str	r2, [r3, #20]
 8002838:	e016      	b.n	8002868 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	0c5b      	lsrs	r3, r3, #17
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	2b06      	cmp	r3, #6
 8002844:	d110      	bne.n	8002868 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800284c:	2208      	movs	r2, #8
 800284e:	4619      	mov	r1, r3
 8002850:	6a38      	ldr	r0, [r7, #32]
 8002852:	f004 fb85 	bl	8006f60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002862:	441a      	add	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0210 	orr.w	r2, r2, #16
 8002876:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f004 fd03 	bl	8007288 <USB_ReadInterrupts>
 8002882:	4603      	mov	r3, r0
 8002884:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002888:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800288c:	f040 80a7 	bne.w	80029de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f004 fd08 	bl	80072ae <USB_ReadDevAllOutEpInterrupt>
 800289e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028a0:	e099      	b.n	80029d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 808e 	beq.w	80029ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 fd2c 	bl	8007316 <USB_ReadDevOutEPInterrupt>
 80028be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d6:	461a      	mov	r2, r3
 80028d8:	2301      	movs	r3, #1
 80028da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fea2 	bl	8003628 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fa:	461a      	mov	r2, r3
 80028fc:	2308      	movs	r3, #8
 80028fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 ff78 	bl	80037f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800291e:	461a      	mov	r2, r3
 8002920:	2310      	movs	r3, #16
 8002922:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d030      	beq.n	8002990 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002936:	2b80      	cmp	r3, #128	@ 0x80
 8002938:	d109      	bne.n	800294e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002948:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800294c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800294e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	3304      	adds	r3, #4
 8002962:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	78db      	ldrb	r3, [r3, #3]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d108      	bne.n	800297e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2200      	movs	r2, #0
 8002970:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f007 f8cb 	bl	8009b14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800298a:	461a      	mov	r2, r3
 800298c:	2302      	movs	r3, #2
 800298e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a6:	461a      	mov	r2, r3
 80029a8:	2320      	movs	r3, #32
 80029aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029c2:	461a      	mov	r2, r3
 80029c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	3301      	adds	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f af62 	bne.w	80028a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 fc50 	bl	8007288 <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029f2:	f040 80db 	bne.w	8002bac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fc71 	bl	80072e2 <USB_ReadDevAllInEpInterrupt>
 8002a00:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a06:	e0cd      	b.n	8002ba4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80c2 	beq.w	8002b98 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f004 fc97 	bl	8007352 <USB_ReadDevInEPInterrupt>
 8002a24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d057      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	2201      	movs	r2, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69f9      	ldr	r1, [r7, #28]
 8002a4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a50:	4013      	ands	r3, r2
 8002a52:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a60:	461a      	mov	r2, r3
 8002a62:	2301      	movs	r3, #1
 8002a64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	799b      	ldrb	r3, [r3, #6]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d132      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4403      	add	r3, r0
 8002a8e:	331c      	adds	r3, #28
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4419      	add	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4403      	add	r3, r0
 8002aa2:	3320      	adds	r3, #32
 8002aa4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d113      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x3a2>
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	3324      	adds	r3, #36	@ 0x24
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002acc:	461a      	mov	r2, r3
 8002ace:	2101      	movs	r1, #1
 8002ad0:	f004 fc9e 	bl	8007410 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f006 ff95 	bl	8009a0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af6:	461a      	mov	r2, r3
 8002af8:	2308      	movs	r3, #8
 8002afa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b12:	461a      	mov	r2, r3
 8002b14:	2310      	movs	r3, #16
 8002b16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2340      	movs	r3, #64	@ 0x40
 8002b32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d023      	beq.n	8002b86 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b40:	6a38      	ldr	r0, [r7, #32]
 8002b42:	f003 fc8b 	bl	800645c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	3310      	adds	r3, #16
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	78db      	ldrb	r3, [r3, #3]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d108      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f006 ffe2 	bl	8009b38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b80:	461a      	mov	r2, r3
 8002b82:	2302      	movs	r3, #2
 8002b84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fcbb 	bl	800350e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f47f af2e 	bne.w	8002a08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 fb69 	bl	8007288 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bc0:	d122      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d108      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002be8:	2100      	movs	r1, #0
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fea2 	bl	8003934 <HAL_PCDEx_LPM_Callback>
 8002bf0:	e002      	b.n	8002bf8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f006 ff80 	bl	8009af8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 fb3b 	bl	8007288 <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c1c:	d112      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d102      	bne.n	8002c34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f006 ff3c 	bl	8009aac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c42:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f004 fb1d 	bl	8007288 <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c58:	f040 80b7 	bne.w	8002dca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2110      	movs	r1, #16
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fbf0 	bl	800645c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c80:	e046      	b.n	8002d10 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ca6:	0151      	lsls	r1, r2, #5
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	440a      	add	r2, r1
 8002cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002cb0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cda:	0151      	lsls	r1, r2, #5
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	440a      	add	r2, r1
 8002ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ce4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ce8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cfa:	0151      	lsls	r1, r2, #5
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	440a      	add	r2, r1
 8002d00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	791b      	ldrb	r3, [r3, #4]
 8002d14:	461a      	mov	r2, r3
 8002d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d3b2      	bcc.n	8002c82 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d2a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d2e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7bdb      	ldrb	r3, [r3, #15]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d016      	beq.n	8002d66 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d48:	f043 030b 	orr.w	r3, r3, #11
 8002d4c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d5e:	f043 030b 	orr.w	r3, r3, #11
 8002d62:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d64:	e015      	b.n	8002d92 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d78:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d7c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d8c:	f043 030b 	orr.w	r3, r3, #11
 8002d90:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002da0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002da4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002db4:	461a      	mov	r2, r3
 8002db6:	f004 fb2b 	bl	8007410 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fa5a 	bl	8007288 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dde:	d123      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f004 faf0 	bl	80073ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fbad 	bl	800654e <USB_GetDevSpeed>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681c      	ldr	r4, [r3, #0]
 8002e00:	f001 fa70 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8002e04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f003 f8b1 	bl	8005f74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f006 fe21 	bl	8009a5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 fa2b 	bl	8007288 <USB_ReadInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d10a      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f006 fdfe 	bl	8009a3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f002 0208 	and.w	r2, r2, #8
 8002e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 fa16 	bl	8007288 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e62:	2b80      	cmp	r3, #128	@ 0x80
 8002e64:	d123      	bne.n	8002eae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e72:	2301      	movs	r3, #1
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e76:	e014      	b.n	8002ea2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fb08 	bl	80034ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	791b      	ldrb	r3, [r3, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d3e4      	bcc.n	8002e78 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 f9e8 	bl	8007288 <USB_ReadInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ec2:	d13c      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec8:	e02b      	b.n	8002f22 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3318      	adds	r3, #24
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d115      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ef0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da12      	bge.n	8002f1c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3317      	adds	r3, #23
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fac8 	bl	80034ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	3301      	adds	r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	791b      	ldrb	r3, [r3, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d3cd      	bcc.n	8002eca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 f9a0 	bl	8007288 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f52:	d156      	bne.n	8003002 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f54:	2301      	movs	r3, #1
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f58:	e045      	b.n	8002fe6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d12e      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f82:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	da2b      	bge.n	8002fe0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f94:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d121      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fdc:	6053      	str	r3, [r2, #4]
            break;
 8002fde:	e008      	b.n	8002ff2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	791b      	ldrb	r3, [r3, #4]
 8002fea:	461a      	mov	r2, r3
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d3b3      	bcc.n	8002f5a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f004 f93e 	bl	8007288 <USB_ReadInterrupts>
 800300c:	4603      	mov	r3, r0
 800300e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003016:	d10a      	bne.n	800302e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f006 fd9f 	bl	8009b5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800302c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f004 f928 	bl	8007288 <USB_ReadInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d115      	bne.n	800306e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f006 fd8f 	bl	8009b78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	e000      	b.n	800306e <HAL_PCD_IRQHandler+0x93c>
      return;
 800306c:	bf00      	nop
    }
  }
}
 800306e:	3734      	adds	r7, #52	@ 0x34
 8003070:	46bd      	mov	sp, r7
 8003072:	bd90      	pop	{r4, r7, pc}

08003074 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_PCD_SetAddress+0x1a>
 800308a:	2302      	movs	r3, #2
 800308c:	e012      	b.n	80030b4 <HAL_PCD_SetAddress+0x40>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 f887 	bl	80071b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	70fb      	strb	r3, [r7, #3]
 80030ce:	460b      	mov	r3, r1
 80030d0:	803b      	strh	r3, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	da0f      	bge.n	8003102 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	f003 020f 	and.w	r2, r3, #15
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	3310      	adds	r3, #16
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	705a      	strb	r2, [r3, #1]
 8003100:	e00f      	b.n	8003122 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	3304      	adds	r3, #4
 800311a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800312e:	883a      	ldrh	r2, [r7, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	78ba      	ldrb	r2, [r7, #2]
 8003138:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800314c:	78bb      	ldrb	r3, [r7, #2]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d102      	bne.n	8003158 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_PCD_EP_Open+0xaa>
 8003162:	2302      	movs	r3, #2
 8003164:	e00e      	b.n	8003184 <HAL_PCD_EP_Open+0xc8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fa0f 	bl	8006598 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003182:	7afb      	ldrb	r3, [r7, #11]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319c:	2b00      	cmp	r3, #0
 800319e:	da0f      	bge.n	80031c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 020f 	and.w	r2, r3, #15
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	3310      	adds	r3, #16
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	705a      	strb	r2, [r3, #1]
 80031be:	e00f      	b.n	80031e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	3304      	adds	r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_PCD_EP_Close+0x6e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e00e      	b.n	8003218 <HAL_PCD_EP_Close+0x8c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fa4d 	bl	80066a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	f003 020f 	and.w	r2, r3, #15
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	3304      	adds	r3, #4
 8003248:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2200      	movs	r2, #0
 8003260:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003262:	7afb      	ldrb	r3, [r7, #11]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	b2da      	uxtb	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	799b      	ldrb	r3, [r3, #6]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	799b      	ldrb	r3, [r3, #6]
 8003284:	461a      	mov	r2, r3
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	f003 faea 	bl	8006860 <USB_EPStartXfer>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80032b8:	681b      	ldr	r3, [r3, #0]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	460b      	mov	r3, r1
 80032d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	7afb      	ldrb	r3, [r7, #11]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3310      	adds	r3, #16
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2201      	movs	r2, #1
 8003304:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	b2da      	uxtb	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	799b      	ldrb	r3, [r3, #6]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	799b      	ldrb	r3, [r3, #6]
 8003328:	461a      	mov	r2, r3
 800332a:	6979      	ldr	r1, [r7, #20]
 800332c:	f003 fa98 	bl	8006860 <USB_EPStartXfer>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	7912      	ldrb	r2, [r2, #4]
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e04f      	b.n	80033f8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335c:	2b00      	cmp	r3, #0
 800335e:	da0f      	bge.n	8003380 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 020f 	and.w	r2, r3, #15
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	3310      	adds	r3, #16
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	705a      	strb	r2, [r3, #1]
 800337e:	e00d      	b.n	800339c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	3304      	adds	r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_PCD_EP_SetStall+0x82>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e01d      	b.n	80033f8 <HAL_PCD_EP_SetStall+0xbe>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 fe20 	bl	8007010 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7999      	ldrb	r1, [r3, #6]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033e8:	461a      	mov	r2, r3
 80033ea:	f004 f811 	bl	8007410 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	7912      	ldrb	r2, [r2, #4]
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e042      	b.n	80034a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800341e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003422:	2b00      	cmp	r3, #0
 8003424:	da0f      	bge.n	8003446 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	3310      	adds	r3, #16
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	705a      	strb	r2, [r3, #1]
 8003444:	e00f      	b.n	8003466 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_PCD_EP_ClrStall+0x86>
 8003482:	2302      	movs	r3, #2
 8003484:	e00e      	b.n	80034a4 <HAL_PCD_EP_ClrStall+0xa4>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f003 fe29 	bl	80070ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	da0c      	bge.n	80034da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3310      	adds	r3, #16
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e00c      	b.n	80034f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68f9      	ldr	r1, [r7, #12]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 fc48 	bl	8006d90 <USB_EPStopXfer>
 8003500:	4603      	mov	r3, r0
 8003502:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003504:	7afb      	ldrb	r3, [r7, #11]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b08a      	sub	sp, #40	@ 0x28
 8003512:	af02      	add	r7, sp, #8
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	3310      	adds	r3, #16
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d901      	bls.n	8003546 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e06b      	b.n	800361e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	429a      	cmp	r2, r3
 800355a:	d902      	bls.n	8003562 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3303      	adds	r3, #3
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800356a:	e02a      	b.n	80035c2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	429a      	cmp	r2, r3
 8003580:	d902      	bls.n	8003588 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	3303      	adds	r3, #3
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68d9      	ldr	r1, [r3, #12]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	4603      	mov	r3, r0
 80035a4:	6978      	ldr	r0, [r7, #20]
 80035a6:	f003 fc9d 	bl	8006ee4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	441a      	add	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	441a      	add	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d809      	bhi.n	80035ec <PCD_WriteEmptyTxFifo+0xde>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d203      	bcs.n	80035ec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1bf      	bne.n	800356c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d811      	bhi.n	800361c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	2201      	movs	r2, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800360c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	43db      	mvns	r3, r3
 8003612:	6939      	ldr	r1, [r7, #16]
 8003614:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003618:	4013      	ands	r3, r2
 800361a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	333c      	adds	r3, #60	@ 0x3c
 8003640:	3304      	adds	r3, #4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	799b      	ldrb	r3, [r3, #6]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d17b      	bne.n	8003756 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4a61      	ldr	r2, [pc, #388]	@ (80037f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	f240 80b9 	bls.w	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80b3 	beq.w	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003690:	6093      	str	r3, [r2, #8]
 8003692:	e0a7      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036aa:	461a      	mov	r2, r3
 80036ac:	2320      	movs	r3, #32
 80036ae:	6093      	str	r3, [r2, #8]
 80036b0:	e098      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 8093 	bne.w	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4a4b      	ldr	r2, [pc, #300]	@ (80037f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d90f      	bls.n	80036e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036dc:	461a      	mov	r2, r3
 80036de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e2:	6093      	str	r3, [r2, #8]
 80036e4:	e07e      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	0159      	lsls	r1, r3, #5
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	440b      	add	r3, r1
 8003708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	1ad2      	subs	r2, r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d114      	bne.n	8003748 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003730:	461a      	mov	r2, r3
 8003732:	2101      	movs	r1, #1
 8003734:	f003 fe6c 	bl	8007410 <USB_EP0_OutStart>
 8003738:	e006      	b.n	8003748 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	441a      	add	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f006 f940 	bl	80099d4 <HAL_PCD_DataOutStageCallback>
 8003754:	e046      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4a26      	ldr	r2, [pc, #152]	@ (80037f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d124      	bne.n	80037a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800377a:	6093      	str	r3, [r2, #8]
 800377c:	e032      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	2320      	movs	r3, #32
 8003798:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f006 f917 	bl	80099d4 <HAL_PCD_DataOutStageCallback>
 80037a6:	e01d      	b.n	80037e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d114      	bne.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037d0:	461a      	mov	r2, r3
 80037d2:	2100      	movs	r1, #0
 80037d4:	f003 fe1c 	bl	8007410 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f006 f8f8 	bl	80099d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	4f54300a 	.word	0x4f54300a
 80037f4:	4f54310a 	.word	0x4f54310a

080037f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	333c      	adds	r3, #60	@ 0x3c
 8003810:	3304      	adds	r3, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a15      	ldr	r2, [pc, #84]	@ (8003880 <PCD_EP_OutSetupPacket_int+0x88>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d90e      	bls.n	800384c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800384a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f006 f8af 	bl	80099b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a0a      	ldr	r2, [pc, #40]	@ (8003880 <PCD_EP_OutSetupPacket_int+0x88>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d90c      	bls.n	8003874 <PCD_EP_OutSetupPacket_int+0x7c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	799b      	ldrb	r3, [r3, #6]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800386c:	461a      	mov	r2, r3
 800386e:	2101      	movs	r1, #1
 8003870:	f003 fdce 	bl	8007410 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	4f54300a 	.word	0x4f54300a

08003884 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
 8003890:	4613      	mov	r3, r2
 8003892:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d107      	bne.n	80038b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038a2:	883b      	ldrh	r3, [r7, #0]
 80038a4:	0419      	lsls	r1, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80038b0:	e028      	b.n	8003904 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	e00d      	b.n	80038e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	3340      	adds	r3, #64	@ 0x40
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	3301      	adds	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	7bfa      	ldrb	r2, [r7, #15]
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d3ec      	bcc.n	80038c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038ec:	883b      	ldrh	r3, [r7, #0]
 80038ee:	0418      	lsls	r0, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	4302      	orrs	r2, r0
 80038fc:	3340      	adds	r3, #64	@ 0x40
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	887a      	ldrh	r2, [r7, #2]
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e267      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d075      	beq.n	8003a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800396a:	4b88      	ldr	r3, [pc, #544]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b04      	cmp	r3, #4
 8003974:	d00c      	beq.n	8003990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003976:	4b85      	ldr	r3, [pc, #532]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397e:	2b08      	cmp	r3, #8
 8003980:	d112      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003982:	4b82      	ldr	r3, [pc, #520]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800398a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800398e:	d10b      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	4b7e      	ldr	r3, [pc, #504]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05b      	beq.n	8003a54 <HAL_RCC_OscConfig+0x108>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d157      	bne.n	8003a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e242      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x74>
 80039b2:	4b76      	ldr	r3, [pc, #472]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a75      	ldr	r2, [pc, #468]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e01d      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x98>
 80039ca:	4b70      	ldr	r3, [pc, #448]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6f      	ldr	r2, [pc, #444]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a6c      	ldr	r2, [pc, #432]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039e4:	4b69      	ldr	r3, [pc, #420]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a68      	ldr	r2, [pc, #416]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b66      	ldr	r3, [pc, #408]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a65      	ldr	r2, [pc, #404]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fd fe14 	bl	8001630 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fe10 	bl	8001630 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	@ 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e207      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0xc0>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fe00 	bl	8001630 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fd fdfc 	bl	8001630 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1f3      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	4b51      	ldr	r3, [pc, #324]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0xe8>
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a62:	4b4a      	ldr	r3, [pc, #296]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6e:	4b47      	ldr	r3, [pc, #284]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d11c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7a:	4b44      	ldr	r3, [pc, #272]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d116      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_RCC_OscConfig+0x152>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e1c7      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4937      	ldr	r1, [pc, #220]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	e03a      	b.n	8003b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003abc:	4b34      	ldr	r3, [pc, #208]	@ (8003b90 <HAL_RCC_OscConfig+0x244>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fd fdb5 	bl	8001630 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aca:	f7fd fdb1 	bl	8001630 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e1a8      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae8:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4925      	ldr	r1, [pc, #148]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
 8003afc:	e015      	b.n	8003b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afe:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <HAL_RCC_OscConfig+0x244>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fd94 	bl	8001630 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0c:	f7fd fd90 	bl	8001630 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e187      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d036      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3e:	4b15      	ldr	r3, [pc, #84]	@ (8003b94 <HAL_RCC_OscConfig+0x248>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fd fd74 	bl	8001630 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7fd fd70 	bl	8001630 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e167      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <HAL_RCC_OscConfig+0x240>)
 8003b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x200>
 8003b6a:	e01b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6c:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_RCC_OscConfig+0x248>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b72:	f7fd fd5d 	bl	8001630 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	e00e      	b.n	8003b98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fd fd59 	bl	8001630 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d907      	bls.n	8003b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e150      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	42470000 	.word	0x42470000
 8003b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	4b88      	ldr	r3, [pc, #544]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ea      	bne.n	8003b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8097 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb6:	4b81      	ldr	r3, [pc, #516]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	4b7d      	ldr	r3, [pc, #500]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	4a7c      	ldr	r2, [pc, #496]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bde:	2301      	movs	r3, #1
 8003be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b77      	ldr	r3, [pc, #476]	@ (8003dc0 <HAL_RCC_OscConfig+0x474>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d118      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bee:	4b74      	ldr	r3, [pc, #464]	@ (8003dc0 <HAL_RCC_OscConfig+0x474>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a73      	ldr	r2, [pc, #460]	@ (8003dc0 <HAL_RCC_OscConfig+0x474>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfa:	f7fd fd19 	bl	8001630 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fd fd15 	bl	8001630 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e10c      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc0 <HAL_RCC_OscConfig+0x474>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_OscConfig+0x2ea>
 8003c28:	4b64      	ldr	r3, [pc, #400]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2c:	4a63      	ldr	r2, [pc, #396]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c34:	e01c      	b.n	8003c70 <HAL_RCC_OscConfig+0x324>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x30c>
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c42:	4a5e      	ldr	r2, [pc, #376]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c44:	f043 0304 	orr.w	r3, r3, #4
 8003c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4a:	4b5c      	ldr	r3, [pc, #368]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0x324>
 8003c58:	4b58      	ldr	r3, [pc, #352]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5c:	4a57      	ldr	r2, [pc, #348]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c64:	4b55      	ldr	r3, [pc, #340]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c68:	4a54      	ldr	r2, [pc, #336]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c6a:	f023 0304 	bic.w	r3, r3, #4
 8003c6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d015      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd fcda 	bl	8001630 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fd fcd6 	bl	8001630 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e0cb      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	4b49      	ldr	r3, [pc, #292]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ee      	beq.n	8003c80 <HAL_RCC_OscConfig+0x334>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fcc4 	bl	8001630 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd fcc0 	bl	8001630 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0b5      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ee      	bne.n	8003cac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd4:	4b39      	ldr	r3, [pc, #228]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	4a38      	ldr	r2, [pc, #224]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a1 	beq.w	8003e2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cea:	4b34      	ldr	r3, [pc, #208]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d05c      	beq.n	8003db0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d141      	bne.n	8003d82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b31      	ldr	r3, [pc, #196]	@ (8003dc4 <HAL_RCC_OscConfig+0x478>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd fc94 	bl	8001630 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fd fc90 	bl	8001630 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e087      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	019b      	lsls	r3, r3, #6
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	041b      	lsls	r3, r3, #16
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	061b      	lsls	r3, r3, #24
 8003d4e:	491b      	ldr	r1, [pc, #108]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d54:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc4 <HAL_RCC_OscConfig+0x478>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fc69 	bl	8001630 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fd fc65 	bl	8001630 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e05c      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	4b11      	ldr	r3, [pc, #68]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x416>
 8003d80:	e054      	b.n	8003e2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <HAL_RCC_OscConfig+0x478>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fd fc52 	bl	8001630 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fd fc4e 	bl	8001630 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e045      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <HAL_RCC_OscConfig+0x470>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x444>
 8003dae:	e03d      	b.n	8003e2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e038      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e38 <HAL_RCC_OscConfig+0x4ec>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d028      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d121      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d11a      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d111      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	3b01      	subs	r3, #1
 8003e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800

08003e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0cc      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e50:	4b68      	ldr	r3, [pc, #416]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d90c      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b65      	ldr	r3, [pc, #404]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b63      	ldr	r3, [pc, #396]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0b8      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e90:	4b59      	ldr	r3, [pc, #356]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4a58      	ldr	r2, [pc, #352]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea8:	4b53      	ldr	r3, [pc, #332]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a52      	ldr	r2, [pc, #328]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb4:	4b50      	ldr	r3, [pc, #320]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	494d      	ldr	r1, [pc, #308]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d044      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b47      	ldr	r3, [pc, #284]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d119      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e07f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d003      	beq.n	8003efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e06f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e067      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1a:	4b37      	ldr	r3, [pc, #220]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f023 0203 	bic.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4934      	ldr	r1, [pc, #208]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f2c:	f7fd fb80 	bl	8001630 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f34:	f7fd fb7c 	bl	8001630 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e04f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 020c 	and.w	r2, r3, #12
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d1eb      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d20c      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b22      	ldr	r3, [pc, #136]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b20      	ldr	r3, [pc, #128]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e032      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f90:	4b19      	ldr	r3, [pc, #100]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4916      	ldr	r1, [pc, #88]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fae:	4b12      	ldr	r3, [pc, #72]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	490e      	ldr	r1, [pc, #56]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fc2:	f000 f889 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	490a      	ldr	r1, [pc, #40]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	5ccb      	ldrb	r3, [r1, r3]
 8003fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fda:	4a09      	ldr	r2, [pc, #36]	@ (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fde:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd fae0 	bl	80015a8 <HAL_InitTick>

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023c00 	.word	0x40023c00
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	0800ab78 	.word	0x0800ab78
 8004000:	20000000 	.word	0x20000000
 8004004:	20000004 	.word	0x20000004

08004008 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d129      	bne.n	800406e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6313      	str	r3, [r2, #48]	@ 0x30
 800402a:	4b28      	ldr	r3, [pc, #160]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800403a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403c:	2302      	movs	r3, #2
 800403e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004040:	2303      	movs	r3, #3
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004048:	2300      	movs	r3, #0
 800404a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800404c:	f107 031c 	add.w	r3, r7, #28
 8004050:	4619      	mov	r1, r3
 8004052:	481f      	ldr	r0, [pc, #124]	@ (80040d0 <HAL_RCC_MCOConfig+0xc8>)
 8004054:	f7fe f84a 	bl	80020ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004058:	4b1c      	ldr	r3, [pc, #112]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	430b      	orrs	r3, r1
 8004066:	4919      	ldr	r1, [pc, #100]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800406c:	e029      	b.n	80040c2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	4b16      	ldr	r3, [pc, #88]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	4a15      	ldr	r2, [pc, #84]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	6313      	str	r3, [r2, #48]	@ 0x30
 800407e:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800408a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800408e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004094:	2303      	movs	r3, #3
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004098:	2300      	movs	r3, #0
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800409c:	2300      	movs	r3, #0
 800409e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80040a0:	f107 031c 	add.w	r3, r7, #28
 80040a4:	4619      	mov	r1, r3
 80040a6:	480b      	ldr	r0, [pc, #44]	@ (80040d4 <HAL_RCC_MCOConfig+0xcc>)
 80040a8:	f7fe f820 	bl	80020ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80040ac:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	00d9      	lsls	r1, r3, #3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	430b      	orrs	r3, r1
 80040bc:	4903      	ldr	r1, [pc, #12]	@ (80040cc <HAL_RCC_MCOConfig+0xc4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
}
 80040c2:	bf00      	nop
 80040c4:	3730      	adds	r7, #48	@ 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40020000 	.word	0x40020000
 80040d4:	40020800 	.word	0x40020800

080040d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b094      	sub	sp, #80	@ 0x50
 80040de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e4:	2300      	movs	r3, #0
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e8:	2300      	movs	r3, #0
 80040ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f0:	4b79      	ldr	r3, [pc, #484]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d00d      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x40>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	f200 80e1 	bhi.w	80042c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x34>
 8004106:	2b04      	cmp	r3, #4
 8004108:	d003      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x3a>
 800410a:	e0db      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b73      	ldr	r3, [pc, #460]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x204>)
 800410e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004110:	e0db      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004112:	4b73      	ldr	r3, [pc, #460]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004114:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004116:	e0d8      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004118:	4b6f      	ldr	r3, [pc, #444]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004120:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004122:	4b6d      	ldr	r3, [pc, #436]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d063      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b6a      	ldr	r3, [pc, #424]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	2200      	movs	r2, #0
 8004136:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004138:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800413a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800413c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004140:	633b      	str	r3, [r7, #48]	@ 0x30
 8004142:	2300      	movs	r3, #0
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
 8004146:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800414a:	4622      	mov	r2, r4
 800414c:	462b      	mov	r3, r5
 800414e:	f04f 0000 	mov.w	r0, #0
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	0159      	lsls	r1, r3, #5
 8004158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415c:	0150      	lsls	r0, r2, #5
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4621      	mov	r1, r4
 8004164:	1a51      	subs	r1, r2, r1
 8004166:	6139      	str	r1, [r7, #16]
 8004168:	4629      	mov	r1, r5
 800416a:	eb63 0301 	sbc.w	r3, r3, r1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800417c:	4659      	mov	r1, fp
 800417e:	018b      	lsls	r3, r1, #6
 8004180:	4651      	mov	r1, sl
 8004182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004186:	4651      	mov	r1, sl
 8004188:	018a      	lsls	r2, r1, #6
 800418a:	4651      	mov	r1, sl
 800418c:	ebb2 0801 	subs.w	r8, r2, r1
 8004190:	4659      	mov	r1, fp
 8004192:	eb63 0901 	sbc.w	r9, r3, r1
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041aa:	4690      	mov	r8, r2
 80041ac:	4699      	mov	r9, r3
 80041ae:	4623      	mov	r3, r4
 80041b0:	eb18 0303 	adds.w	r3, r8, r3
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	462b      	mov	r3, r5
 80041b8:	eb49 0303 	adc.w	r3, r9, r3
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041ca:	4629      	mov	r1, r5
 80041cc:	024b      	lsls	r3, r1, #9
 80041ce:	4621      	mov	r1, r4
 80041d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041d4:	4621      	mov	r1, r4
 80041d6:	024a      	lsls	r2, r1, #9
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041de:	2200      	movs	r2, #0
 80041e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041e8:	f7fc f85a 	bl	80002a0 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4613      	mov	r3, r2
 80041f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f4:	e058      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f6:	4b38      	ldr	r3, [pc, #224]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	099b      	lsrs	r3, r3, #6
 80041fc:	2200      	movs	r2, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	4611      	mov	r1, r2
 8004202:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004206:	623b      	str	r3, [r7, #32]
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
 800420c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004210:	4642      	mov	r2, r8
 8004212:	464b      	mov	r3, r9
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	0159      	lsls	r1, r3, #5
 800421e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004222:	0150      	lsls	r0, r2, #5
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4641      	mov	r1, r8
 800422a:	ebb2 0a01 	subs.w	sl, r2, r1
 800422e:	4649      	mov	r1, r9
 8004230:	eb63 0b01 	sbc.w	fp, r3, r1
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004240:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004244:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004248:	ebb2 040a 	subs.w	r4, r2, sl
 800424c:	eb63 050b 	sbc.w	r5, r3, fp
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	00eb      	lsls	r3, r5, #3
 800425a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425e:	00e2      	lsls	r2, r4, #3
 8004260:	4614      	mov	r4, r2
 8004262:	461d      	mov	r5, r3
 8004264:	4643      	mov	r3, r8
 8004266:	18e3      	adds	r3, r4, r3
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	464b      	mov	r3, r9
 800426c:	eb45 0303 	adc.w	r3, r5, r3
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800427e:	4629      	mov	r1, r5
 8004280:	028b      	lsls	r3, r1, #10
 8004282:	4621      	mov	r1, r4
 8004284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004288:	4621      	mov	r1, r4
 800428a:	028a      	lsls	r2, r1, #10
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004292:	2200      	movs	r2, #0
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	61fa      	str	r2, [r7, #28]
 8004298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800429c:	f7fc f800 	bl	80002a0 <__aeabi_uldivmod>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4613      	mov	r3, r2
 80042a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	3301      	adds	r3, #1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80042b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042c2:	e002      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x204>)
 80042c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3750      	adds	r7, #80	@ 0x50
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	007a1200 	.word	0x007a1200

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b03      	ldr	r3, [pc, #12]	@ (80042f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000000 	.word	0x20000000

080042fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004300:	f7ff fff0 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0a9b      	lsrs	r3, r3, #10
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4903      	ldr	r1, [pc, #12]	@ (8004320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	0800ab88 	.word	0x0800ab88

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004328:	f7ff ffdc 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0b5b      	lsrs	r3, r3, #13
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4903      	ldr	r1, [pc, #12]	@ (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	0800ab88 	.word	0x0800ab88

0800434c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e041      	b.n	80043e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fc70 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f000 fa7e 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d001      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e04e      	b.n	80044a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a23      	ldr	r2, [pc, #140]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442e:	d01d      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1c      	ldr	r2, [pc, #112]	@ (80044bc <HAL_TIM_Base_Start_IT+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1b      	ldr	r2, [pc, #108]	@ (80044c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a19      	ldr	r2, [pc, #100]	@ (80044c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d010      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	e007      	b.n	80044a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40010400 	.word	0x40010400
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40001800 	.word	0x40001800

080044cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d020      	beq.n	8004530 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01b      	beq.n	8004530 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0202 	mvn.w	r2, #2
 8004500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f999 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f98b 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f99c 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d020      	beq.n	800457c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0204 	mvn.w	r2, #4
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f973 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f965 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f976 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d020      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01b      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0208 	mvn.w	r2, #8
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f94d 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f93f 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f950 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d020      	beq.n	8004614 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01b      	beq.n	8004614 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0210 	mvn.w	r2, #16
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2208      	movs	r2, #8
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f927 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f919 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f92a 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0201 	mvn.w	r2, #1
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc f9e4 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fae4 	bl	8004c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8fb 	bl	8004876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0220 	mvn.w	r2, #32
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fab6 	bl	8004c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_TIM_ConfigClockSource+0x1c>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e0b4      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x186>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004700:	d03e      	beq.n	8004780 <HAL_TIM_ConfigClockSource+0xd4>
 8004702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004706:	f200 8087 	bhi.w	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470e:	f000 8086 	beq.w	800481e <HAL_TIM_ConfigClockSource+0x172>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004716:	d87f      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b70      	cmp	r3, #112	@ 0x70
 800471a:	d01a      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xa6>
 800471c:	2b70      	cmp	r3, #112	@ 0x70
 800471e:	d87b      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b60      	cmp	r3, #96	@ 0x60
 8004722:	d050      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004724:	2b60      	cmp	r3, #96	@ 0x60
 8004726:	d877      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b50      	cmp	r3, #80	@ 0x50
 800472a:	d03c      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xfa>
 800472c:	2b50      	cmp	r3, #80	@ 0x50
 800472e:	d873      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b40      	cmp	r3, #64	@ 0x40
 8004732:	d058      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004734:	2b40      	cmp	r3, #64	@ 0x40
 8004736:	d86f      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b30      	cmp	r3, #48	@ 0x30
 800473a:	d064      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x15a>
 800473c:	2b30      	cmp	r3, #48	@ 0x30
 800473e:	d86b      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b20      	cmp	r3, #32
 8004742:	d060      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	2b20      	cmp	r3, #32
 8004746:	d867      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d05c      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x15a>
 800474c:	2b10      	cmp	r3, #16
 800474e:	d05a      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	e062      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004762:	f000 f9b9 	bl	8004ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	609a      	str	r2, [r3, #8]
      break;
 800477e:	e04f      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004790:	f000 f9a2 	bl	8004ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047a2:	609a      	str	r2, [r3, #8]
      break;
 80047a4:	e03c      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b2:	461a      	mov	r2, r3
 80047b4:	f000 f916 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2150      	movs	r1, #80	@ 0x50
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 f96f 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80047c4:	e02c      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d2:	461a      	mov	r2, r3
 80047d4:	f000 f935 	bl	8004a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2160      	movs	r1, #96	@ 0x60
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f95f 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80047e4:	e01c      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	461a      	mov	r2, r3
 80047f4:	f000 f8f6 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2140      	movs	r1, #64	@ 0x40
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f94f 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004804:	e00c      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f000 f946 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004816:	e003      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
      break;
 800481c:	e000      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800481e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a46      	ldr	r2, [pc, #280]	@ (80049b8 <TIM_Base_SetConfig+0x12c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a43      	ldr	r2, [pc, #268]	@ (80049bc <TIM_Base_SetConfig+0x130>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a42      	ldr	r2, [pc, #264]	@ (80049c0 <TIM_Base_SetConfig+0x134>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a41      	ldr	r2, [pc, #260]	@ (80049c4 <TIM_Base_SetConfig+0x138>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a40      	ldr	r2, [pc, #256]	@ (80049c8 <TIM_Base_SetConfig+0x13c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a35      	ldr	r2, [pc, #212]	@ (80049b8 <TIM_Base_SetConfig+0x12c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ec:	d027      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a32      	ldr	r2, [pc, #200]	@ (80049bc <TIM_Base_SetConfig+0x130>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d023      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a31      	ldr	r2, [pc, #196]	@ (80049c0 <TIM_Base_SetConfig+0x134>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a30      	ldr	r2, [pc, #192]	@ (80049c4 <TIM_Base_SetConfig+0x138>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2f      	ldr	r2, [pc, #188]	@ (80049c8 <TIM_Base_SetConfig+0x13c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2e      	ldr	r2, [pc, #184]	@ (80049cc <TIM_Base_SetConfig+0x140>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2d      	ldr	r2, [pc, #180]	@ (80049d0 <TIM_Base_SetConfig+0x144>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2c      	ldr	r2, [pc, #176]	@ (80049d4 <TIM_Base_SetConfig+0x148>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2b      	ldr	r2, [pc, #172]	@ (80049d8 <TIM_Base_SetConfig+0x14c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2a      	ldr	r2, [pc, #168]	@ (80049dc <TIM_Base_SetConfig+0x150>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a29      	ldr	r2, [pc, #164]	@ (80049e0 <TIM_Base_SetConfig+0x154>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a10      	ldr	r2, [pc, #64]	@ (80049b8 <TIM_Base_SetConfig+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a12      	ldr	r2, [pc, #72]	@ (80049c8 <TIM_Base_SetConfig+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d105      	bne.n	80049aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]
  }
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800
 80049d8:	40001800 	.word	0x40001800
 80049dc:	40001c00 	.word	0x40001c00
 80049e0:	40002000 	.word	0x40002000

080049e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0201 	bic.w	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 030a 	bic.w	r3, r3, #10
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f023 0210 	bic.w	r2, r3, #16
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	031b      	lsls	r3, r3, #12
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f043 0307 	orr.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	609a      	str	r2, [r3, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e05a      	b.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a21      	ldr	r2, [pc, #132]	@ (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d022      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7c:	d01d      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d018      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1a      	ldr	r2, [pc, #104]	@ (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00e      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d009      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40010400 	.word	0x40010400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40001800 	.word	0x40001800

08004c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e042      	b.n	8004cd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc f8a0 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2224      	movs	r2, #36	@ 0x24
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fea1 	bl	80059c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08c      	sub	sp, #48	@ 0x30
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d14a      	bne.n	8004d88 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e043      	b.n	8004d8a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	461a      	mov	r2, r3
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fbf5 	bl	8005504 <UART_Start_Receive_DMA>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004d20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d12c      	bne.n	8004d82 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d125      	bne.n	8004d7c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	617b      	str	r3, [r7, #20]
   return(result);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f043 0310 	orr.w	r3, r3, #16
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d66:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6a39      	ldr	r1, [r7, #32]
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e5      	bne.n	8004d46 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004d7a:	e002      	b.n	8004d82 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d86:	e000      	b.n	8004d8a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3730      	adds	r7, #48	@ 0x30
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b0ba      	sub	sp, #232	@ 0xe8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <HAL_UART_IRQHandler+0x66>
 8004de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fd27 	bl	8005846 <UART_Receive_IT>
      return;
 8004df8:	e25b      	b.n	80052b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80de 	beq.w	8004fc0 <HAL_UART_IRQHandler+0x22c>
 8004e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80d1 	beq.w	8004fc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <HAL_UART_IRQHandler+0xae>
 8004e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_UART_IRQHandler+0xd2>
 8004e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f043 0202 	orr.w	r2, r3, #2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00b      	beq.n	8004e8a <HAL_UART_IRQHandler+0xf6>
 8004e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	f043 0204 	orr.w	r2, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d011      	beq.n	8004eba <HAL_UART_IRQHandler+0x126>
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb2:	f043 0208 	orr.w	r2, r3, #8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 81f2 	beq.w	80052a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x14e>
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fcb2 	bl	8005846 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eec:	2b40      	cmp	r3, #64	@ 0x40
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <HAL_UART_IRQHandler+0x17a>
 8004f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d04f      	beq.n	8004fae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fbba 	bl	8005688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1e:	2b40      	cmp	r3, #64	@ 0x40
 8004f20:	d141      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3314      	adds	r3, #20
 8004f28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1d9      	bne.n	8004f22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d013      	beq.n	8004f9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8005174 <HAL_UART_IRQHandler+0x3e0>)
 8004f7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fc fe26 	bl	8001bd4 <HAL_DMA_Abort_IT>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9c:	e00e      	b.n	8004fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9a8 	bl	80052f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	e00a      	b.n	8004fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f9a4 	bl	80052f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	e006      	b.n	8004fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f9a0 	bl	80052f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fba:	e175      	b.n	80052a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	bf00      	nop
    return;
 8004fbe:	e173      	b.n	80052a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	f040 814f 	bne.w	8005268 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8148 	beq.w	8005268 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8141 	beq.w	8005268 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005006:	2b40      	cmp	r3, #64	@ 0x40
 8005008:	f040 80b6 	bne.w	8005178 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8145 	beq.w	80052ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800502a:	429a      	cmp	r2, r3
 800502c:	f080 813e 	bcs.w	80052ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005036:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005042:	f000 8088 	beq.w	8005156 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800505c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005072:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800507e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800508a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1d9      	bne.n	8005046 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e1      	bne.n	8005092 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3314      	adds	r3, #20
 80050d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005126:	f023 0310 	bic.w	r3, r3, #16
 800512a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005138:	65ba      	str	r2, [r7, #88]	@ 0x58
 800513a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800513e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e3      	bne.n	8005114 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	4618      	mov	r0, r3
 8005152:	f7fc fccf 	bl	8001af4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005164:	b29b      	uxth	r3, r3
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	b29b      	uxth	r3, r3
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fb fc5f 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005172:	e09b      	b.n	80052ac <HAL_UART_IRQHandler+0x518>
 8005174:	0800574f 	.word	0x0800574f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005180:	b29b      	uxth	r3, r3
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 808e 	beq.w	80052b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8089 	beq.w	80052b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	330c      	adds	r3, #12
 80051be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80051c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e3      	bne.n	800519e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	623b      	str	r3, [r7, #32]
   return(result);
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3314      	adds	r3, #20
 80051f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80051fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e3      	bne.n	80051d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	60fb      	str	r3, [r7, #12]
   return(result);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0310 	bic.w	r3, r3, #16
 8005232:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005240:	61fa      	str	r2, [r7, #28]
 8005242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	69b9      	ldr	r1, [r7, #24]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	617b      	str	r3, [r7, #20]
   return(result);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e3      	bne.n	800521c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800525a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fb fbe5 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005266:	e023      	b.n	80052b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <HAL_UART_IRQHandler+0x4f4>
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fa78 	bl	8005776 <UART_Transmit_IT>
    return;
 8005286:	e014      	b.n	80052b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <HAL_UART_IRQHandler+0x51e>
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fab8 	bl	8005816 <UART_EndTransmit_IT>
    return;
 80052a6:	e004      	b.n	80052b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80052b0:	bf00      	nop
  }
}
 80052b2:	37e8      	adds	r7, #232	@ 0xe8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b09c      	sub	sp, #112	@ 0x70
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d172      	bne.n	800540a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005326:	2200      	movs	r2, #0
 8005328:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800532a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800533a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800534a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800534c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005350:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e5      	bne.n	800532a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	667b      	str	r3, [r7, #100]	@ 0x64
 8005376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3314      	adds	r3, #20
 800537c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800537e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005380:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800538c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3314      	adds	r3, #20
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	623b      	str	r3, [r7, #32]
   return(result);
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80053aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d119      	bne.n	800540a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f023 0310 	bic.w	r3, r3, #16
 80053ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053f6:	61fa      	str	r2, [r7, #28]
 80053f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	69b9      	ldr	r1, [r7, #24]
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	617b      	str	r3, [r7, #20]
   return(result);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800540a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800540c:	2200      	movs	r2, #0
 800540e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005414:	2b01      	cmp	r3, #1
 8005416:	d106      	bne.n	8005426 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800541a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800541c:	4619      	mov	r1, r3
 800541e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005420:	f7fb fb06 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005424:	e002      	b.n	800542c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005426:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005428:	f7ff ff50 	bl	80052cc <HAL_UART_RxCpltCallback>
}
 800542c:	bf00      	nop
 800542e:	3770      	adds	r7, #112	@ 0x70
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544c:	2b01      	cmp	r3, #1
 800544e:	d108      	bne.n	8005462 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	b29b      	uxth	r3, r3
 8005458:	4619      	mov	r1, r3
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7fb fae8 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005460:	e002      	b.n	8005468 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff ff3c 	bl	80052e0 <HAL_UART_RxHalfCpltCallback>
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548c:	2b80      	cmp	r3, #128	@ 0x80
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b21      	cmp	r3, #33	@ 0x21
 80054a2:	d108      	bne.n	80054b6 <UART_DMAError+0x46>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2200      	movs	r2, #0
 80054ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80054b0:	68b8      	ldr	r0, [r7, #8]
 80054b2:	f000 f8c1 	bl	8005638 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c0:	2b40      	cmp	r3, #64	@ 0x40
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b22      	cmp	r3, #34	@ 0x22
 80054d6:	d108      	bne.n	80054ea <UART_DMAError+0x7a>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2200      	movs	r2, #0
 80054e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80054e4:	68b8      	ldr	r0, [r7, #8]
 80054e6:	f000 f8cf 	bl	8005688 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ee:	f043 0210 	orr.w	r2, r3, #16
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054f6:	68b8      	ldr	r0, [r7, #8]
 80054f8:	f7ff fefc 	bl	80052f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b098      	sub	sp, #96	@ 0x60
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2222      	movs	r2, #34	@ 0x22
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005530:	4a3e      	ldr	r2, [pc, #248]	@ (800562c <UART_Start_Receive_DMA+0x128>)
 8005532:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005538:	4a3d      	ldr	r2, [pc, #244]	@ (8005630 <UART_Start_Receive_DMA+0x12c>)
 800553a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005540:	4a3c      	ldr	r2, [pc, #240]	@ (8005634 <UART_Start_Receive_DMA+0x130>)
 8005542:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005548:	2200      	movs	r2, #0
 800554a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800554c:	f107 0308 	add.w	r3, r7, #8
 8005550:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	f7fc fa6e 	bl	8001a44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d019      	beq.n	80055ba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80055a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80055ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055da:	63ba      	str	r2, [r7, #56]	@ 0x38
 80055dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e5      	bne.n	80055ba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3314      	adds	r3, #20
 80055f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	617b      	str	r3, [r7, #20]
   return(result);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005604:	653b      	str	r3, [r7, #80]	@ 0x50
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3314      	adds	r3, #20
 800560c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800560e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	6a39      	ldr	r1, [r7, #32]
 8005614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	61fb      	str	r3, [r7, #28]
   return(result);
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e5      	bne.n	80055ee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3760      	adds	r7, #96	@ 0x60
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	08005309 	.word	0x08005309
 8005630:	08005435 	.word	0x08005435
 8005634:	08005471 	.word	0x08005471

08005638 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	@ 0x24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	61ba      	str	r2, [r7, #24]
 8005662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6979      	ldr	r1, [r7, #20]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	613b      	str	r3, [r7, #16]
   return(result);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e5      	bne.n	8005640 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800567c:	bf00      	nop
 800567e:	3724      	adds	r7, #36	@ 0x24
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b095      	sub	sp, #84	@ 0x54
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80056b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3314      	adds	r3, #20
 80056e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d119      	bne.n	8005734 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f023 0310 	bic.w	r3, r3, #16
 8005716:	647b      	str	r3, [r7, #68]	@ 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005720:	61ba      	str	r2, [r7, #24]
 8005722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6979      	ldr	r1, [r7, #20]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	613b      	str	r3, [r7, #16]
   return(result);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e5      	bne.n	8005700 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005742:	bf00      	nop
 8005744:	3754      	adds	r7, #84	@ 0x54
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff fdc3 	bl	80052f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b21      	cmp	r3, #33	@ 0x21
 8005788:	d13e      	bne.n	8005808 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005792:	d114      	bne.n	80057be <UART_Transmit_IT+0x48>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d110      	bne.n	80057be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	1c9a      	adds	r2, r3, #2
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	621a      	str	r2, [r3, #32]
 80057bc:	e008      	b.n	80057d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	1c59      	adds	r1, r3, #1
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6211      	str	r1, [r2, #32]
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29b      	uxth	r3, r3
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4619      	mov	r1, r3
 80057de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10f      	bne.n	8005804 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005802:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	e000      	b.n	800580a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005808:	2302      	movs	r3, #2
  }
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800582c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fd3e 	bl	80052b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b08c      	sub	sp, #48	@ 0x30
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b22      	cmp	r3, #34	@ 0x22
 8005858:	f040 80ae 	bne.w	80059b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005864:	d117      	bne.n	8005896 <UART_Receive_IT+0x50>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d113      	bne.n	8005896 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005884:	b29a      	uxth	r2, r3
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588e:	1c9a      	adds	r2, r3, #2
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	629a      	str	r2, [r3, #40]	@ 0x28
 8005894:	e026      	b.n	80058e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a8:	d007      	beq.n	80058ba <UART_Receive_IT+0x74>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <UART_Receive_IT+0x82>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e008      	b.n	80058da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4619      	mov	r1, r3
 80058f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d15d      	bne.n	80059b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0220 	bic.w	r2, r2, #32
 8005906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0201 	bic.w	r2, r2, #1
 8005926:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593a:	2b01      	cmp	r3, #1
 800593c:	d135      	bne.n	80059aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	613b      	str	r3, [r7, #16]
   return(result);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f023 0310 	bic.w	r3, r3, #16
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005964:	623a      	str	r2, [r7, #32]
 8005966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	69f9      	ldr	r1, [r7, #28]
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	61bb      	str	r3, [r7, #24]
   return(result);
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e5      	bne.n	8005944 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b10      	cmp	r3, #16
 8005984:	d10a      	bne.n	800599c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fb f844 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
 80059a8:	e002      	b.n	80059b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fc8e 	bl	80052cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e002      	b.n	80059ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	e000      	b.n	80059ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
  }
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3730      	adds	r7, #48	@ 0x30
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c8:	b0c0      	sub	sp, #256	@ 0x100
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	68d9      	ldr	r1, [r3, #12]
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	ea40 0301 	orr.w	r3, r0, r1
 80059ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a1c:	f021 010c 	bic.w	r1, r1, #12
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3e:	6999      	ldr	r1, [r3, #24]
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	ea40 0301 	orr.w	r3, r0, r1
 8005a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b8f      	ldr	r3, [pc, #572]	@ (8005c90 <UART_SetConfig+0x2cc>)
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d005      	beq.n	8005a64 <UART_SetConfig+0xa0>
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005c94 <UART_SetConfig+0x2d0>)
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d104      	bne.n	8005a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a64:	f7fe fc5e 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8005a68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a6c:	e003      	b.n	8005a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a6e:	f7fe fc45 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 8005a72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a80:	f040 810c 	bne.w	8005c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a96:	4622      	mov	r2, r4
 8005a98:	462b      	mov	r3, r5
 8005a9a:	1891      	adds	r1, r2, r2
 8005a9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a9e:	415b      	adcs	r3, r3
 8005aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	eb12 0801 	adds.w	r8, r2, r1
 8005aac:	4629      	mov	r1, r5
 8005aae:	eb43 0901 	adc.w	r9, r3, r1
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ac6:	4690      	mov	r8, r2
 8005ac8:	4699      	mov	r9, r3
 8005aca:	4623      	mov	r3, r4
 8005acc:	eb18 0303 	adds.w	r3, r8, r3
 8005ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	eb49 0303 	adc.w	r3, r9, r3
 8005ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005aea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005af2:	460b      	mov	r3, r1
 8005af4:	18db      	adds	r3, r3, r3
 8005af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005af8:	4613      	mov	r3, r2
 8005afa:	eb42 0303 	adc.w	r3, r2, r3
 8005afe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b08:	f7fa fbca 	bl	80002a0 <__aeabi_uldivmod>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4b61      	ldr	r3, [pc, #388]	@ (8005c98 <UART_SetConfig+0x2d4>)
 8005b12:	fba3 2302 	umull	r2, r3, r3, r2
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	011c      	lsls	r4, r3, #4
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	1891      	adds	r1, r2, r2
 8005b32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b34:	415b      	adcs	r3, r3
 8005b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b42:	4649      	mov	r1, r9
 8005b44:	eb43 0b01 	adc.w	fp, r3, r1
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b5c:	4692      	mov	sl, r2
 8005b5e:	469b      	mov	fp, r3
 8005b60:	4643      	mov	r3, r8
 8005b62:	eb1a 0303 	adds.w	r3, sl, r3
 8005b66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	18db      	adds	r3, r3, r3
 8005b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b8e:	4613      	mov	r3, r2
 8005b90:	eb42 0303 	adc.w	r3, r2, r3
 8005b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b9e:	f7fa fb7f 	bl	80002a0 <__aeabi_uldivmod>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8005c98 <UART_SetConfig+0x2d4>)
 8005baa:	fba3 2301 	umull	r2, r3, r3, r1
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2264      	movs	r2, #100	@ 0x64
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	1acb      	subs	r3, r1, r3
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bbe:	4b36      	ldr	r3, [pc, #216]	@ (8005c98 <UART_SetConfig+0x2d4>)
 8005bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bcc:	441c      	add	r4, r3
 8005bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005be0:	4642      	mov	r2, r8
 8005be2:	464b      	mov	r3, r9
 8005be4:	1891      	adds	r1, r2, r2
 8005be6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005be8:	415b      	adcs	r3, r3
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	1851      	adds	r1, r2, r1
 8005bf4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	414b      	adcs	r3, r1
 8005bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c08:	4659      	mov	r1, fp
 8005c0a:	00cb      	lsls	r3, r1, #3
 8005c0c:	4651      	mov	r1, sl
 8005c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c12:	4651      	mov	r1, sl
 8005c14:	00ca      	lsls	r2, r1, #3
 8005c16:	4610      	mov	r0, r2
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	189b      	adds	r3, r3, r2
 8005c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c24:	464b      	mov	r3, r9
 8005c26:	460a      	mov	r2, r1
 8005c28:	eb42 0303 	adc.w	r3, r2, r3
 8005c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c44:	460b      	mov	r3, r1
 8005c46:	18db      	adds	r3, r3, r3
 8005c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c5a:	f7fa fb21 	bl	80002a0 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <UART_SetConfig+0x2d4>)
 8005c64:	fba3 1302 	umull	r1, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	2164      	movs	r1, #100	@ 0x64
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	3332      	adds	r3, #50	@ 0x32
 8005c76:	4a08      	ldr	r2, [pc, #32]	@ (8005c98 <UART_SetConfig+0x2d4>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	f003 0207 	and.w	r2, r3, #7
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4422      	add	r2, r4
 8005c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c8c:	e106      	b.n	8005e9c <UART_SetConfig+0x4d8>
 8005c8e:	bf00      	nop
 8005c90:	40011000 	.word	0x40011000
 8005c94:	40011400 	.word	0x40011400
 8005c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cae:	4642      	mov	r2, r8
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	1891      	adds	r1, r2, r2
 8005cb4:	6239      	str	r1, [r7, #32]
 8005cb6:	415b      	adcs	r3, r3
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	1854      	adds	r4, r2, r1
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	eb43 0501 	adc.w	r5, r3, r1
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	00eb      	lsls	r3, r5, #3
 8005cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd6:	00e2      	lsls	r2, r4, #3
 8005cd8:	4614      	mov	r4, r2
 8005cda:	461d      	mov	r5, r3
 8005cdc:	4643      	mov	r3, r8
 8005cde:	18e3      	adds	r3, r4, r3
 8005ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	eb45 0303 	adc.w	r3, r5, r3
 8005cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	008b      	lsls	r3, r1, #2
 8005d0e:	4621      	mov	r1, r4
 8005d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d14:	4621      	mov	r1, r4
 8005d16:	008a      	lsls	r2, r1, #2
 8005d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d1c:	f7fa fac0 	bl	80002a0 <__aeabi_uldivmod>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4b60      	ldr	r3, [pc, #384]	@ (8005ea8 <UART_SetConfig+0x4e4>)
 8005d26:	fba3 2302 	umull	r2, r3, r3, r2
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	011c      	lsls	r4, r3, #4
 8005d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d40:	4642      	mov	r2, r8
 8005d42:	464b      	mov	r3, r9
 8005d44:	1891      	adds	r1, r2, r2
 8005d46:	61b9      	str	r1, [r7, #24]
 8005d48:	415b      	adcs	r3, r3
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d50:	4641      	mov	r1, r8
 8005d52:	1851      	adds	r1, r2, r1
 8005d54:	6139      	str	r1, [r7, #16]
 8005d56:	4649      	mov	r1, r9
 8005d58:	414b      	adcs	r3, r1
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d68:	4659      	mov	r1, fp
 8005d6a:	00cb      	lsls	r3, r1, #3
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d72:	4651      	mov	r1, sl
 8005d74:	00ca      	lsls	r2, r1, #3
 8005d76:	4610      	mov	r0, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	189b      	adds	r3, r3, r2
 8005d80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d84:	464b      	mov	r3, r9
 8005d86:	460a      	mov	r2, r1
 8005d88:	eb42 0303 	adc.w	r3, r2, r3
 8005d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005da8:	4649      	mov	r1, r9
 8005daa:	008b      	lsls	r3, r1, #2
 8005dac:	4641      	mov	r1, r8
 8005dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db2:	4641      	mov	r1, r8
 8005db4:	008a      	lsls	r2, r1, #2
 8005db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dba:	f7fa fa71 	bl	80002a0 <__aeabi_uldivmod>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4b38      	ldr	r3, [pc, #224]	@ (8005ea8 <UART_SetConfig+0x4e4>)
 8005dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	2264      	movs	r2, #100	@ 0x64
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	1acb      	subs	r3, r1, r3
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	3332      	adds	r3, #50	@ 0x32
 8005dd8:	4a33      	ldr	r2, [pc, #204]	@ (8005ea8 <UART_SetConfig+0x4e4>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005de4:	441c      	add	r4, r3
 8005de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dea:	2200      	movs	r2, #0
 8005dec:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dee:	677a      	str	r2, [r7, #116]	@ 0x74
 8005df0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005df4:	4642      	mov	r2, r8
 8005df6:	464b      	mov	r3, r9
 8005df8:	1891      	adds	r1, r2, r2
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	415b      	adcs	r3, r3
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e04:	4641      	mov	r1, r8
 8005e06:	1851      	adds	r1, r2, r1
 8005e08:	6039      	str	r1, [r7, #0]
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	414b      	adcs	r3, r1
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e1c:	4659      	mov	r1, fp
 8005e1e:	00cb      	lsls	r3, r1, #3
 8005e20:	4651      	mov	r1, sl
 8005e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e26:	4651      	mov	r1, sl
 8005e28:	00ca      	lsls	r2, r1, #3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4642      	mov	r2, r8
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e36:	464b      	mov	r3, r9
 8005e38:	460a      	mov	r2, r1
 8005e3a:	eb42 0303 	adc.w	r3, r2, r3
 8005e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e58:	4649      	mov	r1, r9
 8005e5a:	008b      	lsls	r3, r1, #2
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e62:	4641      	mov	r1, r8
 8005e64:	008a      	lsls	r2, r1, #2
 8005e66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e6a:	f7fa fa19 	bl	80002a0 <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea8 <UART_SetConfig+0x4e4>)
 8005e74:	fba3 1302 	umull	r1, r3, r3, r2
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	2164      	movs	r1, #100	@ 0x64
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	3332      	adds	r3, #50	@ 0x32
 8005e86:	4a08      	ldr	r2, [pc, #32]	@ (8005ea8 <UART_SetConfig+0x4e4>)
 8005e88:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f003 020f 	and.w	r2, r3, #15
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4422      	add	r2, r4
 8005e9a:	609a      	str	r2, [r3, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ea8:	51eb851f 	.word	0x51eb851f

08005eac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eac:	b084      	sub	sp, #16
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	f107 001c 	add.w	r0, r7, #28
 8005eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ebe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d123      	bne.n	8005f0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d105      	bne.n	8005f02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fae2 	bl	80074cc <USB_CoreReset>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	73fb      	strb	r3, [r7, #15]
 8005f0c:	e01b      	b.n	8005f46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fad6 	bl	80074cc <USB_CoreReset>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d106      	bne.n	8005f3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f38:	e005      	b.n	8005f46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f46:	7fbb      	ldrb	r3, [r7, #30]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d10b      	bne.n	8005f64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f043 0206 	orr.w	r2, r3, #6
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f70:	b004      	add	sp, #16
 8005f72:	4770      	bx	lr

08005f74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d165      	bne.n	8006054 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4a41      	ldr	r2, [pc, #260]	@ (8006090 <USB_SetTurnaroundTime+0x11c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d906      	bls.n	8005f9e <USB_SetTurnaroundTime+0x2a>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4a40      	ldr	r2, [pc, #256]	@ (8006094 <USB_SetTurnaroundTime+0x120>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d202      	bcs.n	8005f9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f98:	230f      	movs	r3, #15
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e062      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8006094 <USB_SetTurnaroundTime+0x120>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d306      	bcc.n	8005fb4 <USB_SetTurnaroundTime+0x40>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8006098 <USB_SetTurnaroundTime+0x124>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d202      	bcs.n	8005fb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fae:	230e      	movs	r3, #14
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e057      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4a38      	ldr	r2, [pc, #224]	@ (8006098 <USB_SetTurnaroundTime+0x124>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d306      	bcc.n	8005fca <USB_SetTurnaroundTime+0x56>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a37      	ldr	r2, [pc, #220]	@ (800609c <USB_SetTurnaroundTime+0x128>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d202      	bcs.n	8005fca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fc4:	230d      	movs	r3, #13
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e04c      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4a33      	ldr	r2, [pc, #204]	@ (800609c <USB_SetTurnaroundTime+0x128>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d306      	bcc.n	8005fe0 <USB_SetTurnaroundTime+0x6c>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4a32      	ldr	r2, [pc, #200]	@ (80060a0 <USB_SetTurnaroundTime+0x12c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d802      	bhi.n	8005fe0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fda:	230c      	movs	r3, #12
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e041      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80060a0 <USB_SetTurnaroundTime+0x12c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d906      	bls.n	8005ff6 <USB_SetTurnaroundTime+0x82>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a2e      	ldr	r2, [pc, #184]	@ (80060a4 <USB_SetTurnaroundTime+0x130>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d802      	bhi.n	8005ff6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ff0:	230b      	movs	r3, #11
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	e036      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80060a4 <USB_SetTurnaroundTime+0x130>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d906      	bls.n	800600c <USB_SetTurnaroundTime+0x98>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4a29      	ldr	r2, [pc, #164]	@ (80060a8 <USB_SetTurnaroundTime+0x134>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d802      	bhi.n	800600c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006006:	230a      	movs	r3, #10
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	e02b      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4a26      	ldr	r2, [pc, #152]	@ (80060a8 <USB_SetTurnaroundTime+0x134>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d906      	bls.n	8006022 <USB_SetTurnaroundTime+0xae>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a25      	ldr	r2, [pc, #148]	@ (80060ac <USB_SetTurnaroundTime+0x138>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d202      	bcs.n	8006022 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800601c:	2309      	movs	r3, #9
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	e020      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4a21      	ldr	r2, [pc, #132]	@ (80060ac <USB_SetTurnaroundTime+0x138>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d306      	bcc.n	8006038 <USB_SetTurnaroundTime+0xc4>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a20      	ldr	r2, [pc, #128]	@ (80060b0 <USB_SetTurnaroundTime+0x13c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d802      	bhi.n	8006038 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006032:	2308      	movs	r3, #8
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	e015      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4a1d      	ldr	r2, [pc, #116]	@ (80060b0 <USB_SetTurnaroundTime+0x13c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d906      	bls.n	800604e <USB_SetTurnaroundTime+0xda>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4a1c      	ldr	r2, [pc, #112]	@ (80060b4 <USB_SetTurnaroundTime+0x140>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d202      	bcs.n	800604e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006048:	2307      	movs	r3, #7
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e00a      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800604e:	2306      	movs	r3, #6
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	e007      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800605a:	2309      	movs	r3, #9
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e001      	b.n	8006064 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006060:	2309      	movs	r3, #9
 8006062:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	00d8acbf 	.word	0x00d8acbf
 8006094:	00e4e1c0 	.word	0x00e4e1c0
 8006098:	00f42400 	.word	0x00f42400
 800609c:	01067380 	.word	0x01067380
 80060a0:	011a499f 	.word	0x011a499f
 80060a4:	01312cff 	.word	0x01312cff
 80060a8:	014ca43f 	.word	0x014ca43f
 80060ac:	016e3600 	.word	0x016e3600
 80060b0:	01a6ab1f 	.word	0x01a6ab1f
 80060b4:	01e84800 	.word	0x01e84800

080060b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f043 0201 	orr.w	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f023 0201 	bic.w	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d115      	bne.n	800614a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800612a:	200a      	movs	r0, #10
 800612c:	f7fb fa8c 	bl	8001648 <HAL_Delay>
      ms += 10U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	330a      	adds	r3, #10
 8006134:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 f939 	bl	80073ae <USB_GetMode>
 800613c:	4603      	mov	r3, r0
 800613e:	2b01      	cmp	r3, #1
 8006140:	d01e      	beq.n	8006180 <USB_SetCurrentMode+0x84>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2bc7      	cmp	r3, #199	@ 0xc7
 8006146:	d9f0      	bls.n	800612a <USB_SetCurrentMode+0x2e>
 8006148:	e01a      	b.n	8006180 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d115      	bne.n	800617c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800615c:	200a      	movs	r0, #10
 800615e:	f7fb fa73 	bl	8001648 <HAL_Delay>
      ms += 10U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	330a      	adds	r3, #10
 8006166:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 f920 	bl	80073ae <USB_GetMode>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <USB_SetCurrentMode+0x84>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2bc7      	cmp	r3, #199	@ 0xc7
 8006178:	d9f0      	bls.n	800615c <USB_SetCurrentMode+0x60>
 800617a:	e001      	b.n	8006180 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e005      	b.n	800618c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2bc8      	cmp	r3, #200	@ 0xc8
 8006184:	d101      	bne.n	800618a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006194:	b084      	sub	sp, #16
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061ae:	2300      	movs	r3, #0
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	e009      	b.n	80061c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	3340      	adds	r3, #64	@ 0x40
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	2200      	movs	r2, #0
 80061c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	3301      	adds	r3, #1
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b0e      	cmp	r3, #14
 80061cc:	d9f2      	bls.n	80061b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d11c      	bne.n	8006210 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061e4:	f043 0302 	orr.w	r3, r3, #2
 80061e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	639a      	str	r2, [r3, #56]	@ 0x38
 800620e:	e00b      	b.n	8006228 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006214:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006220:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800622e:	461a      	mov	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006234:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006238:	2b01      	cmp	r3, #1
 800623a:	d10d      	bne.n	8006258 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800623c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006244:	2100      	movs	r1, #0
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f968 	bl	800651c <USB_SetDevSpeed>
 800624c:	e008      	b.n	8006260 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800624e:	2101      	movs	r1, #1
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f963 	bl	800651c <USB_SetDevSpeed>
 8006256:	e003      	b.n	8006260 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006258:	2103      	movs	r1, #3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f95e 	bl	800651c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006260:	2110      	movs	r1, #16
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f8fa 	bl	800645c <USB_FlushTxFifo>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f924 	bl	80064c0 <USB_FlushRxFifo>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006288:	461a      	mov	r2, r3
 800628a:	2300      	movs	r3, #0
 800628c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a0:	461a      	mov	r2, r3
 80062a2:	2300      	movs	r3, #0
 80062a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	e043      	b.n	8006334 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062c2:	d118      	bne.n	80062f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d6:	461a      	mov	r2, r3
 80062d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e013      	b.n	8006308 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ec:	461a      	mov	r2, r3
 80062ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	e008      	b.n	8006308 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006302:	461a      	mov	r2, r3
 8006304:	2300      	movs	r3, #0
 8006306:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006326:	461a      	mov	r2, r3
 8006328:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800632c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3301      	adds	r3, #1
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006338:	461a      	mov	r2, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4293      	cmp	r3, r2
 800633e:	d3b5      	bcc.n	80062ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006340:	2300      	movs	r3, #0
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	e043      	b.n	80063ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006358:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800635c:	d118      	bne.n	8006390 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006370:	461a      	mov	r2, r3
 8006372:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e013      	b.n	80063a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006386:	461a      	mov	r2, r3
 8006388:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e008      	b.n	80063a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ae:	461a      	mov	r2, r3
 80063b0:	2300      	movs	r3, #0
 80063b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c0:	461a      	mov	r2, r3
 80063c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	3301      	adds	r3, #1
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063d2:	461a      	mov	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d3b5      	bcc.n	8006346 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80063fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f043 0210 	orr.w	r2, r3, #16
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	4b10      	ldr	r3, [pc, #64]	@ (8006458 <USB_DevInit+0x2c4>)
 8006416:	4313      	orrs	r3, r2
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800641c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f043 0208 	orr.w	r2, r3, #8
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006430:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006440:	f043 0304 	orr.w	r3, r3, #4
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006454:	b004      	add	sp, #16
 8006456:	4770      	bx	lr
 8006458:	803c3800 	.word	0x803c3800

0800645c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006476:	d901      	bls.n	800647c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e01b      	b.n	80064b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	daf2      	bge.n	800646a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	019b      	lsls	r3, r3, #6
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064a0:	d901      	bls.n	80064a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e006      	b.n	80064b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d0f0      	beq.n	8006494 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d8:	d901      	bls.n	80064de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e018      	b.n	8006510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	daf2      	bge.n	80064cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2210      	movs	r2, #16
 80064ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3301      	adds	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064fc:	d901      	bls.n	8006502 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e006      	b.n	8006510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	2b10      	cmp	r3, #16
 800650c:	d0f0      	beq.n	80064f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800653c:	4313      	orrs	r3, r2
 800653e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800654e:	b480      	push	{r7}
 8006550:	b087      	sub	sp, #28
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0306 	and.w	r3, r3, #6
 8006566:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d102      	bne.n	8006574 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]
 8006572:	e00a      	b.n	800658a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d002      	beq.n	8006580 <USB_GetDevSpeed+0x32>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b06      	cmp	r3, #6
 800657e:	d102      	bne.n	8006586 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006580:	2302      	movs	r3, #2
 8006582:	75fb      	strb	r3, [r7, #23]
 8006584:	e001      	b.n	800658a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006586:	230f      	movs	r3, #15
 8006588:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d13a      	bne.n	800662a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	2101      	movs	r1, #1
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d155      	bne.n	8006698 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	791b      	ldrb	r3, [r3, #4]
 8006606:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006608:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	059b      	lsls	r3, r3, #22
 800660e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006610:	4313      	orrs	r3, r2
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	e036      	b.n	8006698 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006630:	69da      	ldr	r2, [r3, #28]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	2101      	movs	r1, #1
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006648:	4313      	orrs	r3, r2
 800664a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11a      	bne.n	8006698 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	791b      	ldrb	r3, [r3, #4]
 800667c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800667e:	430b      	orrs	r3, r1
 8006680:	4313      	orrs	r3, r2
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	0151      	lsls	r1, r2, #5
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	440a      	add	r2, r1
 800668a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800668e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006696:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d161      	bne.n	8006788 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066da:	d11f      	bne.n	800671c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800671a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	b29b      	uxth	r3, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800673c:	4013      	ands	r3, r2
 800673e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	2101      	movs	r1, #1
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	b29b      	uxth	r3, r3
 8006758:	43db      	mvns	r3, r3
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006760:	4013      	ands	r3, r2
 8006762:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	0159      	lsls	r1, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	440b      	add	r3, r1
 800677a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677e:	4619      	mov	r1, r3
 8006780:	4b35      	ldr	r3, [pc, #212]	@ (8006858 <USB_DeactivateEndpoint+0x1b0>)
 8006782:	4013      	ands	r3, r2
 8006784:	600b      	str	r3, [r1, #0]
 8006786:	e060      	b.n	800684a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800679a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800679e:	d11f      	bne.n	80067e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	2101      	movs	r1, #1
 80067f2:	fa01 f303 	lsl.w	r3, r1, r3
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	43db      	mvns	r3, r3
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006800:	4013      	ands	r3, r2
 8006802:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	2101      	movs	r1, #1
 8006816:	fa01 f303 	lsl.w	r3, r1, r3
 800681a:	041b      	lsls	r3, r3, #16
 800681c:	43db      	mvns	r3, r3
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006824:	4013      	ands	r3, r2
 8006826:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	0159      	lsls	r1, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	440b      	add	r3, r1
 800683e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006842:	4619      	mov	r1, r3
 8006844:	4b05      	ldr	r3, [pc, #20]	@ (800685c <USB_DeactivateEndpoint+0x1b4>)
 8006846:	4013      	ands	r3, r2
 8006848:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	ec337800 	.word	0xec337800
 800685c:	eff37800 	.word	0xeff37800

08006860 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	@ 0x28
 8006864:	af02      	add	r7, sp, #8
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b01      	cmp	r3, #1
 800687e:	f040 817a 	bne.w	8006b76 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d132      	bne.n	80068f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80068a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80068ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e8:	0cdb      	lsrs	r3, r3, #19
 80068ea:	04db      	lsls	r3, r3, #19
 80068ec:	6113      	str	r3, [r2, #16]
 80068ee:	e092      	b.n	8006a16 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800690a:	0cdb      	lsrs	r3, r3, #19
 800690c:	04db      	lsls	r3, r3, #19
 800690e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800692a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800692e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006932:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d11a      	bne.n	8006970 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	d903      	bls.n	800694e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006968:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800696c:	6113      	str	r3, [r2, #16]
 800696e:	e01b      	b.n	80069a8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6919      	ldr	r1, [r3, #16]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	440b      	add	r3, r1
 8006988:	1e59      	subs	r1, r3, #1
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006992:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006994:	4ba2      	ldr	r3, [pc, #648]	@ (8006c20 <USB_EPStartXfer+0x3c0>)
 8006996:	400b      	ands	r3, r1
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	0148      	lsls	r0, r1, #5
 800699c:	69f9      	ldr	r1, [r7, #28]
 800699e:	4401      	add	r1, r0
 80069a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069a4:	4313      	orrs	r3, r2
 80069a6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069be:	69b9      	ldr	r1, [r7, #24]
 80069c0:	0148      	lsls	r0, r1, #5
 80069c2:	69f9      	ldr	r1, [r7, #28]
 80069c4:	4401      	add	r1, r0
 80069c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069ca:	4313      	orrs	r3, r2
 80069cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	791b      	ldrb	r3, [r3, #4]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d11f      	bne.n	8006a16 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	0151      	lsls	r1, r2, #5
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	440a      	add	r2, r1
 80069ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80069f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d14b      	bne.n	8006ab4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a30:	461a      	mov	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	791b      	ldrb	r3, [r3, #4]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d128      	bne.n	8006a92 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d110      	bne.n	8006a72 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e00f      	b.n	8006a92 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	e165      	b.n	8006d80 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ace:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ad2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	791b      	ldrb	r3, [r3, #4]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d015      	beq.n	8006b08 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 814d 	beq.w	8006d80 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	2101      	movs	r1, #1
 8006af8:	fa01 f303 	lsl.w	r3, r1, r3
 8006afc:	69f9      	ldr	r1, [r7, #28]
 8006afe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b02:	4313      	orrs	r3, r2
 8006b04:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b06:	e13b      	b.n	8006d80 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d110      	bne.n	8006b3a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	e00f      	b.n	8006b5a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	68d9      	ldr	r1, [r3, #12]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	b298      	uxth	r0, r3
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f9b8 	bl	8006ee4 <USB_WritePacket>
 8006b74:	e104      	b.n	8006d80 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b90:	0cdb      	lsrs	r3, r3, #19
 8006b92:	04db      	lsls	r3, r3, #19
 8006b94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bb0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bb4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bb8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d131      	bne.n	8006c24 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bee:	69b9      	ldr	r1, [r7, #24]
 8006bf0:	0148      	lsls	r0, r1, #5
 8006bf2:	69f9      	ldr	r1, [r7, #28]
 8006bf4:	4401      	add	r1, r0
 8006bf6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c1c:	6113      	str	r3, [r2, #16]
 8006c1e:	e061      	b.n	8006ce4 <USB_EPStartXfer+0x484>
 8006c20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d123      	bne.n	8006c74 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c42:	69b9      	ldr	r1, [r7, #24]
 8006c44:	0148      	lsls	r0, r1, #5
 8006c46:	69f9      	ldr	r1, [r7, #28]
 8006c48:	4401      	add	r1, r0
 8006c4a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c70:	6113      	str	r3, [r2, #16]
 8006c72:	e037      	b.n	8006ce4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	1e5a      	subs	r2, r3, #1
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c88:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	8afa      	ldrh	r2, [r7, #22]
 8006c90:	fb03 f202 	mul.w	r2, r3, r2
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	8afb      	ldrh	r3, [r7, #22]
 8006ca8:	04d9      	lsls	r1, r3, #19
 8006caa:	4b38      	ldr	r3, [pc, #224]	@ (8006d8c <USB_EPStartXfer+0x52c>)
 8006cac:	400b      	ands	r3, r1
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	0148      	lsls	r0, r1, #5
 8006cb2:	69f9      	ldr	r1, [r7, #28]
 8006cb4:	4401      	add	r1, r0
 8006cb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd4:	69b9      	ldr	r1, [r7, #24]
 8006cd6:	0148      	lsls	r0, r1, #5
 8006cd8:	69f9      	ldr	r1, [r7, #28]
 8006cda:	4401      	add	r1, r0
 8006cdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d10d      	bne.n	8006d06 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	68d9      	ldr	r1, [r3, #12]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d02:	460a      	mov	r2, r1
 8006d04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	791b      	ldrb	r3, [r3, #4]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d128      	bne.n	8006d60 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d110      	bne.n	8006d40 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	e00f      	b.n	8006d60 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	1ff80000 	.word	0x1ff80000

08006d90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d14a      	bne.n	8006e44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dc6:	f040 8086 	bne.w	8006ed6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	7812      	ldrb	r2, [r2, #0]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006de8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3301      	adds	r3, #1
 8006e16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d902      	bls.n	8006e28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
          break;
 8006e26:	e056      	b.n	8006ed6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e40:	d0e7      	beq.n	8006e12 <USB_EPStopXfer+0x82>
 8006e42:	e048      	b.n	8006ed6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e5c:	d13b      	bne.n	8006ed6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	7812      	ldrb	r2, [r2, #0]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ea0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ea4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d902      	bls.n	8006ebc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eba:	e00c      	b.n	8006ed6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ed4:	d0e7      	beq.n	8006ea6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b089      	sub	sp, #36	@ 0x24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	4611      	mov	r1, r2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	71fb      	strb	r3, [r7, #7]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d123      	bne.n	8006f52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f0a:	88bb      	ldrh	r3, [r7, #4]
 8006f0c:	3303      	adds	r3, #3
 8006f0e:	089b      	lsrs	r3, r3, #2
 8006f10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f12:	2300      	movs	r3, #0
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e018      	b.n	8006f4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	031a      	lsls	r2, r3, #12
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f24:	461a      	mov	r2, r3
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	3301      	adds	r3, #1
 8006f36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	3301      	adds	r3, #1
 8006f42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	3301      	adds	r3, #1
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d3e2      	bcc.n	8006f18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3724      	adds	r7, #36	@ 0x24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b08b      	sub	sp, #44	@ 0x2c
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	089b      	lsrs	r3, r3, #2
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f7e:	88fb      	ldrh	r3, [r7, #6]
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f86:	2300      	movs	r3, #0
 8006f88:	623b      	str	r3, [r7, #32]
 8006f8a:	e014      	b.n	8006fb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	3301      	adds	r3, #1
 8006fae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	623b      	str	r3, [r7, #32]
 8006fb6:	6a3a      	ldr	r2, [r7, #32]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d3e6      	bcc.n	8006f8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fbe:	8bfb      	ldrh	r3, [r7, #30]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01e      	beq.n	8007002 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f107 0310 	add.w	r3, r7, #16
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	701a      	strb	r2, [r3, #0]
      i++;
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	3301      	adds	r3, #1
 8006fee:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ff6:	8bfb      	ldrh	r3, [r7, #30]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ffc:	8bfb      	ldrh	r3, [r7, #30]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1ea      	bne.n	8006fd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007004:	4618      	mov	r0, r3
 8007006:	372c      	adds	r7, #44	@ 0x2c
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d12c      	bne.n	8007086 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	db12      	blt.n	8007064 <USB_EPSetStall+0x54>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00f      	beq.n	8007064 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800705e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007062:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800707e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e02b      	b.n	80070de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	db12      	blt.n	80070be <USB_EPSetStall+0xae>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00f      	beq.n	80070be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d128      	bne.n	800715a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	440a      	add	r2, r1
 800711e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007122:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007126:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	2b03      	cmp	r3, #3
 800712e:	d003      	beq.n	8007138 <USB_EPClearStall+0x4c>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	791b      	ldrb	r3, [r3, #4]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d138      	bne.n	80071aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	e027      	b.n	80071aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007174:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007178:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	791b      	ldrb	r3, [r3, #4]
 800717e:	2b03      	cmp	r3, #3
 8007180:	d003      	beq.n	800718a <USB_EPClearStall+0x9e>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	791b      	ldrb	r3, [r3, #4]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d10f      	bne.n	80071aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80071da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80071ec:	68f9      	ldr	r1, [r7, #12]
 80071ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071f2:	4313      	orrs	r3, r2
 80071f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007232:	f023 0302 	bic.w	r3, r3, #2
 8007236:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007260:	f023 0303 	bic.w	r3, r3, #3
 8007264:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007274:	f043 0302 	orr.w	r3, r3, #2
 8007278:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4013      	ands	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072a0:	68fb      	ldr	r3, [r7, #12]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	4013      	ands	r3, r2
 80072d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	0c1b      	lsrs	r3, r3, #16
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	4013      	ands	r3, r2
 8007304:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	b29b      	uxth	r3, r3
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4013      	ands	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007344:	68bb      	ldr	r3, [r7, #8]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007352:	b480      	push	{r7}
 8007354:	b087      	sub	sp, #28
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007374:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	fa22 f303 	lsr.w	r3, r2, r3
 8007382:	01db      	lsls	r3, r3, #7
 8007384:	b2db      	uxtb	r3, r3
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4013      	ands	r3, r2
 800739e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073a0:	68bb      	ldr	r3, [r7, #8]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 0301 	and.w	r3, r3, #1
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	460b      	mov	r3, r1
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	333c      	adds	r3, #60	@ 0x3c
 8007426:	3304      	adds	r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4a26      	ldr	r2, [pc, #152]	@ (80074c8 <USB_EP0_OutStart+0xb8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d90a      	bls.n	800744a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007444:	d101      	bne.n	800744a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e037      	b.n	80074ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007450:	461a      	mov	r2, r3
 8007452:	2300      	movs	r3, #0
 8007454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007464:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007478:	f043 0318 	orr.w	r3, r3, #24
 800747c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800748c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007490:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007492:	7afb      	ldrb	r3, [r7, #11]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10f      	bne.n	80074b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749e:	461a      	mov	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074b2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80074b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	4f54300a 	.word	0x4f54300a

080074cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074e4:	d901      	bls.n	80074ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e01b      	b.n	8007522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	daf2      	bge.n	80074d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f043 0201 	orr.w	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3301      	adds	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800750e:	d901      	bls.n	8007514 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e006      	b.n	8007522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b01      	cmp	r3, #1
 800751e:	d0f0      	beq.n	8007502 <USB_CoreReset+0x36>

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800753c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007540:	f002 fcb2 	bl	8009ea8 <USBD_static_malloc>
 8007544:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d109      	bne.n	8007560 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	32b0      	adds	r2, #176	@ 0xb0
 8007556:	2100      	movs	r1, #0
 8007558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800755c:	2302      	movs	r3, #2
 800755e:	e0d4      	b.n	800770a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007560:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007564:	2100      	movs	r1, #0
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f002 fd02 	bl	8009f70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	32b0      	adds	r2, #176	@ 0xb0
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	32b0      	adds	r2, #176	@ 0xb0
 8007586:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	7c1b      	ldrb	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d138      	bne.n	800760a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007598:	4b5e      	ldr	r3, [pc, #376]	@ (8007714 <USBD_CDC_Init+0x1e4>)
 800759a:	7819      	ldrb	r1, [r3, #0]
 800759c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075a0:	2202      	movs	r2, #2
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f002 fb5d 	bl	8009c62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80075a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007714 <USBD_CDC_Init+0x1e4>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 020f 	and.w	r2, r3, #15
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	440b      	add	r3, r1
 80075bc:	3324      	adds	r3, #36	@ 0x24
 80075be:	2201      	movs	r2, #1
 80075c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80075c2:	4b55      	ldr	r3, [pc, #340]	@ (8007718 <USBD_CDC_Init+0x1e8>)
 80075c4:	7819      	ldrb	r1, [r3, #0]
 80075c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075ca:	2202      	movs	r2, #2
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f002 fb48 	bl	8009c62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80075d2:	4b51      	ldr	r3, [pc, #324]	@ (8007718 <USBD_CDC_Init+0x1e8>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	f003 020f 	and.w	r2, r3, #15
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075ea:	2201      	movs	r2, #1
 80075ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80075ee:	4b4b      	ldr	r3, [pc, #300]	@ (800771c <USBD_CDC_Init+0x1ec>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 020f 	and.w	r2, r3, #15
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	3326      	adds	r3, #38	@ 0x26
 8007604:	2210      	movs	r2, #16
 8007606:	801a      	strh	r2, [r3, #0]
 8007608:	e035      	b.n	8007676 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800760a:	4b42      	ldr	r3, [pc, #264]	@ (8007714 <USBD_CDC_Init+0x1e4>)
 800760c:	7819      	ldrb	r1, [r3, #0]
 800760e:	2340      	movs	r3, #64	@ 0x40
 8007610:	2202      	movs	r2, #2
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f002 fb25 	bl	8009c62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007618:	4b3e      	ldr	r3, [pc, #248]	@ (8007714 <USBD_CDC_Init+0x1e4>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3324      	adds	r3, #36	@ 0x24
 800762e:	2201      	movs	r2, #1
 8007630:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007632:	4b39      	ldr	r3, [pc, #228]	@ (8007718 <USBD_CDC_Init+0x1e8>)
 8007634:	7819      	ldrb	r1, [r3, #0]
 8007636:	2340      	movs	r3, #64	@ 0x40
 8007638:	2202      	movs	r2, #2
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f002 fb11 	bl	8009c62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007640:	4b35      	ldr	r3, [pc, #212]	@ (8007718 <USBD_CDC_Init+0x1e8>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	f003 020f 	and.w	r2, r3, #15
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	440b      	add	r3, r1
 8007654:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007658:	2201      	movs	r2, #1
 800765a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800765c:	4b2f      	ldr	r3, [pc, #188]	@ (800771c <USBD_CDC_Init+0x1ec>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 020f 	and.w	r2, r3, #15
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	3326      	adds	r3, #38	@ 0x26
 8007672:	2210      	movs	r2, #16
 8007674:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007676:	4b29      	ldr	r3, [pc, #164]	@ (800771c <USBD_CDC_Init+0x1ec>)
 8007678:	7819      	ldrb	r1, [r3, #0]
 800767a:	2308      	movs	r3, #8
 800767c:	2203      	movs	r2, #3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f002 faef 	bl	8009c62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007684:	4b25      	ldr	r3, [pc, #148]	@ (800771c <USBD_CDC_Init+0x1ec>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	f003 020f 	and.w	r2, r3, #15
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	440b      	add	r3, r1
 8007698:	3324      	adds	r3, #36	@ 0x24
 800769a:	2201      	movs	r2, #1
 800769c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	33b0      	adds	r3, #176	@ 0xb0
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80076d4:	2302      	movs	r3, #2
 80076d6:	e018      	b.n	800770a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7c1b      	ldrb	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007718 <USBD_CDC_Init+0x1e8>)
 80076e2:	7819      	ldrb	r1, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f002 fba6 	bl	8009e40 <USBD_LL_PrepareReceive>
 80076f4:	e008      	b.n	8007708 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076f6:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <USBD_CDC_Init+0x1e8>)
 80076f8:	7819      	ldrb	r1, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007700:	2340      	movs	r3, #64	@ 0x40
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f002 fb9c 	bl	8009e40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20000093 	.word	0x20000093
 8007718:	20000094 	.word	0x20000094
 800771c:	20000095 	.word	0x20000095

08007720 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800772c:	4b3a      	ldr	r3, [pc, #232]	@ (8007818 <USBD_CDC_DeInit+0xf8>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f002 fabb 	bl	8009cae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007738:	4b37      	ldr	r3, [pc, #220]	@ (8007818 <USBD_CDC_DeInit+0xf8>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f003 020f 	and.w	r2, r3, #15
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	3324      	adds	r3, #36	@ 0x24
 800774e:	2200      	movs	r2, #0
 8007750:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007752:	4b32      	ldr	r3, [pc, #200]	@ (800781c <USBD_CDC_DeInit+0xfc>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f002 faa8 	bl	8009cae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800775e:	4b2f      	ldr	r3, [pc, #188]	@ (800781c <USBD_CDC_DeInit+0xfc>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 020f 	and.w	r2, r3, #15
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007776:	2200      	movs	r2, #0
 8007778:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800777a:	4b29      	ldr	r3, [pc, #164]	@ (8007820 <USBD_CDC_DeInit+0x100>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f002 fa94 	bl	8009cae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007786:	4b26      	ldr	r3, [pc, #152]	@ (8007820 <USBD_CDC_DeInit+0x100>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	f003 020f 	and.w	r2, r3, #15
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	3324      	adds	r3, #36	@ 0x24
 800779c:	2200      	movs	r2, #0
 800779e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80077a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007820 <USBD_CDC_DeInit+0x100>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 020f 	and.w	r2, r3, #15
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	440b      	add	r3, r1
 80077b4:	3326      	adds	r3, #38	@ 0x26
 80077b6:	2200      	movs	r2, #0
 80077b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	32b0      	adds	r2, #176	@ 0xb0
 80077c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01f      	beq.n	800780c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	33b0      	adds	r3, #176	@ 0xb0
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	32b0      	adds	r2, #176	@ 0xb0
 80077ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f002 fb68 	bl	8009ec4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	32b0      	adds	r2, #176	@ 0xb0
 80077fe:	2100      	movs	r1, #0
 8007800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000093 	.word	0x20000093
 800781c:	20000094 	.word	0x20000094
 8007820:	20000095 	.word	0x20000095

08007824 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	32b0      	adds	r2, #176	@ 0xb0
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	e0bf      	b.n	80079d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800785c:	2b00      	cmp	r3, #0
 800785e:	d050      	beq.n	8007902 <USBD_CDC_Setup+0xde>
 8007860:	2b20      	cmp	r3, #32
 8007862:	f040 80af 	bne.w	80079c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	88db      	ldrh	r3, [r3, #6]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d03a      	beq.n	80078e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	b25b      	sxtb	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	da1b      	bge.n	80078b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	33b0      	adds	r3, #176	@ 0xb0
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800788e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	88d2      	ldrh	r2, [r2, #6]
 8007894:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	88db      	ldrh	r3, [r3, #6]
 800789a:	2b07      	cmp	r3, #7
 800789c:	bf28      	it	cs
 800789e:	2307      	movcs	r3, #7
 80078a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	89fa      	ldrh	r2, [r7, #14]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fd87 	bl	80093bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80078ae:	e090      	b.n	80079d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	785a      	ldrb	r2, [r3, #1]
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	88db      	ldrh	r3, [r3, #6]
 80078be:	2b3f      	cmp	r3, #63	@ 0x3f
 80078c0:	d803      	bhi.n	80078ca <USBD_CDC_Setup+0xa6>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	88db      	ldrh	r3, [r3, #6]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	e000      	b.n	80078cc <USBD_CDC_Setup+0xa8>
 80078ca:	2240      	movs	r2, #64	@ 0x40
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80078d2:	6939      	ldr	r1, [r7, #16]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80078da:	461a      	mov	r2, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fd99 	bl	8009414 <USBD_CtlPrepareRx>
      break;
 80078e2:	e076      	b.n	80079d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	33b0      	adds	r3, #176	@ 0xb0
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	7850      	ldrb	r0, [r2, #1]
 80078fa:	2200      	movs	r2, #0
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	4798      	blx	r3
      break;
 8007900:	e067      	b.n	80079d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b0b      	cmp	r3, #11
 8007908:	d851      	bhi.n	80079ae <USBD_CDC_Setup+0x18a>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <USBD_CDC_Setup+0xec>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007941 	.word	0x08007941
 8007914:	080079bd 	.word	0x080079bd
 8007918:	080079af 	.word	0x080079af
 800791c:	080079af 	.word	0x080079af
 8007920:	080079af 	.word	0x080079af
 8007924:	080079af 	.word	0x080079af
 8007928:	080079af 	.word	0x080079af
 800792c:	080079af 	.word	0x080079af
 8007930:	080079af 	.word	0x080079af
 8007934:	080079af 	.word	0x080079af
 8007938:	0800796b 	.word	0x0800796b
 800793c:	08007995 	.word	0x08007995
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b03      	cmp	r3, #3
 800794a:	d107      	bne.n	800795c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800794c:	f107 030a 	add.w	r3, r7, #10
 8007950:	2202      	movs	r2, #2
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fd31 	bl	80093bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800795a:	e032      	b.n	80079c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 fcbb 	bl	80092da <USBD_CtlError>
            ret = USBD_FAIL;
 8007964:	2303      	movs	r3, #3
 8007966:	75fb      	strb	r3, [r7, #23]
          break;
 8007968:	e02b      	b.n	80079c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b03      	cmp	r3, #3
 8007974:	d107      	bne.n	8007986 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007976:	f107 030d 	add.w	r3, r7, #13
 800797a:	2201      	movs	r2, #1
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fd1c 	bl	80093bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007984:	e01d      	b.n	80079c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 fca6 	bl	80092da <USBD_CtlError>
            ret = USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	75fb      	strb	r3, [r7, #23]
          break;
 8007992:	e016      	b.n	80079c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b03      	cmp	r3, #3
 800799e:	d00f      	beq.n	80079c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fc99 	bl	80092da <USBD_CtlError>
            ret = USBD_FAIL;
 80079a8:	2303      	movs	r3, #3
 80079aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80079ac:	e008      	b.n	80079c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fc92 	bl	80092da <USBD_CtlError>
          ret = USBD_FAIL;
 80079b6:	2303      	movs	r3, #3
 80079b8:	75fb      	strb	r3, [r7, #23]
          break;
 80079ba:	e002      	b.n	80079c2 <USBD_CDC_Setup+0x19e>
          break;
 80079bc:	bf00      	nop
 80079be:	e008      	b.n	80079d2 <USBD_CDC_Setup+0x1ae>
          break;
 80079c0:	bf00      	nop
      }
      break;
 80079c2:	e006      	b.n	80079d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fc87 	bl	80092da <USBD_CtlError>
      ret = USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	75fb      	strb	r3, [r7, #23]
      break;
 80079d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	32b0      	adds	r2, #176	@ 0xb0
 80079fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e065      	b.n	8007ad2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	32b0      	adds	r2, #176	@ 0xb0
 8007a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	3318      	adds	r3, #24
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d02f      	beq.n	8007a90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	f003 020f 	and.w	r2, r3, #15
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	3318      	adds	r3, #24
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	f003 010f 	and.w	r1, r3, #15
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	440b      	add	r3, r1
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4403      	add	r3, r0
 8007a58:	331c      	adds	r3, #28
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a60:	fb01 f303 	mul.w	r3, r1, r3
 8007a64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d112      	bne.n	8007a90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	f003 020f 	and.w	r2, r3, #15
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	3318      	adds	r3, #24
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a82:	78f9      	ldrb	r1, [r7, #3]
 8007a84:	2300      	movs	r3, #0
 8007a86:	2200      	movs	r2, #0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f002 f9b8 	bl	8009dfe <USBD_LL_Transmit>
 8007a8e:	e01f      	b.n	8007ad0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	33b0      	adds	r3, #176	@ 0xb0
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d010      	beq.n	8007ad0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	33b0      	adds	r3, #176	@ 0xb0
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	32b0      	adds	r2, #176	@ 0xb0
 8007af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	32b0      	adds	r2, #176	@ 0xb0
 8007b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e01a      	b.n	8007b42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f002 f9b6 	bl	8009e82 <USBD_LL_GetRxDataSize>
 8007b16:	4602      	mov	r2, r0
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	33b0      	adds	r3, #176	@ 0xb0
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	32b0      	adds	r2, #176	@ 0xb0
 8007b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e024      	b.n	8007bb6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	33b0      	adds	r3, #176	@ 0xb0
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d019      	beq.n	8007bb4 <USBD_CDC_EP0_RxReady+0x6a>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007b86:	2bff      	cmp	r3, #255	@ 0xff
 8007b88:	d014      	beq.n	8007bb4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	33b0      	adds	r3, #176	@ 0xb0
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007ba2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007baa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	22ff      	movs	r2, #255	@ 0xff
 8007bb0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bc8:	2182      	movs	r1, #130	@ 0x82
 8007bca:	4818      	ldr	r0, [pc, #96]	@ (8007c2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bcc:	f000 fd4f 	bl	800866e <USBD_GetEpDesc>
 8007bd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4815      	ldr	r0, [pc, #84]	@ (8007c2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bd6:	f000 fd4a 	bl	800866e <USBD_GetEpDesc>
 8007bda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bdc:	2181      	movs	r1, #129	@ 0x81
 8007bde:	4813      	ldr	r0, [pc, #76]	@ (8007c2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007be0:	f000 fd45 	bl	800866e <USBD_GetEpDesc>
 8007be4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2210      	movs	r2, #16
 8007bf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d006      	beq.n	8007c06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c00:	711a      	strb	r2, [r3, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d006      	beq.n	8007c1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c14:	711a      	strb	r2, [r3, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2243      	movs	r2, #67	@ 0x43
 8007c1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c20:	4b02      	ldr	r3, [pc, #8]	@ (8007c2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000050 	.word	0x20000050

08007c30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c38:	2182      	movs	r1, #130	@ 0x82
 8007c3a:	4818      	ldr	r0, [pc, #96]	@ (8007c9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c3c:	f000 fd17 	bl	800866e <USBD_GetEpDesc>
 8007c40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c42:	2101      	movs	r1, #1
 8007c44:	4815      	ldr	r0, [pc, #84]	@ (8007c9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c46:	f000 fd12 	bl	800866e <USBD_GetEpDesc>
 8007c4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c4c:	2181      	movs	r1, #129	@ 0x81
 8007c4e:	4813      	ldr	r0, [pc, #76]	@ (8007c9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c50:	f000 fd0d 	bl	800866e <USBD_GetEpDesc>
 8007c54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2210      	movs	r2, #16
 8007c60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d006      	beq.n	8007c76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	711a      	strb	r2, [r3, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f042 0202 	orr.w	r2, r2, #2
 8007c74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d006      	beq.n	8007c8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	711a      	strb	r2, [r3, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f042 0202 	orr.w	r2, r2, #2
 8007c88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2243      	movs	r2, #67	@ 0x43
 8007c8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c90:	4b02      	ldr	r3, [pc, #8]	@ (8007c9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000050 	.word	0x20000050

08007ca0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ca8:	2182      	movs	r1, #130	@ 0x82
 8007caa:	4818      	ldr	r0, [pc, #96]	@ (8007d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007cac:	f000 fcdf 	bl	800866e <USBD_GetEpDesc>
 8007cb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	4815      	ldr	r0, [pc, #84]	@ (8007d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007cb6:	f000 fcda 	bl	800866e <USBD_GetEpDesc>
 8007cba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cbc:	2181      	movs	r1, #129	@ 0x81
 8007cbe:	4813      	ldr	r0, [pc, #76]	@ (8007d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007cc0:	f000 fcd5 	bl	800866e <USBD_GetEpDesc>
 8007cc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2210      	movs	r2, #16
 8007cd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d006      	beq.n	8007ce6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ce0:	711a      	strb	r2, [r3, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d006      	beq.n	8007cfa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cf4:	711a      	strb	r2, [r3, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2243      	movs	r2, #67	@ 0x43
 8007cfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d00:	4b02      	ldr	r3, [pc, #8]	@ (8007d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000050 	.word	0x20000050

08007d10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	220a      	movs	r2, #10
 8007d1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d1e:	4b03      	ldr	r3, [pc, #12]	@ (8007d2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	2000000c 	.word	0x2000000c

08007d30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e009      	b.n	8007d58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	33b0      	adds	r3, #176	@ 0xb0
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	32b0      	adds	r2, #176	@ 0xb0
 8007d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e008      	b.n	8007d9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	32b0      	adds	r2, #176	@ 0xb0
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e004      	b.n	8007dd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32b0      	adds	r2, #176	@ 0xb0
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e025      	b.n	8007e56 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d11f      	bne.n	8007e54 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007e1c:	4b10      	ldr	r3, [pc, #64]	@ (8007e60 <USBD_CDC_TransmitPacket+0x7c>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	f003 020f 	and.w	r2, r3, #15
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4403      	add	r3, r0
 8007e36:	3318      	adds	r3, #24
 8007e38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007e3a:	4b09      	ldr	r3, [pc, #36]	@ (8007e60 <USBD_CDC_TransmitPacket+0x7c>)
 8007e3c:	7819      	ldrb	r1, [r3, #0]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 ffd7 	bl	8009dfe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000093 	.word	0x20000093

08007e64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	32b0      	adds	r2, #176	@ 0xb0
 8007e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	32b0      	adds	r2, #176	@ 0xb0
 8007e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e018      	b.n	8007ec4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7c1b      	ldrb	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ecc <USBD_CDC_ReceivePacket+0x68>)
 8007e9c:	7819      	ldrb	r1, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 ffc9 	bl	8009e40 <USBD_LL_PrepareReceive>
 8007eae:	e008      	b.n	8007ec2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007eb0:	4b06      	ldr	r3, [pc, #24]	@ (8007ecc <USBD_CDC_ReceivePacket+0x68>)
 8007eb2:	7819      	ldrb	r1, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007eba:	2340      	movs	r3, #64	@ 0x40
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 ffbf 	bl	8009e40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20000094 	.word	0x20000094

08007ed0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e01f      	b.n	8007f28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	79fa      	ldrb	r2, [r7, #7]
 8007f1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 fe39 	bl	8009b94 <USBD_LL_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e025      	b.n	8007f94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	32ae      	adds	r2, #174	@ 0xae
 8007f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00f      	beq.n	8007f84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	32ae      	adds	r2, #174	@ 0xae
 8007f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	f107 020e 	add.w	r2, r7, #14
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 fe41 	bl	8009c2c <USBD_LL_Start>
 8007faa:	4603      	mov	r3, r0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	78fa      	ldrb	r2, [r7, #3]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4798      	blx	r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	4611      	mov	r1, r2
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008028:	2303      	movs	r3, #3
 800802a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f001 f90c 	bl	8009266 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800805c:	461a      	mov	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	2b02      	cmp	r3, #2
 8008070:	d01a      	beq.n	80080a8 <USBD_LL_SetupStage+0x72>
 8008072:	2b02      	cmp	r3, #2
 8008074:	d822      	bhi.n	80080bc <USBD_LL_SetupStage+0x86>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <USBD_LL_SetupStage+0x4a>
 800807a:	2b01      	cmp	r3, #1
 800807c:	d00a      	beq.n	8008094 <USBD_LL_SetupStage+0x5e>
 800807e:	e01d      	b.n	80080bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fb63 	bl	8008754 <USBD_StdDevReq>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]
      break;
 8008092:	e020      	b.n	80080d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fbcb 	bl	8008838 <USBD_StdItfReq>
 80080a2:	4603      	mov	r3, r0
 80080a4:	73fb      	strb	r3, [r7, #15]
      break;
 80080a6:	e016      	b.n	80080d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fc2d 	bl	8008910 <USBD_StdEPReq>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ba:	e00c      	b.n	80080d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fe0e 	bl	8009cec <USBD_LL_StallEP>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]
      break;
 80080d4:	bf00      	nop
  }

  return ret;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	460b      	mov	r3, r1
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080f2:	7afb      	ldrb	r3, [r7, #11]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d16e      	bne.n	80081d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80080fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008106:	2b03      	cmp	r3, #3
 8008108:	f040 8098 	bne.w	800823c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	429a      	cmp	r2, r3
 8008116:	d913      	bls.n	8008140 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	1ad2      	subs	r2, r2, r3
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	4293      	cmp	r3, r2
 8008130:	bf28      	it	cs
 8008132:	4613      	movcs	r3, r2
 8008134:	461a      	mov	r2, r3
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f001 f988 	bl	800944e <USBD_CtlContinueRx>
 800813e:	e07d      	b.n	800823c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	2b02      	cmp	r3, #2
 800814c:	d014      	beq.n	8008178 <USBD_LL_DataOutStage+0x98>
 800814e:	2b02      	cmp	r3, #2
 8008150:	d81d      	bhi.n	800818e <USBD_LL_DataOutStage+0xae>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <USBD_LL_DataOutStage+0x7c>
 8008156:	2b01      	cmp	r3, #1
 8008158:	d003      	beq.n	8008162 <USBD_LL_DataOutStage+0x82>
 800815a:	e018      	b.n	800818e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	75bb      	strb	r3, [r7, #22]
            break;
 8008160:	e018      	b.n	8008194 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fa64 	bl	800863a <USBD_CoreFindIF>
 8008172:	4603      	mov	r3, r0
 8008174:	75bb      	strb	r3, [r7, #22]
            break;
 8008176:	e00d      	b.n	8008194 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800817e:	b2db      	uxtb	r3, r3
 8008180:	4619      	mov	r1, r3
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 fa66 	bl	8008654 <USBD_CoreFindEP>
 8008188:	4603      	mov	r3, r0
 800818a:	75bb      	strb	r3, [r7, #22]
            break;
 800818c:	e002      	b.n	8008194 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	75bb      	strb	r3, [r7, #22]
            break;
 8008192:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008194:	7dbb      	ldrb	r3, [r7, #22]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d119      	bne.n	80081ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d113      	bne.n	80081ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80081a6:	7dba      	ldrb	r2, [r7, #22]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	32ae      	adds	r2, #174	@ 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00b      	beq.n	80081ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80081b6:	7dba      	ldrb	r2, [r7, #22]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081be:	7dba      	ldrb	r2, [r7, #22]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	32ae      	adds	r2, #174	@ 0xae
 80081c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f001 f94e 	bl	8009470 <USBD_CtlSendStatus>
 80081d4:	e032      	b.n	800823c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081d6:	7afb      	ldrb	r3, [r7, #11]
 80081d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	4619      	mov	r1, r3
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fa37 	bl	8008654 <USBD_CoreFindEP>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ea:	7dbb      	ldrb	r3, [r7, #22]
 80081ec:	2bff      	cmp	r3, #255	@ 0xff
 80081ee:	d025      	beq.n	800823c <USBD_LL_DataOutStage+0x15c>
 80081f0:	7dbb      	ldrb	r3, [r7, #22]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d122      	bne.n	800823c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d117      	bne.n	8008232 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008202:	7dba      	ldrb	r2, [r7, #22]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	32ae      	adds	r2, #174	@ 0xae
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00f      	beq.n	8008232 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008212:	7dba      	ldrb	r2, [r7, #22]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800821a:	7dba      	ldrb	r2, [r7, #22]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	32ae      	adds	r2, #174	@ 0xae
 8008220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	7afa      	ldrb	r2, [r7, #11]
 8008228:	4611      	mov	r1, r2
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	4798      	blx	r3
 800822e:	4603      	mov	r3, r0
 8008230:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	e000      	b.n	800823e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b086      	sub	sp, #24
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	460b      	mov	r3, r1
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008254:	7afb      	ldrb	r3, [r7, #11]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d16f      	bne.n	800833a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3314      	adds	r3, #20
 800825e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008266:	2b02      	cmp	r3, #2
 8008268:	d15a      	bne.n	8008320 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	429a      	cmp	r2, r3
 8008274:	d914      	bls.n	80082a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	461a      	mov	r2, r3
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f001 f8b0 	bl	80093f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008292:	2300      	movs	r3, #0
 8008294:	2200      	movs	r2, #0
 8008296:	2100      	movs	r1, #0
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f001 fdd1 	bl	8009e40 <USBD_LL_PrepareReceive>
 800829e:	e03f      	b.n	8008320 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d11c      	bne.n	80082e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d316      	bcc.n	80082e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d20f      	bcs.n	80082e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082c6:	2200      	movs	r2, #0
 80082c8:	2100      	movs	r1, #0
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f001 f891 	bl	80093f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082d8:	2300      	movs	r3, #0
 80082da:	2200      	movs	r2, #0
 80082dc:	2100      	movs	r1, #0
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f001 fdae 	bl	8009e40 <USBD_LL_PrepareReceive>
 80082e4:	e01c      	b.n	8008320 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d10f      	bne.n	8008312 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008312:	2180      	movs	r1, #128	@ 0x80
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f001 fce9 	bl	8009cec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f001 f8bb 	bl	8009496 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d03a      	beq.n	80083a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f7ff fe42 	bl	8007fb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008338:	e032      	b.n	80083a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008340:	b2db      	uxtb	r3, r3
 8008342:	4619      	mov	r1, r3
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 f985 	bl	8008654 <USBD_CoreFindEP>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	2bff      	cmp	r3, #255	@ 0xff
 8008352:	d025      	beq.n	80083a0 <USBD_LL_DataInStage+0x15a>
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d122      	bne.n	80083a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b03      	cmp	r3, #3
 8008364:	d11c      	bne.n	80083a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008366:	7dfa      	ldrb	r2, [r7, #23]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	32ae      	adds	r2, #174	@ 0xae
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d014      	beq.n	80083a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008376:	7dfa      	ldrb	r2, [r7, #23]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800837e:	7dfa      	ldrb	r2, [r7, #23]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	32ae      	adds	r2, #174	@ 0xae
 8008384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	7afa      	ldrb	r2, [r7, #11]
 800838c:	4611      	mov	r1, r2
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	4798      	blx	r3
 8008392:	4603      	mov	r3, r0
 8008394:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008396:	7dbb      	ldrb	r3, [r7, #22]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800839c:	7dbb      	ldrb	r3, [r7, #22]
 800839e:	e000      	b.n	80083a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d014      	beq.n	8008410 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00e      	beq.n	8008410 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6852      	ldr	r2, [r2, #4]
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	4611      	mov	r1, r2
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800840c:	2303      	movs	r3, #3
 800840e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008410:	2340      	movs	r3, #64	@ 0x40
 8008412:	2200      	movs	r2, #0
 8008414:	2100      	movs	r1, #0
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fc23 	bl	8009c62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2240      	movs	r2, #64	@ 0x40
 8008428:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800842c:	2340      	movs	r3, #64	@ 0x40
 800842e:	2200      	movs	r2, #0
 8008430:	2180      	movs	r1, #128	@ 0x80
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fc15 	bl	8009c62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2240      	movs	r2, #64	@ 0x40
 8008442:	621a      	str	r2, [r3, #32]

  return ret;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	78fa      	ldrb	r2, [r7, #3]
 800845e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b04      	cmp	r3, #4
 8008480:	d006      	beq.n	8008490 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008488:	b2da      	uxtb	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2204      	movs	r2, #4
 8008494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d106      	bne.n	80084c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d110      	bne.n	800850c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	32ae      	adds	r2, #174	@ 0xae
 800852c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008534:	2303      	movs	r3, #3
 8008536:	e01c      	b.n	8008572 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b03      	cmp	r3, #3
 8008542:	d115      	bne.n	8008570 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	32ae      	adds	r2, #174	@ 0xae
 800854e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00b      	beq.n	8008570 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	32ae      	adds	r2, #174	@ 0xae
 8008562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	78fa      	ldrb	r2, [r7, #3]
 800856a:	4611      	mov	r1, r2
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	460b      	mov	r3, r1
 8008584:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	32ae      	adds	r2, #174	@ 0xae
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008598:	2303      	movs	r3, #3
 800859a:	e01c      	b.n	80085d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d115      	bne.n	80085d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	32ae      	adds	r2, #174	@ 0xae
 80085b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	32ae      	adds	r2, #174	@ 0xae
 80085c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085cc:	78fa      	ldrb	r2, [r7, #3]
 80085ce:	4611      	mov	r1, r2
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00e      	beq.n	8008630 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6852      	ldr	r2, [r2, #4]
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	4611      	mov	r1, r2
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800862c:	2303      	movs	r3, #3
 800862e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008646:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008660:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b086      	sub	sp, #24
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	885b      	ldrh	r3, [r3, #2]
 800868a:	b29b      	uxth	r3, r3
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	4293      	cmp	r3, r2
 8008692:	d91f      	bls.n	80086d4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800869a:	e013      	b.n	80086c4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800869c:	f107 030a 	add.w	r3, r7, #10
 80086a0:	4619      	mov	r1, r3
 80086a2:	6978      	ldr	r0, [r7, #20]
 80086a4:	f000 f81b 	bl	80086de <USBD_GetNextDesc>
 80086a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	2b05      	cmp	r3, #5
 80086b0:	d108      	bne.n	80086c4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	789b      	ldrb	r3, [r3, #2]
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d008      	beq.n	80086d2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	885b      	ldrh	r3, [r3, #2]
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	897b      	ldrh	r3, [r7, #10]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d8e5      	bhi.n	800869c <USBD_GetEpDesc+0x2e>
 80086d0:	e000      	b.n	80086d4 <USBD_GetEpDesc+0x66>
          break;
 80086d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086d4:	693b      	ldr	r3, [r7, #16]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	7812      	ldrb	r2, [r2, #0]
 80086f4:	4413      	add	r3, r2
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008708:	68fb      	ldr	r3, [r7, #12]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008716:	b480      	push	{r7}
 8008718:	b087      	sub	sp, #28
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	3301      	adds	r3, #1
 800872c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008734:	8a3b      	ldrh	r3, [r7, #16]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	b21a      	sxth	r2, r3
 800873a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800873e:	4313      	orrs	r3, r2
 8008740:	b21b      	sxth	r3, r3
 8008742:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008744:	89fb      	ldrh	r3, [r7, #14]
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
	...

08008754 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800876a:	2b40      	cmp	r3, #64	@ 0x40
 800876c:	d005      	beq.n	800877a <USBD_StdDevReq+0x26>
 800876e:	2b40      	cmp	r3, #64	@ 0x40
 8008770:	d857      	bhi.n	8008822 <USBD_StdDevReq+0xce>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00f      	beq.n	8008796 <USBD_StdDevReq+0x42>
 8008776:	2b20      	cmp	r3, #32
 8008778:	d153      	bne.n	8008822 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	32ae      	adds	r2, #174	@ 0xae
 8008784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	4798      	blx	r3
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]
      break;
 8008794:	e04a      	b.n	800882c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	785b      	ldrb	r3, [r3, #1]
 800879a:	2b09      	cmp	r3, #9
 800879c:	d83b      	bhi.n	8008816 <USBD_StdDevReq+0xc2>
 800879e:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <USBD_StdDevReq+0x50>)
 80087a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	0800880d 	.word	0x0800880d
 80087ac:	08008817 	.word	0x08008817
 80087b0:	08008803 	.word	0x08008803
 80087b4:	08008817 	.word	0x08008817
 80087b8:	080087d7 	.word	0x080087d7
 80087bc:	080087cd 	.word	0x080087cd
 80087c0:	08008817 	.word	0x08008817
 80087c4:	080087ef 	.word	0x080087ef
 80087c8:	080087e1 	.word	0x080087e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fa3c 	bl	8008c4c <USBD_GetDescriptor>
          break;
 80087d4:	e024      	b.n	8008820 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fba1 	bl	8008f20 <USBD_SetAddress>
          break;
 80087de:	e01f      	b.n	8008820 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fbe0 	bl	8008fa8 <USBD_SetConfig>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73fb      	strb	r3, [r7, #15]
          break;
 80087ec:	e018      	b.n	8008820 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fc83 	bl	80090fc <USBD_GetConfig>
          break;
 80087f6:	e013      	b.n	8008820 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fcb4 	bl	8009168 <USBD_GetStatus>
          break;
 8008800:	e00e      	b.n	8008820 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fce3 	bl	80091d0 <USBD_SetFeature>
          break;
 800880a:	e009      	b.n	8008820 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fd07 	bl	8009222 <USBD_ClrFeature>
          break;
 8008814:	e004      	b.n	8008820 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fd5e 	bl	80092da <USBD_CtlError>
          break;
 800881e:	bf00      	nop
      }
      break;
 8008820:	e004      	b.n	800882c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fd58 	bl	80092da <USBD_CtlError>
      break;
 800882a:	bf00      	nop
  }

  return ret;
 800882c:	7bfb      	ldrb	r3, [r7, #15]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop

08008838 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800884e:	2b40      	cmp	r3, #64	@ 0x40
 8008850:	d005      	beq.n	800885e <USBD_StdItfReq+0x26>
 8008852:	2b40      	cmp	r3, #64	@ 0x40
 8008854:	d852      	bhi.n	80088fc <USBD_StdItfReq+0xc4>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <USBD_StdItfReq+0x26>
 800885a:	2b20      	cmp	r3, #32
 800885c:	d14e      	bne.n	80088fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008864:	b2db      	uxtb	r3, r3
 8008866:	3b01      	subs	r3, #1
 8008868:	2b02      	cmp	r3, #2
 800886a:	d840      	bhi.n	80088ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	889b      	ldrh	r3, [r3, #4]
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b01      	cmp	r3, #1
 8008874:	d836      	bhi.n	80088e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	889b      	ldrh	r3, [r3, #4]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff fedb 	bl	800863a <USBD_CoreFindIF>
 8008884:	4603      	mov	r3, r0
 8008886:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	2bff      	cmp	r3, #255	@ 0xff
 800888c:	d01d      	beq.n	80088ca <USBD_StdItfReq+0x92>
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d11a      	bne.n	80088ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008894:	7bba      	ldrb	r2, [r7, #14]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	32ae      	adds	r2, #174	@ 0xae
 800889a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00f      	beq.n	80088c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80088a4:	7bba      	ldrb	r2, [r7, #14]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088ac:	7bba      	ldrb	r2, [r7, #14]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	32ae      	adds	r2, #174	@ 0xae
 80088b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088c2:	e004      	b.n	80088ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088c4:	2303      	movs	r3, #3
 80088c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088c8:	e001      	b.n	80088ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088ca:	2303      	movs	r3, #3
 80088cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	88db      	ldrh	r3, [r3, #6]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d110      	bne.n	80088f8 <USBD_StdItfReq+0xc0>
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10d      	bne.n	80088f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fdc7 	bl	8009470 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088e2:	e009      	b.n	80088f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fcf7 	bl	80092da <USBD_CtlError>
          break;
 80088ec:	e004      	b.n	80088f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fcf2 	bl	80092da <USBD_CtlError>
          break;
 80088f6:	e000      	b.n	80088fa <USBD_StdItfReq+0xc2>
          break;
 80088f8:	bf00      	nop
      }
      break;
 80088fa:	e004      	b.n	8008906 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fceb 	bl	80092da <USBD_CtlError>
      break;
 8008904:	bf00      	nop
  }

  return ret;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	889b      	ldrh	r3, [r3, #4]
 8008922:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800892c:	2b40      	cmp	r3, #64	@ 0x40
 800892e:	d007      	beq.n	8008940 <USBD_StdEPReq+0x30>
 8008930:	2b40      	cmp	r3, #64	@ 0x40
 8008932:	f200 817f 	bhi.w	8008c34 <USBD_StdEPReq+0x324>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d02a      	beq.n	8008990 <USBD_StdEPReq+0x80>
 800893a:	2b20      	cmp	r3, #32
 800893c:	f040 817a 	bne.w	8008c34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff fe85 	bl	8008654 <USBD_CoreFindEP>
 800894a:	4603      	mov	r3, r0
 800894c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800894e:	7b7b      	ldrb	r3, [r7, #13]
 8008950:	2bff      	cmp	r3, #255	@ 0xff
 8008952:	f000 8174 	beq.w	8008c3e <USBD_StdEPReq+0x32e>
 8008956:	7b7b      	ldrb	r3, [r7, #13]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f040 8170 	bne.w	8008c3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800895e:	7b7a      	ldrb	r2, [r7, #13]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008966:	7b7a      	ldrb	r2, [r7, #13]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	32ae      	adds	r2, #174	@ 0xae
 800896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 8163 	beq.w	8008c3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008978:	7b7a      	ldrb	r2, [r7, #13]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	32ae      	adds	r2, #174	@ 0xae
 800897e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
 800898a:	4603      	mov	r3, r0
 800898c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800898e:	e156      	b.n	8008c3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	2b03      	cmp	r3, #3
 8008996:	d008      	beq.n	80089aa <USBD_StdEPReq+0x9a>
 8008998:	2b03      	cmp	r3, #3
 800899a:	f300 8145 	bgt.w	8008c28 <USBD_StdEPReq+0x318>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 809b 	beq.w	8008ada <USBD_StdEPReq+0x1ca>
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d03c      	beq.n	8008a22 <USBD_StdEPReq+0x112>
 80089a8:	e13e      	b.n	8008c28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d002      	beq.n	80089bc <USBD_StdEPReq+0xac>
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d016      	beq.n	80089e8 <USBD_StdEPReq+0xd8>
 80089ba:	e02c      	b.n	8008a16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00d      	beq.n	80089de <USBD_StdEPReq+0xce>
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b80      	cmp	r3, #128	@ 0x80
 80089c6:	d00a      	beq.n	80089de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 f98d 	bl	8009cec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089d2:	2180      	movs	r1, #128	@ 0x80
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f001 f989 	bl	8009cec <USBD_LL_StallEP>
 80089da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089dc:	e020      	b.n	8008a20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fc7a 	bl	80092da <USBD_CtlError>
              break;
 80089e6:	e01b      	b.n	8008a20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	885b      	ldrh	r3, [r3, #2]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10e      	bne.n	8008a0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <USBD_StdEPReq+0xfe>
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b80      	cmp	r3, #128	@ 0x80
 80089fa:	d008      	beq.n	8008a0e <USBD_StdEPReq+0xfe>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	88db      	ldrh	r3, [r3, #6]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d104      	bne.n	8008a0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 f96f 	bl	8009cec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fd2e 	bl	8009470 <USBD_CtlSendStatus>

              break;
 8008a14:	e004      	b.n	8008a20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fc5e 	bl	80092da <USBD_CtlError>
              break;
 8008a1e:	bf00      	nop
          }
          break;
 8008a20:	e107      	b.n	8008c32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d002      	beq.n	8008a34 <USBD_StdEPReq+0x124>
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d016      	beq.n	8008a60 <USBD_StdEPReq+0x150>
 8008a32:	e04b      	b.n	8008acc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00d      	beq.n	8008a56 <USBD_StdEPReq+0x146>
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b80      	cmp	r3, #128	@ 0x80
 8008a3e:	d00a      	beq.n	8008a56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 f951 	bl	8009cec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a4a:	2180      	movs	r1, #128	@ 0x80
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 f94d 	bl	8009cec <USBD_LL_StallEP>
 8008a52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a54:	e040      	b.n	8008ad8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fc3e 	bl	80092da <USBD_CtlError>
              break;
 8008a5e:	e03b      	b.n	8008ad8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	885b      	ldrh	r3, [r3, #2]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d136      	bne.n	8008ad6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d004      	beq.n	8008a7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 f957 	bl	8009d2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fcf7 	bl	8009470 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff fde4 	bl	8008654 <USBD_CoreFindEP>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a90:	7b7b      	ldrb	r3, [r7, #13]
 8008a92:	2bff      	cmp	r3, #255	@ 0xff
 8008a94:	d01f      	beq.n	8008ad6 <USBD_StdEPReq+0x1c6>
 8008a96:	7b7b      	ldrb	r3, [r7, #13]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d11c      	bne.n	8008ad6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a9c:	7b7a      	ldrb	r2, [r7, #13]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008aa4:	7b7a      	ldrb	r2, [r7, #13]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32ae      	adds	r2, #174	@ 0xae
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d010      	beq.n	8008ad6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ab4:	7b7a      	ldrb	r2, [r7, #13]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	32ae      	adds	r2, #174	@ 0xae
 8008aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008aca:	e004      	b.n	8008ad6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fc03 	bl	80092da <USBD_CtlError>
              break;
 8008ad4:	e000      	b.n	8008ad8 <USBD_StdEPReq+0x1c8>
              break;
 8008ad6:	bf00      	nop
          }
          break;
 8008ad8:	e0ab      	b.n	8008c32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d002      	beq.n	8008aec <USBD_StdEPReq+0x1dc>
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d032      	beq.n	8008b50 <USBD_StdEPReq+0x240>
 8008aea:	e097      	b.n	8008c1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d007      	beq.n	8008b02 <USBD_StdEPReq+0x1f2>
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b80      	cmp	r3, #128	@ 0x80
 8008af6:	d004      	beq.n	8008b02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fbed 	bl	80092da <USBD_CtlError>
                break;
 8008b00:	e091      	b.n	8008c26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da0b      	bge.n	8008b22 <USBD_StdEPReq+0x212>
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	3310      	adds	r3, #16
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	3304      	adds	r3, #4
 8008b20:	e00b      	b.n	8008b3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b28:	4613      	mov	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	4413      	add	r3, r2
 8008b38:	3304      	adds	r3, #4
 8008b3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2202      	movs	r2, #2
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fc37 	bl	80093bc <USBD_CtlSendData>
              break;
 8008b4e:	e06a      	b.n	8008c26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	da11      	bge.n	8008b7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	f003 020f 	and.w	r2, r3, #15
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	3324      	adds	r3, #36	@ 0x24
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d117      	bne.n	8008ba2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fbb0 	bl	80092da <USBD_CtlError>
                  break;
 8008b7a:	e054      	b.n	8008c26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fb9d 	bl	80092da <USBD_CtlError>
                  break;
 8008ba0:	e041      	b.n	8008c26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	da0b      	bge.n	8008bc2 <USBD_StdEPReq+0x2b2>
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	3310      	adds	r3, #16
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	e00b      	b.n	8008bda <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3304      	adds	r3, #4
 8008bda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <USBD_StdEPReq+0x2d8>
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	2b80      	cmp	r3, #128	@ 0x80
 8008be6:	d103      	bne.n	8008bf0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e00e      	b.n	8008c0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 f8b7 	bl	8009d68 <USBD_LL_IsStallEP>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2201      	movs	r2, #1
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	e002      	b.n	8008c0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2202      	movs	r2, #2
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fbd1 	bl	80093bc <USBD_CtlSendData>
              break;
 8008c1a:	e004      	b.n	8008c26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fb5b 	bl	80092da <USBD_CtlError>
              break;
 8008c24:	bf00      	nop
          }
          break;
 8008c26:	e004      	b.n	8008c32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fb55 	bl	80092da <USBD_CtlError>
          break;
 8008c30:	bf00      	nop
      }
      break;
 8008c32:	e005      	b.n	8008c40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fb4f 	bl	80092da <USBD_CtlError>
      break;
 8008c3c:	e000      	b.n	8008c40 <USBD_StdEPReq+0x330>
      break;
 8008c3e:	bf00      	nop
  }

  return ret;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	885b      	ldrh	r3, [r3, #2]
 8008c66:	0a1b      	lsrs	r3, r3, #8
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	2b06      	cmp	r3, #6
 8008c6e:	f200 8128 	bhi.w	8008ec2 <USBD_GetDescriptor+0x276>
 8008c72:	a201      	add	r2, pc, #4	@ (adr r2, 8008c78 <USBD_GetDescriptor+0x2c>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008c95 	.word	0x08008c95
 8008c7c:	08008cad 	.word	0x08008cad
 8008c80:	08008ced 	.word	0x08008ced
 8008c84:	08008ec3 	.word	0x08008ec3
 8008c88:	08008ec3 	.word	0x08008ec3
 8008c8c:	08008e63 	.word	0x08008e63
 8008c90:	08008e8f 	.word	0x08008e8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	7c12      	ldrb	r2, [r2, #16]
 8008ca0:	f107 0108 	add.w	r1, r7, #8
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	60f8      	str	r0, [r7, #12]
      break;
 8008caa:	e112      	b.n	8008ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7c1b      	ldrb	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10d      	bne.n	8008cd0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cbc:	f107 0208 	add.w	r2, r7, #8
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	2202      	movs	r2, #2
 8008ccc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cce:	e100      	b.n	8008ed2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd8:	f107 0208 	add.w	r2, r7, #8
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4798      	blx	r3
 8008ce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	701a      	strb	r2, [r3, #0]
      break;
 8008cea:	e0f2      	b.n	8008ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	f200 80ac 	bhi.w	8008e50 <USBD_GetDescriptor+0x204>
 8008cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8008d00 <USBD_GetDescriptor+0xb4>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d19 	.word	0x08008d19
 8008d04:	08008d4d 	.word	0x08008d4d
 8008d08:	08008d81 	.word	0x08008d81
 8008d0c:	08008db5 	.word	0x08008db5
 8008d10:	08008de9 	.word	0x08008de9
 8008d14:	08008e1d 	.word	0x08008e1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	7c12      	ldrb	r2, [r2, #16]
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d3a:	e091      	b.n	8008e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 facb 	bl	80092da <USBD_CtlError>
            err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
          break;
 8008d4a:	e089      	b.n	8008e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	7c12      	ldrb	r2, [r2, #16]
 8008d64:	f107 0108 	add.w	r1, r7, #8
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6e:	e077      	b.n	8008e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fab1 	bl	80092da <USBD_CtlError>
            err++;
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7e:	e06f      	b.n	8008e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008da2:	e05d      	b.n	8008e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa97 	bl	80092da <USBD_CtlError>
            err++;
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	3301      	adds	r3, #1
 8008db0:	72fb      	strb	r3, [r7, #11]
          break;
 8008db2:	e055      	b.n	8008e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7c12      	ldrb	r2, [r2, #16]
 8008dcc:	f107 0108 	add.w	r1, r7, #8
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
 8008dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd6:	e043      	b.n	8008e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa7d 	bl	80092da <USBD_CtlError>
            err++;
 8008de0:	7afb      	ldrb	r3, [r7, #11]
 8008de2:	3301      	adds	r3, #1
 8008de4:	72fb      	strb	r3, [r7, #11]
          break;
 8008de6:	e03b      	b.n	8008e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	7c12      	ldrb	r2, [r2, #16]
 8008e00:	f107 0108 	add.w	r1, r7, #8
 8008e04:	4610      	mov	r0, r2
 8008e06:	4798      	blx	r3
 8008e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e0a:	e029      	b.n	8008e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa63 	bl	80092da <USBD_CtlError>
            err++;
 8008e14:	7afb      	ldrb	r3, [r7, #11]
 8008e16:	3301      	adds	r3, #1
 8008e18:	72fb      	strb	r3, [r7, #11]
          break;
 8008e1a:	e021      	b.n	8008e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	7c12      	ldrb	r2, [r2, #16]
 8008e34:	f107 0108 	add.w	r1, r7, #8
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
 8008e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e3e:	e00f      	b.n	8008e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa49 	bl	80092da <USBD_CtlError>
            err++;
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e4e:	e007      	b.n	8008e60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa41 	bl	80092da <USBD_CtlError>
          err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e5e:	bf00      	nop
      }
      break;
 8008e60:	e037      	b.n	8008ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7c1b      	ldrb	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e72:	f107 0208 	add.w	r2, r7, #8
 8008e76:	4610      	mov	r0, r2
 8008e78:	4798      	blx	r3
 8008e7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e7c:	e029      	b.n	8008ed2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fa2a 	bl	80092da <USBD_CtlError>
        err++;
 8008e86:	7afb      	ldrb	r3, [r7, #11]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e8c:	e021      	b.n	8008ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7c1b      	ldrb	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10d      	bne.n	8008eb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9e:	f107 0208 	add.w	r2, r7, #8
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	4798      	blx	r3
 8008ea6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	2207      	movs	r2, #7
 8008eae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eb0:	e00f      	b.n	8008ed2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fa10 	bl	80092da <USBD_CtlError>
        err++;
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8008ec0:	e007      	b.n	8008ed2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fa08 	bl	80092da <USBD_CtlError>
      err++;
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	72fb      	strb	r3, [r7, #11]
      break;
 8008ed0:	bf00      	nop
  }

  if (err != 0U)
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11e      	bne.n	8008f16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	88db      	ldrh	r3, [r3, #6]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d016      	beq.n	8008f0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ee0:	893b      	ldrh	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00e      	beq.n	8008f04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	88da      	ldrh	r2, [r3, #6]
 8008eea:	893b      	ldrh	r3, [r7, #8]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	bf28      	it	cs
 8008ef0:	4613      	movcs	r3, r2
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ef6:	893b      	ldrh	r3, [r7, #8]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa5d 	bl	80093bc <USBD_CtlSendData>
 8008f02:	e009      	b.n	8008f18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9e7 	bl	80092da <USBD_CtlError>
 8008f0c:	e004      	b.n	8008f18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 faae 	bl	8009470 <USBD_CtlSendStatus>
 8008f14:	e000      	b.n	8008f18 <USBD_GetDescriptor+0x2cc>
    return;
 8008f16:	bf00      	nop
  }
}
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop

08008f20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	889b      	ldrh	r3, [r3, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d131      	bne.n	8008f96 <USBD_SetAddress+0x76>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	88db      	ldrh	r3, [r3, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d12d      	bne.n	8008f96 <USBD_SetAddress+0x76>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	885b      	ldrh	r3, [r3, #2]
 8008f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f40:	d829      	bhi.n	8008f96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	885b      	ldrh	r3, [r3, #2]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d104      	bne.n	8008f64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9bc 	bl	80092da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f62:	e01d      	b.n	8008fa0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7bfa      	ldrb	r2, [r7, #15]
 8008f68:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 ff25 	bl	8009dc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa7a 	bl	8009470 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d004      	beq.n	8008f8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8a:	e009      	b.n	8008fa0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f94:	e004      	b.n	8008fa0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f99e 	bl	80092da <USBD_CtlError>
  }
}
 8008f9e:	bf00      	nop
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	885b      	ldrh	r3, [r3, #2]
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	4b4e      	ldr	r3, [pc, #312]	@ (80090f8 <USBD_SetConfig+0x150>)
 8008fbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80090f8 <USBD_SetConfig+0x150>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d905      	bls.n	8008fd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f985 	bl	80092da <USBD_CtlError>
    return USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e08c      	b.n	80090ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d002      	beq.n	8008fe6 <USBD_SetConfig+0x3e>
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d029      	beq.n	8009038 <USBD_SetConfig+0x90>
 8008fe4:	e075      	b.n	80090d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008fe6:	4b44      	ldr	r3, [pc, #272]	@ (80090f8 <USBD_SetConfig+0x150>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d020      	beq.n	8009030 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008fee:	4b42      	ldr	r3, [pc, #264]	@ (80090f8 <USBD_SetConfig+0x150>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80090f8 <USBD_SetConfig+0x150>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7fe ffe3 	bl	8007fca <USBD_SetClassConfig>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f962 	bl	80092da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2202      	movs	r2, #2
 800901a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800901e:	e065      	b.n	80090ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fa25 	bl	8009470 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2203      	movs	r2, #3
 800902a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800902e:	e05d      	b.n	80090ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa1d 	bl	8009470 <USBD_CtlSendStatus>
      break;
 8009036:	e059      	b.n	80090ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009038:	4b2f      	ldr	r3, [pc, #188]	@ (80090f8 <USBD_SetConfig+0x150>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d112      	bne.n	8009066 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009048:	4b2b      	ldr	r3, [pc, #172]	@ (80090f8 <USBD_SetConfig+0x150>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009052:	4b29      	ldr	r3, [pc, #164]	@ (80090f8 <USBD_SetConfig+0x150>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7fe ffd2 	bl	8008002 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa06 	bl	8009470 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009064:	e042      	b.n	80090ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009066:	4b24      	ldr	r3, [pc, #144]	@ (80090f8 <USBD_SetConfig+0x150>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d02a      	beq.n	80090ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7fe ffc0 	bl	8008002 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009082:	4b1d      	ldr	r3, [pc, #116]	@ (80090f8 <USBD_SetConfig+0x150>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800908c:	4b1a      	ldr	r3, [pc, #104]	@ (80090f8 <USBD_SetConfig+0x150>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fe ff99 	bl	8007fca <USBD_SetClassConfig>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00f      	beq.n	80090c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f918 	bl	80092da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fe ffa5 	bl	8008002 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80090c0:	e014      	b.n	80090ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f9d4 	bl	8009470 <USBD_CtlSendStatus>
      break;
 80090c8:	e010      	b.n	80090ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f9d0 	bl	8009470 <USBD_CtlSendStatus>
      break;
 80090d0:	e00c      	b.n	80090ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f900 	bl	80092da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090da:	4b07      	ldr	r3, [pc, #28]	@ (80090f8 <USBD_SetConfig+0x150>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7fe ff8e 	bl	8008002 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090e6:	2303      	movs	r3, #3
 80090e8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ea:	bf00      	nop
  }

  return ret;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	200013c4 	.word	0x200013c4

080090fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	88db      	ldrh	r3, [r3, #6]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d004      	beq.n	8009118 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f8e2 	bl	80092da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009116:	e023      	b.n	8009160 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	dc02      	bgt.n	800912a <USBD_GetConfig+0x2e>
 8009124:	2b00      	cmp	r3, #0
 8009126:	dc03      	bgt.n	8009130 <USBD_GetConfig+0x34>
 8009128:	e015      	b.n	8009156 <USBD_GetConfig+0x5a>
 800912a:	2b03      	cmp	r3, #3
 800912c:	d00b      	beq.n	8009146 <USBD_GetConfig+0x4a>
 800912e:	e012      	b.n	8009156 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3308      	adds	r3, #8
 800913a:	2201      	movs	r2, #1
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f93c 	bl	80093bc <USBD_CtlSendData>
        break;
 8009144:	e00c      	b.n	8009160 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3304      	adds	r3, #4
 800914a:	2201      	movs	r2, #1
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f934 	bl	80093bc <USBD_CtlSendData>
        break;
 8009154:	e004      	b.n	8009160 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f8be 	bl	80092da <USBD_CtlError>
        break;
 800915e:	bf00      	nop
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009178:	b2db      	uxtb	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	2b02      	cmp	r3, #2
 800917e:	d81e      	bhi.n	80091be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	88db      	ldrh	r3, [r3, #6]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d004      	beq.n	8009192 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f8a5 	bl	80092da <USBD_CtlError>
        break;
 8009190:	e01a      	b.n	80091c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	f043 0202 	orr.w	r2, r3, #2
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	330c      	adds	r3, #12
 80091b2:	2202      	movs	r2, #2
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f900 	bl	80093bc <USBD_CtlSendData>
      break;
 80091bc:	e004      	b.n	80091c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f88a 	bl	80092da <USBD_CtlError>
      break;
 80091c6:	bf00      	nop
  }
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d107      	bne.n	80091f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f940 	bl	8009470 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091f0:	e013      	b.n	800921a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	885b      	ldrh	r3, [r3, #2]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d10b      	bne.n	8009212 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	889b      	ldrh	r3, [r3, #4]
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	b29b      	uxth	r3, r3
 8009202:	b2da      	uxtb	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f930 	bl	8009470 <USBD_CtlSendStatus>
}
 8009210:	e003      	b.n	800921a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f860 	bl	80092da <USBD_CtlError>
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009232:	b2db      	uxtb	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	2b02      	cmp	r3, #2
 8009238:	d80b      	bhi.n	8009252 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	885b      	ldrh	r3, [r3, #2]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d10c      	bne.n	800925c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f910 	bl	8009470 <USBD_CtlSendStatus>
      }
      break;
 8009250:	e004      	b.n	800925c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f840 	bl	80092da <USBD_CtlError>
      break;
 800925a:	e000      	b.n	800925e <USBD_ClrFeature+0x3c>
      break;
 800925c:	bf00      	nop
  }
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	781a      	ldrb	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff fa40 	bl	8008716 <SWAPBYTE>
 8009296:	4603      	mov	r3, r0
 8009298:	461a      	mov	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fa33 	bl	8008716 <SWAPBYTE>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3301      	adds	r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff fa26 	bl	8008716 <SWAPBYTE>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461a      	mov	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	80da      	strh	r2, [r3, #6]
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b082      	sub	sp, #8
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e4:	2180      	movs	r1, #128	@ 0x80
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fd00 	bl	8009cec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092ec:	2100      	movs	r1, #0
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fcfc 	bl	8009cec <USBD_LL_StallEP>
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d036      	beq.n	8009380 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009316:	6938      	ldr	r0, [r7, #16]
 8009318:	f000 f836 	bl	8009388 <USBD_GetLen>
 800931c:	4603      	mov	r3, r0
 800931e:	3301      	adds	r3, #1
 8009320:	b29b      	uxth	r3, r3
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	4413      	add	r3, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	7812      	ldrb	r2, [r2, #0]
 8009334:	701a      	strb	r2, [r3, #0]
  idx++;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	3301      	adds	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	4413      	add	r3, r2
 8009342:	2203      	movs	r2, #3
 8009344:	701a      	strb	r2, [r3, #0]
  idx++;
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	3301      	adds	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800934c:	e013      	b.n	8009376 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	4413      	add	r3, r2
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	3301      	adds	r3, #1
 800935e:	613b      	str	r3, [r7, #16]
    idx++;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	3301      	adds	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	4413      	add	r3, r2
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	3301      	adds	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e7      	bne.n	800934e <USBD_GetString+0x52>
 800937e:	e000      	b.n	8009382 <USBD_GetString+0x86>
    return;
 8009380:	bf00      	nop
  }
}
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009398:	e005      	b.n	80093a6 <USBD_GetLen+0x1e>
  {
    len++;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	3301      	adds	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1f5      	bne.n	800939a <USBD_GetLen+0x12>
  }

  return len;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	2100      	movs	r1, #0
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 fd0b 	bl	8009dfe <USBD_LL_Transmit>

  return USBD_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	2100      	movs	r1, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fcfa 	bl	8009dfe <USBD_LL_Transmit>

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2203      	movs	r2, #3
 8009424:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	2100      	movs	r1, #0
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fcfe 	bl	8009e40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	2100      	movs	r1, #0
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fced 	bl	8009e40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2204      	movs	r2, #4
 800947c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009480:	2300      	movs	r3, #0
 8009482:	2200      	movs	r2, #0
 8009484:	2100      	movs	r1, #0
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fcb9 	bl	8009dfe <USBD_LL_Transmit>

  return USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2205      	movs	r2, #5
 80094a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094a6:	2300      	movs	r3, #0
 80094a8:	2200      	movs	r2, #0
 80094aa:	2100      	movs	r1, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fcc7 	bl	8009e40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094c0:	2200      	movs	r2, #0
 80094c2:	4912      	ldr	r1, [pc, #72]	@ (800950c <MX_USB_DEVICE_Init+0x50>)
 80094c4:	4812      	ldr	r0, [pc, #72]	@ (8009510 <MX_USB_DEVICE_Init+0x54>)
 80094c6:	f7fe fd03 	bl	8007ed0 <USBD_Init>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094d0:	f7f7 f9f2 	bl	80008b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094d4:	490f      	ldr	r1, [pc, #60]	@ (8009514 <MX_USB_DEVICE_Init+0x58>)
 80094d6:	480e      	ldr	r0, [pc, #56]	@ (8009510 <MX_USB_DEVICE_Init+0x54>)
 80094d8:	f7fe fd2a 	bl	8007f30 <USBD_RegisterClass>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094e2:	f7f7 f9e9 	bl	80008b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80094e6:	490c      	ldr	r1, [pc, #48]	@ (8009518 <MX_USB_DEVICE_Init+0x5c>)
 80094e8:	4809      	ldr	r0, [pc, #36]	@ (8009510 <MX_USB_DEVICE_Init+0x54>)
 80094ea:	f7fe fc21 	bl	8007d30 <USBD_CDC_RegisterInterface>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094f4:	f7f7 f9e0 	bl	80008b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094f8:	4805      	ldr	r0, [pc, #20]	@ (8009510 <MX_USB_DEVICE_Init+0x54>)
 80094fa:	f7fe fd4f 	bl	8007f9c <USBD_Start>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009504:	f7f7 f9d8 	bl	80008b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009508:	bf00      	nop
 800950a:	bd80      	pop	{r7, pc}
 800950c:	200000ac 	.word	0x200000ac
 8009510:	200013c8 	.word	0x200013c8
 8009514:	20000018 	.word	0x20000018
 8009518:	20000098 	.word	0x20000098

0800951c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009520:	2200      	movs	r2, #0
 8009522:	4905      	ldr	r1, [pc, #20]	@ (8009538 <CDC_Init_FS+0x1c>)
 8009524:	4805      	ldr	r0, [pc, #20]	@ (800953c <CDC_Init_FS+0x20>)
 8009526:	f7fe fc1d 	bl	8007d64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800952a:	4905      	ldr	r1, [pc, #20]	@ (8009540 <CDC_Init_FS+0x24>)
 800952c:	4803      	ldr	r0, [pc, #12]	@ (800953c <CDC_Init_FS+0x20>)
 800952e:	f7fe fc3b 	bl	8007da8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009534:	4618      	mov	r0, r3
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20001ea4 	.word	0x20001ea4
 800953c:	200013c8 	.word	0x200013c8
 8009540:	200016a4 	.word	0x200016a4

08009544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800954a:	4618      	mov	r0, r3
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	6039      	str	r1, [r7, #0]
 800955e:	71fb      	strb	r3, [r7, #7]
 8009560:	4613      	mov	r3, r2
 8009562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	2b23      	cmp	r3, #35	@ 0x23
 8009568:	d84a      	bhi.n	8009600 <CDC_Control_FS+0xac>
 800956a:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <CDC_Control_FS+0x1c>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009601 	.word	0x08009601
 8009574:	08009601 	.word	0x08009601
 8009578:	08009601 	.word	0x08009601
 800957c:	08009601 	.word	0x08009601
 8009580:	08009601 	.word	0x08009601
 8009584:	08009601 	.word	0x08009601
 8009588:	08009601 	.word	0x08009601
 800958c:	08009601 	.word	0x08009601
 8009590:	08009601 	.word	0x08009601
 8009594:	08009601 	.word	0x08009601
 8009598:	08009601 	.word	0x08009601
 800959c:	08009601 	.word	0x08009601
 80095a0:	08009601 	.word	0x08009601
 80095a4:	08009601 	.word	0x08009601
 80095a8:	08009601 	.word	0x08009601
 80095ac:	08009601 	.word	0x08009601
 80095b0:	08009601 	.word	0x08009601
 80095b4:	08009601 	.word	0x08009601
 80095b8:	08009601 	.word	0x08009601
 80095bc:	08009601 	.word	0x08009601
 80095c0:	08009601 	.word	0x08009601
 80095c4:	08009601 	.word	0x08009601
 80095c8:	08009601 	.word	0x08009601
 80095cc:	08009601 	.word	0x08009601
 80095d0:	08009601 	.word	0x08009601
 80095d4:	08009601 	.word	0x08009601
 80095d8:	08009601 	.word	0x08009601
 80095dc:	08009601 	.word	0x08009601
 80095e0:	08009601 	.word	0x08009601
 80095e4:	08009601 	.word	0x08009601
 80095e8:	08009601 	.word	0x08009601
 80095ec:	08009601 	.word	0x08009601
 80095f0:	08009601 	.word	0x08009601
 80095f4:	08009601 	.word	0x08009601
 80095f8:	08009601 	.word	0x08009601
 80095fc:	08009601 	.word	0x08009601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009600:	bf00      	nop
  }

  return (USBD_OK);
 8009602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_CdcRxBuffer_FS_cnt = *Len;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a0a      	ldr	r2, [pc, #40]	@ (8009648 <CDC_Receive_FS+0x38>)
 8009620:	6013      	str	r3, [r2, #0]
  strncpy(USB_CdcRxBuffer_FS, Buf, *Len);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	4808      	ldr	r0, [pc, #32]	@ (800964c <CDC_Receive_FS+0x3c>)
 800962c:	f000 fcba 	bl	8009fa4 <strncpy>

  // memcpy((uint8_t *) USB_CdcRxBuffer_FS, (uint8_t *) Buf, sizeof(*Len));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	4807      	ldr	r0, [pc, #28]	@ (8009650 <CDC_Receive_FS+0x40>)
 8009634:	f7fe fbb8 	bl	8007da8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009638:	4805      	ldr	r0, [pc, #20]	@ (8009650 <CDC_Receive_FS+0x40>)
 800963a:	f7fe fc13 	bl	8007e64 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800963e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000bb4 	.word	0x20000bb4
 800964c:	200003b4 	.word	0x200003b4
 8009650:	200013c8 	.word	0x200013c8

08009654 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  uint32_t startTick = HAL_GetTick();
 8009664:	f7f7 ffe4 	bl	8001630 <HAL_GetTick>
 8009668:	6138      	str	r0, [r7, #16]
  uint32_t TIMEOUT_VALUE = 1U;
 800966a:	2301      	movs	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800966e:	4b14      	ldr	r3, [pc, #80]	@ (80096c0 <CDC_Transmit_FS+0x6c>)
 8009670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009674:	60bb      	str	r3, [r7, #8]
  if (hcdc == NULL)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10b      	bne.n	8009694 <CDC_Transmit_FS+0x40>
  {
    return USBD_FAIL;
 800967c:	2303      	movs	r3, #3
 800967e:	e01a      	b.n	80096b6 <CDC_Transmit_FS+0x62>
  }

  while (hcdc->TxState != 0)
  {
    if ((HAL_GetTick() - startTick) > TIMEOUT_VALUE)
 8009680:	f7f7 ffd6 	bl	8001630 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	429a      	cmp	r2, r3
 800968e:	d201      	bcs.n	8009694 <CDC_Transmit_FS+0x40>
    {
      return USBD_FAIL;
 8009690:	2303      	movs	r3, #3
 8009692:	e010      	b.n	80096b6 <CDC_Transmit_FS+0x62>
  while (hcdc->TxState != 0)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1f0      	bne.n	8009680 <CDC_Transmit_FS+0x2c>
    }
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800969e:	887b      	ldrh	r3, [r7, #2]
 80096a0:	461a      	mov	r2, r3
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	4806      	ldr	r0, [pc, #24]	@ (80096c0 <CDC_Transmit_FS+0x6c>)
 80096a6:	f7fe fb5d 	bl	8007d64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096aa:	4805      	ldr	r0, [pc, #20]	@ (80096c0 <CDC_Transmit_FS+0x6c>)
 80096ac:	f7fe fb9a 	bl	8007de4 <USBD_CDC_TransmitPacket>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 7 */
  return result;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	200013c8 	.word	0x200013c8

080096c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80096d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	6039      	str	r1, [r7, #0]
 80096f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2212      	movs	r2, #18
 80096f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096fa:	4b03      	ldr	r3, [pc, #12]	@ (8009708 <USBD_FS_DeviceDescriptor+0x20>)
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	200000c8 	.word	0x200000c8

0800970c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	6039      	str	r1, [r7, #0]
 8009716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2204      	movs	r2, #4
 800971c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800971e:	4b03      	ldr	r3, [pc, #12]	@ (800972c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	200000dc 	.word	0x200000dc

08009730 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	4907      	ldr	r1, [pc, #28]	@ (8009764 <USBD_FS_ProductStrDescriptor+0x34>)
 8009746:	4808      	ldr	r0, [pc, #32]	@ (8009768 <USBD_FS_ProductStrDescriptor+0x38>)
 8009748:	f7ff fdd8 	bl	80092fc <USBD_GetString>
 800974c:	e004      	b.n	8009758 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	4904      	ldr	r1, [pc, #16]	@ (8009764 <USBD_FS_ProductStrDescriptor+0x34>)
 8009752:	4805      	ldr	r0, [pc, #20]	@ (8009768 <USBD_FS_ProductStrDescriptor+0x38>)
 8009754:	f7ff fdd2 	bl	80092fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009758:	4b02      	ldr	r3, [pc, #8]	@ (8009764 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	200026a4 	.word	0x200026a4
 8009768:	0800ab30 	.word	0x0800ab30

0800976c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	4904      	ldr	r1, [pc, #16]	@ (800978c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800977c:	4804      	ldr	r0, [pc, #16]	@ (8009790 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800977e:	f7ff fdbd 	bl	80092fc <USBD_GetString>
  return USBD_StrDesc;
 8009782:	4b02      	ldr	r3, [pc, #8]	@ (800978c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	200026a4 	.word	0x200026a4
 8009790:	0800ab48 	.word	0x0800ab48

08009794 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	6039      	str	r1, [r7, #0]
 800979e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	221a      	movs	r2, #26
 80097a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097a6:	f000 f843 	bl	8009830 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097aa:	4b02      	ldr	r3, [pc, #8]	@ (80097b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	200000e0 	.word	0x200000e0

080097b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d105      	bne.n	80097d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4907      	ldr	r1, [pc, #28]	@ (80097ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80097ce:	4808      	ldr	r0, [pc, #32]	@ (80097f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097d0:	f7ff fd94 	bl	80092fc <USBD_GetString>
 80097d4:	e004      	b.n	80097e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	4904      	ldr	r1, [pc, #16]	@ (80097ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80097da:	4805      	ldr	r0, [pc, #20]	@ (80097f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097dc:	f7ff fd8e 	bl	80092fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80097e0:	4b02      	ldr	r3, [pc, #8]	@ (80097ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	200026a4 	.word	0x200026a4
 80097f0:	0800ab5c 	.word	0x0800ab5c

080097f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d105      	bne.n	8009812 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4907      	ldr	r1, [pc, #28]	@ (8009828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800980a:	4808      	ldr	r0, [pc, #32]	@ (800982c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800980c:	f7ff fd76 	bl	80092fc <USBD_GetString>
 8009810:	e004      	b.n	800981c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4904      	ldr	r1, [pc, #16]	@ (8009828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009816:	4805      	ldr	r0, [pc, #20]	@ (800982c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009818:	f7ff fd70 	bl	80092fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800981c:	4b02      	ldr	r3, [pc, #8]	@ (8009828 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	200026a4 	.word	0x200026a4
 800982c:	0800ab68 	.word	0x0800ab68

08009830 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009836:	4b0f      	ldr	r3, [pc, #60]	@ (8009874 <Get_SerialNum+0x44>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800983c:	4b0e      	ldr	r3, [pc, #56]	@ (8009878 <Get_SerialNum+0x48>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009842:	4b0e      	ldr	r3, [pc, #56]	@ (800987c <Get_SerialNum+0x4c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4413      	add	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d009      	beq.n	800986a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009856:	2208      	movs	r2, #8
 8009858:	4909      	ldr	r1, [pc, #36]	@ (8009880 <Get_SerialNum+0x50>)
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 f814 	bl	8009888 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009860:	2204      	movs	r2, #4
 8009862:	4908      	ldr	r1, [pc, #32]	@ (8009884 <Get_SerialNum+0x54>)
 8009864:	68b8      	ldr	r0, [r7, #8]
 8009866:	f000 f80f 	bl	8009888 <IntToUnicode>
  }
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	1fff7a10 	.word	0x1fff7a10
 8009878:	1fff7a14 	.word	0x1fff7a14
 800987c:	1fff7a18 	.word	0x1fff7a18
 8009880:	200000e2 	.word	0x200000e2
 8009884:	200000f2 	.word	0x200000f2

08009888 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
 800989e:	e027      	b.n	80098f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	0f1b      	lsrs	r3, r3, #28
 80098a4:	2b09      	cmp	r3, #9
 80098a6:	d80b      	bhi.n	80098c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	0f1b      	lsrs	r3, r3, #28
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	4619      	mov	r1, r3
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	440b      	add	r3, r1
 80098b8:	3230      	adds	r2, #48	@ 0x30
 80098ba:	b2d2      	uxtb	r2, r2
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	e00a      	b.n	80098d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	0f1b      	lsrs	r3, r3, #28
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	4619      	mov	r1, r3
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	440b      	add	r3, r1
 80098d0:	3237      	adds	r2, #55	@ 0x37
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	011b      	lsls	r3, r3, #4
 80098da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	3301      	adds	r3, #1
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	4413      	add	r3, r2
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	3301      	adds	r3, #1
 80098ee:	75fb      	strb	r3, [r7, #23]
 80098f0:	7dfa      	ldrb	r2, [r7, #23]
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d3d3      	bcc.n	80098a0 <IntToUnicode+0x18>
  }
}
 80098f8:	bf00      	nop
 80098fa:	bf00      	nop
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b08a      	sub	sp, #40	@ 0x28
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	605a      	str	r2, [r3, #4]
 800991a:	609a      	str	r2, [r3, #8]
 800991c:	60da      	str	r2, [r3, #12]
 800991e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009928:	d13a      	bne.n	80099a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800992a:	2300      	movs	r3, #0
 800992c:	613b      	str	r3, [r7, #16]
 800992e:	4b1e      	ldr	r3, [pc, #120]	@ (80099a8 <HAL_PCD_MspInit+0xa0>)
 8009930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009932:	4a1d      	ldr	r2, [pc, #116]	@ (80099a8 <HAL_PCD_MspInit+0xa0>)
 8009934:	f043 0301 	orr.w	r3, r3, #1
 8009938:	6313      	str	r3, [r2, #48]	@ 0x30
 800993a:	4b1b      	ldr	r3, [pc, #108]	@ (80099a8 <HAL_PCD_MspInit+0xa0>)
 800993c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	613b      	str	r3, [r7, #16]
 8009944:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8009946:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800994a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800994c:	2302      	movs	r3, #2
 800994e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009954:	2303      	movs	r3, #3
 8009956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009958:	230a      	movs	r3, #10
 800995a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800995c:	f107 0314 	add.w	r3, r7, #20
 8009960:	4619      	mov	r1, r3
 8009962:	4812      	ldr	r0, [pc, #72]	@ (80099ac <HAL_PCD_MspInit+0xa4>)
 8009964:	f7f8 fbc2 	bl	80020ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009968:	4b0f      	ldr	r3, [pc, #60]	@ (80099a8 <HAL_PCD_MspInit+0xa0>)
 800996a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800996c:	4a0e      	ldr	r2, [pc, #56]	@ (80099a8 <HAL_PCD_MspInit+0xa0>)
 800996e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009972:	6353      	str	r3, [r2, #52]	@ 0x34
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	4b0b      	ldr	r3, [pc, #44]	@ (80099a8 <HAL_PCD_MspInit+0xa0>)
 800997a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997c:	4a0a      	ldr	r2, [pc, #40]	@ (80099a8 <HAL_PCD_MspInit+0xa0>)
 800997e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009982:	6453      	str	r3, [r2, #68]	@ 0x44
 8009984:	4b08      	ldr	r3, [pc, #32]	@ (80099a8 <HAL_PCD_MspInit+0xa0>)
 8009986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800998c:	60fb      	str	r3, [r7, #12]
 800998e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009990:	2200      	movs	r2, #0
 8009992:	2100      	movs	r1, #0
 8009994:	2043      	movs	r0, #67	@ 0x43
 8009996:	f7f7 ff6c 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800999a:	2043      	movs	r0, #67	@ 0x43
 800999c:	f7f7 ff85 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099a0:	bf00      	nop
 80099a2:	3728      	adds	r7, #40	@ 0x28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	40023800 	.word	0x40023800
 80099ac:	40020000 	.word	0x40020000

080099b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7fe fb35 	bl	8008036 <USBD_LL_SetupStage>
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	00db      	lsls	r3, r3, #3
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	4619      	mov	r1, r3
 80099fe:	f7fe fb6f 	bl	80080e0 <USBD_LL_DataOutStage>
}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	3320      	adds	r3, #32
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	4619      	mov	r1, r3
 8009a32:	f7fe fc08 	bl	8008246 <USBD_LL_DataInStage>
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fd42 	bl	80084d6 <USBD_LL_SOF>
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a62:	2301      	movs	r3, #1
 8009a64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	79db      	ldrb	r3, [r3, #7]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d102      	bne.n	8009a74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]
 8009a72:	e008      	b.n	8009a86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	79db      	ldrb	r3, [r3, #7]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d102      	bne.n	8009a82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	73fb      	strb	r3, [r7, #15]
 8009a80:	e001      	b.n	8009a86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009a82:	f7f6 ff19 	bl	80008b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a8c:	7bfa      	ldrb	r2, [r7, #15]
 8009a8e:	4611      	mov	r1, r2
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fcdc 	bl	800844e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe fc84 	bl	80083aa <USBD_LL_Reset>
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fcd7 	bl	800846e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ad2:	f043 0301 	orr.w	r3, r3, #1
 8009ad6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	7adb      	ldrb	r3, [r3, #11]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d005      	beq.n	8009aec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ae0:	4b04      	ldr	r3, [pc, #16]	@ (8009af4 <HAL_PCD_SuspendCallback+0x48>)
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	4a03      	ldr	r2, [pc, #12]	@ (8009af4 <HAL_PCD_SuspendCallback+0x48>)
 8009ae6:	f043 0306 	orr.w	r3, r3, #6
 8009aea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	e000ed00 	.word	0xe000ed00

08009af8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fccd 	bl	80084a6 <USBD_LL_Resume>
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b26:	78fa      	ldrb	r2, [r7, #3]
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe fd25 	bl	800857a <USBD_LL_IsoOUTIncomplete>
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	460b      	mov	r3, r1
 8009b42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fce1 	bl	8008516 <USBD_LL_IsoINIncomplete>
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe fd37 	bl	80085de <USBD_LL_DevConnected>
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fd34 	bl	80085f4 <USBD_LL_DevDisconnected>
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d13c      	bne.n	8009c1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ba4:	4a20      	ldr	r2, [pc, #128]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a1e      	ldr	r2, [pc, #120]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bb0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009bba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bbe:	2204      	movs	r2, #4
 8009bc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009bc2:	4b19      	ldr	r3, [pc, #100]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009bc8:	4b17      	ldr	r3, [pc, #92]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bce:	4b16      	ldr	r3, [pc, #88]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009bd4:	4b14      	ldr	r3, [pc, #80]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009bda:	4b13      	ldr	r3, [pc, #76]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009be0:	4b11      	ldr	r3, [pc, #68]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009be6:	4b10      	ldr	r3, [pc, #64]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009bec:	4b0e      	ldr	r3, [pc, #56]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009bf2:	480d      	ldr	r0, [pc, #52]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009bf4:	f7f8 fc59 	bl	80024aa <HAL_PCD_Init>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009bfe:	f7f6 fe5b 	bl	80008b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c02:	2180      	movs	r1, #128	@ 0x80
 8009c04:	4808      	ldr	r0, [pc, #32]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009c06:	f7f9 fe84 	bl	8003912 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c0a:	2240      	movs	r2, #64	@ 0x40
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4806      	ldr	r0, [pc, #24]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009c10:	f7f9 fe38 	bl	8003884 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c14:	2280      	movs	r2, #128	@ 0x80
 8009c16:	2101      	movs	r1, #1
 8009c18:	4803      	ldr	r0, [pc, #12]	@ (8009c28 <USBD_LL_Init+0x94>)
 8009c1a:	f7f9 fe33 	bl	8003884 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	200028a4 	.word	0x200028a4

08009c2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7f8 fd40 	bl	80026c8 <HAL_PCD_Start>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 f942 	bl	8009ed8 <USBD_Get_USB_Status>
 8009c54:	4603      	mov	r3, r0
 8009c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	461a      	mov	r2, r3
 8009c70:	4603      	mov	r3, r0
 8009c72:	70fb      	strb	r3, [r7, #3]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70bb      	strb	r3, [r7, #2]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009c8a:	78bb      	ldrb	r3, [r7, #2]
 8009c8c:	883a      	ldrh	r2, [r7, #0]
 8009c8e:	78f9      	ldrb	r1, [r7, #3]
 8009c90:	f7f9 fa14 	bl	80030bc <HAL_PCD_EP_Open>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f91c 	bl	8009ed8 <USBD_Get_USB_Status>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f9 fa5d 	bl	800318c <HAL_PCD_EP_Close>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f8fd 	bl	8009ed8 <USBD_Get_USB_Status>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d06:	78fa      	ldrb	r2, [r7, #3]
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7f9 fb15 	bl	800333a <HAL_PCD_EP_SetStall>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f8de 	bl	8009ed8 <USBD_Get_USB_Status>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	460b      	mov	r3, r1
 8009d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d44:	78fa      	ldrb	r2, [r7, #3]
 8009d46:	4611      	mov	r1, r2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7f9 fb59 	bl	8003400 <HAL_PCD_EP_ClrStall>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 f8bf 	bl	8009ed8 <USBD_Get_USB_Status>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	da0b      	bge.n	8009d9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d8a:	68f9      	ldr	r1, [r7, #12]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	00db      	lsls	r3, r3, #3
 8009d90:	4413      	add	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	440b      	add	r3, r1
 8009d96:	3316      	adds	r3, #22
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	e00b      	b.n	8009db4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d9c:	78fb      	ldrb	r3, [r7, #3]
 8009d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009da2:	68f9      	ldr	r1, [r7, #12]
 8009da4:	4613      	mov	r3, r2
 8009da6:	00db      	lsls	r3, r3, #3
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	440b      	add	r3, r1
 8009dae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009db2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009dda:	78fa      	ldrb	r2, [r7, #3]
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7f9 f948 	bl	8003074 <HAL_PCD_SetAddress>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 f874 	bl	8009ed8 <USBD_Get_USB_Status>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b086      	sub	sp, #24
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e1c:	7af9      	ldrb	r1, [r7, #11]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	f7f9 fa50 	bl	80032c6 <HAL_PCD_EP_Transmit>
 8009e26:	4603      	mov	r3, r0
 8009e28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 f853 	bl	8009ed8 <USBD_Get_USB_Status>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e36:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	607a      	str	r2, [r7, #4]
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e5e:	7af9      	ldrb	r1, [r7, #11]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	f7f9 f9dc 	bl	8003220 <HAL_PCD_EP_Receive>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f832 	bl	8009ed8 <USBD_Get_USB_Status>
 8009e74:	4603      	mov	r3, r0
 8009e76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e78:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b082      	sub	sp, #8
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e94:	78fa      	ldrb	r2, [r7, #3]
 8009e96:	4611      	mov	r1, r2
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7f9 f9fc 	bl	8003296 <HAL_PCD_EP_GetRxCount>
 8009e9e:	4603      	mov	r3, r0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009eb0:	4b03      	ldr	r3, [pc, #12]	@ (8009ec0 <USBD_static_malloc+0x18>)
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	20002d88 	.word	0x20002d88

08009ec4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]

}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ee6:	79fb      	ldrb	r3, [r7, #7]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d817      	bhi.n	8009f1c <USBD_Get_USB_Status+0x44>
 8009eec:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <USBD_Get_USB_Status+0x1c>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f05 	.word	0x08009f05
 8009ef8:	08009f0b 	.word	0x08009f0b
 8009efc:	08009f11 	.word	0x08009f11
 8009f00:	08009f17 	.word	0x08009f17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	73fb      	strb	r3, [r7, #15]
    break;
 8009f08:	e00b      	b.n	8009f22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f0e:	e008      	b.n	8009f22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f10:	2301      	movs	r3, #1
 8009f12:	73fb      	strb	r3, [r7, #15]
    break;
 8009f14:	e005      	b.n	8009f22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
 8009f18:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1a:	e002      	b.n	8009f22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f20:	bf00      	nop
  }
  return usb_status;
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <siprintf>:
 8009f30:	b40e      	push	{r1, r2, r3}
 8009f32:	b500      	push	{lr}
 8009f34:	b09c      	sub	sp, #112	@ 0x70
 8009f36:	ab1d      	add	r3, sp, #116	@ 0x74
 8009f38:	9002      	str	r0, [sp, #8]
 8009f3a:	9006      	str	r0, [sp, #24]
 8009f3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f40:	4809      	ldr	r0, [pc, #36]	@ (8009f68 <siprintf+0x38>)
 8009f42:	9107      	str	r1, [sp, #28]
 8009f44:	9104      	str	r1, [sp, #16]
 8009f46:	4909      	ldr	r1, [pc, #36]	@ (8009f6c <siprintf+0x3c>)
 8009f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f4c:	9105      	str	r1, [sp, #20]
 8009f4e:	6800      	ldr	r0, [r0, #0]
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	a902      	add	r1, sp, #8
 8009f54:	f000 f9ba 	bl	800a2cc <_svfiprintf_r>
 8009f58:	9b02      	ldr	r3, [sp, #8]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	701a      	strb	r2, [r3, #0]
 8009f5e:	b01c      	add	sp, #112	@ 0x70
 8009f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f64:	b003      	add	sp, #12
 8009f66:	4770      	bx	lr
 8009f68:	200000fc 	.word	0x200000fc
 8009f6c:	ffff0208 	.word	0xffff0208

08009f70 <memset>:
 8009f70:	4402      	add	r2, r0
 8009f72:	4603      	mov	r3, r0
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d100      	bne.n	8009f7a <memset+0xa>
 8009f78:	4770      	bx	lr
 8009f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f7e:	e7f9      	b.n	8009f74 <memset+0x4>

08009f80 <strncmp>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	b16a      	cbz	r2, 8009fa0 <strncmp+0x20>
 8009f84:	3901      	subs	r1, #1
 8009f86:	1884      	adds	r4, r0, r2
 8009f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d103      	bne.n	8009f9c <strncmp+0x1c>
 8009f94:	42a0      	cmp	r0, r4
 8009f96:	d001      	beq.n	8009f9c <strncmp+0x1c>
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	d1f5      	bne.n	8009f88 <strncmp+0x8>
 8009f9c:	1ad0      	subs	r0, r2, r3
 8009f9e:	bd10      	pop	{r4, pc}
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	e7fc      	b.n	8009f9e <strncmp+0x1e>

08009fa4 <strncpy>:
 8009fa4:	b510      	push	{r4, lr}
 8009fa6:	3901      	subs	r1, #1
 8009fa8:	4603      	mov	r3, r0
 8009faa:	b132      	cbz	r2, 8009fba <strncpy+0x16>
 8009fac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009fb0:	f803 4b01 	strb.w	r4, [r3], #1
 8009fb4:	3a01      	subs	r2, #1
 8009fb6:	2c00      	cmp	r4, #0
 8009fb8:	d1f7      	bne.n	8009faa <strncpy+0x6>
 8009fba:	441a      	add	r2, r3
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d100      	bne.n	8009fc4 <strncpy+0x20>
 8009fc2:	bd10      	pop	{r4, pc}
 8009fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8009fc8:	e7f9      	b.n	8009fbe <strncpy+0x1a>
	...

08009fcc <__errno>:
 8009fcc:	4b01      	ldr	r3, [pc, #4]	@ (8009fd4 <__errno+0x8>)
 8009fce:	6818      	ldr	r0, [r3, #0]
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	200000fc 	.word	0x200000fc

08009fd8 <__libc_init_array>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	4d0d      	ldr	r5, [pc, #52]	@ (800a010 <__libc_init_array+0x38>)
 8009fdc:	4c0d      	ldr	r4, [pc, #52]	@ (800a014 <__libc_init_array+0x3c>)
 8009fde:	1b64      	subs	r4, r4, r5
 8009fe0:	10a4      	asrs	r4, r4, #2
 8009fe2:	2600      	movs	r6, #0
 8009fe4:	42a6      	cmp	r6, r4
 8009fe6:	d109      	bne.n	8009ffc <__libc_init_array+0x24>
 8009fe8:	4d0b      	ldr	r5, [pc, #44]	@ (800a018 <__libc_init_array+0x40>)
 8009fea:	4c0c      	ldr	r4, [pc, #48]	@ (800a01c <__libc_init_array+0x44>)
 8009fec:	f000 fc66 	bl	800a8bc <_init>
 8009ff0:	1b64      	subs	r4, r4, r5
 8009ff2:	10a4      	asrs	r4, r4, #2
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	42a6      	cmp	r6, r4
 8009ff8:	d105      	bne.n	800a006 <__libc_init_array+0x2e>
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a000:	4798      	blx	r3
 800a002:	3601      	adds	r6, #1
 800a004:	e7ee      	b.n	8009fe4 <__libc_init_array+0xc>
 800a006:	f855 3b04 	ldr.w	r3, [r5], #4
 800a00a:	4798      	blx	r3
 800a00c:	3601      	adds	r6, #1
 800a00e:	e7f2      	b.n	8009ff6 <__libc_init_array+0x1e>
 800a010:	0800abd4 	.word	0x0800abd4
 800a014:	0800abd4 	.word	0x0800abd4
 800a018:	0800abd4 	.word	0x0800abd4
 800a01c:	0800abd8 	.word	0x0800abd8

0800a020 <__retarget_lock_acquire_recursive>:
 800a020:	4770      	bx	lr

0800a022 <__retarget_lock_release_recursive>:
 800a022:	4770      	bx	lr

0800a024 <_free_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4605      	mov	r5, r0
 800a028:	2900      	cmp	r1, #0
 800a02a:	d041      	beq.n	800a0b0 <_free_r+0x8c>
 800a02c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a030:	1f0c      	subs	r4, r1, #4
 800a032:	2b00      	cmp	r3, #0
 800a034:	bfb8      	it	lt
 800a036:	18e4      	addlt	r4, r4, r3
 800a038:	f000 f8e0 	bl	800a1fc <__malloc_lock>
 800a03c:	4a1d      	ldr	r2, [pc, #116]	@ (800a0b4 <_free_r+0x90>)
 800a03e:	6813      	ldr	r3, [r2, #0]
 800a040:	b933      	cbnz	r3, 800a050 <_free_r+0x2c>
 800a042:	6063      	str	r3, [r4, #4]
 800a044:	6014      	str	r4, [r2, #0]
 800a046:	4628      	mov	r0, r5
 800a048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a04c:	f000 b8dc 	b.w	800a208 <__malloc_unlock>
 800a050:	42a3      	cmp	r3, r4
 800a052:	d908      	bls.n	800a066 <_free_r+0x42>
 800a054:	6820      	ldr	r0, [r4, #0]
 800a056:	1821      	adds	r1, r4, r0
 800a058:	428b      	cmp	r3, r1
 800a05a:	bf01      	itttt	eq
 800a05c:	6819      	ldreq	r1, [r3, #0]
 800a05e:	685b      	ldreq	r3, [r3, #4]
 800a060:	1809      	addeq	r1, r1, r0
 800a062:	6021      	streq	r1, [r4, #0]
 800a064:	e7ed      	b.n	800a042 <_free_r+0x1e>
 800a066:	461a      	mov	r2, r3
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	b10b      	cbz	r3, 800a070 <_free_r+0x4c>
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	d9fa      	bls.n	800a066 <_free_r+0x42>
 800a070:	6811      	ldr	r1, [r2, #0]
 800a072:	1850      	adds	r0, r2, r1
 800a074:	42a0      	cmp	r0, r4
 800a076:	d10b      	bne.n	800a090 <_free_r+0x6c>
 800a078:	6820      	ldr	r0, [r4, #0]
 800a07a:	4401      	add	r1, r0
 800a07c:	1850      	adds	r0, r2, r1
 800a07e:	4283      	cmp	r3, r0
 800a080:	6011      	str	r1, [r2, #0]
 800a082:	d1e0      	bne.n	800a046 <_free_r+0x22>
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	6053      	str	r3, [r2, #4]
 800a08a:	4408      	add	r0, r1
 800a08c:	6010      	str	r0, [r2, #0]
 800a08e:	e7da      	b.n	800a046 <_free_r+0x22>
 800a090:	d902      	bls.n	800a098 <_free_r+0x74>
 800a092:	230c      	movs	r3, #12
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	e7d6      	b.n	800a046 <_free_r+0x22>
 800a098:	6820      	ldr	r0, [r4, #0]
 800a09a:	1821      	adds	r1, r4, r0
 800a09c:	428b      	cmp	r3, r1
 800a09e:	bf04      	itt	eq
 800a0a0:	6819      	ldreq	r1, [r3, #0]
 800a0a2:	685b      	ldreq	r3, [r3, #4]
 800a0a4:	6063      	str	r3, [r4, #4]
 800a0a6:	bf04      	itt	eq
 800a0a8:	1809      	addeq	r1, r1, r0
 800a0aa:	6021      	streq	r1, [r4, #0]
 800a0ac:	6054      	str	r4, [r2, #4]
 800a0ae:	e7ca      	b.n	800a046 <_free_r+0x22>
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
 800a0b2:	bf00      	nop
 800a0b4:	200030ec 	.word	0x200030ec

0800a0b8 <sbrk_aligned>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	4e0f      	ldr	r6, [pc, #60]	@ (800a0f8 <sbrk_aligned+0x40>)
 800a0bc:	460c      	mov	r4, r1
 800a0be:	6831      	ldr	r1, [r6, #0]
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	b911      	cbnz	r1, 800a0ca <sbrk_aligned+0x12>
 800a0c4:	f000 fba6 	bl	800a814 <_sbrk_r>
 800a0c8:	6030      	str	r0, [r6, #0]
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 fba1 	bl	800a814 <_sbrk_r>
 800a0d2:	1c43      	adds	r3, r0, #1
 800a0d4:	d103      	bne.n	800a0de <sbrk_aligned+0x26>
 800a0d6:	f04f 34ff 	mov.w	r4, #4294967295
 800a0da:	4620      	mov	r0, r4
 800a0dc:	bd70      	pop	{r4, r5, r6, pc}
 800a0de:	1cc4      	adds	r4, r0, #3
 800a0e0:	f024 0403 	bic.w	r4, r4, #3
 800a0e4:	42a0      	cmp	r0, r4
 800a0e6:	d0f8      	beq.n	800a0da <sbrk_aligned+0x22>
 800a0e8:	1a21      	subs	r1, r4, r0
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f000 fb92 	bl	800a814 <_sbrk_r>
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d1f2      	bne.n	800a0da <sbrk_aligned+0x22>
 800a0f4:	e7ef      	b.n	800a0d6 <sbrk_aligned+0x1e>
 800a0f6:	bf00      	nop
 800a0f8:	200030e8 	.word	0x200030e8

0800a0fc <_malloc_r>:
 800a0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a100:	1ccd      	adds	r5, r1, #3
 800a102:	f025 0503 	bic.w	r5, r5, #3
 800a106:	3508      	adds	r5, #8
 800a108:	2d0c      	cmp	r5, #12
 800a10a:	bf38      	it	cc
 800a10c:	250c      	movcc	r5, #12
 800a10e:	2d00      	cmp	r5, #0
 800a110:	4606      	mov	r6, r0
 800a112:	db01      	blt.n	800a118 <_malloc_r+0x1c>
 800a114:	42a9      	cmp	r1, r5
 800a116:	d904      	bls.n	800a122 <_malloc_r+0x26>
 800a118:	230c      	movs	r3, #12
 800a11a:	6033      	str	r3, [r6, #0]
 800a11c:	2000      	movs	r0, #0
 800a11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1f8 <_malloc_r+0xfc>
 800a126:	f000 f869 	bl	800a1fc <__malloc_lock>
 800a12a:	f8d8 3000 	ldr.w	r3, [r8]
 800a12e:	461c      	mov	r4, r3
 800a130:	bb44      	cbnz	r4, 800a184 <_malloc_r+0x88>
 800a132:	4629      	mov	r1, r5
 800a134:	4630      	mov	r0, r6
 800a136:	f7ff ffbf 	bl	800a0b8 <sbrk_aligned>
 800a13a:	1c43      	adds	r3, r0, #1
 800a13c:	4604      	mov	r4, r0
 800a13e:	d158      	bne.n	800a1f2 <_malloc_r+0xf6>
 800a140:	f8d8 4000 	ldr.w	r4, [r8]
 800a144:	4627      	mov	r7, r4
 800a146:	2f00      	cmp	r7, #0
 800a148:	d143      	bne.n	800a1d2 <_malloc_r+0xd6>
 800a14a:	2c00      	cmp	r4, #0
 800a14c:	d04b      	beq.n	800a1e6 <_malloc_r+0xea>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	4639      	mov	r1, r7
 800a152:	4630      	mov	r0, r6
 800a154:	eb04 0903 	add.w	r9, r4, r3
 800a158:	f000 fb5c 	bl	800a814 <_sbrk_r>
 800a15c:	4581      	cmp	r9, r0
 800a15e:	d142      	bne.n	800a1e6 <_malloc_r+0xea>
 800a160:	6821      	ldr	r1, [r4, #0]
 800a162:	1a6d      	subs	r5, r5, r1
 800a164:	4629      	mov	r1, r5
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ffa6 	bl	800a0b8 <sbrk_aligned>
 800a16c:	3001      	adds	r0, #1
 800a16e:	d03a      	beq.n	800a1e6 <_malloc_r+0xea>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	442b      	add	r3, r5
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	f8d8 3000 	ldr.w	r3, [r8]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	bb62      	cbnz	r2, 800a1d8 <_malloc_r+0xdc>
 800a17e:	f8c8 7000 	str.w	r7, [r8]
 800a182:	e00f      	b.n	800a1a4 <_malloc_r+0xa8>
 800a184:	6822      	ldr	r2, [r4, #0]
 800a186:	1b52      	subs	r2, r2, r5
 800a188:	d420      	bmi.n	800a1cc <_malloc_r+0xd0>
 800a18a:	2a0b      	cmp	r2, #11
 800a18c:	d917      	bls.n	800a1be <_malloc_r+0xc2>
 800a18e:	1961      	adds	r1, r4, r5
 800a190:	42a3      	cmp	r3, r4
 800a192:	6025      	str	r5, [r4, #0]
 800a194:	bf18      	it	ne
 800a196:	6059      	strne	r1, [r3, #4]
 800a198:	6863      	ldr	r3, [r4, #4]
 800a19a:	bf08      	it	eq
 800a19c:	f8c8 1000 	streq.w	r1, [r8]
 800a1a0:	5162      	str	r2, [r4, r5]
 800a1a2:	604b      	str	r3, [r1, #4]
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f000 f82f 	bl	800a208 <__malloc_unlock>
 800a1aa:	f104 000b 	add.w	r0, r4, #11
 800a1ae:	1d23      	adds	r3, r4, #4
 800a1b0:	f020 0007 	bic.w	r0, r0, #7
 800a1b4:	1ac2      	subs	r2, r0, r3
 800a1b6:	bf1c      	itt	ne
 800a1b8:	1a1b      	subne	r3, r3, r0
 800a1ba:	50a3      	strne	r3, [r4, r2]
 800a1bc:	e7af      	b.n	800a11e <_malloc_r+0x22>
 800a1be:	6862      	ldr	r2, [r4, #4]
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	bf0c      	ite	eq
 800a1c4:	f8c8 2000 	streq.w	r2, [r8]
 800a1c8:	605a      	strne	r2, [r3, #4]
 800a1ca:	e7eb      	b.n	800a1a4 <_malloc_r+0xa8>
 800a1cc:	4623      	mov	r3, r4
 800a1ce:	6864      	ldr	r4, [r4, #4]
 800a1d0:	e7ae      	b.n	800a130 <_malloc_r+0x34>
 800a1d2:	463c      	mov	r4, r7
 800a1d4:	687f      	ldr	r7, [r7, #4]
 800a1d6:	e7b6      	b.n	800a146 <_malloc_r+0x4a>
 800a1d8:	461a      	mov	r2, r3
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	d1fb      	bne.n	800a1d8 <_malloc_r+0xdc>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	6053      	str	r3, [r2, #4]
 800a1e4:	e7de      	b.n	800a1a4 <_malloc_r+0xa8>
 800a1e6:	230c      	movs	r3, #12
 800a1e8:	6033      	str	r3, [r6, #0]
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f000 f80c 	bl	800a208 <__malloc_unlock>
 800a1f0:	e794      	b.n	800a11c <_malloc_r+0x20>
 800a1f2:	6005      	str	r5, [r0, #0]
 800a1f4:	e7d6      	b.n	800a1a4 <_malloc_r+0xa8>
 800a1f6:	bf00      	nop
 800a1f8:	200030ec 	.word	0x200030ec

0800a1fc <__malloc_lock>:
 800a1fc:	4801      	ldr	r0, [pc, #4]	@ (800a204 <__malloc_lock+0x8>)
 800a1fe:	f7ff bf0f 	b.w	800a020 <__retarget_lock_acquire_recursive>
 800a202:	bf00      	nop
 800a204:	200030e4 	.word	0x200030e4

0800a208 <__malloc_unlock>:
 800a208:	4801      	ldr	r0, [pc, #4]	@ (800a210 <__malloc_unlock+0x8>)
 800a20a:	f7ff bf0a 	b.w	800a022 <__retarget_lock_release_recursive>
 800a20e:	bf00      	nop
 800a210:	200030e4 	.word	0x200030e4

0800a214 <__ssputs_r>:
 800a214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a218:	688e      	ldr	r6, [r1, #8]
 800a21a:	461f      	mov	r7, r3
 800a21c:	42be      	cmp	r6, r7
 800a21e:	680b      	ldr	r3, [r1, #0]
 800a220:	4682      	mov	sl, r0
 800a222:	460c      	mov	r4, r1
 800a224:	4690      	mov	r8, r2
 800a226:	d82d      	bhi.n	800a284 <__ssputs_r+0x70>
 800a228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a22c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a230:	d026      	beq.n	800a280 <__ssputs_r+0x6c>
 800a232:	6965      	ldr	r5, [r4, #20]
 800a234:	6909      	ldr	r1, [r1, #16]
 800a236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a23a:	eba3 0901 	sub.w	r9, r3, r1
 800a23e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a242:	1c7b      	adds	r3, r7, #1
 800a244:	444b      	add	r3, r9
 800a246:	106d      	asrs	r5, r5, #1
 800a248:	429d      	cmp	r5, r3
 800a24a:	bf38      	it	cc
 800a24c:	461d      	movcc	r5, r3
 800a24e:	0553      	lsls	r3, r2, #21
 800a250:	d527      	bpl.n	800a2a2 <__ssputs_r+0x8e>
 800a252:	4629      	mov	r1, r5
 800a254:	f7ff ff52 	bl	800a0fc <_malloc_r>
 800a258:	4606      	mov	r6, r0
 800a25a:	b360      	cbz	r0, 800a2b6 <__ssputs_r+0xa2>
 800a25c:	6921      	ldr	r1, [r4, #16]
 800a25e:	464a      	mov	r2, r9
 800a260:	f000 fae8 	bl	800a834 <memcpy>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	6126      	str	r6, [r4, #16]
 800a272:	6165      	str	r5, [r4, #20]
 800a274:	444e      	add	r6, r9
 800a276:	eba5 0509 	sub.w	r5, r5, r9
 800a27a:	6026      	str	r6, [r4, #0]
 800a27c:	60a5      	str	r5, [r4, #8]
 800a27e:	463e      	mov	r6, r7
 800a280:	42be      	cmp	r6, r7
 800a282:	d900      	bls.n	800a286 <__ssputs_r+0x72>
 800a284:	463e      	mov	r6, r7
 800a286:	6820      	ldr	r0, [r4, #0]
 800a288:	4632      	mov	r2, r6
 800a28a:	4641      	mov	r1, r8
 800a28c:	f000 faa8 	bl	800a7e0 <memmove>
 800a290:	68a3      	ldr	r3, [r4, #8]
 800a292:	1b9b      	subs	r3, r3, r6
 800a294:	60a3      	str	r3, [r4, #8]
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	4433      	add	r3, r6
 800a29a:	6023      	str	r3, [r4, #0]
 800a29c:	2000      	movs	r0, #0
 800a29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	f000 fad4 	bl	800a850 <_realloc_r>
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d1e0      	bne.n	800a270 <__ssputs_r+0x5c>
 800a2ae:	6921      	ldr	r1, [r4, #16]
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	f7ff feb7 	bl	800a024 <_free_r>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	f8ca 3000 	str.w	r3, [sl]
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2c2:	81a3      	strh	r3, [r4, #12]
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	e7e9      	b.n	800a29e <__ssputs_r+0x8a>
	...

0800a2cc <_svfiprintf_r>:
 800a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	4698      	mov	r8, r3
 800a2d2:	898b      	ldrh	r3, [r1, #12]
 800a2d4:	061b      	lsls	r3, r3, #24
 800a2d6:	b09d      	sub	sp, #116	@ 0x74
 800a2d8:	4607      	mov	r7, r0
 800a2da:	460d      	mov	r5, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	d510      	bpl.n	800a302 <_svfiprintf_r+0x36>
 800a2e0:	690b      	ldr	r3, [r1, #16]
 800a2e2:	b973      	cbnz	r3, 800a302 <_svfiprintf_r+0x36>
 800a2e4:	2140      	movs	r1, #64	@ 0x40
 800a2e6:	f7ff ff09 	bl	800a0fc <_malloc_r>
 800a2ea:	6028      	str	r0, [r5, #0]
 800a2ec:	6128      	str	r0, [r5, #16]
 800a2ee:	b930      	cbnz	r0, 800a2fe <_svfiprintf_r+0x32>
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f8:	b01d      	add	sp, #116	@ 0x74
 800a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fe:	2340      	movs	r3, #64	@ 0x40
 800a300:	616b      	str	r3, [r5, #20]
 800a302:	2300      	movs	r3, #0
 800a304:	9309      	str	r3, [sp, #36]	@ 0x24
 800a306:	2320      	movs	r3, #32
 800a308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a30c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a310:	2330      	movs	r3, #48	@ 0x30
 800a312:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4b0 <_svfiprintf_r+0x1e4>
 800a316:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a31a:	f04f 0901 	mov.w	r9, #1
 800a31e:	4623      	mov	r3, r4
 800a320:	469a      	mov	sl, r3
 800a322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a326:	b10a      	cbz	r2, 800a32c <_svfiprintf_r+0x60>
 800a328:	2a25      	cmp	r2, #37	@ 0x25
 800a32a:	d1f9      	bne.n	800a320 <_svfiprintf_r+0x54>
 800a32c:	ebba 0b04 	subs.w	fp, sl, r4
 800a330:	d00b      	beq.n	800a34a <_svfiprintf_r+0x7e>
 800a332:	465b      	mov	r3, fp
 800a334:	4622      	mov	r2, r4
 800a336:	4629      	mov	r1, r5
 800a338:	4638      	mov	r0, r7
 800a33a:	f7ff ff6b 	bl	800a214 <__ssputs_r>
 800a33e:	3001      	adds	r0, #1
 800a340:	f000 80a7 	beq.w	800a492 <_svfiprintf_r+0x1c6>
 800a344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a346:	445a      	add	r2, fp
 800a348:	9209      	str	r2, [sp, #36]	@ 0x24
 800a34a:	f89a 3000 	ldrb.w	r3, [sl]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 809f 	beq.w	800a492 <_svfiprintf_r+0x1c6>
 800a354:	2300      	movs	r3, #0
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a35e:	f10a 0a01 	add.w	sl, sl, #1
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	9307      	str	r3, [sp, #28]
 800a366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a36a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a36c:	4654      	mov	r4, sl
 800a36e:	2205      	movs	r2, #5
 800a370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a374:	484e      	ldr	r0, [pc, #312]	@ (800a4b0 <_svfiprintf_r+0x1e4>)
 800a376:	f7f5 ff43 	bl	8000200 <memchr>
 800a37a:	9a04      	ldr	r2, [sp, #16]
 800a37c:	b9d8      	cbnz	r0, 800a3b6 <_svfiprintf_r+0xea>
 800a37e:	06d0      	lsls	r0, r2, #27
 800a380:	bf44      	itt	mi
 800a382:	2320      	movmi	r3, #32
 800a384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a388:	0711      	lsls	r1, r2, #28
 800a38a:	bf44      	itt	mi
 800a38c:	232b      	movmi	r3, #43	@ 0x2b
 800a38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a392:	f89a 3000 	ldrb.w	r3, [sl]
 800a396:	2b2a      	cmp	r3, #42	@ 0x2a
 800a398:	d015      	beq.n	800a3c6 <_svfiprintf_r+0xfa>
 800a39a:	9a07      	ldr	r2, [sp, #28]
 800a39c:	4654      	mov	r4, sl
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f04f 0c0a 	mov.w	ip, #10
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3aa:	3b30      	subs	r3, #48	@ 0x30
 800a3ac:	2b09      	cmp	r3, #9
 800a3ae:	d94b      	bls.n	800a448 <_svfiprintf_r+0x17c>
 800a3b0:	b1b0      	cbz	r0, 800a3e0 <_svfiprintf_r+0x114>
 800a3b2:	9207      	str	r2, [sp, #28]
 800a3b4:	e014      	b.n	800a3e0 <_svfiprintf_r+0x114>
 800a3b6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	46a2      	mov	sl, r4
 800a3c4:	e7d2      	b.n	800a36c <_svfiprintf_r+0xa0>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	1d19      	adds	r1, r3, #4
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	9103      	str	r1, [sp, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfbb      	ittet	lt
 800a3d2:	425b      	neglt	r3, r3
 800a3d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d8:	9307      	strge	r3, [sp, #28]
 800a3da:	9307      	strlt	r3, [sp, #28]
 800a3dc:	bfb8      	it	lt
 800a3de:	9204      	strlt	r2, [sp, #16]
 800a3e0:	7823      	ldrb	r3, [r4, #0]
 800a3e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3e4:	d10a      	bne.n	800a3fc <_svfiprintf_r+0x130>
 800a3e6:	7863      	ldrb	r3, [r4, #1]
 800a3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ea:	d132      	bne.n	800a452 <_svfiprintf_r+0x186>
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	1d1a      	adds	r2, r3, #4
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	9203      	str	r2, [sp, #12]
 800a3f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3f8:	3402      	adds	r4, #2
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4c0 <_svfiprintf_r+0x1f4>
 800a400:	7821      	ldrb	r1, [r4, #0]
 800a402:	2203      	movs	r2, #3
 800a404:	4650      	mov	r0, sl
 800a406:	f7f5 fefb 	bl	8000200 <memchr>
 800a40a:	b138      	cbz	r0, 800a41c <_svfiprintf_r+0x150>
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	eba0 000a 	sub.w	r0, r0, sl
 800a412:	2240      	movs	r2, #64	@ 0x40
 800a414:	4082      	lsls	r2, r0
 800a416:	4313      	orrs	r3, r2
 800a418:	3401      	adds	r4, #1
 800a41a:	9304      	str	r3, [sp, #16]
 800a41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a420:	4824      	ldr	r0, [pc, #144]	@ (800a4b4 <_svfiprintf_r+0x1e8>)
 800a422:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a426:	2206      	movs	r2, #6
 800a428:	f7f5 feea 	bl	8000200 <memchr>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d036      	beq.n	800a49e <_svfiprintf_r+0x1d2>
 800a430:	4b21      	ldr	r3, [pc, #132]	@ (800a4b8 <_svfiprintf_r+0x1ec>)
 800a432:	bb1b      	cbnz	r3, 800a47c <_svfiprintf_r+0x1b0>
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	3307      	adds	r3, #7
 800a438:	f023 0307 	bic.w	r3, r3, #7
 800a43c:	3308      	adds	r3, #8
 800a43e:	9303      	str	r3, [sp, #12]
 800a440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a442:	4433      	add	r3, r6
 800a444:	9309      	str	r3, [sp, #36]	@ 0x24
 800a446:	e76a      	b.n	800a31e <_svfiprintf_r+0x52>
 800a448:	fb0c 3202 	mla	r2, ip, r2, r3
 800a44c:	460c      	mov	r4, r1
 800a44e:	2001      	movs	r0, #1
 800a450:	e7a8      	b.n	800a3a4 <_svfiprintf_r+0xd8>
 800a452:	2300      	movs	r3, #0
 800a454:	3401      	adds	r4, #1
 800a456:	9305      	str	r3, [sp, #20]
 800a458:	4619      	mov	r1, r3
 800a45a:	f04f 0c0a 	mov.w	ip, #10
 800a45e:	4620      	mov	r0, r4
 800a460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a464:	3a30      	subs	r2, #48	@ 0x30
 800a466:	2a09      	cmp	r2, #9
 800a468:	d903      	bls.n	800a472 <_svfiprintf_r+0x1a6>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d0c6      	beq.n	800a3fc <_svfiprintf_r+0x130>
 800a46e:	9105      	str	r1, [sp, #20]
 800a470:	e7c4      	b.n	800a3fc <_svfiprintf_r+0x130>
 800a472:	fb0c 2101 	mla	r1, ip, r1, r2
 800a476:	4604      	mov	r4, r0
 800a478:	2301      	movs	r3, #1
 800a47a:	e7f0      	b.n	800a45e <_svfiprintf_r+0x192>
 800a47c:	ab03      	add	r3, sp, #12
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	462a      	mov	r2, r5
 800a482:	4b0e      	ldr	r3, [pc, #56]	@ (800a4bc <_svfiprintf_r+0x1f0>)
 800a484:	a904      	add	r1, sp, #16
 800a486:	4638      	mov	r0, r7
 800a488:	f3af 8000 	nop.w
 800a48c:	1c42      	adds	r2, r0, #1
 800a48e:	4606      	mov	r6, r0
 800a490:	d1d6      	bne.n	800a440 <_svfiprintf_r+0x174>
 800a492:	89ab      	ldrh	r3, [r5, #12]
 800a494:	065b      	lsls	r3, r3, #25
 800a496:	f53f af2d 	bmi.w	800a2f4 <_svfiprintf_r+0x28>
 800a49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a49c:	e72c      	b.n	800a2f8 <_svfiprintf_r+0x2c>
 800a49e:	ab03      	add	r3, sp, #12
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4b05      	ldr	r3, [pc, #20]	@ (800a4bc <_svfiprintf_r+0x1f0>)
 800a4a6:	a904      	add	r1, sp, #16
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f000 f879 	bl	800a5a0 <_printf_i>
 800a4ae:	e7ed      	b.n	800a48c <_svfiprintf_r+0x1c0>
 800a4b0:	0800ab98 	.word	0x0800ab98
 800a4b4:	0800aba2 	.word	0x0800aba2
 800a4b8:	00000000 	.word	0x00000000
 800a4bc:	0800a215 	.word	0x0800a215
 800a4c0:	0800ab9e 	.word	0x0800ab9e

0800a4c4 <_printf_common>:
 800a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	4698      	mov	r8, r3
 800a4cc:	688a      	ldr	r2, [r1, #8]
 800a4ce:	690b      	ldr	r3, [r1, #16]
 800a4d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	bfb8      	it	lt
 800a4d8:	4613      	movlt	r3, r2
 800a4da:	6033      	str	r3, [r6, #0]
 800a4dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	b10a      	cbz	r2, 800a4ea <_printf_common+0x26>
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	6033      	str	r3, [r6, #0]
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	0699      	lsls	r1, r3, #26
 800a4ee:	bf42      	ittt	mi
 800a4f0:	6833      	ldrmi	r3, [r6, #0]
 800a4f2:	3302      	addmi	r3, #2
 800a4f4:	6033      	strmi	r3, [r6, #0]
 800a4f6:	6825      	ldr	r5, [r4, #0]
 800a4f8:	f015 0506 	ands.w	r5, r5, #6
 800a4fc:	d106      	bne.n	800a50c <_printf_common+0x48>
 800a4fe:	f104 0a19 	add.w	sl, r4, #25
 800a502:	68e3      	ldr	r3, [r4, #12]
 800a504:	6832      	ldr	r2, [r6, #0]
 800a506:	1a9b      	subs	r3, r3, r2
 800a508:	42ab      	cmp	r3, r5
 800a50a:	dc26      	bgt.n	800a55a <_printf_common+0x96>
 800a50c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a510:	6822      	ldr	r2, [r4, #0]
 800a512:	3b00      	subs	r3, #0
 800a514:	bf18      	it	ne
 800a516:	2301      	movne	r3, #1
 800a518:	0692      	lsls	r2, r2, #26
 800a51a:	d42b      	bmi.n	800a574 <_printf_common+0xb0>
 800a51c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a520:	4641      	mov	r1, r8
 800a522:	4638      	mov	r0, r7
 800a524:	47c8      	blx	r9
 800a526:	3001      	adds	r0, #1
 800a528:	d01e      	beq.n	800a568 <_printf_common+0xa4>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	6922      	ldr	r2, [r4, #16]
 800a52e:	f003 0306 	and.w	r3, r3, #6
 800a532:	2b04      	cmp	r3, #4
 800a534:	bf02      	ittt	eq
 800a536:	68e5      	ldreq	r5, [r4, #12]
 800a538:	6833      	ldreq	r3, [r6, #0]
 800a53a:	1aed      	subeq	r5, r5, r3
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	bf0c      	ite	eq
 800a540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a544:	2500      	movne	r5, #0
 800a546:	4293      	cmp	r3, r2
 800a548:	bfc4      	itt	gt
 800a54a:	1a9b      	subgt	r3, r3, r2
 800a54c:	18ed      	addgt	r5, r5, r3
 800a54e:	2600      	movs	r6, #0
 800a550:	341a      	adds	r4, #26
 800a552:	42b5      	cmp	r5, r6
 800a554:	d11a      	bne.n	800a58c <_printf_common+0xc8>
 800a556:	2000      	movs	r0, #0
 800a558:	e008      	b.n	800a56c <_printf_common+0xa8>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4652      	mov	r2, sl
 800a55e:	4641      	mov	r1, r8
 800a560:	4638      	mov	r0, r7
 800a562:	47c8      	blx	r9
 800a564:	3001      	adds	r0, #1
 800a566:	d103      	bne.n	800a570 <_printf_common+0xac>
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a570:	3501      	adds	r5, #1
 800a572:	e7c6      	b.n	800a502 <_printf_common+0x3e>
 800a574:	18e1      	adds	r1, r4, r3
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	2030      	movs	r0, #48	@ 0x30
 800a57a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a57e:	4422      	add	r2, r4
 800a580:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a584:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a588:	3302      	adds	r3, #2
 800a58a:	e7c7      	b.n	800a51c <_printf_common+0x58>
 800a58c:	2301      	movs	r3, #1
 800a58e:	4622      	mov	r2, r4
 800a590:	4641      	mov	r1, r8
 800a592:	4638      	mov	r0, r7
 800a594:	47c8      	blx	r9
 800a596:	3001      	adds	r0, #1
 800a598:	d0e6      	beq.n	800a568 <_printf_common+0xa4>
 800a59a:	3601      	adds	r6, #1
 800a59c:	e7d9      	b.n	800a552 <_printf_common+0x8e>
	...

0800a5a0 <_printf_i>:
 800a5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	7e0f      	ldrb	r7, [r1, #24]
 800a5a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5a8:	2f78      	cmp	r7, #120	@ 0x78
 800a5aa:	4691      	mov	r9, r2
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	469a      	mov	sl, r3
 800a5b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5b6:	d807      	bhi.n	800a5c8 <_printf_i+0x28>
 800a5b8:	2f62      	cmp	r7, #98	@ 0x62
 800a5ba:	d80a      	bhi.n	800a5d2 <_printf_i+0x32>
 800a5bc:	2f00      	cmp	r7, #0
 800a5be:	f000 80d2 	beq.w	800a766 <_printf_i+0x1c6>
 800a5c2:	2f58      	cmp	r7, #88	@ 0x58
 800a5c4:	f000 80b9 	beq.w	800a73a <_printf_i+0x19a>
 800a5c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5d0:	e03a      	b.n	800a648 <_printf_i+0xa8>
 800a5d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5d6:	2b15      	cmp	r3, #21
 800a5d8:	d8f6      	bhi.n	800a5c8 <_printf_i+0x28>
 800a5da:	a101      	add	r1, pc, #4	@ (adr r1, 800a5e0 <_printf_i+0x40>)
 800a5dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5e0:	0800a639 	.word	0x0800a639
 800a5e4:	0800a64d 	.word	0x0800a64d
 800a5e8:	0800a5c9 	.word	0x0800a5c9
 800a5ec:	0800a5c9 	.word	0x0800a5c9
 800a5f0:	0800a5c9 	.word	0x0800a5c9
 800a5f4:	0800a5c9 	.word	0x0800a5c9
 800a5f8:	0800a64d 	.word	0x0800a64d
 800a5fc:	0800a5c9 	.word	0x0800a5c9
 800a600:	0800a5c9 	.word	0x0800a5c9
 800a604:	0800a5c9 	.word	0x0800a5c9
 800a608:	0800a5c9 	.word	0x0800a5c9
 800a60c:	0800a74d 	.word	0x0800a74d
 800a610:	0800a677 	.word	0x0800a677
 800a614:	0800a707 	.word	0x0800a707
 800a618:	0800a5c9 	.word	0x0800a5c9
 800a61c:	0800a5c9 	.word	0x0800a5c9
 800a620:	0800a76f 	.word	0x0800a76f
 800a624:	0800a5c9 	.word	0x0800a5c9
 800a628:	0800a677 	.word	0x0800a677
 800a62c:	0800a5c9 	.word	0x0800a5c9
 800a630:	0800a5c9 	.word	0x0800a5c9
 800a634:	0800a70f 	.word	0x0800a70f
 800a638:	6833      	ldr	r3, [r6, #0]
 800a63a:	1d1a      	adds	r2, r3, #4
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6032      	str	r2, [r6, #0]
 800a640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a644:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a648:	2301      	movs	r3, #1
 800a64a:	e09d      	b.n	800a788 <_printf_i+0x1e8>
 800a64c:	6833      	ldr	r3, [r6, #0]
 800a64e:	6820      	ldr	r0, [r4, #0]
 800a650:	1d19      	adds	r1, r3, #4
 800a652:	6031      	str	r1, [r6, #0]
 800a654:	0606      	lsls	r6, r0, #24
 800a656:	d501      	bpl.n	800a65c <_printf_i+0xbc>
 800a658:	681d      	ldr	r5, [r3, #0]
 800a65a:	e003      	b.n	800a664 <_printf_i+0xc4>
 800a65c:	0645      	lsls	r5, r0, #25
 800a65e:	d5fb      	bpl.n	800a658 <_printf_i+0xb8>
 800a660:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a664:	2d00      	cmp	r5, #0
 800a666:	da03      	bge.n	800a670 <_printf_i+0xd0>
 800a668:	232d      	movs	r3, #45	@ 0x2d
 800a66a:	426d      	negs	r5, r5
 800a66c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a670:	4859      	ldr	r0, [pc, #356]	@ (800a7d8 <_printf_i+0x238>)
 800a672:	230a      	movs	r3, #10
 800a674:	e011      	b.n	800a69a <_printf_i+0xfa>
 800a676:	6821      	ldr	r1, [r4, #0]
 800a678:	6833      	ldr	r3, [r6, #0]
 800a67a:	0608      	lsls	r0, r1, #24
 800a67c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a680:	d402      	bmi.n	800a688 <_printf_i+0xe8>
 800a682:	0649      	lsls	r1, r1, #25
 800a684:	bf48      	it	mi
 800a686:	b2ad      	uxthmi	r5, r5
 800a688:	2f6f      	cmp	r7, #111	@ 0x6f
 800a68a:	4853      	ldr	r0, [pc, #332]	@ (800a7d8 <_printf_i+0x238>)
 800a68c:	6033      	str	r3, [r6, #0]
 800a68e:	bf14      	ite	ne
 800a690:	230a      	movne	r3, #10
 800a692:	2308      	moveq	r3, #8
 800a694:	2100      	movs	r1, #0
 800a696:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a69a:	6866      	ldr	r6, [r4, #4]
 800a69c:	60a6      	str	r6, [r4, #8]
 800a69e:	2e00      	cmp	r6, #0
 800a6a0:	bfa2      	ittt	ge
 800a6a2:	6821      	ldrge	r1, [r4, #0]
 800a6a4:	f021 0104 	bicge.w	r1, r1, #4
 800a6a8:	6021      	strge	r1, [r4, #0]
 800a6aa:	b90d      	cbnz	r5, 800a6b0 <_printf_i+0x110>
 800a6ac:	2e00      	cmp	r6, #0
 800a6ae:	d04b      	beq.n	800a748 <_printf_i+0x1a8>
 800a6b0:	4616      	mov	r6, r2
 800a6b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6b6:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ba:	5dc7      	ldrb	r7, [r0, r7]
 800a6bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6c0:	462f      	mov	r7, r5
 800a6c2:	42bb      	cmp	r3, r7
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	d9f4      	bls.n	800a6b2 <_printf_i+0x112>
 800a6c8:	2b08      	cmp	r3, #8
 800a6ca:	d10b      	bne.n	800a6e4 <_printf_i+0x144>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	07df      	lsls	r7, r3, #31
 800a6d0:	d508      	bpl.n	800a6e4 <_printf_i+0x144>
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	6861      	ldr	r1, [r4, #4]
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	bfde      	ittt	le
 800a6da:	2330      	movle	r3, #48	@ 0x30
 800a6dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6e4:	1b92      	subs	r2, r2, r6
 800a6e6:	6122      	str	r2, [r4, #16]
 800a6e8:	f8cd a000 	str.w	sl, [sp]
 800a6ec:	464b      	mov	r3, r9
 800a6ee:	aa03      	add	r2, sp, #12
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	f7ff fee6 	bl	800a4c4 <_printf_common>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d14a      	bne.n	800a792 <_printf_i+0x1f2>
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	b004      	add	sp, #16
 800a702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	f043 0320 	orr.w	r3, r3, #32
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	4833      	ldr	r0, [pc, #204]	@ (800a7dc <_printf_i+0x23c>)
 800a710:	2778      	movs	r7, #120	@ 0x78
 800a712:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	6831      	ldr	r1, [r6, #0]
 800a71a:	061f      	lsls	r7, r3, #24
 800a71c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a720:	d402      	bmi.n	800a728 <_printf_i+0x188>
 800a722:	065f      	lsls	r7, r3, #25
 800a724:	bf48      	it	mi
 800a726:	b2ad      	uxthmi	r5, r5
 800a728:	6031      	str	r1, [r6, #0]
 800a72a:	07d9      	lsls	r1, r3, #31
 800a72c:	bf44      	itt	mi
 800a72e:	f043 0320 	orrmi.w	r3, r3, #32
 800a732:	6023      	strmi	r3, [r4, #0]
 800a734:	b11d      	cbz	r5, 800a73e <_printf_i+0x19e>
 800a736:	2310      	movs	r3, #16
 800a738:	e7ac      	b.n	800a694 <_printf_i+0xf4>
 800a73a:	4827      	ldr	r0, [pc, #156]	@ (800a7d8 <_printf_i+0x238>)
 800a73c:	e7e9      	b.n	800a712 <_printf_i+0x172>
 800a73e:	6823      	ldr	r3, [r4, #0]
 800a740:	f023 0320 	bic.w	r3, r3, #32
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	e7f6      	b.n	800a736 <_printf_i+0x196>
 800a748:	4616      	mov	r6, r2
 800a74a:	e7bd      	b.n	800a6c8 <_printf_i+0x128>
 800a74c:	6833      	ldr	r3, [r6, #0]
 800a74e:	6825      	ldr	r5, [r4, #0]
 800a750:	6961      	ldr	r1, [r4, #20]
 800a752:	1d18      	adds	r0, r3, #4
 800a754:	6030      	str	r0, [r6, #0]
 800a756:	062e      	lsls	r6, r5, #24
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	d501      	bpl.n	800a760 <_printf_i+0x1c0>
 800a75c:	6019      	str	r1, [r3, #0]
 800a75e:	e002      	b.n	800a766 <_printf_i+0x1c6>
 800a760:	0668      	lsls	r0, r5, #25
 800a762:	d5fb      	bpl.n	800a75c <_printf_i+0x1bc>
 800a764:	8019      	strh	r1, [r3, #0]
 800a766:	2300      	movs	r3, #0
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	4616      	mov	r6, r2
 800a76c:	e7bc      	b.n	800a6e8 <_printf_i+0x148>
 800a76e:	6833      	ldr	r3, [r6, #0]
 800a770:	1d1a      	adds	r2, r3, #4
 800a772:	6032      	str	r2, [r6, #0]
 800a774:	681e      	ldr	r6, [r3, #0]
 800a776:	6862      	ldr	r2, [r4, #4]
 800a778:	2100      	movs	r1, #0
 800a77a:	4630      	mov	r0, r6
 800a77c:	f7f5 fd40 	bl	8000200 <memchr>
 800a780:	b108      	cbz	r0, 800a786 <_printf_i+0x1e6>
 800a782:	1b80      	subs	r0, r0, r6
 800a784:	6060      	str	r0, [r4, #4]
 800a786:	6863      	ldr	r3, [r4, #4]
 800a788:	6123      	str	r3, [r4, #16]
 800a78a:	2300      	movs	r3, #0
 800a78c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a790:	e7aa      	b.n	800a6e8 <_printf_i+0x148>
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	4632      	mov	r2, r6
 800a796:	4649      	mov	r1, r9
 800a798:	4640      	mov	r0, r8
 800a79a:	47d0      	blx	sl
 800a79c:	3001      	adds	r0, #1
 800a79e:	d0ad      	beq.n	800a6fc <_printf_i+0x15c>
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	079b      	lsls	r3, r3, #30
 800a7a4:	d413      	bmi.n	800a7ce <_printf_i+0x22e>
 800a7a6:	68e0      	ldr	r0, [r4, #12]
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	4298      	cmp	r0, r3
 800a7ac:	bfb8      	it	lt
 800a7ae:	4618      	movlt	r0, r3
 800a7b0:	e7a6      	b.n	800a700 <_printf_i+0x160>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	4632      	mov	r2, r6
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	47d0      	blx	sl
 800a7bc:	3001      	adds	r0, #1
 800a7be:	d09d      	beq.n	800a6fc <_printf_i+0x15c>
 800a7c0:	3501      	adds	r5, #1
 800a7c2:	68e3      	ldr	r3, [r4, #12]
 800a7c4:	9903      	ldr	r1, [sp, #12]
 800a7c6:	1a5b      	subs	r3, r3, r1
 800a7c8:	42ab      	cmp	r3, r5
 800a7ca:	dcf2      	bgt.n	800a7b2 <_printf_i+0x212>
 800a7cc:	e7eb      	b.n	800a7a6 <_printf_i+0x206>
 800a7ce:	2500      	movs	r5, #0
 800a7d0:	f104 0619 	add.w	r6, r4, #25
 800a7d4:	e7f5      	b.n	800a7c2 <_printf_i+0x222>
 800a7d6:	bf00      	nop
 800a7d8:	0800aba9 	.word	0x0800aba9
 800a7dc:	0800abba 	.word	0x0800abba

0800a7e0 <memmove>:
 800a7e0:	4288      	cmp	r0, r1
 800a7e2:	b510      	push	{r4, lr}
 800a7e4:	eb01 0402 	add.w	r4, r1, r2
 800a7e8:	d902      	bls.n	800a7f0 <memmove+0x10>
 800a7ea:	4284      	cmp	r4, r0
 800a7ec:	4623      	mov	r3, r4
 800a7ee:	d807      	bhi.n	800a800 <memmove+0x20>
 800a7f0:	1e43      	subs	r3, r0, #1
 800a7f2:	42a1      	cmp	r1, r4
 800a7f4:	d008      	beq.n	800a808 <memmove+0x28>
 800a7f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7fe:	e7f8      	b.n	800a7f2 <memmove+0x12>
 800a800:	4402      	add	r2, r0
 800a802:	4601      	mov	r1, r0
 800a804:	428a      	cmp	r2, r1
 800a806:	d100      	bne.n	800a80a <memmove+0x2a>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a80e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a812:	e7f7      	b.n	800a804 <memmove+0x24>

0800a814 <_sbrk_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4d06      	ldr	r5, [pc, #24]	@ (800a830 <_sbrk_r+0x1c>)
 800a818:	2300      	movs	r3, #0
 800a81a:	4604      	mov	r4, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	602b      	str	r3, [r5, #0]
 800a820:	f7f6 f982 	bl	8000b28 <_sbrk>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_sbrk_r+0x1a>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_sbrk_r+0x1a>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	200030e0 	.word	0x200030e0

0800a834 <memcpy>:
 800a834:	440a      	add	r2, r1
 800a836:	4291      	cmp	r1, r2
 800a838:	f100 33ff 	add.w	r3, r0, #4294967295
 800a83c:	d100      	bne.n	800a840 <memcpy+0xc>
 800a83e:	4770      	bx	lr
 800a840:	b510      	push	{r4, lr}
 800a842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a84a:	4291      	cmp	r1, r2
 800a84c:	d1f9      	bne.n	800a842 <memcpy+0xe>
 800a84e:	bd10      	pop	{r4, pc}

0800a850 <_realloc_r>:
 800a850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a854:	4680      	mov	r8, r0
 800a856:	4615      	mov	r5, r2
 800a858:	460c      	mov	r4, r1
 800a85a:	b921      	cbnz	r1, 800a866 <_realloc_r+0x16>
 800a85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a860:	4611      	mov	r1, r2
 800a862:	f7ff bc4b 	b.w	800a0fc <_malloc_r>
 800a866:	b92a      	cbnz	r2, 800a874 <_realloc_r+0x24>
 800a868:	f7ff fbdc 	bl	800a024 <_free_r>
 800a86c:	2400      	movs	r4, #0
 800a86e:	4620      	mov	r0, r4
 800a870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a874:	f000 f81a 	bl	800a8ac <_malloc_usable_size_r>
 800a878:	4285      	cmp	r5, r0
 800a87a:	4606      	mov	r6, r0
 800a87c:	d802      	bhi.n	800a884 <_realloc_r+0x34>
 800a87e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a882:	d8f4      	bhi.n	800a86e <_realloc_r+0x1e>
 800a884:	4629      	mov	r1, r5
 800a886:	4640      	mov	r0, r8
 800a888:	f7ff fc38 	bl	800a0fc <_malloc_r>
 800a88c:	4607      	mov	r7, r0
 800a88e:	2800      	cmp	r0, #0
 800a890:	d0ec      	beq.n	800a86c <_realloc_r+0x1c>
 800a892:	42b5      	cmp	r5, r6
 800a894:	462a      	mov	r2, r5
 800a896:	4621      	mov	r1, r4
 800a898:	bf28      	it	cs
 800a89a:	4632      	movcs	r2, r6
 800a89c:	f7ff ffca 	bl	800a834 <memcpy>
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	f7ff fbbe 	bl	800a024 <_free_r>
 800a8a8:	463c      	mov	r4, r7
 800a8aa:	e7e0      	b.n	800a86e <_realloc_r+0x1e>

0800a8ac <_malloc_usable_size_r>:
 800a8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b0:	1f18      	subs	r0, r3, #4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfbc      	itt	lt
 800a8b6:	580b      	ldrlt	r3, [r1, r0]
 800a8b8:	18c0      	addlt	r0, r0, r3
 800a8ba:	4770      	bx	lr

0800a8bc <_init>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	bf00      	nop
 800a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c2:	bc08      	pop	{r3}
 800a8c4:	469e      	mov	lr, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <_fini>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr
