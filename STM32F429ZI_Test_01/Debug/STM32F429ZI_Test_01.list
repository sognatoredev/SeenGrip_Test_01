
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a604  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaac  0800aaac  0000c14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaac  0800aaac  0000baac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aab4  0800aab4  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aab4  0800aab4  0000bab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aab8  0800aab8  0000bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800aabc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c14c  2**0
                  CONTENTS
 10 .bss          00002fa4  2000014c  2000014c  0000c14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200030f0  200030f0  0000c14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d43  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041df  00000000  00000000  00024ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  000290a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd3  00000000  00000000  0002a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028867  00000000  00000000  0002b533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4a4  00000000  00000000  00053d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dec23  00000000  00000000  0007223e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150e61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005988  00000000  00000000  00150ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0015682c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a79c 	.word	0x0800a79c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000150 	.word	0x20000150
 80001ec:	0800a79c 	.word	0x0800a79c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_DMA_Init+0x78>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a1a      	ldr	r2, [pc, #104]	@ (8000608 <MX_DMA_Init+0x78>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_DMA_Init+0x78>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_DMA_Init+0x78>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200c      	movs	r0, #12
 80005d4:	f001 f8bd 	bl	8001752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005d8:	200c      	movs	r0, #12
 80005da:	f001 f8d6 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2010      	movs	r0, #16
 80005e4:	f001 f8b5 	bl	8001752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f001 f8ce 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	203a      	movs	r0, #58	@ 0x3a
 80005f4:	f001 f8ad 	bl	8001752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f001 f8c6 	bl	800178a <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a2f      	ldr	r2, [pc, #188]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a28      	ldr	r2, [pc, #160]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000698:	481b      	ldr	r0, [pc, #108]	@ (8000708 <MX_GPIO_Init+0xfc>)
 800069a:	f001 fe43 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800069e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <MX_GPIO_Init+0x100>)
 80006b6:	f001 fc89 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80006ba:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <MX_GPIO_Init+0xfc>)
 80006d4:	f001 fc7a 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_GPIO_Init+0x100>)
 80006f6:	f001 fc69 	bl	8001fcc <HAL_GPIO_Init>

}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	@ 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400
 800070c:	40020800 	.word	0x40020800

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fe96 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f84c 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff76 	bl	800060c <MX_GPIO_Init>
  MX_DMA_Init();
 8000720:	f7ff ff36 	bl	8000590 <MX_DMA_Init>
  MX_TIM1_Init();
 8000724:	f000 f9f4 	bl	8000b10 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000728:	f000 fa94 	bl	8000c54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800072c:	f000 fabc 	bl	8000ca8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000730:	f008 fe34 	bl	800939c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000734:	f000 fa64 	bl	8000c00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buffer, UART_RX_BUFFER_MAX_SIZE);
 8000738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800073c:	4917      	ldr	r1, [pc, #92]	@ (800079c <main+0x8c>)
 800073e:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <main+0x90>)
 8000740:	f004 fa3a 	bl	8004bb8 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_buffer, UART_RX_BUFFER_MAX_SIZE);
 8000744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000748:	4916      	ldr	r1, [pc, #88]	@ (80007a4 <main+0x94>)
 800074a:	4817      	ldr	r0, [pc, #92]	@ (80007a8 <main+0x98>)
 800074c:	f004 fa34 	bl	8004bb8 <HAL_UARTEx_ReceiveToIdle_DMA>
  // __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <main+0x9c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <main+0x9c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f022 0208 	bic.w	r2, r2, #8
 800075e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_TC);
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <main+0x9c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <main+0x9c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f022 0210 	bic.w	r2, r2, #16
 800076e:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 8000770:	480f      	ldr	r0, [pc, #60]	@ (80007b0 <main+0xa0>)
 8000772:	f003 fdab 	bl	80042cc <HAL_TIM_Base_Start_IT>
  
  HAL_Delay(5000);
 8000776:	f241 3088 	movw	r0, #5000	@ 0x1388
 800077a:	f000 fed5 	bl	8001528 <HAL_Delay>
  BootMessagePrint();
 800077e:	f000 fc11 	bl	8000fa4 <BootMessagePrint>
  GetClockSourcePrint();
 8000782:	f000 fc7d 	bl	8001080 <GetClockSourcePrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 8000786:	f000 fd21 	bl	80011cc <GPIO_Proc>
    USB_CDC_Proc();
 800078a:	f000 fd5b 	bl	8001244 <USB_CDC_Proc>
    USB_CDC_RX_Proc();
 800078e:	f000 fd9b 	bl	80012c8 <USB_CDC_RX_Proc>
    UART1_RX_Proc();
 8000792:	f000 fd21 	bl	80011d8 <UART1_RX_Proc>
  {
 8000796:	bf00      	nop
 8000798:	e7f5      	b.n	8000786 <main+0x76>
 800079a:	bf00      	nop
 800079c:	20000fb8 	.word	0x20000fb8
 80007a0:	200001fc 	.word	0x200001fc
 80007a4:	20000bb8 	.word	0x20000bb8
 80007a8:	200001b4 	.word	0x200001b4
 80007ac:	200002ec 	.word	0x200002ec
 80007b0:	2000016c 	.word	0x2000016c

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	@ 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f009 fb44 	bl	8009e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <SystemClock_Config+0xd8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a2a      	ldr	r2, [pc, #168]	@ (800088c <SystemClock_Config+0xd8>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e8:	4b28      	ldr	r3, [pc, #160]	@ (800088c <SystemClock_Config+0xd8>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <SystemClock_Config+0xdc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a24      	ldr	r2, [pc, #144]	@ (8000890 <SystemClock_Config+0xdc>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <SystemClock_Config+0xdc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000814:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000828:	23a8      	movs	r3, #168	@ 0xa8
 800082a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000830:	2307      	movs	r3, #7
 8000832:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fff7 	bl	800382c <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000844:	f000 f826 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000854:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2105      	movs	r1, #5
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fa58 	bl	8003d1c <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000872:	f000 f80f 	bl	8000894 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 8000876:	2200      	movs	r2, #0
 8000878:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800087c:	2001      	movs	r0, #1
 800087e:	f003 fb33 	bl	8003ee8 <HAL_RCC_MCOConfig>
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	@ 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <MemManage_Handler+0x4>

08000908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <UsageFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 fdcf 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000954:	4802      	ldr	r0, [pc, #8]	@ (8000960 <DMA1_Stream1_IRQHandler+0x10>)
 8000956:	f001 f8cf 	bl	8001af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000034c 	.word	0x2000034c

08000964 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000968:	4802      	ldr	r0, [pc, #8]	@ (8000974 <DMA1_Stream5_IRQHandler+0x10>)
 800096a:	f001 f8c5 	bl	8001af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200002ec 	.word	0x200002ec

08000978 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800097c:	4802      	ldr	r0, [pc, #8]	@ (8000988 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800097e:	f003 fd15 	bl	80043ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000016c 	.word	0x2000016c

0800098c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <USART2_IRQHandler+0x10>)
 8000992:	f004 f96f 	bl	8004c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200001fc 	.word	0x200001fc

080009a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009a4:	4802      	ldr	r0, [pc, #8]	@ (80009b0 <DMA2_Stream2_IRQHandler+0x10>)
 80009a6:	f001 f8a7 	bl	8001af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000028c 	.word	0x2000028c

080009b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <OTG_FS_IRQHandler+0x10>)
 80009ba:	f001 fe2a 	bl	8002612 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200028a4 	.word	0x200028a4

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  TIM1_CNT_1++;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a06      	ldr	r2, [pc, #24]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009d8:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	200003ac 	.word	0x200003ac
 80009f4:	200003b0 	.word	0x200003b0

080009f8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b08b      	sub	sp, #44	@ 0x2c
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  UNUSED(Size);
  uint16_t tmp_cnt = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	84fb      	strh	r3, [r7, #38]	@ 0x26

  Uart_Rx_IdlelineSize = Size;
 8000a08:	4a1a      	ldr	r2, [pc, #104]	@ (8000a74 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	8013      	strh	r3, [r2, #0]

  Uart_Rx_IdlelineIT_Flag = 0x01;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <HAL_UARTEx_RxEventCallback+0x80>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) uart1_rx_buffer, UART_RX_BUFFER_MAX_SIZE);

		// __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
		// __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
  }
  if (huart->Instance == USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a18      	ldr	r2, [pc, #96]	@ (8000a7c <HAL_UARTEx_RxEventCallback+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d124      	bne.n	8000a68 <HAL_UARTEx_RxEventCallback+0x70>
  {
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buffer, UART_RX_BUFFER_MAX_SIZE);

		// __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
    // __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    // __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	330c      	adds	r3, #12
 8000a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	e853 3f00 	ldrex	r3, [r3]
 8000a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	623b      	str	r3, [r7, #32]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	330c      	adds	r3, #12
 8000a52:	6a3a      	ldr	r2, [r7, #32]
 8000a54:	61fa      	str	r2, [r7, #28]
 8000a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a58:	69b9      	ldr	r1, [r7, #24]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	e841 2300 	strex	r3, r2, [r1]
 8000a60:	617b      	str	r3, [r7, #20]
   return(result);
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1e5      	bne.n	8000a34 <HAL_UARTEx_RxEventCallback+0x3c>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	372c      	adds	r7, #44	@ 0x2c
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	200013b8 	.word	0x200013b8
 8000a78:	200013ba 	.word	0x200013ba
 8000a7c:	40004400 	.word	0x40004400

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	@ (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d207      	bcs.n	8000ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab0:	f009 f9fc 	bl	8009eac <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20030000 	.word	0x20030000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	20000168 	.word	0x20000168
 8000ae8:	200030f0 	.word	0x200030f0

08000aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bac <MX_TIM1_Init+0x9c>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b42:	22a7      	movs	r2, #167	@ 0xa7
 8000b44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b58:	4813      	ldr	r0, [pc, #76]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b5a:	f003 fb67 	bl	800422c <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b64:	f7ff fe96 	bl	8000894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b76:	f003 fd09 	bl	800458c <HAL_TIM_ConfigClockSource>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b80:	f7ff fe88 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_TIM1_Init+0x98>)
 8000b92:	f003 ff31 	bl	80049f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b9c:	f7ff fe7a 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000016c 	.word	0x2000016c
 8000bac:	40010000 	.word	0x40010000

08000bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x48>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d115      	bne.n	8000bee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_TIM_Base_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <HAL_TIM_Base_MspInit+0x4c>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_TIM_Base_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2019      	movs	r0, #25
 8000be4:	f000 fdb5 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000be8:	2019      	movs	r0, #25
 8000bea:	f000 fdce 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	40023800 	.word	0x40023800

08000c00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <MX_USART1_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c0c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_USART1_UART_Init+0x4c>)
 8000c38:	f003 ff6e 	bl	8004b18 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f7ff fe27 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200001b4 	.word	0x200001b4
 8000c50:	40011000 	.word	0x40011000

08000c54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ca4 <MX_USART2_UART_Init+0x50>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c60:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f003 ff44 	bl	8004b18 <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c96:	f7ff fdfd 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001fc 	.word	0x200001fc
 8000ca4:	40004400 	.word	0x40004400

08000ca8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cac:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <MX_USART3_UART_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_USART3_UART_Init+0x4c>)
 8000ce0:	f003 ff1a 	bl	8004b18 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cea:	f7ff fdd3 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000244 	.word	0x20000244
 8000cf8:	40004800 	.word	0x40004800

08000cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	@ 0x38
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a96      	ldr	r2, [pc, #600]	@ (8000f74 <HAL_UART_MspInit+0x278>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d15c      	bne.n	8000dd8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
 8000d22:	4b95      	ldr	r3, [pc, #596]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a94      	ldr	r2, [pc, #592]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b92      	ldr	r3, [pc, #584]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	623b      	str	r3, [r7, #32]
 8000d38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	4b8e      	ldr	r3, [pc, #568]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a8d      	ldr	r2, [pc, #564]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	4882      	ldr	r0, [pc, #520]	@ (8000f7c <HAL_UART_MspInit+0x280>)
 8000d74:	f001 f92a 	bl	8001fcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d78:	4b81      	ldr	r3, [pc, #516]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000d7a:	4a82      	ldr	r2, [pc, #520]	@ (8000f84 <HAL_UART_MspInit+0x288>)
 8000d7c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d7e:	4b80      	ldr	r3, [pc, #512]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000d80:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d84:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d86:	4b7e      	ldr	r3, [pc, #504]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	4b7b      	ldr	r3, [pc, #492]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d98:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d9a:	4b79      	ldr	r3, [pc, #484]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da0:	4b77      	ldr	r3, [pc, #476]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000da6:	4b76      	ldr	r3, [pc, #472]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000da8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dae:	4b74      	ldr	r3, [pc, #464]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db4:	4b72      	ldr	r3, [pc, #456]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dba:	4871      	ldr	r0, [pc, #452]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000dbc:	f000 fd04 	bl	80017c8 <HAL_DMA_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000dc6:	f7ff fd65 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a6c      	ldr	r2, [pc, #432]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000dce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd0:	4a6b      	ldr	r2, [pc, #428]	@ (8000f80 <HAL_UART_MspInit+0x284>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dd6:	e0c8      	b.n	8000f6a <HAL_UART_MspInit+0x26e>
  else if(uartHandle->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a6a      	ldr	r2, [pc, #424]	@ (8000f88 <HAL_UART_MspInit+0x28c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d163      	bne.n	8000eaa <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b64      	ldr	r3, [pc, #400]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	4a63      	ldr	r2, [pc, #396]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df2:	4b61      	ldr	r3, [pc, #388]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	4b5d      	ldr	r3, [pc, #372]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a5c      	ldr	r2, [pc, #368]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4851      	ldr	r0, [pc, #324]	@ (8000f7c <HAL_UART_MspInit+0x280>)
 8000e36:	f001 f8c9 	bl	8001fcc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e3a:	4b54      	ldr	r3, [pc, #336]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e3c:	4a54      	ldr	r2, [pc, #336]	@ (8000f90 <HAL_UART_MspInit+0x294>)
 8000e3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e40:	4b52      	ldr	r3, [pc, #328]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e48:	4b50      	ldr	r3, [pc, #320]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e54:	4b4d      	ldr	r3, [pc, #308]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e62:	4b4a      	ldr	r3, [pc, #296]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e68:	4b48      	ldr	r3, [pc, #288]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e70:	4b46      	ldr	r3, [pc, #280]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e76:	4b45      	ldr	r3, [pc, #276]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e7c:	4843      	ldr	r0, [pc, #268]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e7e:	f000 fca3 	bl	80017c8 <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x190>
      Error_Handler();
 8000e88:	f7ff fd04 	bl	8000894 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e92:	4a3e      	ldr	r2, [pc, #248]	@ (8000f8c <HAL_UART_MspInit+0x290>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2026      	movs	r0, #38	@ 0x26
 8000e9e:	f000 fc58 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea2:	2026      	movs	r0, #38	@ 0x26
 8000ea4:	f000 fc71 	bl	800178a <HAL_NVIC_EnableIRQ>
}
 8000ea8:	e05f      	b.n	8000f6a <HAL_UART_MspInit+0x26e>
  else if(uartHandle->Instance==USART3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a39      	ldr	r2, [pc, #228]	@ (8000f94 <HAL_UART_MspInit+0x298>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d15a      	bne.n	8000f6a <HAL_UART_MspInit+0x26e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b28      	ldr	r3, [pc, #160]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	4a27      	ldr	r2, [pc, #156]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee0:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <HAL_UART_MspInit+0x27c>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000efe:	2307      	movs	r3, #7
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4823      	ldr	r0, [pc, #140]	@ (8000f98 <HAL_UART_MspInit+0x29c>)
 8000f0a:	f001 f85f 	bl	8001fcc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f10:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <HAL_UART_MspInit+0x2a4>)
 8000f12:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000f14:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f1a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f4e:	4813      	ldr	r0, [pc, #76]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f50:	f000 fc3a 	bl	80017c8 <HAL_DMA_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_UART_MspInit+0x262>
      Error_Handler();
 8000f5a:	f7ff fc9b 	bl	8000894 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <HAL_UART_MspInit+0x2a0>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	@ 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40011000 	.word	0x40011000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	2000028c 	.word	0x2000028c
 8000f84:	40026440 	.word	0x40026440
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	200002ec 	.word	0x200002ec
 8000f90:	40026088 	.word	0x40026088
 8000f94:	40004800 	.word	0x40004800
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	2000034c 	.word	0x2000034c
 8000fa0:	40026028 	.word	0x40026028

08000fa4 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 8000fa8:	492a      	ldr	r1, [pc, #168]	@ (8001054 <BootMessagePrint+0xb0>)
 8000faa:	482b      	ldr	r0, [pc, #172]	@ (8001058 <BootMessagePrint+0xb4>)
 8000fac:	f008 ff30 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000fb0:	4829      	ldr	r0, [pc, #164]	@ (8001058 <BootMessagePrint+0xb4>)
 8000fb2:	f7ff f91d 	bl	80001f0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4826      	ldr	r0, [pc, #152]	@ (8001058 <BootMessagePrint+0xb4>)
 8000fbe:	f000 f8df 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " Project Name        : %s\r\n", PROJECT_NAME );
 8000fc2:	4a26      	ldr	r2, [pc, #152]	@ (800105c <BootMessagePrint+0xb8>)
 8000fc4:	4926      	ldr	r1, [pc, #152]	@ (8001060 <BootMessagePrint+0xbc>)
 8000fc6:	4824      	ldr	r0, [pc, #144]	@ (8001058 <BootMessagePrint+0xb4>)
 8000fc8:	f008 ff22 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000fcc:	4822      	ldr	r0, [pc, #136]	@ (8001058 <BootMessagePrint+0xb4>)
 8000fce:	f7ff f90f 	bl	80001f0 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481f      	ldr	r0, [pc, #124]	@ (8001058 <BootMessagePrint+0xb4>)
 8000fda:	f000 f8d1 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HW VERSION        : %s\r\n", STR_HW_VER );
 8000fde:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <BootMessagePrint+0xc0>)
 8000fe0:	4921      	ldr	r1, [pc, #132]	@ (8001068 <BootMessagePrint+0xc4>)
 8000fe2:	481d      	ldr	r0, [pc, #116]	@ (8001058 <BootMessagePrint+0xb4>)
 8000fe4:	f008 ff14 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000fe8:	481b      	ldr	r0, [pc, #108]	@ (8001058 <BootMessagePrint+0xb4>)
 8000fea:	f7ff f901 	bl	80001f0 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4818      	ldr	r0, [pc, #96]	@ (8001058 <BootMessagePrint+0xb4>)
 8000ff6:	f000 f8c3 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - FW VERSION        : %s\r\n", STR_FW_VER );
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <BootMessagePrint+0xc8>)
 8000ffc:	491c      	ldr	r1, [pc, #112]	@ (8001070 <BootMessagePrint+0xcc>)
 8000ffe:	4816      	ldr	r0, [pc, #88]	@ (8001058 <BootMessagePrint+0xb4>)
 8001000:	f008 ff06 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001004:	4814      	ldr	r0, [pc, #80]	@ (8001058 <BootMessagePrint+0xb4>)
 8001006:	f7ff f8f3 	bl	80001f0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29b      	uxth	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	4811      	ldr	r0, [pc, #68]	@ (8001058 <BootMessagePrint+0xb4>)
 8001012:	f000 f8b5 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <BootMessagePrint+0xd0>)
 8001018:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <BootMessagePrint+0xd4>)
 800101a:	4918      	ldr	r1, [pc, #96]	@ (800107c <BootMessagePrint+0xd8>)
 800101c:	480e      	ldr	r0, [pc, #56]	@ (8001058 <BootMessagePrint+0xb4>)
 800101e:	f008 fef7 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001022:	480d      	ldr	r0, [pc, #52]	@ (8001058 <BootMessagePrint+0xb4>)
 8001024:	f7ff f8e4 	bl	80001f0 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29b      	uxth	r3, r3
 800102c:	4619      	mov	r1, r3
 800102e:	480a      	ldr	r0, [pc, #40]	@ (8001058 <BootMessagePrint+0xb4>)
 8001030:	f000 f8a6 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 8001034:	4907      	ldr	r1, [pc, #28]	@ (8001054 <BootMessagePrint+0xb0>)
 8001036:	4808      	ldr	r0, [pc, #32]	@ (8001058 <BootMessagePrint+0xb4>)
 8001038:	f008 feea 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800103c:	4806      	ldr	r0, [pc, #24]	@ (8001058 <BootMessagePrint+0xb4>)
 800103e:	f7ff f8d7 	bl	80001f0 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29b      	uxth	r3, r3
 8001046:	4619      	mov	r1, r3
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <BootMessagePrint+0xb4>)
 800104a:	f000 f899 	bl	8001180 <User_CDC_Transmit_FS>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	0800a7b4 	.word	0x0800a7b4
 8001058:	200007b4 	.word	0x200007b4
 800105c:	0800a7e4 	.word	0x0800a7e4
 8001060:	0800a7f8 	.word	0x0800a7f8
 8001064:	0800a814 	.word	0x0800a814
 8001068:	0800a81c 	.word	0x0800a81c
 800106c:	0800a838 	.word	0x0800a838
 8001070:	0800a84c 	.word	0x0800a84c
 8001074:	0800a868 	.word	0x0800a868
 8001078:	0800a874 	.word	0x0800a874
 800107c:	0800a880 	.word	0x0800a880

08001080 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 8001084:	4937      	ldr	r1, [pc, #220]	@ (8001164 <GetClockSourcePrint+0xe4>)
 8001086:	4838      	ldr	r0, [pc, #224]	@ (8001168 <GetClockSourcePrint+0xe8>)
 8001088:	f008 fec2 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800108c:	4836      	ldr	r0, [pc, #216]	@ (8001168 <GetClockSourcePrint+0xe8>)
 800108e:	f7ff f8af 	bl	80001f0 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	b29b      	uxth	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	4833      	ldr	r0, [pc, #204]	@ (8001168 <GetClockSourcePrint+0xe8>)
 800109a:	f000 f871 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 800109e:	f002 ff8b 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a31      	ldr	r2, [pc, #196]	@ (800116c <GetClockSourcePrint+0xec>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0c9b      	lsrs	r3, r3, #18
 80010ac:	461a      	mov	r2, r3
 80010ae:	4930      	ldr	r1, [pc, #192]	@ (8001170 <GetClockSourcePrint+0xf0>)
 80010b0:	482d      	ldr	r0, [pc, #180]	@ (8001168 <GetClockSourcePrint+0xe8>)
 80010b2:	f008 fead 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010b6:	482c      	ldr	r0, [pc, #176]	@ (8001168 <GetClockSourcePrint+0xe8>)
 80010b8:	f7ff f89a 	bl	80001f0 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	4829      	ldr	r0, [pc, #164]	@ (8001168 <GetClockSourcePrint+0xe8>)
 80010c4:	f000 f85c 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 80010c8:	f003 f87c 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a27      	ldr	r2, [pc, #156]	@ (800116c <GetClockSourcePrint+0xec>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	0c9b      	lsrs	r3, r3, #18
 80010d6:	461a      	mov	r2, r3
 80010d8:	4926      	ldr	r1, [pc, #152]	@ (8001174 <GetClockSourcePrint+0xf4>)
 80010da:	4823      	ldr	r0, [pc, #140]	@ (8001168 <GetClockSourcePrint+0xe8>)
 80010dc:	f008 fe98 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010e0:	4821      	ldr	r0, [pc, #132]	@ (8001168 <GetClockSourcePrint+0xe8>)
 80010e2:	f7ff f885 	bl	80001f0 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	481e      	ldr	r0, [pc, #120]	@ (8001168 <GetClockSourcePrint+0xe8>)
 80010ee:	f000 f847 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 80010f2:	f003 f873 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <GetClockSourcePrint+0xec>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	0c9b      	lsrs	r3, r3, #18
 8001100:	461a      	mov	r2, r3
 8001102:	491d      	ldr	r1, [pc, #116]	@ (8001178 <GetClockSourcePrint+0xf8>)
 8001104:	4818      	ldr	r0, [pc, #96]	@ (8001168 <GetClockSourcePrint+0xe8>)
 8001106:	f008 fe83 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800110a:	4817      	ldr	r0, [pc, #92]	@ (8001168 <GetClockSourcePrint+0xe8>)
 800110c:	f7ff f870 	bl	80001f0 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	b29b      	uxth	r3, r3
 8001114:	4619      	mov	r1, r3
 8001116:	4814      	ldr	r0, [pc, #80]	@ (8001168 <GetClockSourcePrint+0xe8>)
 8001118:	f000 f832 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 800111c:	f003 f872 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8001120:	4603      	mov	r3, r0
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <GetClockSourcePrint+0xec>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	0c9b      	lsrs	r3, r3, #18
 800112a:	461a      	mov	r2, r3
 800112c:	4913      	ldr	r1, [pc, #76]	@ (800117c <GetClockSourcePrint+0xfc>)
 800112e:	480e      	ldr	r0, [pc, #56]	@ (8001168 <GetClockSourcePrint+0xe8>)
 8001130:	f008 fe6e 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <GetClockSourcePrint+0xe8>)
 8001136:	f7ff f85b 	bl	80001f0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29b      	uxth	r3, r3
 800113e:	4619      	mov	r1, r3
 8001140:	4809      	ldr	r0, [pc, #36]	@ (8001168 <GetClockSourcePrint+0xe8>)
 8001142:	f000 f81d 	bl	8001180 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 8001146:	4907      	ldr	r1, [pc, #28]	@ (8001164 <GetClockSourcePrint+0xe4>)
 8001148:	4807      	ldr	r0, [pc, #28]	@ (8001168 <GetClockSourcePrint+0xe8>)
 800114a:	f008 fe61 	bl	8009e10 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <GetClockSourcePrint+0xe8>)
 8001150:	f7ff f84e 	bl	80001f0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29b      	uxth	r3, r3
 8001158:	4619      	mov	r1, r3
 800115a:	4803      	ldr	r0, [pc, #12]	@ (8001168 <GetClockSourcePrint+0xe8>)
 800115c:	f000 f810 	bl	8001180 <User_CDC_Transmit_FS>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800a7b4 	.word	0x0800a7b4
 8001168:	200007b4 	.word	0x200007b4
 800116c:	431bde83 	.word	0x431bde83
 8001170:	0800a8a0 	.word	0x0800a8a0
 8001174:	0800a8d0 	.word	0x0800a8d0
 8001178:	0800a900 	.word	0x0800a900
 800117c:	0800a930 	.word	0x0800a930

08001180 <User_CDC_Transmit_FS>:

void User_CDC_Transmit_FS(uint8_t * pdata, uint16_t datalength)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
    // while(CDC_Transmit_FS((uint8_t *) pdata, datalength) == USBD_BUSY);
    CDC_Transmit_FS((uint8_t *) pdata, datalength);
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f008 f9cf 	bl	8009534 <CDC_Transmit_FS>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <LED_Proc+0x24>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011ac:	d307      	bcc.n	80011be <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <LED_Proc+0x24>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 80011b4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <LED_Proc+0x28>)
 80011ba:	f001 f8cc 	bl	8002356 <HAL_GPIO_TogglePin>
    }    
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200003ac 	.word	0x200003ac
 80011c8:	40020400 	.word	0x40020400

080011cc <GPIO_Proc>:

void GPIO_Proc (void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    LED_Proc();
 80011d0:	f7ff ffe6 	bl	80011a0 <LED_Proc>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <UART1_RX_Proc>:
/*----------------------------------------------------------------------------*/


/* USER CODE BEGIN 1 */
void UART1_RX_Proc (void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    if ( Uart_Rx_IdlelineIT_Flag != NULL )
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <UART1_RX_Proc+0x5c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d024      	beq.n	800122e <UART1_RX_Proc+0x56>
    // if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)))
    {
        __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <UART1_RX_Proc+0x60>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <UART1_RX_Proc+0x60>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

        hdma_usart2_rx.Instance->NDTR = UART_RX_BUFFER_MAX_SIZE; // rx buff index init
 80011f4:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <UART1_RX_Proc+0x60>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011fc:	605a      	str	r2, [r3, #4]

        __HAL_DMA_ENABLE(&hdma_usart2_rx);
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <UART1_RX_Proc+0x60>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <UART1_RX_Proc+0x60>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0201 	orr.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, &uart2_rx_buffer);
 800120e:	490b      	ldr	r1, [pc, #44]	@ (800123c <UART1_RX_Proc+0x64>)
 8001210:	480b      	ldr	r0, [pc, #44]	@ (8001240 <UART1_RX_Proc+0x68>)
 8001212:	f008 fdfd 	bl	8009e10 <siprintf>
        User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001216:	480a      	ldr	r0, [pc, #40]	@ (8001240 <UART1_RX_Proc+0x68>)
 8001218:	f7fe ffea 	bl	80001f0 <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	b29b      	uxth	r3, r3
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	@ (8001240 <UART1_RX_Proc+0x68>)
 8001224:	f7ff ffac 	bl	8001180 <User_CDC_Transmit_FS>

        // memset(uart2_rx_buffer, 0, Uart_Rx_IdlelineSize);
        // Uart_Rx_IdlelineSize = 0;
        Uart_Rx_IdlelineIT_Flag = NULL;
 8001228:	4b02      	ldr	r3, [pc, #8]	@ (8001234 <UART1_RX_Proc+0x5c>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
    }
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200013ba 	.word	0x200013ba
 8001238:	200002ec 	.word	0x200002ec
 800123c:	20000fb8 	.word	0x20000fb8
 8001240:	200007b4 	.word	0x200007b4

08001244 <USB_CDC_Proc>:
/*----------------------------------------------------------------------------*/
static uint16_t count = 0;

/* USER CODE BEGIN 1 */
void USB_CDC_Proc (void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    #if 1
    if (TIM1_CNT_2 >= 1000)
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <USB_CDC_Proc+0x70>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001250:	d32e      	bcc.n	80012b0 <USB_CDC_Proc+0x6c>
    {
        TIM1_CNT_2 = 0;
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <USB_CDC_Proc+0x70>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "USB CDC TEST %d\r\n", count);
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <USB_CDC_Proc+0x74>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4917      	ldr	r1, [pc, #92]	@ (80012bc <USB_CDC_Proc+0x78>)
 8001260:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <USB_CDC_Proc+0x7c>)
 8001262:	f008 fdd5 	bl	8009e10 <siprintf>
        User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001266:	4816      	ldr	r0, [pc, #88]	@ (80012c0 <USB_CDC_Proc+0x7c>)
 8001268:	f7fe ffc2 	bl	80001f0 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	b29b      	uxth	r3, r3
 8001270:	4619      	mov	r1, r3
 8001272:	4813      	ldr	r0, [pc, #76]	@ (80012c0 <USB_CDC_Proc+0x7c>)
 8001274:	f7ff ff84 	bl	8001180 <User_CDC_Transmit_FS>

        sprintf(USB_CdcTxBuffer_FS, "USB CDC Transmit OK.\r\n");
 8001278:	4912      	ldr	r1, [pc, #72]	@ (80012c4 <USB_CDC_Proc+0x80>)
 800127a:	4811      	ldr	r0, [pc, #68]	@ (80012c0 <USB_CDC_Proc+0x7c>)
 800127c:	f008 fdc8 	bl	8009e10 <siprintf>
        User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001280:	480f      	ldr	r0, [pc, #60]	@ (80012c0 <USB_CDC_Proc+0x7c>)
 8001282:	f7fe ffb5 	bl	80001f0 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29b      	uxth	r3, r3
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <USB_CDC_Proc+0x7c>)
 800128e:	f7ff ff77 	bl	8001180 <User_CDC_Transmit_FS>
        
        memset(USB_CdcTxBuffer_FS, 0, strlen(USB_CdcTxBuffer_FS));
 8001292:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <USB_CDC_Proc+0x7c>)
 8001294:	f7fe ffac 	bl	80001f0 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <USB_CDC_Proc+0x7c>)
 80012a0:	f008 fdd6 	bl	8009e50 <memset>
        
        count++;
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <USB_CDC_Proc+0x74>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <USB_CDC_Proc+0x74>)
 80012ae:	801a      	strh	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
        CDC_Transmit_FS(USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
    }
    #endif
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200003b0 	.word	0x200003b0
 80012b8:	200013bc 	.word	0x200013bc
 80012bc:	0800a960 	.word	0x0800a960
 80012c0:	200007b4 	.word	0x200007b4
 80012c4:	0800a974 	.word	0x0800a974

080012c8 <USB_CDC_RX_Proc>:

void USB_CDC_RX_Proc(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    if (USB_CdcRxBuffer_FS_cnt != NULL)
 80012cc:	4b3d      	ldr	r3, [pc, #244]	@ (80013c4 <USB_CDC_RX_Proc+0xfc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d075      	beq.n	80013c0 <USB_CDC_RX_Proc+0xf8>
    {
        if (!strncmp("RXBUF ALL PRINT", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 80012d4:	4b3b      	ldr	r3, [pc, #236]	@ (80013c4 <USB_CDC_RX_Proc+0xfc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b02      	subs	r3, #2
 80012da:	461a      	mov	r2, r3
 80012dc:	493a      	ldr	r1, [pc, #232]	@ (80013c8 <USB_CDC_RX_Proc+0x100>)
 80012de:	483b      	ldr	r0, [pc, #236]	@ (80013cc <USB_CDC_RX_Proc+0x104>)
 80012e0:	f008 fdbe 	bl	8009e60 <strncmp>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10d      	bne.n	8001306 <USB_CDC_RX_Proc+0x3e>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB ALL\r\n");
 80012ea:	4939      	ldr	r1, [pc, #228]	@ (80013d0 <USB_CDC_RX_Proc+0x108>)
 80012ec:	4839      	ldr	r0, [pc, #228]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 80012ee:	f008 fd8f 	bl	8009e10 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80012f2:	4838      	ldr	r0, [pc, #224]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 80012f4:	f7fe ff7c 	bl	80001f0 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	4835      	ldr	r0, [pc, #212]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 8001300:	f7ff ff3e 	bl	8001180 <User_CDC_Transmit_FS>
 8001304:	e052      	b.n	80013ac <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("RXBUF CLEAR", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <USB_CDC_RX_Proc+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3b02      	subs	r3, #2
 800130c:	461a      	mov	r2, r3
 800130e:	492e      	ldr	r1, [pc, #184]	@ (80013c8 <USB_CDC_RX_Proc+0x100>)
 8001310:	4831      	ldr	r0, [pc, #196]	@ (80013d8 <USB_CDC_RX_Proc+0x110>)
 8001312:	f008 fda5 	bl	8009e60 <strncmp>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10d      	bne.n	8001338 <USB_CDC_RX_Proc+0x70>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB RX Buffer Clear\r\n");
 800131c:	492f      	ldr	r1, [pc, #188]	@ (80013dc <USB_CDC_RX_Proc+0x114>)
 800131e:	482d      	ldr	r0, [pc, #180]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 8001320:	f008 fd76 	bl	8009e10 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001324:	482b      	ldr	r0, [pc, #172]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 8001326:	f7fe ff63 	bl	80001f0 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29b      	uxth	r3, r3
 800132e:	4619      	mov	r1, r3
 8001330:	4828      	ldr	r0, [pc, #160]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 8001332:	f7ff ff25 	bl	8001180 <User_CDC_Transmit_FS>
 8001336:	e039      	b.n	80013ac <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("SYSTEM RESET", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <USB_CDC_RX_Proc+0xfc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3b02      	subs	r3, #2
 800133e:	461a      	mov	r2, r3
 8001340:	4921      	ldr	r1, [pc, #132]	@ (80013c8 <USB_CDC_RX_Proc+0x100>)
 8001342:	4827      	ldr	r0, [pc, #156]	@ (80013e0 <USB_CDC_RX_Proc+0x118>)
 8001344:	f008 fd8c 	bl	8009e60 <strncmp>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d112      	bne.n	8001374 <USB_CDC_RX_Proc+0xac>
        {
            sprintf(USB_CdcTxBuffer_FS, "SYSTEM Reset\r\n");
 800134e:	4925      	ldr	r1, [pc, #148]	@ (80013e4 <USB_CDC_RX_Proc+0x11c>)
 8001350:	4820      	ldr	r0, [pc, #128]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 8001352:	f008 fd5d 	bl	8009e10 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001356:	481f      	ldr	r0, [pc, #124]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 8001358:	f7fe ff4a 	bl	80001f0 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b29b      	uxth	r3, r3
 8001360:	4619      	mov	r1, r3
 8001362:	481c      	ldr	r0, [pc, #112]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 8001364:	f7ff ff0c 	bl	8001180 <User_CDC_Transmit_FS>
            HAL_Delay(100);
 8001368:	2064      	movs	r0, #100	@ 0x64
 800136a:	f000 f8dd 	bl	8001528 <HAL_Delay>
            HAL_NVIC_SystemReset();
 800136e:	f000 fa1a 	bl	80017a6 <HAL_NVIC_SystemReset>
 8001372:	e01b      	b.n	80013ac <USB_CDC_RX_Proc+0xe4>
        }
        else if (!strncmp("SYSTEM INFO", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <USB_CDC_RX_Proc+0xfc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3b02      	subs	r3, #2
 800137a:	461a      	mov	r2, r3
 800137c:	4912      	ldr	r1, [pc, #72]	@ (80013c8 <USB_CDC_RX_Proc+0x100>)
 800137e:	481a      	ldr	r0, [pc, #104]	@ (80013e8 <USB_CDC_RX_Proc+0x120>)
 8001380:	f008 fd6e 	bl	8009e60 <strncmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d110      	bne.n	80013ac <USB_CDC_RX_Proc+0xe4>
        {
            sprintf(USB_CdcTxBuffer_FS, "[ System Infomation ]\r\n");
 800138a:	4918      	ldr	r1, [pc, #96]	@ (80013ec <USB_CDC_RX_Proc+0x124>)
 800138c:	4811      	ldr	r0, [pc, #68]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 800138e:	f008 fd3f 	bl	8009e10 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001392:	4810      	ldr	r0, [pc, #64]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 8001394:	f7fe ff2c 	bl	80001f0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29b      	uxth	r3, r3
 800139c:	4619      	mov	r1, r3
 800139e:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <USB_CDC_RX_Proc+0x10c>)
 80013a0:	f7ff feee 	bl	8001180 <User_CDC_Transmit_FS>

            BootMessagePrint();
 80013a4:	f7ff fdfe 	bl	8000fa4 <BootMessagePrint>
            GetClockSourcePrint();
 80013a8:	f7ff fe6a 	bl	8001080 <GetClockSourcePrint>
        }

        memset(USB_CdcRxBuffer_FS, 0, USB_CdcRxBuffer_FS_cnt);
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <USB_CDC_RX_Proc+0xfc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <USB_CDC_RX_Proc+0x100>)
 80013b6:	f008 fd4b 	bl	8009e50 <memset>
        USB_CdcRxBuffer_FS_cnt = NULL;
 80013ba:	4b02      	ldr	r3, [pc, #8]	@ (80013c4 <USB_CDC_RX_Proc+0xfc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
    }
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000bb4 	.word	0x20000bb4
 80013c8:	200003b4 	.word	0x200003b4
 80013cc:	0800a98c 	.word	0x0800a98c
 80013d0:	0800a99c 	.word	0x0800a99c
 80013d4:	200007b4 	.word	0x200007b4
 80013d8:	0800a9a8 	.word	0x0800a9a8
 80013dc:	0800a9b4 	.word	0x0800a9b4
 80013e0:	0800a9cc 	.word	0x0800a9cc
 80013e4:	0800a9dc 	.word	0x0800a9dc
 80013e8:	0800a9ec 	.word	0x0800a9ec
 80013ec:	0800a9f8 	.word	0x0800a9f8

080013f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001428 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f4:	f7ff fb7a 	bl	8000aec <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800141e:	f008 fd4b 	bl	8009eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff f975 	bl	8000710 <main>
  bx  lr    
 8001426:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001428:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001434:	0800aabc 	.word	0x0800aabc
  ldr r2, =_sbss
 8001438:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800143c:	200030f0 	.word	0x200030f0

08001440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <HAL_Init+0x40>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_Init+0x40>)
 800145a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800145e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <HAL_Init+0x40>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f965 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	200f      	movs	r0, #15
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fa12 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f981 	bl	80017ae <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 f945 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	@ (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008
 800150c:	200013c0 	.word	0x200013c0

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200013c0 	.word	0x200013c0

08001528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff ffee 	bl	8001510 <HAL_GetTick>
 8001534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d005      	beq.n	800154e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_Delay+0x44>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800154e:	bf00      	nop
 8001550:	f7ff ffde 	bl	8001510 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d8f7      	bhi.n	8001550 <HAL_Delay+0x28>
  {
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	@ (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	@ (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	@ (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80016d0:	f3bf 8f4f 	dsb	sy
}
 80016d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <__NVIC_SystemReset+0x24>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016de:	4904      	ldr	r1, [pc, #16]	@ (80016f0 <__NVIC_SystemReset+0x24>)
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <__NVIC_SystemReset+0x28>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <__NVIC_SystemReset+0x20>
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	05fa0004 	.word	0x05fa0004

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff78 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff13 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff28 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff78 	bl	8001664 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff1b 	bl	80015d4 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80017aa:	f7ff ff8f 	bl	80016cc <__NVIC_SystemReset>

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff9e 	bl	80016f8 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff fe9c 	bl	8001510 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e099      	b.n	8001918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001804:	e00f      	b.n	8001826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001806:	f7ff fe83 	bl	8001510 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b05      	cmp	r3, #5
 8001812:	d908      	bls.n	8001826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2220      	movs	r2, #32
 8001818:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e078      	b.n	8001918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e8      	bne.n	8001806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4b38      	ldr	r3, [pc, #224]	@ (8001920 <HAL_DMA_Init+0x158>)
 8001840:	4013      	ands	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	2b04      	cmp	r3, #4
 800187e:	d107      	bne.n	8001890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	4313      	orrs	r3, r2
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f023 0307 	bic.w	r3, r3, #7
 80018a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d117      	bne.n	80018ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00e      	beq.n	80018ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 fb01 	bl	8001ed4 <DMA_CheckFifoParam>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2240      	movs	r2, #64	@ 0x40
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80018e6:	2301      	movs	r3, #1
 80018e8:	e016      	b.n	8001918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fab8 	bl	8001e68 <DMA_CalcBaseAndBitshift>
 80018f8:	4603      	mov	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001900:	223f      	movs	r2, #63	@ 0x3f
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	f010803f 	.word	0xf010803f

08001924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_DMA_Start_IT+0x26>
 8001946:	2302      	movs	r3, #2
 8001948:	e040      	b.n	80019cc <HAL_DMA_Start_IT+0xa8>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d12f      	bne.n	80019be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2202      	movs	r2, #2
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fa4a 	bl	8001e0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197c:	223f      	movs	r2, #63	@ 0x3f
 800197e:	409a      	lsls	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0216 	orr.w	r2, r2, #22
 8001992:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0208 	orr.w	r2, r2, #8
 80019aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e005      	b.n	80019ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019c6:	2302      	movs	r3, #2
 80019c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019e2:	f7ff fd95 	bl	8001510 <HAL_GetTick>
 80019e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d008      	beq.n	8001a06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e052      	b.n	8001aac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0216 	bic.w	r2, r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <HAL_DMA_Abort+0x62>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a56:	e013      	b.n	8001a80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a58:	f7ff fd5a 	bl	8001510 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d90c      	bls.n	8001a80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2203      	movs	r2, #3
 8001a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e015      	b.n	8001aac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e4      	bne.n	8001a58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a92:	223f      	movs	r2, #63	@ 0x3f
 8001a94:	409a      	lsls	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d004      	beq.n	8001ad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2280      	movs	r2, #128	@ 0x80
 8001acc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00c      	b.n	8001aec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b04:	4b8e      	ldr	r3, [pc, #568]	@ (8001d40 <HAL_DMA_IRQHandler+0x248>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a8e      	ldr	r2, [pc, #568]	@ (8001d44 <HAL_DMA_IRQHandler+0x24c>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0a9b      	lsrs	r3, r3, #10
 8001b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b22:	2208      	movs	r2, #8
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01a      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b50:	2208      	movs	r2, #8
 8001b52:	409a      	lsls	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	2201      	movs	r2, #1
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d012      	beq.n	8001b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b86:	2201      	movs	r2, #1
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc8:	f043 0204 	orr.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d043      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03c      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d018      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d024      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
 8001c26:	e01f      	b.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01b      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
 8001c38:	e016      	b.n	8001c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0208 	bic.w	r2, r2, #8
 8001c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 808f 	beq.w	8001d98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8087 	beq.w	8001d98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8e:	2220      	movs	r2, #32
 8001c90:	409a      	lsls	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d136      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <HAL_DMA_IRQHandler+0x1da>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	223f      	movs	r2, #63	@ 0x3f
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d07e      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
        }
        return;
 8001d0e:	e079      	b.n	8001e04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01d      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d031      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
 8001d3c:	e02c      	b.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000
 8001d44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d023      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e01e      	b.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10f      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0210 	bic.w	r2, r2, #16
 8001d76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d032      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d022      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2205      	movs	r2, #5
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d307      	bcc.n	8001de0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f2      	bne.n	8001dc4 <HAL_DMA_IRQHandler+0x2cc>
 8001dde:	e000      	b.n	8001de2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001de0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
 8001e02:	e000      	b.n	8001e06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e04:	bf00      	nop
    }
  }
}
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b40      	cmp	r3, #64	@ 0x40
 8001e38:	d108      	bne.n	8001e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e4a:	e007      	b.n	8001e5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3b10      	subs	r3, #16
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <DMA_CalcBaseAndBitshift+0x64>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e82:	4a13      	ldr	r2, [pc, #76]	@ (8001ed0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d909      	bls.n	8001eaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	1d1a      	adds	r2, r3, #4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ea8:	e007      	b.n	8001eba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	aaaaaaab 	.word	0xaaaaaaab
 8001ed0:	0800aa70 	.word	0x0800aa70

08001ed4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11f      	bne.n	8001f2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d856      	bhi.n	8001fa2 <DMA_CheckFifoParam+0xce>
 8001ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8001efc <DMA_CheckFifoParam+0x28>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	08001f1f 	.word	0x08001f1f
 8001f04:	08001f0d 	.word	0x08001f0d
 8001f08:	08001fa3 	.word	0x08001fa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d046      	beq.n	8001fa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f1c:	e043      	b.n	8001fa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f26:	d140      	bne.n	8001faa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2c:	e03d      	b.n	8001faa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f36:	d121      	bne.n	8001f7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d837      	bhi.n	8001fae <DMA_CheckFifoParam+0xda>
 8001f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <DMA_CheckFifoParam+0x70>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5b 	.word	0x08001f5b
 8001f4c:	08001f55 	.word	0x08001f55
 8001f50:	08001f6d 	.word	0x08001f6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      break;
 8001f58:	e030      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d025      	beq.n	8001fb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6a:	e022      	b.n	8001fb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f74:	d11f      	bne.n	8001fb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f7a:	e01c      	b.n	8001fb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d903      	bls.n	8001f8a <DMA_CheckFifoParam+0xb6>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d003      	beq.n	8001f90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f88:	e018      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8e:	e015      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00e      	beq.n	8001fba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa0:	e00b      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e00a      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e008      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
 8001fac:	e006      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e004      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e002      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;   
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fba:	bf00      	nop
    }
  } 
  
  return status; 
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e177      	b.n	80022d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8166 	bne.w	80022d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d005      	beq.n	800201e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	2b02      	cmp	r3, #2
 800201c:	d130      	bne.n	8002080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b03      	cmp	r3, #3
 800208a:	d017      	beq.n	80020bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80c0 	beq.w	80022d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b66      	ldr	r3, [pc, #408]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002160:	6453      	str	r3, [r2, #68]	@ 0x44
 8002162:	4b63      	ldr	r3, [pc, #396]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216e:	4a61      	ldr	r2, [pc, #388]	@ (80022f4 <HAL_GPIO_Init+0x328>)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a58      	ldr	r2, [pc, #352]	@ (80022f8 <HAL_GPIO_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d037      	beq.n	800220a <HAL_GPIO_Init+0x23e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a57      	ldr	r2, [pc, #348]	@ (80022fc <HAL_GPIO_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d031      	beq.n	8002206 <HAL_GPIO_Init+0x23a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a56      	ldr	r2, [pc, #344]	@ (8002300 <HAL_GPIO_Init+0x334>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <HAL_GPIO_Init+0x236>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a55      	ldr	r2, [pc, #340]	@ (8002304 <HAL_GPIO_Init+0x338>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x232>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a54      	ldr	r2, [pc, #336]	@ (8002308 <HAL_GPIO_Init+0x33c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x22e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a53      	ldr	r2, [pc, #332]	@ (800230c <HAL_GPIO_Init+0x340>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x22a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	@ (8002310 <HAL_GPIO_Init+0x344>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x226>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a51      	ldr	r2, [pc, #324]	@ (8002314 <HAL_GPIO_Init+0x348>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x222>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a50      	ldr	r2, [pc, #320]	@ (8002318 <HAL_GPIO_Init+0x34c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x21e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4f      	ldr	r2, [pc, #316]	@ (800231c <HAL_GPIO_Init+0x350>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x21a>
 80021e2:	2309      	movs	r3, #9
 80021e4:	e012      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021e6:	230a      	movs	r3, #10
 80021e8:	e010      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021ea:	2308      	movs	r3, #8
 80021ec:	e00e      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021ee:	2307      	movs	r3, #7
 80021f0:	e00c      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021f2:	2306      	movs	r3, #6
 80021f4:	e00a      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021f6:	2305      	movs	r3, #5
 80021f8:	e008      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021fa:	2304      	movs	r3, #4
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021fe:	2303      	movs	r3, #3
 8002200:	e004      	b.n	800220c <HAL_GPIO_Init+0x240>
 8002202:	2302      	movs	r3, #2
 8002204:	e002      	b.n	800220c <HAL_GPIO_Init+0x240>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x240>
 800220a:	2300      	movs	r3, #0
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	f002 0203 	and.w	r2, r2, #3
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	4093      	lsls	r3, r2
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221c:	4935      	ldr	r1, [pc, #212]	@ (80022f4 <HAL_GPIO_Init+0x328>)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222a:	4b3d      	ldr	r3, [pc, #244]	@ (8002320 <HAL_GPIO_Init+0x354>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800224e:	4a34      	ldr	r2, [pc, #208]	@ (8002320 <HAL_GPIO_Init+0x354>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002254:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <HAL_GPIO_Init+0x354>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002278:	4a29      	ldr	r2, [pc, #164]	@ (8002320 <HAL_GPIO_Init+0x354>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800227e:	4b28      	ldr	r3, [pc, #160]	@ (8002320 <HAL_GPIO_Init+0x354>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <HAL_GPIO_Init+0x354>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_GPIO_Init+0x354>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022cc:	4a14      	ldr	r2, [pc, #80]	@ (8002320 <HAL_GPIO_Init+0x354>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	f67f ae84 	bls.w	8001fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40013800 	.word	0x40013800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020800 	.word	0x40020800
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40021400 	.word	0x40021400
 8002310:	40021800 	.word	0x40021800
 8002314:	40021c00 	.word	0x40021c00
 8002318:	40022000 	.word	0x40022000
 800231c:	40022400 	.word	0x40022400
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002368:	887a      	ldrh	r2, [r7, #2]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43d9      	mvns	r1, r3
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	400b      	ands	r3, r1
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af02      	add	r7, sp, #8
 8002390:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e101      	b.n	80025a0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f007 fa16 	bl	80097e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2203      	movs	r2, #3
 80023c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ca:	d102      	bne.n	80023d2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fdef 	bl	8005fba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7c1a      	ldrb	r2, [r3, #16]
 80023e4:	f88d 2000 	strb.w	r2, [sp]
 80023e8:	3304      	adds	r3, #4
 80023ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ec:	f003 fcce 	bl	8005d8c <USB_CoreInit>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0ce      	b.n	80025a0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fde7 	bl	8005fdc <USB_SetCurrentMode>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0bf      	b.n	80025a0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e04a      	b.n	80024bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	3315      	adds	r3, #21
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	3314      	adds	r3, #20
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	b298      	uxth	r0, r3
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	332e      	adds	r3, #46	@ 0x2e
 8002462:	4602      	mov	r2, r0
 8002464:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	3318      	adds	r3, #24
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	331c      	adds	r3, #28
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3320      	adds	r3, #32
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3324      	adds	r3, #36	@ 0x24
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	3301      	adds	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d3af      	bcc.n	8002426 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e044      	b.n	8002556 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3301      	adds	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	791b      	ldrb	r3, [r3, #4]
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	429a      	cmp	r2, r3
 800255e:	d3b5      	bcc.n	80024cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7c1a      	ldrb	r2, [r3, #16]
 8002568:	f88d 2000 	strb.w	r2, [sp]
 800256c:	3304      	adds	r3, #4
 800256e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002570:	f003 fd80 	bl	8006074 <USB_DevInit>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2202      	movs	r2, #2
 800257e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00c      	b.n	80025a0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f004 fdc4 	bl	8007126 <USB_DevDisconnect>

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_PCD_Start+0x1c>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e022      	b.n	800260a <HAL_PCD_Start+0x62>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 fcd1 	bl	8005f98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fd72 	bl	80070e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002612:	b590      	push	{r4, r7, lr}
 8002614:	b08d      	sub	sp, #52	@ 0x34
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fe30 	bl	800728e <USB_GetMode>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	f040 848c 	bne.w	8002f4e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f004 fd94 	bl	8007168 <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8482 	beq.w	8002f4c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f004 fd81 	bl	8007168 <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b02      	cmp	r3, #2
 800266e:	d107      	bne.n	8002680 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f002 0202 	and.w	r2, r2, #2
 800267e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fd6f 	bl	8007168 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d161      	bne.n	8002758 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0210 	bic.w	r2, r2, #16
 80026a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 020f 	and.w	r2, r3, #15
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	0c5b      	lsrs	r3, r3, #17
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d124      	bne.n	800271a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d035      	beq.n	8002748 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	6a38      	ldr	r0, [r7, #32]
 80026f0:	f004 fba6 	bl	8006e40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002700:	441a      	add	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002712:	441a      	add	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	615a      	str	r2, [r3, #20]
 8002718:	e016      	b.n	8002748 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	0c5b      	lsrs	r3, r3, #17
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	2b06      	cmp	r3, #6
 8002724:	d110      	bne.n	8002748 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800272c:	2208      	movs	r2, #8
 800272e:	4619      	mov	r1, r3
 8002730:	6a38      	ldr	r0, [r7, #32]
 8002732:	f004 fb85 	bl	8006e40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002742:	441a      	add	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0210 	orr.w	r2, r2, #16
 8002756:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f004 fd03 	bl	8007168 <USB_ReadInterrupts>
 8002762:	4603      	mov	r3, r0
 8002764:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002768:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800276c:	f040 80a7 	bne.w	80028be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f004 fd08 	bl	800718e <USB_ReadDevAllOutEpInterrupt>
 800277e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002780:	e099      	b.n	80028b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 808e 	beq.w	80028aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f004 fd2c 	bl	80071f6 <USB_ReadDevOutEPInterrupt>
 800279e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027b6:	461a      	mov	r2, r3
 80027b8:	2301      	movs	r3, #1
 80027ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fea2 	bl	8003508 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027da:	461a      	mov	r2, r3
 80027dc:	2308      	movs	r3, #8
 80027de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 ff78 	bl	80036d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fe:	461a      	mov	r2, r3
 8002800:	2310      	movs	r3, #16
 8002802:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d030      	beq.n	8002870 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002816:	2b80      	cmp	r3, #128	@ 0x80
 8002818:	d109      	bne.n	800282e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002828:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800282c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800282e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	3304      	adds	r3, #4
 8002842:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	78db      	ldrb	r3, [r3, #3]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d108      	bne.n	800285e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2200      	movs	r2, #0
 8002850:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f007 f8cb 	bl	80099f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	2302      	movs	r3, #2
 800286e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002886:	461a      	mov	r2, r3
 8002888:	2320      	movs	r3, #32
 800288a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a2:	461a      	mov	r2, r3
 80028a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	3301      	adds	r3, #1
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f47f af62 	bne.w	8002782 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fc50 	bl	8007168 <USB_ReadInterrupts>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028d2:	f040 80db 	bne.w	8002a8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 fc71 	bl	80071c2 <USB_ReadDevAllInEpInterrupt>
 80028e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80028e6:	e0cd      	b.n	8002a84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80c2 	beq.w	8002a78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 fc97 	bl	8007232 <USB_ReadDevInEPInterrupt>
 8002904:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d057      	beq.n	80029c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	2201      	movs	r2, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	69f9      	ldr	r1, [r7, #28]
 800292c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002930:	4013      	ands	r3, r2
 8002932:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002940:	461a      	mov	r2, r3
 8002942:	2301      	movs	r3, #1
 8002944:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	799b      	ldrb	r3, [r3, #6]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d132      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	3320      	adds	r3, #32
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4403      	add	r3, r0
 800296e:	331c      	adds	r3, #28
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4419      	add	r1, r3
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4403      	add	r3, r0
 8002982:	3320      	adds	r3, #32
 8002984:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	2b00      	cmp	r3, #0
 800298a:	d113      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x3a2>
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3324      	adds	r3, #36	@ 0x24
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d108      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029ac:	461a      	mov	r2, r3
 80029ae:	2101      	movs	r1, #1
 80029b0:	f004 fc9e 	bl	80072f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f006 ff95 	bl	80098ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029d6:	461a      	mov	r2, r3
 80029d8:	2308      	movs	r3, #8
 80029da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029f2:	461a      	mov	r2, r3
 80029f4:	2310      	movs	r3, #16
 80029f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2340      	movs	r3, #64	@ 0x40
 8002a12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d023      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a20:	6a38      	ldr	r0, [r7, #32]
 8002a22:	f003 fc8b 	bl	800633c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3310      	adds	r3, #16
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	3304      	adds	r3, #4
 8002a38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	78db      	ldrb	r3, [r3, #3]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d108      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f006 ffe2 	bl	8009a18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a60:	461a      	mov	r2, r3
 8002a62:	2302      	movs	r3, #2
 8002a64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fcbb 	bl	80033ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f47f af2e 	bne.w	80028e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fb69 	bl	8007168 <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aa0:	d122      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d108      	bne.n	8002ad2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ac8:	2100      	movs	r1, #0
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fea2 	bl	8003814 <HAL_PCDEx_LPM_Callback>
 8002ad0:	e002      	b.n	8002ad8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f006 ff80 	bl	80099d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 fb3b 	bl	8007168 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002afc:	d112      	bne.n	8002b24 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f006 ff3c 	bl	800998c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b22:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f004 fb1d 	bl	8007168 <USB_ReadInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b38:	f040 80b7 	bne.w	8002caa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2110      	movs	r1, #16
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fbf0 	bl	800633c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b60:	e046      	b.n	8002bf0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b86:	0151      	lsls	r1, r2, #5
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ba8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bba:	0151      	lsls	r1, r2, #5
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	440a      	add	r2, r1
 8002bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bda:	0151      	lsls	r1, r2, #5
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	440a      	add	r2, r1
 8002be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002be4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002be8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bec:	3301      	adds	r3, #1
 8002bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	791b      	ldrb	r3, [r3, #4]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d3b2      	bcc.n	8002b62 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c0a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c0e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7bdb      	ldrb	r3, [r3, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d016      	beq.n	8002c46 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c28:	f043 030b 	orr.w	r3, r3, #11
 8002c2c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c3e:	f043 030b 	orr.w	r3, r3, #11
 8002c42:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c44:	e015      	b.n	8002c72 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c58:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002c5c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c6c:	f043 030b 	orr.w	r3, r3, #11
 8002c70:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c80:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c84:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c94:	461a      	mov	r2, r3
 8002c96:	f004 fb2b 	bl	80072f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fa5a 	bl	8007168 <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cbe:	d123      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 faf0 	bl	80072aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fbad 	bl	800642e <USB_GetDevSpeed>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681c      	ldr	r4, [r3, #0]
 8002ce0:	f001 fa70 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cea:	461a      	mov	r2, r3
 8002cec:	4620      	mov	r0, r4
 8002cee:	f003 f8b1 	bl	8005e54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f006 fe21 	bl	800993a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 fa2b 	bl	8007168 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d10a      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f006 fdfe 	bl	800991e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f002 0208 	and.w	r2, r2, #8
 8002d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 fa16 	bl	8007168 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b80      	cmp	r3, #128	@ 0x80
 8002d44:	d123      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d52:	2301      	movs	r3, #1
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d56:	e014      	b.n	8002d82 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fb08 	bl	800338c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	3301      	adds	r3, #1
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	791b      	ldrb	r3, [r3, #4]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d3e4      	bcc.n	8002d58 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 f9e8 	bl	8007168 <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002da2:	d13c      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da4:	2301      	movs	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da8:	e02b      	b.n	8002e02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3318      	adds	r3, #24
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d115      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da12      	bge.n	8002dfc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	3317      	adds	r3, #23
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fac8 	bl	800338c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	3301      	adds	r3, #1
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	791b      	ldrb	r3, [r3, #4]
 8002e06:	461a      	mov	r2, r3
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d3cd      	bcc.n	8002daa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 f9a0 	bl	8007168 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e32:	d156      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e34:	2301      	movs	r3, #1
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e38:	e045      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d12e      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	da2b      	bge.n	8002ec0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e74:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d121      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ebc:	6053      	str	r3, [r2, #4]
            break;
 8002ebe:	e008      	b.n	8002ed2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d3b3      	bcc.n	8002e3a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 f93e 	bl	8007168 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef6:	d10a      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f006 fd9f 	bl	8009a3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f004 f928 	bl	8007168 <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d115      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f006 fd8f 	bl	8009a58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	e000      	b.n	8002f4e <HAL_PCD_IRQHandler+0x93c>
      return;
 8002f4c:	bf00      	nop
    }
  }
}
 8002f4e:	3734      	adds	r7, #52	@ 0x34
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd90      	pop	{r4, r7, pc}

08002f54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_PCD_SetAddress+0x1a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e012      	b.n	8002f94 <HAL_PCD_SetAddress+0x40>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 f887 	bl	8007098 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	70fb      	strb	r3, [r7, #3]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	803b      	strh	r3, [r7, #0]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da0f      	bge.n	8002fe2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 020f 	and.w	r2, r3, #15
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	705a      	strb	r2, [r3, #1]
 8002fe0:	e00f      	b.n	8003002 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800300e:	883a      	ldrh	r2, [r7, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	78ba      	ldrb	r2, [r7, #2]
 8003018:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	785b      	ldrb	r3, [r3, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800302c:	78bb      	ldrb	r3, [r7, #2]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d102      	bne.n	8003038 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_PCD_EP_Open+0xaa>
 8003042:	2302      	movs	r3, #2
 8003044:	e00e      	b.n	8003064 <HAL_PCD_EP_Open+0xc8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	4618      	mov	r0, r3
 8003056:	f003 fa0f 	bl	8006478 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003062:	7afb      	ldrb	r3, [r7, #11]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0f      	bge.n	80030a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3310      	adds	r3, #16
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
 800309e:	e00f      	b.n	80030c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_PCD_EP_Close+0x6e>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e00e      	b.n	80030f8 <HAL_PCD_EP_Close+0x8c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f003 fa4d 	bl	8006588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	460b      	mov	r3, r1
 800310e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	3304      	adds	r3, #4
 8003128:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2200      	movs	r2, #0
 8003140:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	799b      	ldrb	r3, [r3, #6]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	461a      	mov	r2, r3
 8003166:	6979      	ldr	r1, [r7, #20]
 8003168:	f003 faea 	bl	8006740 <USB_EPStartXfer>

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003198:	681b      	ldr	r3, [r3, #0]
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	460b      	mov	r3, r1
 80031b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	f003 020f 	and.w	r2, r3, #15
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	3310      	adds	r3, #16
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2200      	movs	r2, #0
 80031de:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2201      	movs	r2, #1
 80031e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	799b      	ldrb	r3, [r3, #6]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	799b      	ldrb	r3, [r3, #6]
 8003208:	461a      	mov	r2, r3
 800320a:	6979      	ldr	r1, [r7, #20]
 800320c:	f003 fa98 	bl	8006740 <USB_EPStartXfer>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	7912      	ldrb	r2, [r2, #4]
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04f      	b.n	80032d8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da0f      	bge.n	8003260 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	3310      	adds	r3, #16
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	705a      	strb	r2, [r3, #1]
 800325e:	e00d      	b.n	800327c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PCD_EP_SetStall+0x82>
 8003298:	2302      	movs	r3, #2
 800329a:	e01d      	b.n	80032d8 <HAL_PCD_EP_SetStall+0xbe>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 fe20 	bl	8006ef0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7999      	ldrb	r1, [r3, #6]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032c8:	461a      	mov	r2, r3
 80032ca:	f004 f811 	bl	80072f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	7912      	ldrb	r2, [r2, #4]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e042      	b.n	8003384 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	da0f      	bge.n	8003326 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	3310      	adds	r3, #16
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	3304      	adds	r3, #4
 800331c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	705a      	strb	r2, [r3, #1]
 8003324:	e00f      	b.n	8003346 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	b2da      	uxtb	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_PCD_EP_ClrStall+0x86>
 8003362:	2302      	movs	r3, #2
 8003364:	e00e      	b.n	8003384 <HAL_PCD_EP_ClrStall+0xa4>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fe29 	bl	8006fcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339c:	2b00      	cmp	r3, #0
 800339e:	da0c      	bge.n	80033ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	3310      	adds	r3, #16
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	3304      	adds	r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e00c      	b.n	80033d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	3304      	adds	r3, #4
 80033d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 fc48 	bl	8006c70 <USB_EPStopXfer>
 80033e0:	4603      	mov	r3, r0
 80033e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033e4:	7afb      	ldrb	r3, [r7, #11]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b08a      	sub	sp, #40	@ 0x28
 80033f2:	af02      	add	r7, sp, #8
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3310      	adds	r3, #16
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	d901      	bls.n	8003426 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	429a      	cmp	r2, r3
 800343a:	d902      	bls.n	8003442 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3303      	adds	r3, #3
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800344a:	e02a      	b.n	80034a2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	429a      	cmp	r2, r3
 8003460:	d902      	bls.n	8003468 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	3303      	adds	r3, #3
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68d9      	ldr	r1, [r3, #12]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4603      	mov	r3, r0
 8003484:	6978      	ldr	r0, [r7, #20]
 8003486:	f003 fc9d 	bl	8006dc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	441a      	add	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d809      	bhi.n	80034cc <PCD_WriteEmptyTxFifo+0xde>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d203      	bcs.n	80034cc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1bf      	bne.n	800344c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d811      	bhi.n	80034fc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	2201      	movs	r2, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	6939      	ldr	r1, [r7, #16]
 80034f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034f8:	4013      	ands	r3, r2
 80034fa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	333c      	adds	r3, #60	@ 0x3c
 8003520:	3304      	adds	r3, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	799b      	ldrb	r3, [r3, #6]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d17b      	bne.n	8003636 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4a61      	ldr	r2, [pc, #388]	@ (80036d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	f240 80b9 	bls.w	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80b3 	beq.w	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356a:	461a      	mov	r2, r3
 800356c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003570:	6093      	str	r3, [r2, #8]
 8003572:	e0a7      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358a:	461a      	mov	r2, r3
 800358c:	2320      	movs	r3, #32
 800358e:	6093      	str	r3, [r2, #8]
 8003590:	e098      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 8093 	bne.w	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a4b      	ldr	r2, [pc, #300]	@ (80036d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d90f      	bls.n	80035c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c2:	6093      	str	r3, [r2, #8]
 80035c4:	e07e      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	0159      	lsls	r1, r3, #5
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f2:	1ad2      	subs	r2, r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d114      	bne.n	8003628 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003610:	461a      	mov	r2, r3
 8003612:	2101      	movs	r1, #1
 8003614:	f003 fe6c 	bl	80072f0 <USB_EP0_OutStart>
 8003618:	e006      	b.n	8003628 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	441a      	add	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f006 f940 	bl	80098b4 <HAL_PCD_DataOutStageCallback>
 8003634:	e046      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4a26      	ldr	r2, [pc, #152]	@ (80036d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d124      	bne.n	8003688 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003654:	461a      	mov	r2, r3
 8003656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800365a:	6093      	str	r3, [r2, #8]
 800365c:	e032      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003674:	461a      	mov	r2, r3
 8003676:	2320      	movs	r3, #32
 8003678:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f006 f917 	bl	80098b4 <HAL_PCD_DataOutStageCallback>
 8003686:	e01d      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d114      	bne.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036b0:	461a      	mov	r2, r3
 80036b2:	2100      	movs	r1, #0
 80036b4:	f003 fe1c 	bl	80072f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f006 f8f8 	bl	80098b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	4f54300a 	.word	0x4f54300a
 80036d4:	4f54310a 	.word	0x4f54310a

080036d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	333c      	adds	r3, #60	@ 0x3c
 80036f0:	3304      	adds	r3, #4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a15      	ldr	r2, [pc, #84]	@ (8003760 <PCD_EP_OutSetupPacket_int+0x88>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d90e      	bls.n	800372c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003724:	461a      	mov	r2, r3
 8003726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800372a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f006 f8af 	bl	8009890 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <PCD_EP_OutSetupPacket_int+0x88>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d90c      	bls.n	8003754 <PCD_EP_OutSetupPacket_int+0x7c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	799b      	ldrb	r3, [r3, #6]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d108      	bne.n	8003754 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800374c:	461a      	mov	r2, r3
 800374e:	2101      	movs	r1, #1
 8003750:	f003 fdce 	bl	80072f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	4f54300a 	.word	0x4f54300a

08003764 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
 8003770:	4613      	mov	r3, r2
 8003772:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003782:	883b      	ldrh	r3, [r7, #0]
 8003784:	0419      	lsls	r1, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	430a      	orrs	r2, r1
 800378e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003790:	e028      	b.n	80037e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4413      	add	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e00d      	b.n	80037c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	3340      	adds	r3, #64	@ 0x40
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	3301      	adds	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	7bfa      	ldrb	r2, [r7, #15]
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d3ec      	bcc.n	80037a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037cc:	883b      	ldrh	r3, [r7, #0]
 80037ce:	0418      	lsls	r0, r3, #16
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	4302      	orrs	r2, r0
 80037dc:	3340      	adds	r3, #64	@ 0x40
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e267      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d075      	beq.n	8003936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800384a:	4b88      	ldr	r3, [pc, #544]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b04      	cmp	r3, #4
 8003854:	d00c      	beq.n	8003870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b85      	ldr	r3, [pc, #532]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800385e:	2b08      	cmp	r3, #8
 8003860:	d112      	bne.n	8003888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003862:	4b82      	ldr	r3, [pc, #520]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800386e:	d10b      	bne.n	8003888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	4b7e      	ldr	r3, [pc, #504]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d05b      	beq.n	8003934 <HAL_RCC_OscConfig+0x108>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d157      	bne.n	8003934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e242      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003890:	d106      	bne.n	80038a0 <HAL_RCC_OscConfig+0x74>
 8003892:	4b76      	ldr	r3, [pc, #472]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a75      	ldr	r2, [pc, #468]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e01d      	b.n	80038dc <HAL_RCC_OscConfig+0xb0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x98>
 80038aa:	4b70      	ldr	r3, [pc, #448]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6f      	ldr	r2, [pc, #444]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6c      	ldr	r2, [pc, #432]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0xb0>
 80038c4:	4b69      	ldr	r3, [pc, #420]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a68      	ldr	r2, [pc, #416]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b66      	ldr	r3, [pc, #408]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a65      	ldr	r2, [pc, #404]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80038d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fd fe14 	bl	8001510 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fd fe10 	bl	8001510 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	@ 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e207      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b5b      	ldr	r3, [pc, #364]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0xc0>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fd fe00 	bl	8001510 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003914:	f7fd fdfc 	bl	8001510 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1f3      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b51      	ldr	r3, [pc, #324]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0xe8>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d063      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003942:	4b4a      	ldr	r3, [pc, #296]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394e:	4b47      	ldr	r3, [pc, #284]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11c      	bne.n	8003994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395a:	4b44      	ldr	r3, [pc, #272]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d116      	bne.n	8003994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	4b41      	ldr	r3, [pc, #260]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCC_OscConfig+0x152>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e1c7      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4937      	ldr	r1, [pc, #220]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	e03a      	b.n	8003a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399c:	4b34      	ldr	r3, [pc, #208]	@ (8003a70 <HAL_RCC_OscConfig+0x244>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fd fdb5 	bl	8001510 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fd fdb1 	bl	8001510 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1a8      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b28      	ldr	r3, [pc, #160]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4925      	ldr	r1, [pc, #148]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
 80039dc:	e015      	b.n	8003a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039de:	4b24      	ldr	r3, [pc, #144]	@ (8003a70 <HAL_RCC_OscConfig+0x244>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd fd94 	bl	8001510 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ec:	f7fd fd90 	bl	8001510 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e187      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d036      	beq.n	8003a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d016      	beq.n	8003a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <HAL_RCC_OscConfig+0x248>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7fd fd74 	bl	8001510 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2c:	f7fd fd70 	bl	8001510 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e167      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <HAL_RCC_OscConfig+0x240>)
 8003a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x200>
 8003a4a:	e01b      	b.n	8003a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_RCC_OscConfig+0x248>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a52:	f7fd fd5d 	bl	8001510 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	e00e      	b.n	8003a78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5a:	f7fd fd59 	bl	8001510 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d907      	bls.n	8003a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e150      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	42470000 	.word	0x42470000
 8003a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a78:	4b88      	ldr	r3, [pc, #544]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ea      	bne.n	8003a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8097 	beq.w	8003bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a96:	4b81      	ldr	r3, [pc, #516]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	4a7c      	ldr	r2, [pc, #496]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac2:	4b77      	ldr	r3, [pc, #476]	@ (8003ca0 <HAL_RCC_OscConfig+0x474>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d118      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ace:	4b74      	ldr	r3, [pc, #464]	@ (8003ca0 <HAL_RCC_OscConfig+0x474>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a73      	ldr	r2, [pc, #460]	@ (8003ca0 <HAL_RCC_OscConfig+0x474>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ada:	f7fd fd19 	bl	8001510 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae2:	f7fd fd15 	bl	8001510 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e10c      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca0 <HAL_RCC_OscConfig+0x474>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x2ea>
 8003b08:	4b64      	ldr	r3, [pc, #400]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	4a63      	ldr	r2, [pc, #396]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b14:	e01c      	b.n	8003b50 <HAL_RCC_OscConfig+0x324>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x30c>
 8003b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	4a5e      	ldr	r2, [pc, #376]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0x324>
 8003b38:	4b58      	ldr	r3, [pc, #352]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	4a57      	ldr	r2, [pc, #348]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 0301 	bic.w	r3, r3, #1
 8003b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b44:	4b55      	ldr	r3, [pc, #340]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	4a54      	ldr	r2, [pc, #336]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f023 0304 	bic.w	r3, r3, #4
 8003b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fd fcda 	bl	8001510 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b60:	f7fd fcd6 	bl	8001510 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e0cb      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	4b49      	ldr	r3, [pc, #292]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0ee      	beq.n	8003b60 <HAL_RCC_OscConfig+0x334>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b84:	f7fd fcc4 	bl	8001510 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fcc0 	bl	8001510 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0b5      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ee      	bne.n	8003b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb4:	4b39      	ldr	r3, [pc, #228]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	4a38      	ldr	r2, [pc, #224]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80a1 	beq.w	8003d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bca:	4b34      	ldr	r3, [pc, #208]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d05c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d141      	bne.n	8003c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCC_OscConfig+0x478>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fd fc94 	bl	8001510 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fd fc90 	bl	8001510 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e087      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	4b27      	ldr	r3, [pc, #156]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	3b01      	subs	r3, #1
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	061b      	lsls	r3, r3, #24
 8003c2e:	491b      	ldr	r1, [pc, #108]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x478>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7fd fc69 	bl	8001510 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c42:	f7fd fc65 	bl	8001510 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e05c      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c54:	4b11      	ldr	r3, [pc, #68]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x416>
 8003c60:	e054      	b.n	8003d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c62:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <HAL_RCC_OscConfig+0x478>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd fc52 	bl	8001510 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fd fc4e 	bl	8001510 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e045      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <HAL_RCC_OscConfig+0x470>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x444>
 8003c8e:	e03d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e038      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <HAL_RCC_OscConfig+0x4ec>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d028      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d121      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d11a      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800

08003d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0cc      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b68      	ldr	r3, [pc, #416]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d90c      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b65      	ldr	r3, [pc, #404]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b63      	ldr	r3, [pc, #396]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0b8      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d70:	4b59      	ldr	r3, [pc, #356]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a58      	ldr	r2, [pc, #352]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d88:	4b53      	ldr	r3, [pc, #332]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a52      	ldr	r2, [pc, #328]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	4b50      	ldr	r3, [pc, #320]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	494d      	ldr	r1, [pc, #308]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d044      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b47      	ldr	r3, [pc, #284]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d119      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e07f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dda:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e06f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e067      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfa:	4b37      	ldr	r3, [pc, #220]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f023 0203 	bic.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4934      	ldr	r1, [pc, #208]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e0c:	f7fd fb80 	bl	8001510 <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e14:	f7fd fb7c 	bl	8001510 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e04f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 020c 	and.w	r2, r3, #12
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d1eb      	bne.n	8003e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b25      	ldr	r3, [pc, #148]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d20c      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b22      	ldr	r3, [pc, #136]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b20      	ldr	r3, [pc, #128]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e032      	b.n	8003eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e70:	4b19      	ldr	r3, [pc, #100]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4916      	ldr	r1, [pc, #88]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	490e      	ldr	r1, [pc, #56]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ea2:	f000 f889 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	490a      	ldr	r1, [pc, #40]	@ (8003edc <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	5ccb      	ldrb	r3, [r1, r3]
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	4a09      	ldr	r2, [pc, #36]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ebe:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd fae0 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023c00 	.word	0x40023c00
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	0800aa58 	.word	0x0800aa58
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	@ 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d129      	bne.n	8003f4e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	4b2b      	ldr	r3, [pc, #172]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f20:	2303      	movs	r3, #3
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f2c:	f107 031c 	add.w	r3, r7, #28
 8003f30:	4619      	mov	r1, r3
 8003f32:	481f      	ldr	r0, [pc, #124]	@ (8003fb0 <HAL_RCC_MCOConfig+0xc8>)
 8003f34:	f7fe f84a 	bl	8001fcc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003f38:	4b1c      	ldr	r3, [pc, #112]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	4919      	ldr	r1, [pc, #100]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003f4c:	e029      	b.n	8003fa2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a15      	ldr	r2, [pc, #84]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b13      	ldr	r3, [pc, #76]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003f6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	4619      	mov	r1, r3
 8003f86:	480b      	ldr	r0, [pc, #44]	@ (8003fb4 <HAL_RCC_MCOConfig+0xcc>)
 8003f88:	f7fe f820 	bl	8001fcc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003f8c:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	00d9      	lsls	r1, r3, #3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	4903      	ldr	r1, [pc, #12]	@ (8003fac <HAL_RCC_MCOConfig+0xc4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	3730      	adds	r7, #48	@ 0x30
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	40020800 	.word	0x40020800

08003fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fbc:	b094      	sub	sp, #80	@ 0x50
 8003fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc8:	2300      	movs	r3, #0
 8003fca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd0:	4b79      	ldr	r3, [pc, #484]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d00d      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	f200 80e1 	bhi.w	80041a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x34>
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fea:	e0db      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fec:	4b73      	ldr	r3, [pc, #460]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ff0:	e0db      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff2:	4b73      	ldr	r3, [pc, #460]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ff6:	e0d8      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004000:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004002:	4b6d      	ldr	r3, [pc, #436]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d063      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400e:	4b6a      	ldr	r3, [pc, #424]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	2200      	movs	r2, #0
 8004016:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004018:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	633b      	str	r3, [r7, #48]	@ 0x30
 8004022:	2300      	movs	r3, #0
 8004024:	637b      	str	r3, [r7, #52]	@ 0x34
 8004026:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	0159      	lsls	r1, r3, #5
 8004038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800403c:	0150      	lsls	r0, r2, #5
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4621      	mov	r1, r4
 8004044:	1a51      	subs	r1, r2, r1
 8004046:	6139      	str	r1, [r7, #16]
 8004048:	4629      	mov	r1, r5
 800404a:	eb63 0301 	sbc.w	r3, r3, r1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800405c:	4659      	mov	r1, fp
 800405e:	018b      	lsls	r3, r1, #6
 8004060:	4651      	mov	r1, sl
 8004062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004066:	4651      	mov	r1, sl
 8004068:	018a      	lsls	r2, r1, #6
 800406a:	4651      	mov	r1, sl
 800406c:	ebb2 0801 	subs.w	r8, r2, r1
 8004070:	4659      	mov	r1, fp
 8004072:	eb63 0901 	sbc.w	r9, r3, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408a:	4690      	mov	r8, r2
 800408c:	4699      	mov	r9, r3
 800408e:	4623      	mov	r3, r4
 8004090:	eb18 0303 	adds.w	r3, r8, r3
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	462b      	mov	r3, r5
 8004098:	eb49 0303 	adc.w	r3, r9, r3
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040aa:	4629      	mov	r1, r5
 80040ac:	024b      	lsls	r3, r1, #9
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040b4:	4621      	mov	r1, r4
 80040b6:	024a      	lsls	r2, r1, #9
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040c8:	f7fc f8ea 	bl	80002a0 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d4:	e058      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d6:	4b38      	ldr	r3, [pc, #224]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	2200      	movs	r2, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	4611      	mov	r1, r2
 80040e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	0159      	lsls	r1, r3, #5
 80040fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004102:	0150      	lsls	r0, r2, #5
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4641      	mov	r1, r8
 800410a:	ebb2 0a01 	subs.w	sl, r2, r1
 800410e:	4649      	mov	r1, r9
 8004110:	eb63 0b01 	sbc.w	fp, r3, r1
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004120:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004124:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004128:	ebb2 040a 	subs.w	r4, r2, sl
 800412c:	eb63 050b 	sbc.w	r5, r3, fp
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	00eb      	lsls	r3, r5, #3
 800413a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800413e:	00e2      	lsls	r2, r4, #3
 8004140:	4614      	mov	r4, r2
 8004142:	461d      	mov	r5, r3
 8004144:	4643      	mov	r3, r8
 8004146:	18e3      	adds	r3, r4, r3
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	464b      	mov	r3, r9
 800414c:	eb45 0303 	adc.w	r3, r5, r3
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800415e:	4629      	mov	r1, r5
 8004160:	028b      	lsls	r3, r1, #10
 8004162:	4621      	mov	r1, r4
 8004164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004168:	4621      	mov	r1, r4
 800416a:	028a      	lsls	r2, r1, #10
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004172:	2200      	movs	r2, #0
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	61fa      	str	r2, [r7, #28]
 8004178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417c:	f7fc f890 	bl	80002a0 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4613      	mov	r3, r2
 8004186:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004188:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	3301      	adds	r3, #1
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004198:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800419a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041a2:	e002      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x204>)
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3750      	adds	r7, #80	@ 0x50
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	007a1200 	.word	0x007a1200

080041c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000000 	.word	0x20000000

080041dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4903      	ldr	r1, [pc, #12]	@ (8004200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	0800aa68 	.word	0x0800aa68

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004208:	f7ff ffdc 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	@ (8004224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0b5b      	lsrs	r3, r3, #13
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	@ (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800aa68 	.word	0x0800aa68

0800422c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e041      	b.n	80042c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fc fcac 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f000 fa7e 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d001      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04e      	b.n	8004382 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a23      	ldr	r2, [pc, #140]	@ (8004390 <HAL_TIM_Base_Start_IT+0xc4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d022      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x80>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430e:	d01d      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x80>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1f      	ldr	r2, [pc, #124]	@ (8004394 <HAL_TIM_Base_Start_IT+0xc8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d018      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x80>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1e      	ldr	r2, [pc, #120]	@ (8004398 <HAL_TIM_Base_Start_IT+0xcc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d013      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1c      	ldr	r2, [pc, #112]	@ (800439c <HAL_TIM_Base_Start_IT+0xd0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1b      	ldr	r2, [pc, #108]	@ (80043a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x80>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a19      	ldr	r2, [pc, #100]	@ (80043a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b06      	cmp	r3, #6
 800435c:	d010      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	e007      	b.n	8004380 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40010400 	.word	0x40010400
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40001800 	.word	0x40001800

080043ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d020      	beq.n	8004410 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0202 	mvn.w	r2, #2
 80043e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f999 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f98b 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f99c 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d020      	beq.n	800445c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01b      	beq.n	800445c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0204 	mvn.w	r2, #4
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f973 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f965 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f976 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d020      	beq.n	80044a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01b      	beq.n	80044a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0208 	mvn.w	r2, #8
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2204      	movs	r2, #4
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f94d 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f93f 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f950 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d020      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01b      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0210 	mvn.w	r2, #16
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2208      	movs	r2, #8
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f927 	bl	800472e <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f919 	bl	800471a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f92a 	bl	8004742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0201 	mvn.w	r2, #1
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fa58 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fae4 	bl	8004b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8fb 	bl	8004756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0220 	mvn.w	r2, #32
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fab6 	bl	8004af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_TIM_ConfigClockSource+0x1c>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e0b4      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x186>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e0:	d03e      	beq.n	8004660 <HAL_TIM_ConfigClockSource+0xd4>
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e6:	f200 8087 	bhi.w	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 80045ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ee:	f000 8086 	beq.w	80046fe <HAL_TIM_ConfigClockSource+0x172>
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f6:	d87f      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 80045f8:	2b70      	cmp	r3, #112	@ 0x70
 80045fa:	d01a      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0xa6>
 80045fc:	2b70      	cmp	r3, #112	@ 0x70
 80045fe:	d87b      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004600:	2b60      	cmp	r3, #96	@ 0x60
 8004602:	d050      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004604:	2b60      	cmp	r3, #96	@ 0x60
 8004606:	d877      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004608:	2b50      	cmp	r3, #80	@ 0x50
 800460a:	d03c      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0xfa>
 800460c:	2b50      	cmp	r3, #80	@ 0x50
 800460e:	d873      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d058      	beq.n	80046c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004614:	2b40      	cmp	r3, #64	@ 0x40
 8004616:	d86f      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004618:	2b30      	cmp	r3, #48	@ 0x30
 800461a:	d064      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x15a>
 800461c:	2b30      	cmp	r3, #48	@ 0x30
 800461e:	d86b      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004620:	2b20      	cmp	r3, #32
 8004622:	d060      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004624:	2b20      	cmp	r3, #32
 8004626:	d867      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d05c      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x15a>
 800462c:	2b10      	cmp	r3, #16
 800462e:	d05a      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004630:	e062      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004642:	f000 f9b9 	bl	80049b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	609a      	str	r2, [r3, #8]
      break;
 800465e:	e04f      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004670:	f000 f9a2 	bl	80049b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004682:	609a      	str	r2, [r3, #8]
      break;
 8004684:	e03c      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004692:	461a      	mov	r2, r3
 8004694:	f000 f916 	bl	80048c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2150      	movs	r1, #80	@ 0x50
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f96f 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 80046a4:	e02c      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046b2:	461a      	mov	r2, r3
 80046b4:	f000 f935 	bl	8004922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2160      	movs	r1, #96	@ 0x60
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f95f 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 80046c4:	e01c      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d2:	461a      	mov	r2, r3
 80046d4:	f000 f8f6 	bl	80048c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2140      	movs	r1, #64	@ 0x40
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f94f 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 80046e4:	e00c      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f000 f946 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 80046f6:	e003      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      break;
 80046fc:	e000      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a46      	ldr	r2, [pc, #280]	@ (8004898 <TIM_Base_SetConfig+0x12c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d00f      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a43      	ldr	r2, [pc, #268]	@ (800489c <TIM_Base_SetConfig+0x130>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00b      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a42      	ldr	r2, [pc, #264]	@ (80048a0 <TIM_Base_SetConfig+0x134>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a41      	ldr	r2, [pc, #260]	@ (80048a4 <TIM_Base_SetConfig+0x138>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a40      	ldr	r2, [pc, #256]	@ (80048a8 <TIM_Base_SetConfig+0x13c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d108      	bne.n	80047be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a35      	ldr	r2, [pc, #212]	@ (8004898 <TIM_Base_SetConfig+0x12c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d02b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047cc:	d027      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a32      	ldr	r2, [pc, #200]	@ (800489c <TIM_Base_SetConfig+0x130>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d023      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a31      	ldr	r2, [pc, #196]	@ (80048a0 <TIM_Base_SetConfig+0x134>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01f      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a30      	ldr	r2, [pc, #192]	@ (80048a4 <TIM_Base_SetConfig+0x138>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2f      	ldr	r2, [pc, #188]	@ (80048a8 <TIM_Base_SetConfig+0x13c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d017      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2e      	ldr	r2, [pc, #184]	@ (80048ac <TIM_Base_SetConfig+0x140>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2d      	ldr	r2, [pc, #180]	@ (80048b0 <TIM_Base_SetConfig+0x144>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00f      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2c      	ldr	r2, [pc, #176]	@ (80048b4 <TIM_Base_SetConfig+0x148>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00b      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2b      	ldr	r2, [pc, #172]	@ (80048b8 <TIM_Base_SetConfig+0x14c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d007      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2a      	ldr	r2, [pc, #168]	@ (80048bc <TIM_Base_SetConfig+0x150>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <TIM_Base_SetConfig+0x154>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d108      	bne.n	8004830 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a10      	ldr	r2, [pc, #64]	@ (8004898 <TIM_Base_SetConfig+0x12c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0xf8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a12      	ldr	r2, [pc, #72]	@ (80048a8 <TIM_Base_SetConfig+0x13c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]
  }
}
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40010000 	.word	0x40010000
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800
 80048a4:	40000c00 	.word	0x40000c00
 80048a8:	40010400 	.word	0x40010400
 80048ac:	40014000 	.word	0x40014000
 80048b0:	40014400 	.word	0x40014400
 80048b4:	40014800 	.word	0x40014800
 80048b8:	40001800 	.word	0x40001800
 80048bc:	40001c00 	.word	0x40001c00
 80048c0:	40002000 	.word	0x40002000

080048c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0201 	bic.w	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 030a 	bic.w	r3, r3, #10
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004922:	b480      	push	{r7}
 8004924:	b087      	sub	sp, #28
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f023 0210 	bic.w	r2, r3, #16
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800494c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800495e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	f043 0307 	orr.w	r3, r3, #7
 80049a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	609a      	str	r2, [r3, #8]
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	021a      	lsls	r2, r3, #8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	431a      	orrs	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e05a      	b.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5c:	d01d      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a15      	ldr	r2, [pc, #84]	@ (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10c      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40000c00 	.word	0x40000c00
 8004ae4:	40010400 	.word	0x40010400
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40001800 	.word	0x40001800

08004af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e042      	b.n	8004bb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc f8dc 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	@ 0x24
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fea1 	bl	80058a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08c      	sub	sp, #48	@ 0x30
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d14a      	bne.n	8004c68 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e043      	b.n	8004c6a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fbf5 	bl	80053e4 <UART_Start_Receive_DMA>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d12c      	bne.n	8004c62 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d125      	bne.n	8004c5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	617b      	str	r3, [r7, #20]
   return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f043 0310 	orr.w	r3, r3, #16
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c46:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6a39      	ldr	r1, [r7, #32]
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e5      	bne.n	8004c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004c5a:	e002      	b.n	8004c62 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004c62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c66:	e000      	b.n	8004c6a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004c68:	2302      	movs	r3, #2
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3730      	adds	r7, #48	@ 0x30
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b0ba      	sub	sp, #232	@ 0xe8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_UART_IRQHandler+0x66>
 8004cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fd27 	bl	8005726 <UART_Receive_IT>
      return;
 8004cd8:	e25b      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80de 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x22c>
 8004ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80d1 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_UART_IRQHandler+0xae>
 8004d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_UART_IRQHandler+0xd2>
 8004d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0202 	orr.w	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_UART_IRQHandler+0xf6>
 8004d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	f043 0204 	orr.w	r2, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d011      	beq.n	8004d9a <HAL_UART_IRQHandler+0x126>
 8004d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	f043 0208 	orr.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 81f2 	beq.w	8005188 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x14e>
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fcb2 	bl	8005726 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <HAL_UART_IRQHandler+0x17a>
 8004de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d04f      	beq.n	8004e8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fbba 	bl	8005568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d141      	bne.n	8004e86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3314      	adds	r3, #20
 8004e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3314      	adds	r3, #20
 8004e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1d9      	bne.n	8004e02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d013      	beq.n	8004e7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8005054 <HAL_UART_IRQHandler+0x3e0>)
 8004e5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fc fe26 	bl	8001ab4 <HAL_DMA_Abort_IT>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7c:	e00e      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9a8 	bl	80051d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	e00a      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f9a4 	bl	80051d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e006      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9a0 	bl	80051d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e9a:	e175      	b.n	8005188 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	bf00      	nop
    return;
 8004e9e:	e173      	b.n	8005188 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	f040 814f 	bne.w	8005148 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8148 	beq.w	8005148 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8141 	beq.w	8005148 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee6:	2b40      	cmp	r3, #64	@ 0x40
 8004ee8:	f040 80b6 	bne.w	8005058 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8145 	beq.w	800518c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	f080 813e 	bcs.w	800518c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f22:	f000 8088 	beq.w	8005036 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1d9      	bne.n	8004f26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3314      	adds	r3, #20
 8004f78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e1      	bne.n	8004f72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e3      	bne.n	8004fae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005006:	f023 0310 	bic.w	r3, r3, #16
 800500a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	330c      	adds	r3, #12
 8005014:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005018:	65ba      	str	r2, [r7, #88]	@ 0x58
 800501a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800501e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e3      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005030:	4618      	mov	r0, r3
 8005032:	f7fc fccf 	bl	80019d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005044:	b29b      	uxth	r3, r3
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fb fcd3 	bl	80009f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005052:	e09b      	b.n	800518c <HAL_UART_IRQHandler+0x518>
 8005054:	0800562f 	.word	0x0800562f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 808e 	beq.w	8005190 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8089 	beq.w	8005190 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800508e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e3      	bne.n	800507e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	623b      	str	r3, [r7, #32]
   return(result);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050da:	633a      	str	r2, [r7, #48]	@ 0x30
 80050dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e3      	bne.n	80050b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60fb      	str	r3, [r7, #12]
   return(result);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0310 	bic.w	r3, r3, #16
 8005112:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005120:	61fa      	str	r2, [r7, #28]
 8005122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	617b      	str	r3, [r7, #20]
   return(result);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e3      	bne.n	80050fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fb fc59 	bl	80009f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005146:	e023      	b.n	8005190 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <HAL_UART_IRQHandler+0x4f4>
 8005154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fa78 	bl	8005656 <UART_Transmit_IT>
    return;
 8005166:	e014      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <HAL_UART_IRQHandler+0x51e>
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fab8 	bl	80056f6 <UART_EndTransmit_IT>
    return;
 8005186:	e004      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
    return;
 8005188:	bf00      	nop
 800518a:	e002      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
      return;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
      return;
 8005190:	bf00      	nop
  }
}
 8005192:	37e8      	adds	r7, #232	@ 0xe8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b09c      	sub	sp, #112	@ 0x70
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d172      	bne.n	80052ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005206:	2200      	movs	r2, #0
 8005208:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800520a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800521a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800521c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005220:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800522a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800522c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800524e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	667b      	str	r3, [r7, #100]	@ 0x64
 8005256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3314      	adds	r3, #20
 800525c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800525e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005260:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005264:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800526c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	623b      	str	r3, [r7, #32]
   return(result);
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005288:	663b      	str	r3, [r7, #96]	@ 0x60
 800528a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005292:	633a      	str	r2, [r7, #48]	@ 0x30
 8005294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d119      	bne.n	80052ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	330c      	adds	r3, #12
 80052bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f023 0310 	bic.w	r3, r3, #16
 80052cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052d6:	61fa      	str	r2, [r7, #28]
 80052d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	69b9      	ldr	r1, [r7, #24]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	617b      	str	r3, [r7, #20]
   return(result);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e5      	bne.n	80052b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ec:	2200      	movs	r2, #0
 80052ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052fc:	4619      	mov	r1, r3
 80052fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005300:	f7fb fb7a 	bl	80009f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005304:	e002      	b.n	800530c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005306:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005308:	f7ff ff50 	bl	80051ac <HAL_UART_RxCpltCallback>
}
 800530c:	bf00      	nop
 800530e:	3770      	adds	r7, #112	@ 0x70
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532c:	2b01      	cmp	r3, #1
 800532e:	d108      	bne.n	8005342 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	b29b      	uxth	r3, r3
 8005338:	4619      	mov	r1, r3
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7fb fb5c 	bl	80009f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005340:	e002      	b.n	8005348 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff ff3c 	bl	80051c0 <HAL_UART_RxHalfCpltCallback>
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536c:	2b80      	cmp	r3, #128	@ 0x80
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b21      	cmp	r3, #33	@ 0x21
 8005382:	d108      	bne.n	8005396 <UART_DMAError+0x46>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2200      	movs	r2, #0
 800538e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005390:	68b8      	ldr	r0, [r7, #8]
 8005392:	f000 f8c1 	bl	8005518 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a0:	2b40      	cmp	r3, #64	@ 0x40
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b22      	cmp	r3, #34	@ 0x22
 80053b6:	d108      	bne.n	80053ca <UART_DMAError+0x7a>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80053c4:	68b8      	ldr	r0, [r7, #8]
 80053c6:	f000 f8cf 	bl	8005568 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ce:	f043 0210 	orr.w	r2, r3, #16
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053d6:	68b8      	ldr	r0, [r7, #8]
 80053d8:	f7ff fefc 	bl	80051d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b098      	sub	sp, #96	@ 0x60
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2222      	movs	r2, #34	@ 0x22
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005410:	4a3e      	ldr	r2, [pc, #248]	@ (800550c <UART_Start_Receive_DMA+0x128>)
 8005412:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005418:	4a3d      	ldr	r2, [pc, #244]	@ (8005510 <UART_Start_Receive_DMA+0x12c>)
 800541a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005420:	4a3c      	ldr	r2, [pc, #240]	@ (8005514 <UART_Start_Receive_DMA+0x130>)
 8005422:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005428:	2200      	movs	r2, #0
 800542a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800542c:	f107 0308 	add.w	r3, r7, #8
 8005430:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	f7fc fa6e 	bl	8001924 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d019      	beq.n	800549a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	330c      	adds	r3, #12
 8005484:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005486:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005488:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800548c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e5      	bne.n	8005466 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80054c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e5      	bne.n	800549a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	617b      	str	r3, [r7, #20]
   return(result);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80054f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6a39      	ldr	r1, [r7, #32]
 80054f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3760      	adds	r7, #96	@ 0x60
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	080051e9 	.word	0x080051e9
 8005510:	08005315 	.word	0x08005315
 8005514:	08005351 	.word	0x08005351

08005518 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	@ 0x24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	61ba      	str	r2, [r7, #24]
 8005542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6979      	ldr	r1, [r7, #20]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	613b      	str	r3, [r7, #16]
   return(result);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e5      	bne.n	8005520 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800555c:	bf00      	nop
 800555e:	3724      	adds	r7, #36	@ 0x24
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b095      	sub	sp, #84	@ 0x54
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005590:	643a      	str	r2, [r7, #64]	@ 0x40
 8005592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e5      	bne.n	8005570 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3314      	adds	r3, #20
 80055aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3314      	adds	r3, #20
 80055c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d119      	bne.n	8005614 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 0310 	bic.w	r3, r3, #16
 80055f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005600:	61ba      	str	r2, [r7, #24]
 8005602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6979      	ldr	r1, [r7, #20]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	613b      	str	r3, [r7, #16]
   return(result);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005622:	bf00      	nop
 8005624:	3754      	adds	r7, #84	@ 0x54
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff fdc3 	bl	80051d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b21      	cmp	r3, #33	@ 0x21
 8005668:	d13e      	bne.n	80056e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005672:	d114      	bne.n	800569e <UART_Transmit_IT+0x48>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d110      	bne.n	800569e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005690:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]
 800569c:	e008      	b.n	80056b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	1c59      	adds	r1, r3, #1
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6211      	str	r1, [r2, #32]
 80056a8:	781a      	ldrb	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	4619      	mov	r1, r3
 80056be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800570c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fd3e 	bl	8005198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b08c      	sub	sp, #48	@ 0x30
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b22      	cmp	r3, #34	@ 0x22
 8005738:	f040 80ae 	bne.w	8005898 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005744:	d117      	bne.n	8005776 <UART_Receive_IT+0x50>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d113      	bne.n	8005776 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b29b      	uxth	r3, r3
 8005760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005764:	b29a      	uxth	r2, r3
 8005766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005768:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	1c9a      	adds	r2, r3, #2
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28
 8005774:	e026      	b.n	80057c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005788:	d007      	beq.n	800579a <UART_Receive_IT+0x74>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <UART_Receive_IT+0x82>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	e008      	b.n	80057ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4619      	mov	r1, r3
 80057d2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d15d      	bne.n	8005894 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0220 	bic.w	r2, r2, #32
 80057e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	2b01      	cmp	r3, #1
 800581c:	d135      	bne.n	800588a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	613b      	str	r3, [r7, #16]
   return(result);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f023 0310 	bic.w	r3, r3, #16
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005844:	623a      	str	r2, [r7, #32]
 8005846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	69f9      	ldr	r1, [r7, #28]
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	61bb      	str	r3, [r7, #24]
   return(result);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b10      	cmp	r3, #16
 8005864:	d10a      	bne.n	800587c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fb f8b8 	bl	80009f8 <HAL_UARTEx_RxEventCallback>
 8005888:	e002      	b.n	8005890 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fc8e 	bl	80051ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e002      	b.n	800589a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	e000      	b.n	800589a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3730      	adds	r7, #48	@ 0x30
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a8:	b0c0      	sub	sp, #256	@ 0x100
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	68d9      	ldr	r1, [r3, #12]
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	ea40 0301 	orr.w	r3, r0, r1
 80058cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	431a      	orrs	r2, r3
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058fc:	f021 010c 	bic.w	r1, r1, #12
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800590a:	430b      	orrs	r3, r1
 800590c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591e:	6999      	ldr	r1, [r3, #24]
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	ea40 0301 	orr.w	r3, r0, r1
 800592a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b8f      	ldr	r3, [pc, #572]	@ (8005b70 <UART_SetConfig+0x2cc>)
 8005934:	429a      	cmp	r2, r3
 8005936:	d005      	beq.n	8005944 <UART_SetConfig+0xa0>
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b74 <UART_SetConfig+0x2d0>)
 8005940:	429a      	cmp	r2, r3
 8005942:	d104      	bne.n	800594e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005944:	f7fe fc5e 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8005948:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800594c:	e003      	b.n	8005956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800594e:	f7fe fc45 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8005952:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005960:	f040 810c 	bne.w	8005b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005968:	2200      	movs	r2, #0
 800596a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800596e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005976:	4622      	mov	r2, r4
 8005978:	462b      	mov	r3, r5
 800597a:	1891      	adds	r1, r2, r2
 800597c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800597e:	415b      	adcs	r3, r3
 8005980:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005986:	4621      	mov	r1, r4
 8005988:	eb12 0801 	adds.w	r8, r2, r1
 800598c:	4629      	mov	r1, r5
 800598e:	eb43 0901 	adc.w	r9, r3, r1
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a6:	4690      	mov	r8, r2
 80059a8:	4699      	mov	r9, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	eb18 0303 	adds.w	r3, r8, r3
 80059b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059b4:	462b      	mov	r3, r5
 80059b6:	eb49 0303 	adc.w	r3, r9, r3
 80059ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059d2:	460b      	mov	r3, r1
 80059d4:	18db      	adds	r3, r3, r3
 80059d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059d8:	4613      	mov	r3, r2
 80059da:	eb42 0303 	adc.w	r3, r2, r3
 80059de:	657b      	str	r3, [r7, #84]	@ 0x54
 80059e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059e8:	f7fa fc5a 	bl	80002a0 <__aeabi_uldivmod>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4b61      	ldr	r3, [pc, #388]	@ (8005b78 <UART_SetConfig+0x2d4>)
 80059f2:	fba3 2302 	umull	r2, r3, r3, r2
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	011c      	lsls	r4, r3, #4
 80059fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a14:	415b      	adcs	r3, r3
 8005a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a22:	4649      	mov	r1, r9
 8005a24:	eb43 0b01 	adc.w	fp, r3, r1
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a3c:	4692      	mov	sl, r2
 8005a3e:	469b      	mov	fp, r3
 8005a40:	4643      	mov	r3, r8
 8005a42:	eb1a 0303 	adds.w	r3, sl, r3
 8005a46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	18db      	adds	r3, r3, r3
 8005a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a6e:	4613      	mov	r3, r2
 8005a70:	eb42 0303 	adc.w	r3, r2, r3
 8005a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a7e:	f7fa fc0f 	bl	80002a0 <__aeabi_uldivmod>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	4b3b      	ldr	r3, [pc, #236]	@ (8005b78 <UART_SetConfig+0x2d4>)
 8005a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2264      	movs	r2, #100	@ 0x64
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	1acb      	subs	r3, r1, r3
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a9e:	4b36      	ldr	r3, [pc, #216]	@ (8005b78 <UART_SetConfig+0x2d4>)
 8005aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005aac:	441c      	add	r4, r3
 8005aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	1891      	adds	r1, r2, r2
 8005ac6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ac8:	415b      	adcs	r3, r3
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	1851      	adds	r1, r2, r1
 8005ad4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	414b      	adcs	r3, r1
 8005ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ae8:	4659      	mov	r1, fp
 8005aea:	00cb      	lsls	r3, r1, #3
 8005aec:	4651      	mov	r1, sl
 8005aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af2:	4651      	mov	r1, sl
 8005af4:	00ca      	lsls	r2, r1, #3
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	4642      	mov	r2, r8
 8005afe:	189b      	adds	r3, r3, r2
 8005b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b04:	464b      	mov	r3, r9
 8005b06:	460a      	mov	r2, r1
 8005b08:	eb42 0303 	adc.w	r3, r2, r3
 8005b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b24:	460b      	mov	r3, r1
 8005b26:	18db      	adds	r3, r3, r3
 8005b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	eb42 0303 	adc.w	r3, r2, r3
 8005b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b3a:	f7fa fbb1 	bl	80002a0 <__aeabi_uldivmod>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <UART_SetConfig+0x2d4>)
 8005b44:	fba3 1302 	umull	r1, r3, r3, r2
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	2164      	movs	r1, #100	@ 0x64
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	3332      	adds	r3, #50	@ 0x32
 8005b56:	4a08      	ldr	r2, [pc, #32]	@ (8005b78 <UART_SetConfig+0x2d4>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	f003 0207 	and.w	r2, r3, #7
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4422      	add	r2, r4
 8005b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b6c:	e106      	b.n	8005d7c <UART_SetConfig+0x4d8>
 8005b6e:	bf00      	nop
 8005b70:	40011000 	.word	0x40011000
 8005b74:	40011400 	.word	0x40011400
 8005b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b8e:	4642      	mov	r2, r8
 8005b90:	464b      	mov	r3, r9
 8005b92:	1891      	adds	r1, r2, r2
 8005b94:	6239      	str	r1, [r7, #32]
 8005b96:	415b      	adcs	r3, r3
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	1854      	adds	r4, r2, r1
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	eb43 0501 	adc.w	r5, r3, r1
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	00eb      	lsls	r3, r5, #3
 8005bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb6:	00e2      	lsls	r2, r4, #3
 8005bb8:	4614      	mov	r4, r2
 8005bba:	461d      	mov	r5, r3
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	18e3      	adds	r3, r4, r3
 8005bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	eb45 0303 	adc.w	r3, r5, r3
 8005bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bea:	4629      	mov	r1, r5
 8005bec:	008b      	lsls	r3, r1, #2
 8005bee:	4621      	mov	r1, r4
 8005bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	008a      	lsls	r2, r1, #2
 8005bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bfc:	f7fa fb50 	bl	80002a0 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4b60      	ldr	r3, [pc, #384]	@ (8005d88 <UART_SetConfig+0x4e4>)
 8005c06:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	011c      	lsls	r4, r3, #4
 8005c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	1891      	adds	r1, r2, r2
 8005c26:	61b9      	str	r1, [r7, #24]
 8005c28:	415b      	adcs	r3, r3
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c30:	4641      	mov	r1, r8
 8005c32:	1851      	adds	r1, r2, r1
 8005c34:	6139      	str	r1, [r7, #16]
 8005c36:	4649      	mov	r1, r9
 8005c38:	414b      	adcs	r3, r1
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c48:	4659      	mov	r1, fp
 8005c4a:	00cb      	lsls	r3, r1, #3
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c52:	4651      	mov	r1, sl
 8005c54:	00ca      	lsls	r2, r1, #3
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	189b      	adds	r3, r3, r2
 8005c60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c64:	464b      	mov	r3, r9
 8005c66:	460a      	mov	r2, r1
 8005c68:	eb42 0303 	adc.w	r3, r2, r3
 8005c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c88:	4649      	mov	r1, r9
 8005c8a:	008b      	lsls	r3, r1, #2
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c92:	4641      	mov	r1, r8
 8005c94:	008a      	lsls	r2, r1, #2
 8005c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c9a:	f7fa fb01 	bl	80002a0 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	4b38      	ldr	r3, [pc, #224]	@ (8005d88 <UART_SetConfig+0x4e4>)
 8005ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2264      	movs	r2, #100	@ 0x64
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	1acb      	subs	r3, r1, r3
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	3332      	adds	r3, #50	@ 0x32
 8005cb8:	4a33      	ldr	r2, [pc, #204]	@ (8005d88 <UART_SetConfig+0x4e4>)
 8005cba:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cc4:	441c      	add	r4, r3
 8005cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cca:	2200      	movs	r2, #0
 8005ccc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cce:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	1891      	adds	r1, r2, r2
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	415b      	adcs	r3, r3
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	1851      	adds	r1, r2, r1
 8005ce8:	6039      	str	r1, [r7, #0]
 8005cea:	4649      	mov	r1, r9
 8005cec:	414b      	adcs	r3, r1
 8005cee:	607b      	str	r3, [r7, #4]
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	00cb      	lsls	r3, r1, #3
 8005d00:	4651      	mov	r1, sl
 8005d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d06:	4651      	mov	r1, sl
 8005d08:	00ca      	lsls	r2, r1, #3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4642      	mov	r2, r8
 8005d12:	189b      	adds	r3, r3, r2
 8005d14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d16:	464b      	mov	r3, r9
 8005d18:	460a      	mov	r2, r1
 8005d1a:	eb42 0303 	adc.w	r3, r2, r3
 8005d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d38:	4649      	mov	r1, r9
 8005d3a:	008b      	lsls	r3, r1, #2
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d42:	4641      	mov	r1, r8
 8005d44:	008a      	lsls	r2, r1, #2
 8005d46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d4a:	f7fa faa9 	bl	80002a0 <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <UART_SetConfig+0x4e4>)
 8005d54:	fba3 1302 	umull	r1, r3, r3, r2
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	2164      	movs	r1, #100	@ 0x64
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	3332      	adds	r3, #50	@ 0x32
 8005d66:	4a08      	ldr	r2, [pc, #32]	@ (8005d88 <UART_SetConfig+0x4e4>)
 8005d68:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6c:	095b      	lsrs	r3, r3, #5
 8005d6e:	f003 020f 	and.w	r2, r3, #15
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4422      	add	r2, r4
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d82:	46bd      	mov	sp, r7
 8005d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d88:	51eb851f 	.word	0x51eb851f

08005d8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	f107 001c 	add.w	r0, r7, #28
 8005d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d123      	bne.n	8005dee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d105      	bne.n	8005de2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 fae2 	bl	80073ac <USB_CoreReset>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e01b      	b.n	8005e26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 fad6 	bl	80073ac <USB_CoreReset>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e18:	e005      	b.n	8005e26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e26:	7fbb      	ldrb	r3, [r7, #30]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10b      	bne.n	8005e44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f043 0206 	orr.w	r2, r3, #6
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e50:	b004      	add	sp, #16
 8005e52:	4770      	bx	lr

08005e54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d165      	bne.n	8005f34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4a41      	ldr	r2, [pc, #260]	@ (8005f70 <USB_SetTurnaroundTime+0x11c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d906      	bls.n	8005e7e <USB_SetTurnaroundTime+0x2a>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a40      	ldr	r2, [pc, #256]	@ (8005f74 <USB_SetTurnaroundTime+0x120>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d202      	bcs.n	8005e7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e78:	230f      	movs	r3, #15
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e062      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a3c      	ldr	r2, [pc, #240]	@ (8005f74 <USB_SetTurnaroundTime+0x120>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d306      	bcc.n	8005e94 <USB_SetTurnaroundTime+0x40>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a3b      	ldr	r2, [pc, #236]	@ (8005f78 <USB_SetTurnaroundTime+0x124>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d202      	bcs.n	8005e94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e8e:	230e      	movs	r3, #14
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e057      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4a38      	ldr	r2, [pc, #224]	@ (8005f78 <USB_SetTurnaroundTime+0x124>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d306      	bcc.n	8005eaa <USB_SetTurnaroundTime+0x56>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4a37      	ldr	r2, [pc, #220]	@ (8005f7c <USB_SetTurnaroundTime+0x128>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d202      	bcs.n	8005eaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ea4:	230d      	movs	r3, #13
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e04c      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4a33      	ldr	r2, [pc, #204]	@ (8005f7c <USB_SetTurnaroundTime+0x128>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d306      	bcc.n	8005ec0 <USB_SetTurnaroundTime+0x6c>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a32      	ldr	r2, [pc, #200]	@ (8005f80 <USB_SetTurnaroundTime+0x12c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d802      	bhi.n	8005ec0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005eba:	230c      	movs	r3, #12
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e041      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8005f80 <USB_SetTurnaroundTime+0x12c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d906      	bls.n	8005ed6 <USB_SetTurnaroundTime+0x82>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4a2e      	ldr	r2, [pc, #184]	@ (8005f84 <USB_SetTurnaroundTime+0x130>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d802      	bhi.n	8005ed6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ed0:	230b      	movs	r3, #11
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e036      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8005f84 <USB_SetTurnaroundTime+0x130>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d906      	bls.n	8005eec <USB_SetTurnaroundTime+0x98>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4a29      	ldr	r2, [pc, #164]	@ (8005f88 <USB_SetTurnaroundTime+0x134>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d802      	bhi.n	8005eec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	e02b      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4a26      	ldr	r2, [pc, #152]	@ (8005f88 <USB_SetTurnaroundTime+0x134>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d906      	bls.n	8005f02 <USB_SetTurnaroundTime+0xae>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4a25      	ldr	r2, [pc, #148]	@ (8005f8c <USB_SetTurnaroundTime+0x138>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d202      	bcs.n	8005f02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005efc:	2309      	movs	r3, #9
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e020      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4a21      	ldr	r2, [pc, #132]	@ (8005f8c <USB_SetTurnaroundTime+0x138>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d306      	bcc.n	8005f18 <USB_SetTurnaroundTime+0xc4>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4a20      	ldr	r2, [pc, #128]	@ (8005f90 <USB_SetTurnaroundTime+0x13c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d802      	bhi.n	8005f18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f12:	2308      	movs	r3, #8
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e015      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005f90 <USB_SetTurnaroundTime+0x13c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d906      	bls.n	8005f2e <USB_SetTurnaroundTime+0xda>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4a1c      	ldr	r2, [pc, #112]	@ (8005f94 <USB_SetTurnaroundTime+0x140>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d202      	bcs.n	8005f2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f28:	2307      	movs	r3, #7
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e00a      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f2e:	2306      	movs	r3, #6
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e007      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f3a:	2309      	movs	r3, #9
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e001      	b.n	8005f44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f40:	2309      	movs	r3, #9
 8005f42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	029b      	lsls	r3, r3, #10
 8005f58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	00d8acbf 	.word	0x00d8acbf
 8005f74:	00e4e1c0 	.word	0x00e4e1c0
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	01067380 	.word	0x01067380
 8005f80:	011a499f 	.word	0x011a499f
 8005f84:	01312cff 	.word	0x01312cff
 8005f88:	014ca43f 	.word	0x014ca43f
 8005f8c:	016e3600 	.word	0x016e3600
 8005f90:	01a6ab1f 	.word	0x01a6ab1f
 8005f94:	01e84800 	.word	0x01e84800

08005f98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f043 0201 	orr.w	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f023 0201 	bic.w	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d115      	bne.n	800602a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800600a:	200a      	movs	r0, #10
 800600c:	f7fb fa8c 	bl	8001528 <HAL_Delay>
      ms += 10U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	330a      	adds	r3, #10
 8006014:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 f939 	bl	800728e <USB_GetMode>
 800601c:	4603      	mov	r3, r0
 800601e:	2b01      	cmp	r3, #1
 8006020:	d01e      	beq.n	8006060 <USB_SetCurrentMode+0x84>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2bc7      	cmp	r3, #199	@ 0xc7
 8006026:	d9f0      	bls.n	800600a <USB_SetCurrentMode+0x2e>
 8006028:	e01a      	b.n	8006060 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d115      	bne.n	800605c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800603c:	200a      	movs	r0, #10
 800603e:	f7fb fa73 	bl	8001528 <HAL_Delay>
      ms += 10U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	330a      	adds	r3, #10
 8006046:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f920 	bl	800728e <USB_GetMode>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <USB_SetCurrentMode+0x84>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2bc7      	cmp	r3, #199	@ 0xc7
 8006058:	d9f0      	bls.n	800603c <USB_SetCurrentMode+0x60>
 800605a:	e001      	b.n	8006060 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e005      	b.n	800606c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2bc8      	cmp	r3, #200	@ 0xc8
 8006064:	d101      	bne.n	800606a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006074:	b084      	sub	sp, #16
 8006076:	b580      	push	{r7, lr}
 8006078:	b086      	sub	sp, #24
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	e009      	b.n	80060a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	3340      	adds	r3, #64	@ 0x40
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	2200      	movs	r2, #0
 80060a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3301      	adds	r3, #1
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b0e      	cmp	r3, #14
 80060ac:	d9f2      	bls.n	8006094 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d11c      	bne.n	80060f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060c4:	f043 0302 	orr.w	r3, r3, #2
 80060c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80060ee:	e00b      	b.n	8006108 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800610e:	461a      	mov	r2, r3
 8006110:	2300      	movs	r3, #0
 8006112:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006114:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006118:	2b01      	cmp	r3, #1
 800611a:	d10d      	bne.n	8006138 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800611c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006124:	2100      	movs	r1, #0
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f968 	bl	80063fc <USB_SetDevSpeed>
 800612c:	e008      	b.n	8006140 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800612e:	2101      	movs	r1, #1
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f963 	bl	80063fc <USB_SetDevSpeed>
 8006136:	e003      	b.n	8006140 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006138:	2103      	movs	r1, #3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f95e 	bl	80063fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006140:	2110      	movs	r1, #16
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f8fa 	bl	800633c <USB_FlushTxFifo>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f924 	bl	80063a0 <USB_FlushRxFifo>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006168:	461a      	mov	r2, r3
 800616a:	2300      	movs	r3, #0
 800616c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006174:	461a      	mov	r2, r3
 8006176:	2300      	movs	r3, #0
 8006178:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006186:	2300      	movs	r3, #0
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	e043      	b.n	8006214 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800619e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061a2:	d118      	bne.n	80061d6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b6:	461a      	mov	r2, r3
 80061b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	e013      	b.n	80061e8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061cc:	461a      	mov	r2, r3
 80061ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e008      	b.n	80061e8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e2:	461a      	mov	r2, r3
 80061e4:	2300      	movs	r3, #0
 80061e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006206:	461a      	mov	r2, r3
 8006208:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800620c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006218:	461a      	mov	r2, r3
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	4293      	cmp	r3, r2
 800621e:	d3b5      	bcc.n	800618c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	e043      	b.n	80062ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800623c:	d118      	bne.n	8006270 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006250:	461a      	mov	r2, r3
 8006252:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	e013      	b.n	8006282 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	461a      	mov	r2, r3
 8006268:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e008      	b.n	8006282 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	461a      	mov	r2, r3
 800627e:	2300      	movs	r3, #0
 8006280:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628e:	461a      	mov	r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a0:	461a      	mov	r2, r3
 80062a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	3301      	adds	r3, #1
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062b2:	461a      	mov	r2, r3
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d3b5      	bcc.n	8006226 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80062da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d105      	bne.n	80062f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f043 0210 	orr.w	r2, r3, #16
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	4b10      	ldr	r3, [pc, #64]	@ (8006338 <USB_DevInit+0x2c4>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	f043 0208 	orr.w	r2, r3, #8
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006310:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006314:	2b01      	cmp	r3, #1
 8006316:	d107      	bne.n	8006328 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006320:	f043 0304 	orr.w	r3, r3, #4
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006334:	b004      	add	sp, #16
 8006336:	4770      	bx	lr
 8006338:	803c3800 	.word	0x803c3800

0800633c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3301      	adds	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006356:	d901      	bls.n	800635c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e01b      	b.n	8006394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	daf2      	bge.n	800634a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	019b      	lsls	r3, r3, #6
 800636c:	f043 0220 	orr.w	r2, r3, #32
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006380:	d901      	bls.n	8006386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e006      	b.n	8006394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b20      	cmp	r3, #32
 8006390:	d0f0      	beq.n	8006374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063b8:	d901      	bls.n	80063be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e018      	b.n	80063f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	daf2      	bge.n	80063ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2210      	movs	r2, #16
 80063ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063dc:	d901      	bls.n	80063e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e006      	b.n	80063f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b10      	cmp	r3, #16
 80063ec:	d0f0      	beq.n	80063d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800641c:	4313      	orrs	r3, r2
 800641e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0306 	and.w	r3, r3, #6
 8006446:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]
 8006452:	e00a      	b.n	800646a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d002      	beq.n	8006460 <USB_GetDevSpeed+0x32>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b06      	cmp	r3, #6
 800645e:	d102      	bne.n	8006466 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006460:	2302      	movs	r3, #2
 8006462:	75fb      	strb	r3, [r7, #23]
 8006464:	e001      	b.n	800646a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006466:	230f      	movs	r3, #15
 8006468:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
}
 800646c:	4618      	mov	r0, r3
 800646e:	371c      	adds	r7, #28
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d13a      	bne.n	800650a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	2101      	movs	r1, #1
 80064a6:	fa01 f303 	lsl.w	r3, r1, r3
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	68f9      	ldr	r1, [r7, #12]
 80064ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064b2:	4313      	orrs	r3, r2
 80064b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d155      	bne.n	8006578 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	791b      	ldrb	r3, [r3, #4]
 80064e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	059b      	lsls	r3, r3, #22
 80064ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064f0:	4313      	orrs	r3, r2
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e036      	b.n	8006578 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006510:	69da      	ldr	r2, [r3, #28]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	2101      	movs	r1, #1
 800651c:	fa01 f303 	lsl.w	r3, r1, r3
 8006520:	041b      	lsls	r3, r3, #16
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006528:	4313      	orrs	r3, r2
 800652a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d11a      	bne.n	8006578 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	791b      	ldrb	r3, [r3, #4]
 800655c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800655e:	430b      	orrs	r3, r1
 8006560:	4313      	orrs	r3, r2
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800656e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006576:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d161      	bne.n	8006668 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ba:	d11f      	bne.n	80065fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	2101      	movs	r1, #1
 800660e:	fa01 f303 	lsl.w	r3, r1, r3
 8006612:	b29b      	uxth	r3, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800661c:	4013      	ands	r3, r2
 800661e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f303 	lsl.w	r3, r1, r3
 8006636:	b29b      	uxth	r3, r3
 8006638:	43db      	mvns	r3, r3
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006640:	4013      	ands	r3, r2
 8006642:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	0159      	lsls	r1, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	440b      	add	r3, r1
 800665a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665e:	4619      	mov	r1, r3
 8006660:	4b35      	ldr	r3, [pc, #212]	@ (8006738 <USB_DeactivateEndpoint+0x1b0>)
 8006662:	4013      	ands	r3, r2
 8006664:	600b      	str	r3, [r1, #0]
 8006666:	e060      	b.n	800672a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800667a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800667e:	d11f      	bne.n	80066c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800669a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800669e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	2101      	movs	r1, #1
 80066d2:	fa01 f303 	lsl.w	r3, r1, r3
 80066d6:	041b      	lsls	r3, r3, #16
 80066d8:	43db      	mvns	r3, r3
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066e0:	4013      	ands	r3, r2
 80066e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	2101      	movs	r1, #1
 80066f6:	fa01 f303 	lsl.w	r3, r1, r3
 80066fa:	041b      	lsls	r3, r3, #16
 80066fc:	43db      	mvns	r3, r3
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006704:	4013      	ands	r3, r2
 8006706:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	0159      	lsls	r1, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	440b      	add	r3, r1
 800671e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006722:	4619      	mov	r1, r3
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <USB_DeactivateEndpoint+0x1b4>)
 8006726:	4013      	ands	r3, r2
 8006728:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	ec337800 	.word	0xec337800
 800673c:	eff37800 	.word	0xeff37800

08006740 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	@ 0x28
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b01      	cmp	r3, #1
 800675e:	f040 817a 	bne.w	8006a56 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d132      	bne.n	80067d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006784:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006788:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800678c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c8:	0cdb      	lsrs	r3, r3, #19
 80067ca:	04db      	lsls	r3, r3, #19
 80067cc:	6113      	str	r3, [r2, #16]
 80067ce:	e092      	b.n	80068f6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ea:	0cdb      	lsrs	r3, r3, #19
 80067ec:	04db      	lsls	r3, r3, #19
 80067ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	440a      	add	r2, r1
 8006806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800680a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800680e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006812:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11a      	bne.n	8006850 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	d903      	bls.n	800682e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006848:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800684c:	6113      	str	r3, [r2, #16]
 800684e:	e01b      	b.n	8006888 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800685c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6919      	ldr	r1, [r3, #16]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	440b      	add	r3, r1
 8006868:	1e59      	subs	r1, r3, #1
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006872:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006874:	4ba2      	ldr	r3, [pc, #648]	@ (8006b00 <USB_EPStartXfer+0x3c0>)
 8006876:	400b      	ands	r3, r1
 8006878:	69b9      	ldr	r1, [r7, #24]
 800687a:	0148      	lsls	r0, r1, #5
 800687c:	69f9      	ldr	r1, [r7, #28]
 800687e:	4401      	add	r1, r0
 8006880:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006884:	4313      	orrs	r3, r2
 8006886:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	0148      	lsls	r0, r1, #5
 80068a2:	69f9      	ldr	r1, [r7, #28]
 80068a4:	4401      	add	r1, r0
 80068a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068aa:	4313      	orrs	r3, r2
 80068ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	791b      	ldrb	r3, [r3, #4]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d11f      	bne.n	80068f6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80068d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80068f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d14b      	bne.n	8006994 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006910:	461a      	mov	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	791b      	ldrb	r3, [r3, #4]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d128      	bne.n	8006972 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d110      	bne.n	8006952 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800694a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	e00f      	b.n	8006972 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800696c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006970:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800698c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e165      	b.n	8006c60 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	791b      	ldrb	r3, [r3, #4]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d015      	beq.n	80069e8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 814d 	beq.w	8006c60 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	2101      	movs	r1, #1
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069e2:	4313      	orrs	r3, r2
 80069e4:	634b      	str	r3, [r1, #52]	@ 0x34
 80069e6:	e13b      	b.n	8006c60 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d110      	bne.n	8006a1a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a12:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	e00f      	b.n	8006a3a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	68d9      	ldr	r1, [r3, #12]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	b298      	uxth	r0, r3
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f9b8 	bl	8006dc4 <USB_WritePacket>
 8006a54:	e104      	b.n	8006c60 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	0151      	lsls	r1, r2, #5
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a70:	0cdb      	lsrs	r3, r3, #19
 8006a72:	04db      	lsls	r3, r3, #19
 8006a74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a98:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d131      	bne.n	8006b04 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ace:	69b9      	ldr	r1, [r7, #24]
 8006ad0:	0148      	lsls	r0, r1, #5
 8006ad2:	69f9      	ldr	r1, [r7, #28]
 8006ad4:	4401      	add	r1, r0
 8006ad6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ada:	4313      	orrs	r3, r2
 8006adc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006af8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006afc:	6113      	str	r3, [r2, #16]
 8006afe:	e061      	b.n	8006bc4 <USB_EPStartXfer+0x484>
 8006b00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d123      	bne.n	8006b54 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b22:	69b9      	ldr	r1, [r7, #24]
 8006b24:	0148      	lsls	r0, r1, #5
 8006b26:	69f9      	ldr	r1, [r7, #28]
 8006b28:	4401      	add	r1, r0
 8006b2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b50:	6113      	str	r3, [r2, #16]
 8006b52:	e037      	b.n	8006bc4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	1e5a      	subs	r2, r3, #1
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	8afa      	ldrh	r2, [r7, #22]
 8006b70:	fb03 f202 	mul.w	r2, r3, r2
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	8afb      	ldrh	r3, [r7, #22]
 8006b88:	04d9      	lsls	r1, r3, #19
 8006b8a:	4b38      	ldr	r3, [pc, #224]	@ (8006c6c <USB_EPStartXfer+0x52c>)
 8006b8c:	400b      	ands	r3, r1
 8006b8e:	69b9      	ldr	r1, [r7, #24]
 8006b90:	0148      	lsls	r0, r1, #5
 8006b92:	69f9      	ldr	r1, [r7, #28]
 8006b94:	4401      	add	r1, r0
 8006b96:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb4:	69b9      	ldr	r1, [r7, #24]
 8006bb6:	0148      	lsls	r0, r1, #5
 8006bb8:	69f9      	ldr	r1, [r7, #28]
 8006bba:	4401      	add	r1, r0
 8006bbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006bc4:	79fb      	ldrb	r3, [r7, #7]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10d      	bne.n	8006be6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be2:	460a      	mov	r2, r1
 8006be4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	791b      	ldrb	r3, [r3, #4]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d128      	bne.n	8006c40 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d110      	bne.n	8006c20 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e00f      	b.n	8006c40 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	1ff80000 	.word	0x1ff80000

08006c70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d14a      	bne.n	8006d24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ca6:	f040 8086 	bne.w	8006db6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	7812      	ldrb	r2, [r2, #0]
 8006cbe:	0151      	lsls	r1, r2, #5
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	440a      	add	r2, r1
 8006cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ccc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d902      	bls.n	8006d08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
          break;
 8006d06:	e056      	b.n	8006db6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d20:	d0e7      	beq.n	8006cf2 <USB_EPStopXfer+0x82>
 8006d22:	e048      	b.n	8006db6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d3c:	d13b      	bne.n	8006db6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	7812      	ldrb	r2, [r2, #0]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d902      	bls.n	8006d9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
          break;
 8006d9a:	e00c      	b.n	8006db6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db4:	d0e7      	beq.n	8006d86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b089      	sub	sp, #36	@ 0x24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	71fb      	strb	r3, [r7, #7]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006de2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d123      	bne.n	8006e32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dea:	88bb      	ldrh	r3, [r7, #4]
 8006dec:	3303      	adds	r3, #3
 8006dee:	089b      	lsrs	r3, r3, #2
 8006df0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	e018      	b.n	8006e2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	031a      	lsls	r2, r3, #12
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e04:	461a      	mov	r2, r3
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3301      	adds	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3301      	adds	r3, #1
 8006e22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d3e2      	bcc.n	8006df8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3724      	adds	r7, #36	@ 0x24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b08b      	sub	sp, #44	@ 0x2c
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	089b      	lsrs	r3, r3, #2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e66:	2300      	movs	r3, #0
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	e014      	b.n	8006e96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	3301      	adds	r3, #1
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	3301      	adds	r3, #1
 8006e88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	3301      	adds	r3, #1
 8006e94:	623b      	str	r3, [r7, #32]
 8006e96:	6a3a      	ldr	r2, [r7, #32]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d3e6      	bcc.n	8006e6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e9e:	8bfb      	ldrh	r3, [r7, #30]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01e      	beq.n	8006ee2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f107 0310 	add.w	r3, r7, #16
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	701a      	strb	r2, [r3, #0]
      i++;
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ed6:	8bfb      	ldrh	r3, [r7, #30]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006edc:	8bfb      	ldrh	r3, [r7, #30]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1ea      	bne.n	8006eb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	372c      	adds	r7, #44	@ 0x2c
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d12c      	bne.n	8006f66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	db12      	blt.n	8006f44 <USB_EPSetStall+0x54>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00f      	beq.n	8006f44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	e02b      	b.n	8006fbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db12      	blt.n	8006f9e <USB_EPSetStall+0xae>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00f      	beq.n	8006f9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d128      	bne.n	800703a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007002:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007006:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	791b      	ldrb	r3, [r3, #4]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d003      	beq.n	8007018 <USB_EPClearStall+0x4c>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	791b      	ldrb	r3, [r3, #4]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d138      	bne.n	800708a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e027      	b.n	800708a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007054:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007058:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	791b      	ldrb	r3, [r3, #4]
 800705e:	2b03      	cmp	r3, #3
 8007060:	d003      	beq.n	800706a <USB_EPClearStall+0x9e>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	791b      	ldrb	r3, [r3, #4]
 8007066:	2b02      	cmp	r3, #2
 8007068:	d10f      	bne.n	800708a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007088:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070d2:	4313      	orrs	r3, r2
 80070d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070fe:	f023 0303 	bic.w	r3, r3, #3
 8007102:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007112:	f023 0302 	bic.w	r3, r3, #2
 8007116:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007140:	f023 0303 	bic.w	r3, r3, #3
 8007144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007154:	f043 0302 	orr.w	r3, r3, #2
 8007158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4013      	ands	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007180:	68fb      	ldr	r3, [r7, #12]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	4013      	ands	r3, r2
 80071b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	0c1b      	lsrs	r3, r3, #16
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4013      	ands	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	b29b      	uxth	r3, r3
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4013      	ands	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007224:	68bb      	ldr	r3, [r7, #8]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007254:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	fa22 f303 	lsr.w	r3, r2, r3
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	b2db      	uxtb	r3, r3
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4013      	ands	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007280:	68bb      	ldr	r3, [r7, #8]
}
 8007282:	4618      	mov	r0, r3
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f003 0301 	and.w	r3, r3, #1
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b085      	sub	sp, #20
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80072c8:	f023 0307 	bic.w	r3, r3, #7
 80072cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	460b      	mov	r3, r1
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	333c      	adds	r3, #60	@ 0x3c
 8007306:	3304      	adds	r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4a26      	ldr	r2, [pc, #152]	@ (80073a8 <USB_EP0_OutStart+0xb8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d90a      	bls.n	800732a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007324:	d101      	bne.n	800732a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	e037      	b.n	800739a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007344:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007358:	f043 0318 	orr.w	r3, r3, #24
 800735c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800736c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007370:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d10f      	bne.n	8007398 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737e:	461a      	mov	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007392:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	4f54300a 	.word	0x4f54300a

080073ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073c4:	d901      	bls.n	80073ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e01b      	b.n	8007402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	daf2      	bge.n	80073b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f043 0201 	orr.w	r2, r3, #1
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073ee:	d901      	bls.n	80073f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e006      	b.n	8007402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d0f0      	beq.n	80073e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
	...

08007410 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800741c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007420:	f002 fcb2 	bl	8009d88 <USBD_static_malloc>
 8007424:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d109      	bne.n	8007440 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32b0      	adds	r2, #176	@ 0xb0
 8007436:	2100      	movs	r1, #0
 8007438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800743c:	2302      	movs	r3, #2
 800743e:	e0d4      	b.n	80075ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007440:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007444:	2100      	movs	r1, #0
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f002 fd02 	bl	8009e50 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32b0      	adds	r2, #176	@ 0xb0
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	32b0      	adds	r2, #176	@ 0xb0
 8007466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7c1b      	ldrb	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d138      	bne.n	80074ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007478:	4b5e      	ldr	r3, [pc, #376]	@ (80075f4 <USBD_CDC_Init+0x1e4>)
 800747a:	7819      	ldrb	r1, [r3, #0]
 800747c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007480:	2202      	movs	r2, #2
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f002 fb5d 	bl	8009b42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007488:	4b5a      	ldr	r3, [pc, #360]	@ (80075f4 <USBD_CDC_Init+0x1e4>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	f003 020f 	and.w	r2, r3, #15
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	3324      	adds	r3, #36	@ 0x24
 800749e:	2201      	movs	r2, #1
 80074a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074a2:	4b55      	ldr	r3, [pc, #340]	@ (80075f8 <USBD_CDC_Init+0x1e8>)
 80074a4:	7819      	ldrb	r1, [r3, #0]
 80074a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074aa:	2202      	movs	r2, #2
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f002 fb48 	bl	8009b42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074b2:	4b51      	ldr	r3, [pc, #324]	@ (80075f8 <USBD_CDC_Init+0x1e8>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074ca:	2201      	movs	r2, #1
 80074cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074ce:	4b4b      	ldr	r3, [pc, #300]	@ (80075fc <USBD_CDC_Init+0x1ec>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	f003 020f 	and.w	r2, r3, #15
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	3326      	adds	r3, #38	@ 0x26
 80074e4:	2210      	movs	r2, #16
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	e035      	b.n	8007556 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074ea:	4b42      	ldr	r3, [pc, #264]	@ (80075f4 <USBD_CDC_Init+0x1e4>)
 80074ec:	7819      	ldrb	r1, [r3, #0]
 80074ee:	2340      	movs	r3, #64	@ 0x40
 80074f0:	2202      	movs	r2, #2
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f002 fb25 	bl	8009b42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074f8:	4b3e      	ldr	r3, [pc, #248]	@ (80075f4 <USBD_CDC_Init+0x1e4>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 020f 	and.w	r2, r3, #15
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	3324      	adds	r3, #36	@ 0x24
 800750e:	2201      	movs	r2, #1
 8007510:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007512:	4b39      	ldr	r3, [pc, #228]	@ (80075f8 <USBD_CDC_Init+0x1e8>)
 8007514:	7819      	ldrb	r1, [r3, #0]
 8007516:	2340      	movs	r3, #64	@ 0x40
 8007518:	2202      	movs	r2, #2
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f002 fb11 	bl	8009b42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007520:	4b35      	ldr	r3, [pc, #212]	@ (80075f8 <USBD_CDC_Init+0x1e8>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	f003 020f 	and.w	r2, r3, #15
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007538:	2201      	movs	r2, #1
 800753a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800753c:	4b2f      	ldr	r3, [pc, #188]	@ (80075fc <USBD_CDC_Init+0x1ec>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f003 020f 	and.w	r2, r3, #15
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	3326      	adds	r3, #38	@ 0x26
 8007552:	2210      	movs	r2, #16
 8007554:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007556:	4b29      	ldr	r3, [pc, #164]	@ (80075fc <USBD_CDC_Init+0x1ec>)
 8007558:	7819      	ldrb	r1, [r3, #0]
 800755a:	2308      	movs	r3, #8
 800755c:	2203      	movs	r2, #3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f002 faef 	bl	8009b42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007564:	4b25      	ldr	r3, [pc, #148]	@ (80075fc <USBD_CDC_Init+0x1ec>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f003 020f 	and.w	r2, r3, #15
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	3324      	adds	r3, #36	@ 0x24
 800757a:	2201      	movs	r2, #1
 800757c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	33b0      	adds	r3, #176	@ 0xb0
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80075b4:	2302      	movs	r3, #2
 80075b6:	e018      	b.n	80075ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	7c1b      	ldrb	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075c0:	4b0d      	ldr	r3, [pc, #52]	@ (80075f8 <USBD_CDC_Init+0x1e8>)
 80075c2:	7819      	ldrb	r1, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f002 fba6 	bl	8009d20 <USBD_LL_PrepareReceive>
 80075d4:	e008      	b.n	80075e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075d6:	4b08      	ldr	r3, [pc, #32]	@ (80075f8 <USBD_CDC_Init+0x1e8>)
 80075d8:	7819      	ldrb	r1, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075e0:	2340      	movs	r3, #64	@ 0x40
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f002 fb9c 	bl	8009d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000093 	.word	0x20000093
 80075f8:	20000094 	.word	0x20000094
 80075fc:	20000095 	.word	0x20000095

08007600 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800760c:	4b3a      	ldr	r3, [pc, #232]	@ (80076f8 <USBD_CDC_DeInit+0xf8>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f002 fabb 	bl	8009b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007618:	4b37      	ldr	r3, [pc, #220]	@ (80076f8 <USBD_CDC_DeInit+0xf8>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3324      	adds	r3, #36	@ 0x24
 800762e:	2200      	movs	r2, #0
 8007630:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007632:	4b32      	ldr	r3, [pc, #200]	@ (80076fc <USBD_CDC_DeInit+0xfc>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f002 faa8 	bl	8009b8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800763e:	4b2f      	ldr	r3, [pc, #188]	@ (80076fc <USBD_CDC_DeInit+0xfc>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	f003 020f 	and.w	r2, r3, #15
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007656:	2200      	movs	r2, #0
 8007658:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800765a:	4b29      	ldr	r3, [pc, #164]	@ (8007700 <USBD_CDC_DeInit+0x100>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f002 fa94 	bl	8009b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007666:	4b26      	ldr	r3, [pc, #152]	@ (8007700 <USBD_CDC_DeInit+0x100>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f003 020f 	and.w	r2, r3, #15
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	3324      	adds	r3, #36	@ 0x24
 800767c:	2200      	movs	r2, #0
 800767e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007680:	4b1f      	ldr	r3, [pc, #124]	@ (8007700 <USBD_CDC_DeInit+0x100>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3326      	adds	r3, #38	@ 0x26
 8007696:	2200      	movs	r2, #0
 8007698:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	32b0      	adds	r2, #176	@ 0xb0
 80076a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01f      	beq.n	80076ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	33b0      	adds	r3, #176	@ 0xb0
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32b0      	adds	r2, #176	@ 0xb0
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f002 fb68 	bl	8009da4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	32b0      	adds	r2, #176	@ 0xb0
 80076de:	2100      	movs	r1, #0
 80076e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000093 	.word	0x20000093
 80076fc:	20000094 	.word	0x20000094
 8007700:	20000095 	.word	0x20000095

08007704 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	32b0      	adds	r2, #176	@ 0xb0
 8007718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007730:	2303      	movs	r3, #3
 8007732:	e0bf      	b.n	80078b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800773c:	2b00      	cmp	r3, #0
 800773e:	d050      	beq.n	80077e2 <USBD_CDC_Setup+0xde>
 8007740:	2b20      	cmp	r3, #32
 8007742:	f040 80af 	bne.w	80078a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	88db      	ldrh	r3, [r3, #6]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d03a      	beq.n	80077c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b25b      	sxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	da1b      	bge.n	8007790 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	33b0      	adds	r3, #176	@ 0xb0
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800776e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	88d2      	ldrh	r2, [r2, #6]
 8007774:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	88db      	ldrh	r3, [r3, #6]
 800777a:	2b07      	cmp	r3, #7
 800777c:	bf28      	it	cs
 800777e:	2307      	movcs	r3, #7
 8007780:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	89fa      	ldrh	r2, [r7, #14]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fd87 	bl	800929c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800778e:	e090      	b.n	80078b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	785a      	ldrb	r2, [r3, #1]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	88db      	ldrh	r3, [r3, #6]
 800779e:	2b3f      	cmp	r3, #63	@ 0x3f
 80077a0:	d803      	bhi.n	80077aa <USBD_CDC_Setup+0xa6>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	88db      	ldrh	r3, [r3, #6]
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	e000      	b.n	80077ac <USBD_CDC_Setup+0xa8>
 80077aa:	2240      	movs	r2, #64	@ 0x40
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80077b2:	6939      	ldr	r1, [r7, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80077ba:	461a      	mov	r2, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 fd99 	bl	80092f4 <USBD_CtlPrepareRx>
      break;
 80077c2:	e076      	b.n	80078b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	33b0      	adds	r3, #176	@ 0xb0
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	7850      	ldrb	r0, [r2, #1]
 80077da:	2200      	movs	r2, #0
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	4798      	blx	r3
      break;
 80077e0:	e067      	b.n	80078b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b0b      	cmp	r3, #11
 80077e8:	d851      	bhi.n	800788e <USBD_CDC_Setup+0x18a>
 80077ea:	a201      	add	r2, pc, #4	@ (adr r2, 80077f0 <USBD_CDC_Setup+0xec>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007821 	.word	0x08007821
 80077f4:	0800789d 	.word	0x0800789d
 80077f8:	0800788f 	.word	0x0800788f
 80077fc:	0800788f 	.word	0x0800788f
 8007800:	0800788f 	.word	0x0800788f
 8007804:	0800788f 	.word	0x0800788f
 8007808:	0800788f 	.word	0x0800788f
 800780c:	0800788f 	.word	0x0800788f
 8007810:	0800788f 	.word	0x0800788f
 8007814:	0800788f 	.word	0x0800788f
 8007818:	0800784b 	.word	0x0800784b
 800781c:	08007875 	.word	0x08007875
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b03      	cmp	r3, #3
 800782a:	d107      	bne.n	800783c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800782c:	f107 030a 	add.w	r3, r7, #10
 8007830:	2202      	movs	r2, #2
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 fd31 	bl	800929c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800783a:	e032      	b.n	80078a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fcbb 	bl	80091ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	75fb      	strb	r3, [r7, #23]
          break;
 8007848:	e02b      	b.n	80078a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d107      	bne.n	8007866 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007856:	f107 030d 	add.w	r3, r7, #13
 800785a:	2201      	movs	r2, #1
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fd1c 	bl	800929c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007864:	e01d      	b.n	80078a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fca6 	bl	80091ba <USBD_CtlError>
            ret = USBD_FAIL;
 800786e:	2303      	movs	r3, #3
 8007870:	75fb      	strb	r3, [r7, #23]
          break;
 8007872:	e016      	b.n	80078a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b03      	cmp	r3, #3
 800787e:	d00f      	beq.n	80078a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fc99 	bl	80091ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007888:	2303      	movs	r3, #3
 800788a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800788c:	e008      	b.n	80078a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fc92 	bl	80091ba <USBD_CtlError>
          ret = USBD_FAIL;
 8007896:	2303      	movs	r3, #3
 8007898:	75fb      	strb	r3, [r7, #23]
          break;
 800789a:	e002      	b.n	80078a2 <USBD_CDC_Setup+0x19e>
          break;
 800789c:	bf00      	nop
 800789e:	e008      	b.n	80078b2 <USBD_CDC_Setup+0x1ae>
          break;
 80078a0:	bf00      	nop
      }
      break;
 80078a2:	e006      	b.n	80078b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 fc87 	bl	80091ba <USBD_CtlError>
      ret = USBD_FAIL;
 80078ac:	2303      	movs	r3, #3
 80078ae:	75fb      	strb	r3, [r7, #23]
      break;
 80078b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32b0      	adds	r2, #176	@ 0xb0
 80078da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e065      	b.n	80079b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	32b0      	adds	r2, #176	@ 0xb0
 80078f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	f003 020f 	and.w	r2, r3, #15
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	3318      	adds	r3, #24
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d02f      	beq.n	8007970 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	f003 020f 	and.w	r2, r3, #15
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	3318      	adds	r3, #24
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	78fb      	ldrb	r3, [r7, #3]
 8007928:	f003 010f 	and.w	r1, r3, #15
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	460b      	mov	r3, r1
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	440b      	add	r3, r1
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4403      	add	r3, r0
 8007938:	331c      	adds	r3, #28
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007946:	2b00      	cmp	r3, #0
 8007948:	d112      	bne.n	8007970 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	f003 020f 	and.w	r2, r3, #15
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	3318      	adds	r3, #24
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007962:	78f9      	ldrb	r1, [r7, #3]
 8007964:	2300      	movs	r3, #0
 8007966:	2200      	movs	r2, #0
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f002 f9b8 	bl	8009cde <USBD_LL_Transmit>
 800796e:	e01f      	b.n	80079b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	33b0      	adds	r3, #176	@ 0xb0
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d010      	beq.n	80079b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	33b0      	adds	r3, #176	@ 0xb0
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	32b0      	adds	r2, #176	@ 0xb0
 80079d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	32b0      	adds	r2, #176	@ 0xb0
 80079e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e01a      	b.n	8007a22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f002 f9b6 	bl	8009d62 <USBD_LL_GetRxDataSize>
 80079f6:	4602      	mov	r2, r0
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	33b0      	adds	r3, #176	@ 0xb0
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	32b0      	adds	r2, #176	@ 0xb0
 8007a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e024      	b.n	8007a96 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	33b0      	adds	r3, #176	@ 0xb0
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d019      	beq.n	8007a94 <USBD_CDC_EP0_RxReady+0x6a>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007a66:	2bff      	cmp	r3, #255	@ 0xff
 8007a68:	d014      	beq.n	8007a94 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	33b0      	adds	r3, #176	@ 0xb0
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	22ff      	movs	r2, #255	@ 0xff
 8007a90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007aa8:	2182      	movs	r1, #130	@ 0x82
 8007aaa:	4818      	ldr	r0, [pc, #96]	@ (8007b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007aac:	f000 fd4f 	bl	800854e <USBD_GetEpDesc>
 8007ab0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	4815      	ldr	r0, [pc, #84]	@ (8007b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ab6:	f000 fd4a 	bl	800854e <USBD_GetEpDesc>
 8007aba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007abc:	2181      	movs	r1, #129	@ 0x81
 8007abe:	4813      	ldr	r0, [pc, #76]	@ (8007b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ac0:	f000 fd45 	bl	800854e <USBD_GetEpDesc>
 8007ac4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2210      	movs	r2, #16
 8007ad0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d006      	beq.n	8007ae6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ae0:	711a      	strb	r2, [r3, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d006      	beq.n	8007afa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007af4:	711a      	strb	r2, [r3, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2243      	movs	r2, #67	@ 0x43
 8007afe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b00:	4b02      	ldr	r3, [pc, #8]	@ (8007b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000050 	.word	0x20000050

08007b10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b18:	2182      	movs	r1, #130	@ 0x82
 8007b1a:	4818      	ldr	r0, [pc, #96]	@ (8007b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b1c:	f000 fd17 	bl	800854e <USBD_GetEpDesc>
 8007b20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b22:	2101      	movs	r1, #1
 8007b24:	4815      	ldr	r0, [pc, #84]	@ (8007b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b26:	f000 fd12 	bl	800854e <USBD_GetEpDesc>
 8007b2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b2c:	2181      	movs	r1, #129	@ 0x81
 8007b2e:	4813      	ldr	r0, [pc, #76]	@ (8007b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b30:	f000 fd0d 	bl	800854e <USBD_GetEpDesc>
 8007b34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	2210      	movs	r2, #16
 8007b40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d006      	beq.n	8007b56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	711a      	strb	r2, [r3, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f042 0202 	orr.w	r2, r2, #2
 8007b54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d006      	beq.n	8007b6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	711a      	strb	r2, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f042 0202 	orr.w	r2, r2, #2
 8007b68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2243      	movs	r2, #67	@ 0x43
 8007b6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b70:	4b02      	ldr	r3, [pc, #8]	@ (8007b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000050 	.word	0x20000050

08007b80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b88:	2182      	movs	r1, #130	@ 0x82
 8007b8a:	4818      	ldr	r0, [pc, #96]	@ (8007bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b8c:	f000 fcdf 	bl	800854e <USBD_GetEpDesc>
 8007b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b92:	2101      	movs	r1, #1
 8007b94:	4815      	ldr	r0, [pc, #84]	@ (8007bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b96:	f000 fcda 	bl	800854e <USBD_GetEpDesc>
 8007b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b9c:	2181      	movs	r1, #129	@ 0x81
 8007b9e:	4813      	ldr	r0, [pc, #76]	@ (8007bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ba0:	f000 fcd5 	bl	800854e <USBD_GetEpDesc>
 8007ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2210      	movs	r2, #16
 8007bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d006      	beq.n	8007bc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bc0:	711a      	strb	r2, [r3, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d006      	beq.n	8007bda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bd4:	711a      	strb	r2, [r3, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2243      	movs	r2, #67	@ 0x43
 8007bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007be0:	4b02      	ldr	r3, [pc, #8]	@ (8007bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000050 	.word	0x20000050

08007bf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	220a      	movs	r2, #10
 8007bfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007bfe:	4b03      	ldr	r3, [pc, #12]	@ (8007c0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	2000000c 	.word	0x2000000c

08007c10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e009      	b.n	8007c38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	33b0      	adds	r3, #176	@ 0xb0
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	32b0      	adds	r2, #176	@ 0xb0
 8007c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e008      	b.n	8007c7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	32b0      	adds	r2, #176	@ 0xb0
 8007c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e004      	b.n	8007cb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	32b0      	adds	r2, #176	@ 0xb0
 8007cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cda:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e025      	b.n	8007d36 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d11f      	bne.n	8007d34 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007cfc:	4b10      	ldr	r3, [pc, #64]	@ (8007d40 <USBD_CDC_TransmitPacket+0x7c>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 020f 	and.w	r2, r3, #15
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4403      	add	r3, r0
 8007d16:	3318      	adds	r3, #24
 8007d18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007d1a:	4b09      	ldr	r3, [pc, #36]	@ (8007d40 <USBD_CDC_TransmitPacket+0x7c>)
 8007d1c:	7819      	ldrb	r1, [r3, #0]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 ffd7 	bl	8009cde <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000093 	.word	0x20000093

08007d44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	32b0      	adds	r2, #176	@ 0xb0
 8007d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	32b0      	adds	r2, #176	@ 0xb0
 8007d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e018      	b.n	8007da4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	7c1b      	ldrb	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10a      	bne.n	8007d90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007dac <USBD_CDC_ReceivePacket+0x68>)
 8007d7c:	7819      	ldrb	r1, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 ffc9 	bl	8009d20 <USBD_LL_PrepareReceive>
 8007d8e:	e008      	b.n	8007da2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d90:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <USBD_CDC_ReceivePacket+0x68>)
 8007d92:	7819      	ldrb	r1, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d9a:	2340      	movs	r3, #64	@ 0x40
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 ffbf 	bl	8009d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20000094 	.word	0x20000094

08007db0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e01f      	b.n	8007e08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	79fa      	ldrb	r2, [r7, #7]
 8007dfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f001 fe39 	bl	8009a74 <USBD_LL_Init>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e025      	b.n	8007e74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	32ae      	adds	r2, #174	@ 0xae
 8007e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00f      	beq.n	8007e64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	32ae      	adds	r2, #174	@ 0xae
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e54:	f107 020e 	add.w	r2, r7, #14
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 fe41 	bl	8009b0c <USBD_LL_Start>
 8007e8a:	4603      	mov	r3, r0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d009      	beq.n	8007ed8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	78fa      	ldrb	r2, [r7, #3]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	460b      	mov	r3, r1
 8007eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	78fa      	ldrb	r2, [r7, #3]
 8007efc:	4611      	mov	r1, r2
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 f90c 	bl	8009146 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f4a:	f003 031f 	and.w	r3, r3, #31
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d01a      	beq.n	8007f88 <USBD_LL_SetupStage+0x72>
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d822      	bhi.n	8007f9c <USBD_LL_SetupStage+0x86>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <USBD_LL_SetupStage+0x4a>
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d00a      	beq.n	8007f74 <USBD_LL_SetupStage+0x5e>
 8007f5e:	e01d      	b.n	8007f9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fb63 	bl	8008634 <USBD_StdDevReq>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73fb      	strb	r3, [r7, #15]
      break;
 8007f72:	e020      	b.n	8007fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fbcb 	bl	8008718 <USBD_StdItfReq>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
      break;
 8007f86:	e016      	b.n	8007fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fc2d 	bl	80087f0 <USBD_StdEPReq>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9a:	e00c      	b.n	8007fb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fa2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 fe0e 	bl	8009bcc <USBD_LL_StallEP>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb4:	bf00      	nop
  }

  return ret;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007fd2:	7afb      	ldrb	r3, [r7, #11]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d16e      	bne.n	80080b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007fde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	f040 8098 	bne.w	800811c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d913      	bls.n	8008020 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	1ad2      	subs	r2, r2, r3
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	4293      	cmp	r3, r2
 8008010:	bf28      	it	cs
 8008012:	4613      	movcs	r3, r2
 8008014:	461a      	mov	r2, r3
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f001 f988 	bl	800932e <USBD_CtlContinueRx>
 800801e:	e07d      	b.n	800811c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2b02      	cmp	r3, #2
 800802c:	d014      	beq.n	8008058 <USBD_LL_DataOutStage+0x98>
 800802e:	2b02      	cmp	r3, #2
 8008030:	d81d      	bhi.n	800806e <USBD_LL_DataOutStage+0xae>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <USBD_LL_DataOutStage+0x7c>
 8008036:	2b01      	cmp	r3, #1
 8008038:	d003      	beq.n	8008042 <USBD_LL_DataOutStage+0x82>
 800803a:	e018      	b.n	800806e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	75bb      	strb	r3, [r7, #22]
            break;
 8008040:	e018      	b.n	8008074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008048:	b2db      	uxtb	r3, r3
 800804a:	4619      	mov	r1, r3
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fa64 	bl	800851a <USBD_CoreFindIF>
 8008052:	4603      	mov	r3, r0
 8008054:	75bb      	strb	r3, [r7, #22]
            break;
 8008056:	e00d      	b.n	8008074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800805e:	b2db      	uxtb	r3, r3
 8008060:	4619      	mov	r1, r3
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fa66 	bl	8008534 <USBD_CoreFindEP>
 8008068:	4603      	mov	r3, r0
 800806a:	75bb      	strb	r3, [r7, #22]
            break;
 800806c:	e002      	b.n	8008074 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	75bb      	strb	r3, [r7, #22]
            break;
 8008072:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008074:	7dbb      	ldrb	r3, [r7, #22]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d119      	bne.n	80080ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b03      	cmp	r3, #3
 8008084:	d113      	bne.n	80080ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008086:	7dba      	ldrb	r2, [r7, #22]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	32ae      	adds	r2, #174	@ 0xae
 800808c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008096:	7dba      	ldrb	r2, [r7, #22]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800809e:	7dba      	ldrb	r2, [r7, #22]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	32ae      	adds	r2, #174	@ 0xae
 80080a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f001 f94e 	bl	8009350 <USBD_CtlSendStatus>
 80080b4:	e032      	b.n	800811c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80080b6:	7afb      	ldrb	r3, [r7, #11]
 80080b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	4619      	mov	r1, r3
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 fa37 	bl	8008534 <USBD_CoreFindEP>
 80080c6:	4603      	mov	r3, r0
 80080c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080ca:	7dbb      	ldrb	r3, [r7, #22]
 80080cc:	2bff      	cmp	r3, #255	@ 0xff
 80080ce:	d025      	beq.n	800811c <USBD_LL_DataOutStage+0x15c>
 80080d0:	7dbb      	ldrb	r3, [r7, #22]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d122      	bne.n	800811c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d117      	bne.n	8008112 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80080e2:	7dba      	ldrb	r2, [r7, #22]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	32ae      	adds	r2, #174	@ 0xae
 80080e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00f      	beq.n	8008112 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80080f2:	7dba      	ldrb	r2, [r7, #22]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80080fa:	7dba      	ldrb	r2, [r7, #22]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	32ae      	adds	r2, #174	@ 0xae
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	7afa      	ldrb	r2, [r7, #11]
 8008108:	4611      	mov	r1, r2
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	4798      	blx	r3
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	e000      	b.n	800811e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b086      	sub	sp, #24
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	460b      	mov	r3, r1
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008134:	7afb      	ldrb	r3, [r7, #11]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d16f      	bne.n	800821a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3314      	adds	r3, #20
 800813e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008146:	2b02      	cmp	r3, #2
 8008148:	d15a      	bne.n	8008200 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	429a      	cmp	r2, r3
 8008154:	d914      	bls.n	8008180 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	1ad2      	subs	r2, r2, r3
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	461a      	mov	r2, r3
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f001 f8b0 	bl	80092d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008172:	2300      	movs	r3, #0
 8008174:	2200      	movs	r2, #0
 8008176:	2100      	movs	r1, #0
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f001 fdd1 	bl	8009d20 <USBD_LL_PrepareReceive>
 800817e:	e03f      	b.n	8008200 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	429a      	cmp	r2, r3
 800818a:	d11c      	bne.n	80081c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008194:	429a      	cmp	r2, r3
 8008196:	d316      	bcc.n	80081c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d20f      	bcs.n	80081c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f001 f891 	bl	80092d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081b8:	2300      	movs	r3, #0
 80081ba:	2200      	movs	r2, #0
 80081bc:	2100      	movs	r1, #0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f001 fdae 	bl	8009d20 <USBD_LL_PrepareReceive>
 80081c4:	e01c      	b.n	8008200 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d10f      	bne.n	80081f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80081f2:	2180      	movs	r1, #128	@ 0x80
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f001 fce9 	bl	8009bcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f001 f8bb 	bl	8009376 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d03a      	beq.n	8008280 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff fe42 	bl	8007e94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008218:	e032      	b.n	8008280 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008220:	b2db      	uxtb	r3, r3
 8008222:	4619      	mov	r1, r3
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f985 	bl	8008534 <USBD_CoreFindEP>
 800822a:	4603      	mov	r3, r0
 800822c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	2bff      	cmp	r3, #255	@ 0xff
 8008232:	d025      	beq.n	8008280 <USBD_LL_DataInStage+0x15a>
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d122      	bne.n	8008280 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b03      	cmp	r3, #3
 8008244:	d11c      	bne.n	8008280 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008246:	7dfa      	ldrb	r2, [r7, #23]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	32ae      	adds	r2, #174	@ 0xae
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d014      	beq.n	8008280 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008256:	7dfa      	ldrb	r2, [r7, #23]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800825e:	7dfa      	ldrb	r2, [r7, #23]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	32ae      	adds	r2, #174	@ 0xae
 8008264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	7afa      	ldrb	r2, [r7, #11]
 800826c:	4611      	mov	r1, r2
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	4798      	blx	r3
 8008272:	4603      	mov	r3, r0
 8008274:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008276:	7dbb      	ldrb	r3, [r7, #22]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800827c:	7dbb      	ldrb	r3, [r7, #22]
 800827e:	e000      	b.n	8008282 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d014      	beq.n	80082f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6852      	ldr	r2, [r2, #4]
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	4611      	mov	r1, r2
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80082ec:	2303      	movs	r3, #3
 80082ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082f0:	2340      	movs	r3, #64	@ 0x40
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fc23 	bl	8009b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2240      	movs	r2, #64	@ 0x40
 8008308:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800830c:	2340      	movs	r3, #64	@ 0x40
 800830e:	2200      	movs	r2, #0
 8008310:	2180      	movs	r1, #128	@ 0x80
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fc15 	bl	8009b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2240      	movs	r2, #64	@ 0x40
 8008322:	621a      	str	r2, [r3, #32]

  return ret;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b04      	cmp	r3, #4
 8008360:	d006      	beq.n	8008370 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008368:	b2da      	uxtb	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2204      	movs	r2, #4
 8008374:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b04      	cmp	r3, #4
 8008398:	d106      	bne.n	80083a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d110      	bne.n	80083ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	32ae      	adds	r2, #174	@ 0xae
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008414:	2303      	movs	r3, #3
 8008416:	e01c      	b.n	8008452 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b03      	cmp	r3, #3
 8008422:	d115      	bne.n	8008450 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	32ae      	adds	r2, #174	@ 0xae
 800842e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	32ae      	adds	r2, #174	@ 0xae
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	4611      	mov	r1, r2
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	32ae      	adds	r2, #174	@ 0xae
 8008470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	e01c      	b.n	80084b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b03      	cmp	r3, #3
 8008486:	d115      	bne.n	80084b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	32ae      	adds	r2, #174	@ 0xae
 8008492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00b      	beq.n	80084b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	32ae      	adds	r2, #174	@ 0xae
 80084a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	78fa      	ldrb	r2, [r7, #3]
 80084ae:	4611      	mov	r1, r2
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00e      	beq.n	8008510 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6852      	ldr	r2, [r2, #4]
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	4611      	mov	r1, r2
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800850c:	2303      	movs	r3, #3
 800850e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008526:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008540:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b086      	sub	sp, #24
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	b29b      	uxth	r3, r3
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	7812      	ldrb	r2, [r2, #0]
 8008570:	4293      	cmp	r3, r2
 8008572:	d91f      	bls.n	80085b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800857a:	e013      	b.n	80085a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800857c:	f107 030a 	add.w	r3, r7, #10
 8008580:	4619      	mov	r1, r3
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	f000 f81b 	bl	80085be <USBD_GetNextDesc>
 8008588:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b05      	cmp	r3, #5
 8008590:	d108      	bne.n	80085a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	789b      	ldrb	r3, [r3, #2]
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	429a      	cmp	r2, r3
 800859e:	d008      	beq.n	80085b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	885b      	ldrh	r3, [r3, #2]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d8e5      	bhi.n	800857c <USBD_GetEpDesc+0x2e>
 80085b0:	e000      	b.n	80085b4 <USBD_GetEpDesc+0x66>
          break;
 80085b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80085b4:	693b      	ldr	r3, [r7, #16]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	4413      	add	r3, r2
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4413      	add	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085e8:	68fb      	ldr	r3, [r7, #12]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b087      	sub	sp, #28
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	3301      	adds	r3, #1
 800860c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008614:	8a3b      	ldrh	r3, [r7, #16]
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	b21a      	sxth	r2, r3
 800861a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800861e:	4313      	orrs	r3, r2
 8008620:	b21b      	sxth	r3, r3
 8008622:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008624:	89fb      	ldrh	r3, [r7, #14]
}
 8008626:	4618      	mov	r0, r3
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
	...

08008634 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800864a:	2b40      	cmp	r3, #64	@ 0x40
 800864c:	d005      	beq.n	800865a <USBD_StdDevReq+0x26>
 800864e:	2b40      	cmp	r3, #64	@ 0x40
 8008650:	d857      	bhi.n	8008702 <USBD_StdDevReq+0xce>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00f      	beq.n	8008676 <USBD_StdDevReq+0x42>
 8008656:	2b20      	cmp	r3, #32
 8008658:	d153      	bne.n	8008702 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	32ae      	adds	r2, #174	@ 0xae
 8008664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	4798      	blx	r3
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
      break;
 8008674:	e04a      	b.n	800870c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	2b09      	cmp	r3, #9
 800867c:	d83b      	bhi.n	80086f6 <USBD_StdDevReq+0xc2>
 800867e:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <USBD_StdDevReq+0x50>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	080086d9 	.word	0x080086d9
 8008688:	080086ed 	.word	0x080086ed
 800868c:	080086f7 	.word	0x080086f7
 8008690:	080086e3 	.word	0x080086e3
 8008694:	080086f7 	.word	0x080086f7
 8008698:	080086b7 	.word	0x080086b7
 800869c:	080086ad 	.word	0x080086ad
 80086a0:	080086f7 	.word	0x080086f7
 80086a4:	080086cf 	.word	0x080086cf
 80086a8:	080086c1 	.word	0x080086c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa3c 	bl	8008b2c <USBD_GetDescriptor>
          break;
 80086b4:	e024      	b.n	8008700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fba1 	bl	8008e00 <USBD_SetAddress>
          break;
 80086be:	e01f      	b.n	8008700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fbe0 	bl	8008e88 <USBD_SetConfig>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]
          break;
 80086cc:	e018      	b.n	8008700 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fc83 	bl	8008fdc <USBD_GetConfig>
          break;
 80086d6:	e013      	b.n	8008700 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fcb4 	bl	8009048 <USBD_GetStatus>
          break;
 80086e0:	e00e      	b.n	8008700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fce3 	bl	80090b0 <USBD_SetFeature>
          break;
 80086ea:	e009      	b.n	8008700 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fd07 	bl	8009102 <USBD_ClrFeature>
          break;
 80086f4:	e004      	b.n	8008700 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fd5e 	bl	80091ba <USBD_CtlError>
          break;
 80086fe:	bf00      	nop
      }
      break;
 8008700:	e004      	b.n	800870c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fd58 	bl	80091ba <USBD_CtlError>
      break;
 800870a:	bf00      	nop
  }

  return ret;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop

08008718 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800872e:	2b40      	cmp	r3, #64	@ 0x40
 8008730:	d005      	beq.n	800873e <USBD_StdItfReq+0x26>
 8008732:	2b40      	cmp	r3, #64	@ 0x40
 8008734:	d852      	bhi.n	80087dc <USBD_StdItfReq+0xc4>
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <USBD_StdItfReq+0x26>
 800873a:	2b20      	cmp	r3, #32
 800873c:	d14e      	bne.n	80087dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008744:	b2db      	uxtb	r3, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	2b02      	cmp	r3, #2
 800874a:	d840      	bhi.n	80087ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	889b      	ldrh	r3, [r3, #4]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b01      	cmp	r3, #1
 8008754:	d836      	bhi.n	80087c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	889b      	ldrh	r3, [r3, #4]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fedb 	bl	800851a <USBD_CoreFindIF>
 8008764:	4603      	mov	r3, r0
 8008766:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2bff      	cmp	r3, #255	@ 0xff
 800876c:	d01d      	beq.n	80087aa <USBD_StdItfReq+0x92>
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11a      	bne.n	80087aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008774:	7bba      	ldrb	r2, [r7, #14]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	32ae      	adds	r2, #174	@ 0xae
 800877a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00f      	beq.n	80087a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008784:	7bba      	ldrb	r2, [r7, #14]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800878c:	7bba      	ldrb	r2, [r7, #14]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32ae      	adds	r2, #174	@ 0xae
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	4798      	blx	r3
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087a2:	e004      	b.n	80087ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80087a4:	2303      	movs	r3, #3
 80087a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087a8:	e001      	b.n	80087ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	88db      	ldrh	r3, [r3, #6]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d110      	bne.n	80087d8 <USBD_StdItfReq+0xc0>
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10d      	bne.n	80087d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fdc7 	bl	8009350 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087c2:	e009      	b.n	80087d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fcf7 	bl	80091ba <USBD_CtlError>
          break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fcf2 	bl	80091ba <USBD_CtlError>
          break;
 80087d6:	e000      	b.n	80087da <USBD_StdItfReq+0xc2>
          break;
 80087d8:	bf00      	nop
      }
      break;
 80087da:	e004      	b.n	80087e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fceb 	bl	80091ba <USBD_CtlError>
      break;
 80087e4:	bf00      	nop
  }

  return ret;
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	889b      	ldrh	r3, [r3, #4]
 8008802:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800880c:	2b40      	cmp	r3, #64	@ 0x40
 800880e:	d007      	beq.n	8008820 <USBD_StdEPReq+0x30>
 8008810:	2b40      	cmp	r3, #64	@ 0x40
 8008812:	f200 817f 	bhi.w	8008b14 <USBD_StdEPReq+0x324>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d02a      	beq.n	8008870 <USBD_StdEPReq+0x80>
 800881a:	2b20      	cmp	r3, #32
 800881c:	f040 817a 	bne.w	8008b14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff fe85 	bl	8008534 <USBD_CoreFindEP>
 800882a:	4603      	mov	r3, r0
 800882c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800882e:	7b7b      	ldrb	r3, [r7, #13]
 8008830:	2bff      	cmp	r3, #255	@ 0xff
 8008832:	f000 8174 	beq.w	8008b1e <USBD_StdEPReq+0x32e>
 8008836:	7b7b      	ldrb	r3, [r7, #13]
 8008838:	2b00      	cmp	r3, #0
 800883a:	f040 8170 	bne.w	8008b1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800883e:	7b7a      	ldrb	r2, [r7, #13]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008846:	7b7a      	ldrb	r2, [r7, #13]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	32ae      	adds	r2, #174	@ 0xae
 800884c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8163 	beq.w	8008b1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008858:	7b7a      	ldrb	r2, [r7, #13]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	32ae      	adds	r2, #174	@ 0xae
 800885e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800886e:	e156      	b.n	8008b1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	785b      	ldrb	r3, [r3, #1]
 8008874:	2b03      	cmp	r3, #3
 8008876:	d008      	beq.n	800888a <USBD_StdEPReq+0x9a>
 8008878:	2b03      	cmp	r3, #3
 800887a:	f300 8145 	bgt.w	8008b08 <USBD_StdEPReq+0x318>
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 809b 	beq.w	80089ba <USBD_StdEPReq+0x1ca>
 8008884:	2b01      	cmp	r3, #1
 8008886:	d03c      	beq.n	8008902 <USBD_StdEPReq+0x112>
 8008888:	e13e      	b.n	8008b08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d002      	beq.n	800889c <USBD_StdEPReq+0xac>
 8008896:	2b03      	cmp	r3, #3
 8008898:	d016      	beq.n	80088c8 <USBD_StdEPReq+0xd8>
 800889a:	e02c      	b.n	80088f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00d      	beq.n	80088be <USBD_StdEPReq+0xce>
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b80      	cmp	r3, #128	@ 0x80
 80088a6:	d00a      	beq.n	80088be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 f98d 	bl	8009bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088b2:	2180      	movs	r1, #128	@ 0x80
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 f989 	bl	8009bcc <USBD_LL_StallEP>
 80088ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088bc:	e020      	b.n	8008900 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fc7a 	bl	80091ba <USBD_CtlError>
              break;
 80088c6:	e01b      	b.n	8008900 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	885b      	ldrh	r3, [r3, #2]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10e      	bne.n	80088ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <USBD_StdEPReq+0xfe>
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b80      	cmp	r3, #128	@ 0x80
 80088da:	d008      	beq.n	80088ee <USBD_StdEPReq+0xfe>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	88db      	ldrh	r3, [r3, #6]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d104      	bne.n	80088ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f96f 	bl	8009bcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fd2e 	bl	8009350 <USBD_CtlSendStatus>

              break;
 80088f4:	e004      	b.n	8008900 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fc5e 	bl	80091ba <USBD_CtlError>
              break;
 80088fe:	bf00      	nop
          }
          break;
 8008900:	e107      	b.n	8008b12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d002      	beq.n	8008914 <USBD_StdEPReq+0x124>
 800890e:	2b03      	cmp	r3, #3
 8008910:	d016      	beq.n	8008940 <USBD_StdEPReq+0x150>
 8008912:	e04b      	b.n	80089ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00d      	beq.n	8008936 <USBD_StdEPReq+0x146>
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b80      	cmp	r3, #128	@ 0x80
 800891e:	d00a      	beq.n	8008936 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 f951 	bl	8009bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800892a:	2180      	movs	r1, #128	@ 0x80
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f94d 	bl	8009bcc <USBD_LL_StallEP>
 8008932:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008934:	e040      	b.n	80089b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fc3e 	bl	80091ba <USBD_CtlError>
              break;
 800893e:	e03b      	b.n	80089b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	885b      	ldrh	r3, [r3, #2]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d136      	bne.n	80089b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800894e:	2b00      	cmp	r3, #0
 8008950:	d004      	beq.n	800895c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f957 	bl	8009c0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fcf7 	bl	8009350 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff fde4 	bl	8008534 <USBD_CoreFindEP>
 800896c:	4603      	mov	r3, r0
 800896e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008970:	7b7b      	ldrb	r3, [r7, #13]
 8008972:	2bff      	cmp	r3, #255	@ 0xff
 8008974:	d01f      	beq.n	80089b6 <USBD_StdEPReq+0x1c6>
 8008976:	7b7b      	ldrb	r3, [r7, #13]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d11c      	bne.n	80089b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800897c:	7b7a      	ldrb	r2, [r7, #13]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008984:	7b7a      	ldrb	r2, [r7, #13]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	32ae      	adds	r2, #174	@ 0xae
 800898a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d010      	beq.n	80089b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008994:	7b7a      	ldrb	r2, [r7, #13]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	32ae      	adds	r2, #174	@ 0xae
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	4798      	blx	r3
 80089a6:	4603      	mov	r3, r0
 80089a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80089aa:	e004      	b.n	80089b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fc03 	bl	80091ba <USBD_CtlError>
              break;
 80089b4:	e000      	b.n	80089b8 <USBD_StdEPReq+0x1c8>
              break;
 80089b6:	bf00      	nop
          }
          break;
 80089b8:	e0ab      	b.n	8008b12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d002      	beq.n	80089cc <USBD_StdEPReq+0x1dc>
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d032      	beq.n	8008a30 <USBD_StdEPReq+0x240>
 80089ca:	e097      	b.n	8008afc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <USBD_StdEPReq+0x1f2>
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b80      	cmp	r3, #128	@ 0x80
 80089d6:	d004      	beq.n	80089e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fbed 	bl	80091ba <USBD_CtlError>
                break;
 80089e0:	e091      	b.n	8008b06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da0b      	bge.n	8008a02 <USBD_StdEPReq+0x212>
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	3310      	adds	r3, #16
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	e00b      	b.n	8008a1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4413      	add	r3, r2
 8008a18:	3304      	adds	r3, #4
 8008a1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2202      	movs	r2, #2
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fc37 	bl	800929c <USBD_CtlSendData>
              break;
 8008a2e:	e06a      	b.n	8008b06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	da11      	bge.n	8008a5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	f003 020f 	and.w	r2, r3, #15
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	3324      	adds	r3, #36	@ 0x24
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d117      	bne.n	8008a82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fbb0 	bl	80091ba <USBD_CtlError>
                  break;
 8008a5a:	e054      	b.n	8008b06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	f003 020f 	and.w	r2, r3, #15
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	440b      	add	r3, r1
 8008a6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d104      	bne.n	8008a82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fb9d 	bl	80091ba <USBD_CtlError>
                  break;
 8008a80:	e041      	b.n	8008b06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da0b      	bge.n	8008aa2 <USBD_StdEPReq+0x2b2>
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	3310      	adds	r3, #16
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	e00b      	b.n	8008aba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3304      	adds	r3, #4
 8008aba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <USBD_StdEPReq+0x2d8>
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b80      	cmp	r3, #128	@ 0x80
 8008ac6:	d103      	bne.n	8008ad0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	e00e      	b.n	8008aee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 f8b7 	bl	8009c48 <USBD_LL_IsStallEP>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	e002      	b.n	8008aee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2202      	movs	r2, #2
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fbd1 	bl	800929c <USBD_CtlSendData>
              break;
 8008afa:	e004      	b.n	8008b06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fb5b 	bl	80091ba <USBD_CtlError>
              break;
 8008b04:	bf00      	nop
          }
          break;
 8008b06:	e004      	b.n	8008b12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fb55 	bl	80091ba <USBD_CtlError>
          break;
 8008b10:	bf00      	nop
      }
      break;
 8008b12:	e005      	b.n	8008b20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fb4f 	bl	80091ba <USBD_CtlError>
      break;
 8008b1c:	e000      	b.n	8008b20 <USBD_StdEPReq+0x330>
      break;
 8008b1e:	bf00      	nop
  }

  return ret;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	f200 8128 	bhi.w	8008da2 <USBD_GetDescriptor+0x276>
 8008b52:	a201      	add	r2, pc, #4	@ (adr r2, 8008b58 <USBD_GetDescriptor+0x2c>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	08008b8d 	.word	0x08008b8d
 8008b60:	08008bcd 	.word	0x08008bcd
 8008b64:	08008da3 	.word	0x08008da3
 8008b68:	08008da3 	.word	0x08008da3
 8008b6c:	08008d43 	.word	0x08008d43
 8008b70:	08008d6f 	.word	0x08008d6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	7c12      	ldrb	r2, [r2, #16]
 8008b80:	f107 0108 	add.w	r1, r7, #8
 8008b84:	4610      	mov	r0, r2
 8008b86:	4798      	blx	r3
 8008b88:	60f8      	str	r0, [r7, #12]
      break;
 8008b8a:	e112      	b.n	8008db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	7c1b      	ldrb	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10d      	bne.n	8008bb0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9c:	f107 0208 	add.w	r2, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	2202      	movs	r2, #2
 8008bac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bae:	e100      	b.n	8008db2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	f107 0208 	add.w	r2, r7, #8
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	701a      	strb	r2, [r3, #0]
      break;
 8008bca:	e0f2      	b.n	8008db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	885b      	ldrh	r3, [r3, #2]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	f200 80ac 	bhi.w	8008d30 <USBD_GetDescriptor+0x204>
 8008bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008be0 <USBD_GetDescriptor+0xb4>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008bf9 	.word	0x08008bf9
 8008be4:	08008c2d 	.word	0x08008c2d
 8008be8:	08008c61 	.word	0x08008c61
 8008bec:	08008c95 	.word	0x08008c95
 8008bf0:	08008cc9 	.word	0x08008cc9
 8008bf4:	08008cfd 	.word	0x08008cfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	7c12      	ldrb	r2, [r2, #16]
 8008c10:	f107 0108 	add.w	r1, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c1a:	e091      	b.n	8008d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 facb 	bl	80091ba <USBD_CtlError>
            err++;
 8008c24:	7afb      	ldrb	r3, [r7, #11]
 8008c26:	3301      	adds	r3, #1
 8008c28:	72fb      	strb	r3, [r7, #11]
          break;
 8008c2a:	e089      	b.n	8008d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	7c12      	ldrb	r2, [r2, #16]
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4798      	blx	r3
 8008c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4e:	e077      	b.n	8008d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fab1 	bl	80091ba <USBD_CtlError>
            err++;
 8008c58:	7afb      	ldrb	r3, [r7, #11]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5e:	e06f      	b.n	8008d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	7c12      	ldrb	r2, [r2, #16]
 8008c78:	f107 0108 	add.w	r1, r7, #8
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4798      	blx	r3
 8008c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c82:	e05d      	b.n	8008d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa97 	bl	80091ba <USBD_CtlError>
            err++;
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	72fb      	strb	r3, [r7, #11]
          break;
 8008c92:	e055      	b.n	8008d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cb6:	e043      	b.n	8008d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa7d 	bl	80091ba <USBD_CtlError>
            err++;
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cc6:	e03b      	b.n	8008d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	7c12      	ldrb	r2, [r2, #16]
 8008ce0:	f107 0108 	add.w	r1, r7, #8
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cea:	e029      	b.n	8008d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fa63 	bl	80091ba <USBD_CtlError>
            err++;
 8008cf4:	7afb      	ldrb	r3, [r7, #11]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cfa:	e021      	b.n	8008d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	7c12      	ldrb	r2, [r2, #16]
 8008d14:	f107 0108 	add.w	r1, r7, #8
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
 8008d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d1e:	e00f      	b.n	8008d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa49 	bl	80091ba <USBD_CtlError>
            err++;
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d2e:	e007      	b.n	8008d40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa41 	bl	80091ba <USBD_CtlError>
          err++;
 8008d38:	7afb      	ldrb	r3, [r7, #11]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d3e:	bf00      	nop
      }
      break;
 8008d40:	e037      	b.n	8008db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	7c1b      	ldrb	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d109      	bne.n	8008d5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d52:	f107 0208 	add.w	r2, r7, #8
 8008d56:	4610      	mov	r0, r2
 8008d58:	4798      	blx	r3
 8008d5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d5c:	e029      	b.n	8008db2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fa2a 	bl	80091ba <USBD_CtlError>
        err++;
 8008d66:	7afb      	ldrb	r3, [r7, #11]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d6c:	e021      	b.n	8008db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	7c1b      	ldrb	r3, [r3, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10d      	bne.n	8008d92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7e:	f107 0208 	add.w	r2, r7, #8
 8008d82:	4610      	mov	r0, r2
 8008d84:	4798      	blx	r3
 8008d86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	2207      	movs	r2, #7
 8008d8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d90:	e00f      	b.n	8008db2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fa10 	bl	80091ba <USBD_CtlError>
        err++;
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008da0:	e007      	b.n	8008db2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fa08 	bl	80091ba <USBD_CtlError>
      err++;
 8008daa:	7afb      	ldrb	r3, [r7, #11]
 8008dac:	3301      	adds	r3, #1
 8008dae:	72fb      	strb	r3, [r7, #11]
      break;
 8008db0:	bf00      	nop
  }

  if (err != 0U)
 8008db2:	7afb      	ldrb	r3, [r7, #11]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d11e      	bne.n	8008df6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	88db      	ldrh	r3, [r3, #6]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d016      	beq.n	8008dee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008dc0:	893b      	ldrh	r3, [r7, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00e      	beq.n	8008de4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	88da      	ldrh	r2, [r3, #6]
 8008dca:	893b      	ldrh	r3, [r7, #8]
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	bf28      	it	cs
 8008dd0:	4613      	movcs	r3, r2
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dd6:	893b      	ldrh	r3, [r7, #8]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	68f9      	ldr	r1, [r7, #12]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fa5d 	bl	800929c <USBD_CtlSendData>
 8008de2:	e009      	b.n	8008df8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f9e7 	bl	80091ba <USBD_CtlError>
 8008dec:	e004      	b.n	8008df8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 faae 	bl	8009350 <USBD_CtlSendStatus>
 8008df4:	e000      	b.n	8008df8 <USBD_GetDescriptor+0x2cc>
    return;
 8008df6:	bf00      	nop
  }
}
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop

08008e00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	889b      	ldrh	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d131      	bne.n	8008e76 <USBD_SetAddress+0x76>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	88db      	ldrh	r3, [r3, #6]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d12d      	bne.n	8008e76 <USBD_SetAddress+0x76>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	885b      	ldrh	r3, [r3, #2]
 8008e1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e20:	d829      	bhi.n	8008e76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	885b      	ldrh	r3, [r3, #2]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	d104      	bne.n	8008e44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f9bc 	bl	80091ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e42:	e01d      	b.n	8008e80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	7bfa      	ldrb	r2, [r7, #15]
 8008e48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 ff25 	bl	8009ca0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fa7a 	bl	8009350 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d004      	beq.n	8008e6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2202      	movs	r2, #2
 8008e66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6a:	e009      	b.n	8008e80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e74:	e004      	b.n	8008e80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f99e 	bl	80091ba <USBD_CtlError>
  }
}
 8008e7e:	bf00      	nop
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	885b      	ldrh	r3, [r3, #2]
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	4b4e      	ldr	r3, [pc, #312]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008e9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d905      	bls.n	8008eb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f985 	bl	80091ba <USBD_CtlError>
    return USBD_FAIL;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e08c      	b.n	8008fce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d002      	beq.n	8008ec6 <USBD_SetConfig+0x3e>
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d029      	beq.n	8008f18 <USBD_SetConfig+0x90>
 8008ec4:	e075      	b.n	8008fb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ec6:	4b44      	ldr	r3, [pc, #272]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d020      	beq.n	8008f10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ece:	4b42      	ldr	r3, [pc, #264]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ed8:	4b3f      	ldr	r3, [pc, #252]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7fe ffe3 	bl	8007eaa <USBD_SetClassConfig>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d008      	beq.n	8008f00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f962 	bl	80091ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2202      	movs	r2, #2
 8008efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008efe:	e065      	b.n	8008fcc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa25 	bl	8009350 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f0e:	e05d      	b.n	8008fcc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fa1d 	bl	8009350 <USBD_CtlSendStatus>
      break;
 8008f16:	e059      	b.n	8008fcc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f18:	4b2f      	ldr	r3, [pc, #188]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d112      	bne.n	8008f46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008f28:	4b2b      	ldr	r3, [pc, #172]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f32:	4b29      	ldr	r3, [pc, #164]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7fe ffd2 	bl	8007ee2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fa06 	bl	8009350 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f44:	e042      	b.n	8008fcc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f46:	4b24      	ldr	r3, [pc, #144]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d02a      	beq.n	8008faa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7fe ffc0 	bl	8007ee2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f62:	4b1d      	ldr	r3, [pc, #116]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fe ff99 	bl	8007eaa <USBD_SetClassConfig>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00f      	beq.n	8008fa2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f918 	bl	80091ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7fe ffa5 	bl	8007ee2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fa0:	e014      	b.n	8008fcc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f9d4 	bl	8009350 <USBD_CtlSendStatus>
      break;
 8008fa8:	e010      	b.n	8008fcc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f9d0 	bl	8009350 <USBD_CtlSendStatus>
      break;
 8008fb0:	e00c      	b.n	8008fcc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f900 	bl	80091ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fba:	4b07      	ldr	r3, [pc, #28]	@ (8008fd8 <USBD_SetConfig+0x150>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7fe ff8e 	bl	8007ee2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fca:	bf00      	nop
  }

  return ret;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	200013c4 	.word	0x200013c4

08008fdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	88db      	ldrh	r3, [r3, #6]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d004      	beq.n	8008ff8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f8e2 	bl	80091ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ff6:	e023      	b.n	8009040 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	dc02      	bgt.n	800900a <USBD_GetConfig+0x2e>
 8009004:	2b00      	cmp	r3, #0
 8009006:	dc03      	bgt.n	8009010 <USBD_GetConfig+0x34>
 8009008:	e015      	b.n	8009036 <USBD_GetConfig+0x5a>
 800900a:	2b03      	cmp	r3, #3
 800900c:	d00b      	beq.n	8009026 <USBD_GetConfig+0x4a>
 800900e:	e012      	b.n	8009036 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3308      	adds	r3, #8
 800901a:	2201      	movs	r2, #1
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f93c 	bl	800929c <USBD_CtlSendData>
        break;
 8009024:	e00c      	b.n	8009040 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3304      	adds	r3, #4
 800902a:	2201      	movs	r2, #1
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f934 	bl	800929c <USBD_CtlSendData>
        break;
 8009034:	e004      	b.n	8009040 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f8be 	bl	80091ba <USBD_CtlError>
        break;
 800903e:	bf00      	nop
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009058:	b2db      	uxtb	r3, r3
 800905a:	3b01      	subs	r3, #1
 800905c:	2b02      	cmp	r3, #2
 800905e:	d81e      	bhi.n	800909e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	88db      	ldrh	r3, [r3, #6]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d004      	beq.n	8009072 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f8a5 	bl	80091ba <USBD_CtlError>
        break;
 8009070:	e01a      	b.n	80090a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800907e:	2b00      	cmp	r3, #0
 8009080:	d005      	beq.n	800908e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f043 0202 	orr.w	r2, r3, #2
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	330c      	adds	r3, #12
 8009092:	2202      	movs	r2, #2
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f900 	bl	800929c <USBD_CtlSendData>
      break;
 800909c:	e004      	b.n	80090a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f88a 	bl	80091ba <USBD_CtlError>
      break;
 80090a6:	bf00      	nop
  }
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d107      	bne.n	80090d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f940 	bl	8009350 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80090d0:	e013      	b.n	80090fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	885b      	ldrh	r3, [r3, #2]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d10b      	bne.n	80090f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	889b      	ldrh	r3, [r3, #4]
 80090de:	0a1b      	lsrs	r3, r3, #8
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f930 	bl	8009350 <USBD_CtlSendStatus>
}
 80090f0:	e003      	b.n	80090fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f860 	bl	80091ba <USBD_CtlError>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009112:	b2db      	uxtb	r3, r3
 8009114:	3b01      	subs	r3, #1
 8009116:	2b02      	cmp	r3, #2
 8009118:	d80b      	bhi.n	8009132 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	885b      	ldrh	r3, [r3, #2]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d10c      	bne.n	800913c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f910 	bl	8009350 <USBD_CtlSendStatus>
      }
      break;
 8009130:	e004      	b.n	800913c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f840 	bl	80091ba <USBD_CtlError>
      break;
 800913a:	e000      	b.n	800913e <USBD_ClrFeature+0x3c>
      break;
 800913c:	bf00      	nop
  }
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3301      	adds	r3, #1
 800916e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff fa40 	bl	80085f6 <SWAPBYTE>
 8009176:	4603      	mov	r3, r0
 8009178:	461a      	mov	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3301      	adds	r3, #1
 8009182:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3301      	adds	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7ff fa33 	bl	80085f6 <SWAPBYTE>
 8009190:	4603      	mov	r3, r0
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3301      	adds	r3, #1
 800919c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f7ff fa26 	bl	80085f6 <SWAPBYTE>
 80091aa:	4603      	mov	r3, r0
 80091ac:	461a      	mov	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	80da      	strh	r2, [r3, #6]
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091c4:	2180      	movs	r1, #128	@ 0x80
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fd00 	bl	8009bcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091cc:	2100      	movs	r1, #0
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fcfc 	bl	8009bcc <USBD_LL_StallEP>
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d036      	beq.n	8009260 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091f6:	6938      	ldr	r0, [r7, #16]
 80091f8:	f000 f836 	bl	8009268 <USBD_GetLen>
 80091fc:	4603      	mov	r3, r0
 80091fe:	3301      	adds	r3, #1
 8009200:	b29b      	uxth	r3, r3
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	b29a      	uxth	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	4413      	add	r3, r2
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	701a      	strb	r2, [r3, #0]
  idx++;
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	3301      	adds	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4413      	add	r3, r2
 8009222:	2203      	movs	r2, #3
 8009224:	701a      	strb	r2, [r3, #0]
  idx++;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	3301      	adds	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800922c:	e013      	b.n	8009256 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	4413      	add	r3, r2
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	7812      	ldrb	r2, [r2, #0]
 8009238:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	3301      	adds	r3, #1
 800923e:	613b      	str	r3, [r7, #16]
    idx++;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	3301      	adds	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	4413      	add	r3, r2
 800924c:	2200      	movs	r2, #0
 800924e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	3301      	adds	r3, #1
 8009254:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e7      	bne.n	800922e <USBD_GetString+0x52>
 800925e:	e000      	b.n	8009262 <USBD_GetString+0x86>
    return;
 8009260:	bf00      	nop
  }
}
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009278:	e005      	b.n	8009286 <USBD_GetLen+0x1e>
  {
    len++;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	3301      	adds	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	3301      	adds	r3, #1
 8009284:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f5      	bne.n	800927a <USBD_GetLen+0x12>
  }

  return len;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	2100      	movs	r1, #0
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 fd0b 	bl	8009cde <USBD_LL_Transmit>

  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	2100      	movs	r1, #0
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fcfa 	bl	8009cde <USBD_LL_Transmit>

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2203      	movs	r2, #3
 8009304:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	2100      	movs	r1, #0
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 fcfe 	bl	8009d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	2100      	movs	r1, #0
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 fced 	bl	8009d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2204      	movs	r2, #4
 800935c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009360:	2300      	movs	r3, #0
 8009362:	2200      	movs	r2, #0
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fcb9 	bl	8009cde <USBD_LL_Transmit>

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2205      	movs	r2, #5
 8009382:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009386:	2300      	movs	r3, #0
 8009388:	2200      	movs	r2, #0
 800938a:	2100      	movs	r1, #0
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fcc7 	bl	8009d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093a0:	2200      	movs	r2, #0
 80093a2:	4912      	ldr	r1, [pc, #72]	@ (80093ec <MX_USB_DEVICE_Init+0x50>)
 80093a4:	4812      	ldr	r0, [pc, #72]	@ (80093f0 <MX_USB_DEVICE_Init+0x54>)
 80093a6:	f7fe fd03 	bl	8007db0 <USBD_Init>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093b0:	f7f7 fa70 	bl	8000894 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093b4:	490f      	ldr	r1, [pc, #60]	@ (80093f4 <MX_USB_DEVICE_Init+0x58>)
 80093b6:	480e      	ldr	r0, [pc, #56]	@ (80093f0 <MX_USB_DEVICE_Init+0x54>)
 80093b8:	f7fe fd2a 	bl	8007e10 <USBD_RegisterClass>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093c2:	f7f7 fa67 	bl	8000894 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093c6:	490c      	ldr	r1, [pc, #48]	@ (80093f8 <MX_USB_DEVICE_Init+0x5c>)
 80093c8:	4809      	ldr	r0, [pc, #36]	@ (80093f0 <MX_USB_DEVICE_Init+0x54>)
 80093ca:	f7fe fc21 	bl	8007c10 <USBD_CDC_RegisterInterface>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093d4:	f7f7 fa5e 	bl	8000894 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093d8:	4805      	ldr	r0, [pc, #20]	@ (80093f0 <MX_USB_DEVICE_Init+0x54>)
 80093da:	f7fe fd4f 	bl	8007e7c <USBD_Start>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093e4:	f7f7 fa56 	bl	8000894 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093e8:	bf00      	nop
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	200000ac 	.word	0x200000ac
 80093f0:	200013c8 	.word	0x200013c8
 80093f4:	20000018 	.word	0x20000018
 80093f8:	20000098 	.word	0x20000098

080093fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009400:	2200      	movs	r2, #0
 8009402:	4905      	ldr	r1, [pc, #20]	@ (8009418 <CDC_Init_FS+0x1c>)
 8009404:	4805      	ldr	r0, [pc, #20]	@ (800941c <CDC_Init_FS+0x20>)
 8009406:	f7fe fc1d 	bl	8007c44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800940a:	4905      	ldr	r1, [pc, #20]	@ (8009420 <CDC_Init_FS+0x24>)
 800940c:	4803      	ldr	r0, [pc, #12]	@ (800941c <CDC_Init_FS+0x20>)
 800940e:	f7fe fc3b 	bl	8007c88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009412:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009414:	4618      	mov	r0, r3
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20001ea4 	.word	0x20001ea4
 800941c:	200013c8 	.word	0x200013c8
 8009420:	200016a4 	.word	0x200016a4

08009424 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009428:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800942a:	4618      	mov	r0, r3
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	71fb      	strb	r3, [r7, #7]
 8009440:	4613      	mov	r3, r2
 8009442:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009444:	79fb      	ldrb	r3, [r7, #7]
 8009446:	2b23      	cmp	r3, #35	@ 0x23
 8009448:	d84a      	bhi.n	80094e0 <CDC_Control_FS+0xac>
 800944a:	a201      	add	r2, pc, #4	@ (adr r2, 8009450 <CDC_Control_FS+0x1c>)
 800944c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009450:	080094e1 	.word	0x080094e1
 8009454:	080094e1 	.word	0x080094e1
 8009458:	080094e1 	.word	0x080094e1
 800945c:	080094e1 	.word	0x080094e1
 8009460:	080094e1 	.word	0x080094e1
 8009464:	080094e1 	.word	0x080094e1
 8009468:	080094e1 	.word	0x080094e1
 800946c:	080094e1 	.word	0x080094e1
 8009470:	080094e1 	.word	0x080094e1
 8009474:	080094e1 	.word	0x080094e1
 8009478:	080094e1 	.word	0x080094e1
 800947c:	080094e1 	.word	0x080094e1
 8009480:	080094e1 	.word	0x080094e1
 8009484:	080094e1 	.word	0x080094e1
 8009488:	080094e1 	.word	0x080094e1
 800948c:	080094e1 	.word	0x080094e1
 8009490:	080094e1 	.word	0x080094e1
 8009494:	080094e1 	.word	0x080094e1
 8009498:	080094e1 	.word	0x080094e1
 800949c:	080094e1 	.word	0x080094e1
 80094a0:	080094e1 	.word	0x080094e1
 80094a4:	080094e1 	.word	0x080094e1
 80094a8:	080094e1 	.word	0x080094e1
 80094ac:	080094e1 	.word	0x080094e1
 80094b0:	080094e1 	.word	0x080094e1
 80094b4:	080094e1 	.word	0x080094e1
 80094b8:	080094e1 	.word	0x080094e1
 80094bc:	080094e1 	.word	0x080094e1
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	080094e1 	.word	0x080094e1
 80094c8:	080094e1 	.word	0x080094e1
 80094cc:	080094e1 	.word	0x080094e1
 80094d0:	080094e1 	.word	0x080094e1
 80094d4:	080094e1 	.word	0x080094e1
 80094d8:	080094e1 	.word	0x080094e1
 80094dc:	080094e1 	.word	0x080094e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094e0:	bf00      	nop
  }

  return (USBD_OK);
 80094e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_CdcRxBuffer_FS_cnt = *Len;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009528 <CDC_Receive_FS+0x38>)
 8009500:	6013      	str	r3, [r2, #0]
  strncpy(USB_CdcRxBuffer_FS, Buf, *Len);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4808      	ldr	r0, [pc, #32]	@ (800952c <CDC_Receive_FS+0x3c>)
 800950c:	f000 fcba 	bl	8009e84 <strncpy>

  // memcpy((uint8_t *) USB_CdcRxBuffer_FS, (uint8_t *) Buf, sizeof(*Len));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4807      	ldr	r0, [pc, #28]	@ (8009530 <CDC_Receive_FS+0x40>)
 8009514:	f7fe fbb8 	bl	8007c88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009518:	4805      	ldr	r0, [pc, #20]	@ (8009530 <CDC_Receive_FS+0x40>)
 800951a:	f7fe fc13 	bl	8007d44 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800951e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20000bb4 	.word	0x20000bb4
 800952c:	200003b4 	.word	0x200003b4
 8009530:	200013c8 	.word	0x200013c8

08009534 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  uint32_t startTick = HAL_GetTick();
 8009544:	f7f7 ffe4 	bl	8001510 <HAL_GetTick>
 8009548:	6138      	str	r0, [r7, #16]
  uint32_t TIMEOUT_VALUE = 1U;
 800954a:	2301      	movs	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800954e:	4b14      	ldr	r3, [pc, #80]	@ (80095a0 <CDC_Transmit_FS+0x6c>)
 8009550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009554:	60bb      	str	r3, [r7, #8]
  if (hcdc == NULL)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10b      	bne.n	8009574 <CDC_Transmit_FS+0x40>
  {
    return USBD_FAIL;
 800955c:	2303      	movs	r3, #3
 800955e:	e01a      	b.n	8009596 <CDC_Transmit_FS+0x62>
  }

  while (hcdc->TxState != 0)
  {
    if ((HAL_GetTick() - startTick) > TIMEOUT_VALUE)
 8009560:	f7f7 ffd6 	bl	8001510 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	429a      	cmp	r2, r3
 800956e:	d201      	bcs.n	8009574 <CDC_Transmit_FS+0x40>
    {
      return USBD_FAIL;
 8009570:	2303      	movs	r3, #3
 8009572:	e010      	b.n	8009596 <CDC_Transmit_FS+0x62>
  while (hcdc->TxState != 0)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f0      	bne.n	8009560 <CDC_Transmit_FS+0x2c>
    }
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800957e:	887b      	ldrh	r3, [r7, #2]
 8009580:	461a      	mov	r2, r3
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4806      	ldr	r0, [pc, #24]	@ (80095a0 <CDC_Transmit_FS+0x6c>)
 8009586:	f7fe fb5d 	bl	8007c44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800958a:	4805      	ldr	r0, [pc, #20]	@ (80095a0 <CDC_Transmit_FS+0x6c>)
 800958c:	f7fe fb9a 	bl	8007cc4 <USBD_CDC_TransmitPacket>
 8009590:	4603      	mov	r3, r0
 8009592:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 7 */
  return result;
 8009594:	7dfb      	ldrb	r3, [r7, #23]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	200013c8 	.word	0x200013c8

080095a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80095b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2212      	movs	r2, #18
 80095d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095da:	4b03      	ldr	r3, [pc, #12]	@ (80095e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	200000c8 	.word	0x200000c8

080095ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	2204      	movs	r2, #4
 80095fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095fe:	4b03      	ldr	r3, [pc, #12]	@ (800960c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	200000dc 	.word	0x200000dc

08009610 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	6039      	str	r1, [r7, #0]
 800961a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d105      	bne.n	800962e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4907      	ldr	r1, [pc, #28]	@ (8009644 <USBD_FS_ProductStrDescriptor+0x34>)
 8009626:	4808      	ldr	r0, [pc, #32]	@ (8009648 <USBD_FS_ProductStrDescriptor+0x38>)
 8009628:	f7ff fdd8 	bl	80091dc <USBD_GetString>
 800962c:	e004      	b.n	8009638 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	4904      	ldr	r1, [pc, #16]	@ (8009644 <USBD_FS_ProductStrDescriptor+0x34>)
 8009632:	4805      	ldr	r0, [pc, #20]	@ (8009648 <USBD_FS_ProductStrDescriptor+0x38>)
 8009634:	f7ff fdd2 	bl	80091dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009638:	4b02      	ldr	r3, [pc, #8]	@ (8009644 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	200026a4 	.word	0x200026a4
 8009648:	0800aa10 	.word	0x0800aa10

0800964c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	6039      	str	r1, [r7, #0]
 8009656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	4904      	ldr	r1, [pc, #16]	@ (800966c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800965c:	4804      	ldr	r0, [pc, #16]	@ (8009670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800965e:	f7ff fdbd 	bl	80091dc <USBD_GetString>
  return USBD_StrDesc;
 8009662:	4b02      	ldr	r3, [pc, #8]	@ (800966c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	200026a4 	.word	0x200026a4
 8009670:	0800aa28 	.word	0x0800aa28

08009674 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	221a      	movs	r2, #26
 8009684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009686:	f000 f843 	bl	8009710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800968a:	4b02      	ldr	r3, [pc, #8]	@ (8009694 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	200000e0 	.word	0x200000e0

08009698 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	4907      	ldr	r1, [pc, #28]	@ (80096cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80096ae:	4808      	ldr	r0, [pc, #32]	@ (80096d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096b0:	f7ff fd94 	bl	80091dc <USBD_GetString>
 80096b4:	e004      	b.n	80096c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	4904      	ldr	r1, [pc, #16]	@ (80096cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80096ba:	4805      	ldr	r0, [pc, #20]	@ (80096d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096bc:	f7ff fd8e 	bl	80091dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80096c0:	4b02      	ldr	r3, [pc, #8]	@ (80096cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	200026a4 	.word	0x200026a4
 80096d0:	0800aa3c 	.word	0x0800aa3c

080096d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d105      	bne.n	80096f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	4907      	ldr	r1, [pc, #28]	@ (8009708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096ea:	4808      	ldr	r0, [pc, #32]	@ (800970c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096ec:	f7ff fd76 	bl	80091dc <USBD_GetString>
 80096f0:	e004      	b.n	80096fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	4904      	ldr	r1, [pc, #16]	@ (8009708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096f6:	4805      	ldr	r0, [pc, #20]	@ (800970c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096f8:	f7ff fd70 	bl	80091dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80096fc:	4b02      	ldr	r3, [pc, #8]	@ (8009708 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	200026a4 	.word	0x200026a4
 800970c:	0800aa48 	.word	0x0800aa48

08009710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009716:	4b0f      	ldr	r3, [pc, #60]	@ (8009754 <Get_SerialNum+0x44>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800971c:	4b0e      	ldr	r3, [pc, #56]	@ (8009758 <Get_SerialNum+0x48>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009722:	4b0e      	ldr	r3, [pc, #56]	@ (800975c <Get_SerialNum+0x4c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4413      	add	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d009      	beq.n	800974a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009736:	2208      	movs	r2, #8
 8009738:	4909      	ldr	r1, [pc, #36]	@ (8009760 <Get_SerialNum+0x50>)
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 f814 	bl	8009768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009740:	2204      	movs	r2, #4
 8009742:	4908      	ldr	r1, [pc, #32]	@ (8009764 <Get_SerialNum+0x54>)
 8009744:	68b8      	ldr	r0, [r7, #8]
 8009746:	f000 f80f 	bl	8009768 <IntToUnicode>
  }
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	1fff7a10 	.word	0x1fff7a10
 8009758:	1fff7a14 	.word	0x1fff7a14
 800975c:	1fff7a18 	.word	0x1fff7a18
 8009760:	200000e2 	.word	0x200000e2
 8009764:	200000f2 	.word	0x200000f2

08009768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800977a:	2300      	movs	r3, #0
 800977c:	75fb      	strb	r3, [r7, #23]
 800977e:	e027      	b.n	80097d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	0f1b      	lsrs	r3, r3, #28
 8009784:	2b09      	cmp	r3, #9
 8009786:	d80b      	bhi.n	80097a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	0f1b      	lsrs	r3, r3, #28
 800978c:	b2da      	uxtb	r2, r3
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	4619      	mov	r1, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	440b      	add	r3, r1
 8009798:	3230      	adds	r2, #48	@ 0x30
 800979a:	b2d2      	uxtb	r2, r2
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e00a      	b.n	80097b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	0f1b      	lsrs	r3, r3, #28
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	4619      	mov	r1, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	440b      	add	r3, r1
 80097b0:	3237      	adds	r2, #55	@ 0x37
 80097b2:	b2d2      	uxtb	r2, r2
 80097b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	011b      	lsls	r3, r3, #4
 80097ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	3301      	adds	r3, #1
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	4413      	add	r3, r2
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	3301      	adds	r3, #1
 80097ce:	75fb      	strb	r3, [r7, #23]
 80097d0:	7dfa      	ldrb	r2, [r7, #23]
 80097d2:	79fb      	ldrb	r3, [r7, #7]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d3d3      	bcc.n	8009780 <IntToUnicode+0x18>
  }
}
 80097d8:	bf00      	nop
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
	...

080097e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08a      	sub	sp, #40	@ 0x28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097f0:	f107 0314 	add.w	r3, r7, #20
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	605a      	str	r2, [r3, #4]
 80097fa:	609a      	str	r2, [r3, #8]
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009808:	d13a      	bne.n	8009880 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800980a:	2300      	movs	r3, #0
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	4b1e      	ldr	r3, [pc, #120]	@ (8009888 <HAL_PCD_MspInit+0xa0>)
 8009810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009812:	4a1d      	ldr	r2, [pc, #116]	@ (8009888 <HAL_PCD_MspInit+0xa0>)
 8009814:	f043 0301 	orr.w	r3, r3, #1
 8009818:	6313      	str	r3, [r2, #48]	@ 0x30
 800981a:	4b1b      	ldr	r3, [pc, #108]	@ (8009888 <HAL_PCD_MspInit+0xa0>)
 800981c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8009826:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800982a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800982c:	2302      	movs	r3, #2
 800982e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009830:	2300      	movs	r3, #0
 8009832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009834:	2303      	movs	r3, #3
 8009836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009838:	230a      	movs	r3, #10
 800983a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800983c:	f107 0314 	add.w	r3, r7, #20
 8009840:	4619      	mov	r1, r3
 8009842:	4812      	ldr	r0, [pc, #72]	@ (800988c <HAL_PCD_MspInit+0xa4>)
 8009844:	f7f8 fbc2 	bl	8001fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009848:	4b0f      	ldr	r3, [pc, #60]	@ (8009888 <HAL_PCD_MspInit+0xa0>)
 800984a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984c:	4a0e      	ldr	r2, [pc, #56]	@ (8009888 <HAL_PCD_MspInit+0xa0>)
 800984e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009852:	6353      	str	r3, [r2, #52]	@ 0x34
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	4b0b      	ldr	r3, [pc, #44]	@ (8009888 <HAL_PCD_MspInit+0xa0>)
 800985a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800985c:	4a0a      	ldr	r2, [pc, #40]	@ (8009888 <HAL_PCD_MspInit+0xa0>)
 800985e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009862:	6453      	str	r3, [r2, #68]	@ 0x44
 8009864:	4b08      	ldr	r3, [pc, #32]	@ (8009888 <HAL_PCD_MspInit+0xa0>)
 8009866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009870:	2200      	movs	r2, #0
 8009872:	2100      	movs	r1, #0
 8009874:	2043      	movs	r0, #67	@ 0x43
 8009876:	f7f7 ff6c 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800987a:	2043      	movs	r0, #67	@ 0x43
 800987c:	f7f7 ff85 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009880:	bf00      	nop
 8009882:	3728      	adds	r7, #40	@ 0x28
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	40023800 	.word	0x40023800
 800988c:	40020000 	.word	0x40020000

08009890 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f7fe fb35 	bl	8007f16 <USBD_LL_SetupStage>
}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80098c6:	78fa      	ldrb	r2, [r7, #3]
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	440b      	add	r3, r1
 80098d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	4619      	mov	r1, r3
 80098de:	f7fe fb6f 	bl	8007fc0 <USBD_LL_DataOutStage>
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80098fc:	78fa      	ldrb	r2, [r7, #3]
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	4613      	mov	r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	440b      	add	r3, r1
 800990a:	3320      	adds	r3, #32
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	4619      	mov	r1, r3
 8009912:	f7fe fc08 	bl	8008126 <USBD_LL_DataInStage>
}
 8009916:	bf00      	nop
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fd42 	bl	80083b6 <USBD_LL_SOF>
}
 8009932:	bf00      	nop
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009942:	2301      	movs	r3, #1
 8009944:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	79db      	ldrb	r3, [r3, #7]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
 8009952:	e008      	b.n	8009966 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	79db      	ldrb	r3, [r3, #7]
 8009958:	2b02      	cmp	r3, #2
 800995a:	d102      	bne.n	8009962 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800995c:	2301      	movs	r3, #1
 800995e:	73fb      	strb	r3, [r7, #15]
 8009960:	e001      	b.n	8009966 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009962:	f7f6 ff97 	bl	8000894 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800996c:	7bfa      	ldrb	r2, [r7, #15]
 800996e:	4611      	mov	r1, r2
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fcdc 	bl	800832e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800997c:	4618      	mov	r0, r3
 800997e:	f7fe fc84 	bl	800828a <USBD_LL_Reset>
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fcd7 	bl	800834e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	6812      	ldr	r2, [r2, #0]
 80099ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099b2:	f043 0301 	orr.w	r3, r3, #1
 80099b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7adb      	ldrb	r3, [r3, #11]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d005      	beq.n	80099cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099c0:	4b04      	ldr	r3, [pc, #16]	@ (80099d4 <HAL_PCD_SuspendCallback+0x48>)
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	4a03      	ldr	r2, [pc, #12]	@ (80099d4 <HAL_PCD_SuspendCallback+0x48>)
 80099c6:	f043 0306 	orr.w	r3, r3, #6
 80099ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	e000ed00 	.word	0xe000ed00

080099d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fccd 	bl	8008386 <USBD_LL_Resume>
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a06:	78fa      	ldrb	r2, [r7, #3]
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fe fd25 	bl	800845a <USBD_LL_IsoOUTIncomplete>
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a2a:	78fa      	ldrb	r2, [r7, #3]
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe fce1 	bl	80083f6 <USBD_LL_IsoINIncomplete>
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fd37 	bl	80084be <USBD_LL_DevConnected>
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe fd34 	bl	80084d4 <USBD_LL_DevDisconnected>
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d13c      	bne.n	8009afe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a84:	4a20      	ldr	r2, [pc, #128]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009a90:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a94:	4b1c      	ldr	r3, [pc, #112]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009a96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009a9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009a9e:	2204      	movs	r2, #4
 8009aa0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009aa2:	4b19      	ldr	r3, [pc, #100]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009aa8:	4b17      	ldr	r3, [pc, #92]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009aae:	4b16      	ldr	r3, [pc, #88]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009ab4:	4b14      	ldr	r3, [pc, #80]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009aba:	4b13      	ldr	r3, [pc, #76]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ac0:	4b11      	ldr	r3, [pc, #68]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ac6:	4b10      	ldr	r3, [pc, #64]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009acc:	4b0e      	ldr	r3, [pc, #56]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ad2:	480d      	ldr	r0, [pc, #52]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009ad4:	f7f8 fc59 	bl	800238a <HAL_PCD_Init>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ade:	f7f6 fed9 	bl	8000894 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ae2:	2180      	movs	r1, #128	@ 0x80
 8009ae4:	4808      	ldr	r0, [pc, #32]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009ae6:	f7f9 fe84 	bl	80037f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009aea:	2240      	movs	r2, #64	@ 0x40
 8009aec:	2100      	movs	r1, #0
 8009aee:	4806      	ldr	r0, [pc, #24]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009af0:	f7f9 fe38 	bl	8003764 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009af4:	2280      	movs	r2, #128	@ 0x80
 8009af6:	2101      	movs	r1, #1
 8009af8:	4803      	ldr	r0, [pc, #12]	@ (8009b08 <USBD_LL_Init+0x94>)
 8009afa:	f7f9 fe33 	bl	8003764 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	200028a4 	.word	0x200028a4

08009b0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7f8 fd40 	bl	80025a8 <HAL_PCD_Start>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f942 	bl	8009db8 <USBD_Get_USB_Status>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	461a      	mov	r2, r3
 8009b50:	4603      	mov	r3, r0
 8009b52:	70fb      	strb	r3, [r7, #3]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70bb      	strb	r3, [r7, #2]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b6a:	78bb      	ldrb	r3, [r7, #2]
 8009b6c:	883a      	ldrh	r2, [r7, #0]
 8009b6e:	78f9      	ldrb	r1, [r7, #3]
 8009b70:	f7f9 fa14 	bl	8002f9c <HAL_PCD_EP_Open>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f91c 	bl	8009db8 <USBD_Get_USB_Status>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	460b      	mov	r3, r1
 8009b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7f9 fa5d 	bl	800306c <HAL_PCD_EP_Close>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 f8fd 	bl	8009db8 <USBD_Get_USB_Status>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009be6:	78fa      	ldrb	r2, [r7, #3]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7f9 fb15 	bl	800321a <HAL_PCD_EP_SetStall>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f8de 	bl	8009db8 <USBD_Get_USB_Status>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	460b      	mov	r3, r1
 8009c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c24:	78fa      	ldrb	r2, [r7, #3]
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7f9 fb59 	bl	80032e0 <HAL_PCD_EP_ClrStall>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 f8bf 	bl	8009db8 <USBD_Get_USB_Status>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da0b      	bge.n	8009c7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	440b      	add	r3, r1
 8009c76:	3316      	adds	r3, #22
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	e00b      	b.n	8009c94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c82:	68f9      	ldr	r1, [r7, #12]
 8009c84:	4613      	mov	r3, r2
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	4413      	add	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	440b      	add	r3, r1
 8009c8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009c92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f9 f948 	bl	8002f54 <HAL_PCD_SetAddress>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 f874 	bl	8009db8 <USBD_Get_USB_Status>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b086      	sub	sp, #24
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	603b      	str	r3, [r7, #0]
 8009cea:	460b      	mov	r3, r1
 8009cec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009cfc:	7af9      	ldrb	r1, [r7, #11]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	f7f9 fa50 	bl	80031a6 <HAL_PCD_EP_Transmit>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f853 	bl	8009db8 <USBD_Get_USB_Status>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d16:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	607a      	str	r2, [r7, #4]
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d3e:	7af9      	ldrb	r1, [r7, #11]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	f7f9 f9dc 	bl	8003100 <HAL_PCD_EP_Receive>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f832 	bl	8009db8 <USBD_Get_USB_Status>
 8009d54:	4603      	mov	r3, r0
 8009d56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d74:	78fa      	ldrb	r2, [r7, #3]
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7f9 f9fc 	bl	8003176 <HAL_PCD_EP_GetRxCount>
 8009d7e:	4603      	mov	r3, r0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d90:	4b03      	ldr	r3, [pc, #12]	@ (8009da0 <USBD_static_malloc+0x18>)
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	20002d88 	.word	0x20002d88

08009da4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]

}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d817      	bhi.n	8009dfc <USBD_Get_USB_Status+0x44>
 8009dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <USBD_Get_USB_Status+0x1c>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009de5 	.word	0x08009de5
 8009dd8:	08009deb 	.word	0x08009deb
 8009ddc:	08009df1 	.word	0x08009df1
 8009de0:	08009df7 	.word	0x08009df7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73fb      	strb	r3, [r7, #15]
    break;
 8009de8:	e00b      	b.n	8009e02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dea:	2303      	movs	r3, #3
 8009dec:	73fb      	strb	r3, [r7, #15]
    break;
 8009dee:	e008      	b.n	8009e02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009df0:	2301      	movs	r3, #1
 8009df2:	73fb      	strb	r3, [r7, #15]
    break;
 8009df4:	e005      	b.n	8009e02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009df6:	2303      	movs	r3, #3
 8009df8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dfa:	e002      	b.n	8009e02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009e00:	bf00      	nop
  }
  return usb_status;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <siprintf>:
 8009e10:	b40e      	push	{r1, r2, r3}
 8009e12:	b500      	push	{lr}
 8009e14:	b09c      	sub	sp, #112	@ 0x70
 8009e16:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e18:	9002      	str	r0, [sp, #8]
 8009e1a:	9006      	str	r0, [sp, #24]
 8009e1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e20:	4809      	ldr	r0, [pc, #36]	@ (8009e48 <siprintf+0x38>)
 8009e22:	9107      	str	r1, [sp, #28]
 8009e24:	9104      	str	r1, [sp, #16]
 8009e26:	4909      	ldr	r1, [pc, #36]	@ (8009e4c <siprintf+0x3c>)
 8009e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e2c:	9105      	str	r1, [sp, #20]
 8009e2e:	6800      	ldr	r0, [r0, #0]
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	a902      	add	r1, sp, #8
 8009e34:	f000 f9ba 	bl	800a1ac <_svfiprintf_r>
 8009e38:	9b02      	ldr	r3, [sp, #8]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	701a      	strb	r2, [r3, #0]
 8009e3e:	b01c      	add	sp, #112	@ 0x70
 8009e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e44:	b003      	add	sp, #12
 8009e46:	4770      	bx	lr
 8009e48:	200000fc 	.word	0x200000fc
 8009e4c:	ffff0208 	.word	0xffff0208

08009e50 <memset>:
 8009e50:	4402      	add	r2, r0
 8009e52:	4603      	mov	r3, r0
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d100      	bne.n	8009e5a <memset+0xa>
 8009e58:	4770      	bx	lr
 8009e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e5e:	e7f9      	b.n	8009e54 <memset+0x4>

08009e60 <strncmp>:
 8009e60:	b510      	push	{r4, lr}
 8009e62:	b16a      	cbz	r2, 8009e80 <strncmp+0x20>
 8009e64:	3901      	subs	r1, #1
 8009e66:	1884      	adds	r4, r0, r2
 8009e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d103      	bne.n	8009e7c <strncmp+0x1c>
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d001      	beq.n	8009e7c <strncmp+0x1c>
 8009e78:	2a00      	cmp	r2, #0
 8009e7a:	d1f5      	bne.n	8009e68 <strncmp+0x8>
 8009e7c:	1ad0      	subs	r0, r2, r3
 8009e7e:	bd10      	pop	{r4, pc}
 8009e80:	4610      	mov	r0, r2
 8009e82:	e7fc      	b.n	8009e7e <strncmp+0x1e>

08009e84 <strncpy>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	3901      	subs	r1, #1
 8009e88:	4603      	mov	r3, r0
 8009e8a:	b132      	cbz	r2, 8009e9a <strncpy+0x16>
 8009e8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e90:	f803 4b01 	strb.w	r4, [r3], #1
 8009e94:	3a01      	subs	r2, #1
 8009e96:	2c00      	cmp	r4, #0
 8009e98:	d1f7      	bne.n	8009e8a <strncpy+0x6>
 8009e9a:	441a      	add	r2, r3
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d100      	bne.n	8009ea4 <strncpy+0x20>
 8009ea2:	bd10      	pop	{r4, pc}
 8009ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea8:	e7f9      	b.n	8009e9e <strncpy+0x1a>
	...

08009eac <__errno>:
 8009eac:	4b01      	ldr	r3, [pc, #4]	@ (8009eb4 <__errno+0x8>)
 8009eae:	6818      	ldr	r0, [r3, #0]
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	200000fc 	.word	0x200000fc

08009eb8 <__libc_init_array>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	4d0d      	ldr	r5, [pc, #52]	@ (8009ef0 <__libc_init_array+0x38>)
 8009ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8009ef4 <__libc_init_array+0x3c>)
 8009ebe:	1b64      	subs	r4, r4, r5
 8009ec0:	10a4      	asrs	r4, r4, #2
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	42a6      	cmp	r6, r4
 8009ec6:	d109      	bne.n	8009edc <__libc_init_array+0x24>
 8009ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8009ef8 <__libc_init_array+0x40>)
 8009eca:	4c0c      	ldr	r4, [pc, #48]	@ (8009efc <__libc_init_array+0x44>)
 8009ecc:	f000 fc66 	bl	800a79c <_init>
 8009ed0:	1b64      	subs	r4, r4, r5
 8009ed2:	10a4      	asrs	r4, r4, #2
 8009ed4:	2600      	movs	r6, #0
 8009ed6:	42a6      	cmp	r6, r4
 8009ed8:	d105      	bne.n	8009ee6 <__libc_init_array+0x2e>
 8009eda:	bd70      	pop	{r4, r5, r6, pc}
 8009edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee0:	4798      	blx	r3
 8009ee2:	3601      	adds	r6, #1
 8009ee4:	e7ee      	b.n	8009ec4 <__libc_init_array+0xc>
 8009ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eea:	4798      	blx	r3
 8009eec:	3601      	adds	r6, #1
 8009eee:	e7f2      	b.n	8009ed6 <__libc_init_array+0x1e>
 8009ef0:	0800aab4 	.word	0x0800aab4
 8009ef4:	0800aab4 	.word	0x0800aab4
 8009ef8:	0800aab4 	.word	0x0800aab4
 8009efc:	0800aab8 	.word	0x0800aab8

08009f00 <__retarget_lock_acquire_recursive>:
 8009f00:	4770      	bx	lr

08009f02 <__retarget_lock_release_recursive>:
 8009f02:	4770      	bx	lr

08009f04 <_free_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4605      	mov	r5, r0
 8009f08:	2900      	cmp	r1, #0
 8009f0a:	d041      	beq.n	8009f90 <_free_r+0x8c>
 8009f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f10:	1f0c      	subs	r4, r1, #4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	bfb8      	it	lt
 8009f16:	18e4      	addlt	r4, r4, r3
 8009f18:	f000 f8e0 	bl	800a0dc <__malloc_lock>
 8009f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009f94 <_free_r+0x90>)
 8009f1e:	6813      	ldr	r3, [r2, #0]
 8009f20:	b933      	cbnz	r3, 8009f30 <_free_r+0x2c>
 8009f22:	6063      	str	r3, [r4, #4]
 8009f24:	6014      	str	r4, [r2, #0]
 8009f26:	4628      	mov	r0, r5
 8009f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f2c:	f000 b8dc 	b.w	800a0e8 <__malloc_unlock>
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d908      	bls.n	8009f46 <_free_r+0x42>
 8009f34:	6820      	ldr	r0, [r4, #0]
 8009f36:	1821      	adds	r1, r4, r0
 8009f38:	428b      	cmp	r3, r1
 8009f3a:	bf01      	itttt	eq
 8009f3c:	6819      	ldreq	r1, [r3, #0]
 8009f3e:	685b      	ldreq	r3, [r3, #4]
 8009f40:	1809      	addeq	r1, r1, r0
 8009f42:	6021      	streq	r1, [r4, #0]
 8009f44:	e7ed      	b.n	8009f22 <_free_r+0x1e>
 8009f46:	461a      	mov	r2, r3
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	b10b      	cbz	r3, 8009f50 <_free_r+0x4c>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d9fa      	bls.n	8009f46 <_free_r+0x42>
 8009f50:	6811      	ldr	r1, [r2, #0]
 8009f52:	1850      	adds	r0, r2, r1
 8009f54:	42a0      	cmp	r0, r4
 8009f56:	d10b      	bne.n	8009f70 <_free_r+0x6c>
 8009f58:	6820      	ldr	r0, [r4, #0]
 8009f5a:	4401      	add	r1, r0
 8009f5c:	1850      	adds	r0, r2, r1
 8009f5e:	4283      	cmp	r3, r0
 8009f60:	6011      	str	r1, [r2, #0]
 8009f62:	d1e0      	bne.n	8009f26 <_free_r+0x22>
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	6053      	str	r3, [r2, #4]
 8009f6a:	4408      	add	r0, r1
 8009f6c:	6010      	str	r0, [r2, #0]
 8009f6e:	e7da      	b.n	8009f26 <_free_r+0x22>
 8009f70:	d902      	bls.n	8009f78 <_free_r+0x74>
 8009f72:	230c      	movs	r3, #12
 8009f74:	602b      	str	r3, [r5, #0]
 8009f76:	e7d6      	b.n	8009f26 <_free_r+0x22>
 8009f78:	6820      	ldr	r0, [r4, #0]
 8009f7a:	1821      	adds	r1, r4, r0
 8009f7c:	428b      	cmp	r3, r1
 8009f7e:	bf04      	itt	eq
 8009f80:	6819      	ldreq	r1, [r3, #0]
 8009f82:	685b      	ldreq	r3, [r3, #4]
 8009f84:	6063      	str	r3, [r4, #4]
 8009f86:	bf04      	itt	eq
 8009f88:	1809      	addeq	r1, r1, r0
 8009f8a:	6021      	streq	r1, [r4, #0]
 8009f8c:	6054      	str	r4, [r2, #4]
 8009f8e:	e7ca      	b.n	8009f26 <_free_r+0x22>
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	bf00      	nop
 8009f94:	200030ec 	.word	0x200030ec

08009f98 <sbrk_aligned>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8009fd8 <sbrk_aligned+0x40>)
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	6831      	ldr	r1, [r6, #0]
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	b911      	cbnz	r1, 8009faa <sbrk_aligned+0x12>
 8009fa4:	f000 fba6 	bl	800a6f4 <_sbrk_r>
 8009fa8:	6030      	str	r0, [r6, #0]
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 fba1 	bl	800a6f4 <_sbrk_r>
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d103      	bne.n	8009fbe <sbrk_aligned+0x26>
 8009fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8009fba:	4620      	mov	r0, r4
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	1cc4      	adds	r4, r0, #3
 8009fc0:	f024 0403 	bic.w	r4, r4, #3
 8009fc4:	42a0      	cmp	r0, r4
 8009fc6:	d0f8      	beq.n	8009fba <sbrk_aligned+0x22>
 8009fc8:	1a21      	subs	r1, r4, r0
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 fb92 	bl	800a6f4 <_sbrk_r>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d1f2      	bne.n	8009fba <sbrk_aligned+0x22>
 8009fd4:	e7ef      	b.n	8009fb6 <sbrk_aligned+0x1e>
 8009fd6:	bf00      	nop
 8009fd8:	200030e8 	.word	0x200030e8

08009fdc <_malloc_r>:
 8009fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	1ccd      	adds	r5, r1, #3
 8009fe2:	f025 0503 	bic.w	r5, r5, #3
 8009fe6:	3508      	adds	r5, #8
 8009fe8:	2d0c      	cmp	r5, #12
 8009fea:	bf38      	it	cc
 8009fec:	250c      	movcc	r5, #12
 8009fee:	2d00      	cmp	r5, #0
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	db01      	blt.n	8009ff8 <_malloc_r+0x1c>
 8009ff4:	42a9      	cmp	r1, r5
 8009ff6:	d904      	bls.n	800a002 <_malloc_r+0x26>
 8009ff8:	230c      	movs	r3, #12
 8009ffa:	6033      	str	r3, [r6, #0]
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0d8 <_malloc_r+0xfc>
 800a006:	f000 f869 	bl	800a0dc <__malloc_lock>
 800a00a:	f8d8 3000 	ldr.w	r3, [r8]
 800a00e:	461c      	mov	r4, r3
 800a010:	bb44      	cbnz	r4, 800a064 <_malloc_r+0x88>
 800a012:	4629      	mov	r1, r5
 800a014:	4630      	mov	r0, r6
 800a016:	f7ff ffbf 	bl	8009f98 <sbrk_aligned>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	4604      	mov	r4, r0
 800a01e:	d158      	bne.n	800a0d2 <_malloc_r+0xf6>
 800a020:	f8d8 4000 	ldr.w	r4, [r8]
 800a024:	4627      	mov	r7, r4
 800a026:	2f00      	cmp	r7, #0
 800a028:	d143      	bne.n	800a0b2 <_malloc_r+0xd6>
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	d04b      	beq.n	800a0c6 <_malloc_r+0xea>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	4639      	mov	r1, r7
 800a032:	4630      	mov	r0, r6
 800a034:	eb04 0903 	add.w	r9, r4, r3
 800a038:	f000 fb5c 	bl	800a6f4 <_sbrk_r>
 800a03c:	4581      	cmp	r9, r0
 800a03e:	d142      	bne.n	800a0c6 <_malloc_r+0xea>
 800a040:	6821      	ldr	r1, [r4, #0]
 800a042:	1a6d      	subs	r5, r5, r1
 800a044:	4629      	mov	r1, r5
 800a046:	4630      	mov	r0, r6
 800a048:	f7ff ffa6 	bl	8009f98 <sbrk_aligned>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d03a      	beq.n	800a0c6 <_malloc_r+0xea>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	442b      	add	r3, r5
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	f8d8 3000 	ldr.w	r3, [r8]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	bb62      	cbnz	r2, 800a0b8 <_malloc_r+0xdc>
 800a05e:	f8c8 7000 	str.w	r7, [r8]
 800a062:	e00f      	b.n	800a084 <_malloc_r+0xa8>
 800a064:	6822      	ldr	r2, [r4, #0]
 800a066:	1b52      	subs	r2, r2, r5
 800a068:	d420      	bmi.n	800a0ac <_malloc_r+0xd0>
 800a06a:	2a0b      	cmp	r2, #11
 800a06c:	d917      	bls.n	800a09e <_malloc_r+0xc2>
 800a06e:	1961      	adds	r1, r4, r5
 800a070:	42a3      	cmp	r3, r4
 800a072:	6025      	str	r5, [r4, #0]
 800a074:	bf18      	it	ne
 800a076:	6059      	strne	r1, [r3, #4]
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	bf08      	it	eq
 800a07c:	f8c8 1000 	streq.w	r1, [r8]
 800a080:	5162      	str	r2, [r4, r5]
 800a082:	604b      	str	r3, [r1, #4]
 800a084:	4630      	mov	r0, r6
 800a086:	f000 f82f 	bl	800a0e8 <__malloc_unlock>
 800a08a:	f104 000b 	add.w	r0, r4, #11
 800a08e:	1d23      	adds	r3, r4, #4
 800a090:	f020 0007 	bic.w	r0, r0, #7
 800a094:	1ac2      	subs	r2, r0, r3
 800a096:	bf1c      	itt	ne
 800a098:	1a1b      	subne	r3, r3, r0
 800a09a:	50a3      	strne	r3, [r4, r2]
 800a09c:	e7af      	b.n	8009ffe <_malloc_r+0x22>
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	bf0c      	ite	eq
 800a0a4:	f8c8 2000 	streq.w	r2, [r8]
 800a0a8:	605a      	strne	r2, [r3, #4]
 800a0aa:	e7eb      	b.n	800a084 <_malloc_r+0xa8>
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	6864      	ldr	r4, [r4, #4]
 800a0b0:	e7ae      	b.n	800a010 <_malloc_r+0x34>
 800a0b2:	463c      	mov	r4, r7
 800a0b4:	687f      	ldr	r7, [r7, #4]
 800a0b6:	e7b6      	b.n	800a026 <_malloc_r+0x4a>
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	d1fb      	bne.n	800a0b8 <_malloc_r+0xdc>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6053      	str	r3, [r2, #4]
 800a0c4:	e7de      	b.n	800a084 <_malloc_r+0xa8>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 f80c 	bl	800a0e8 <__malloc_unlock>
 800a0d0:	e794      	b.n	8009ffc <_malloc_r+0x20>
 800a0d2:	6005      	str	r5, [r0, #0]
 800a0d4:	e7d6      	b.n	800a084 <_malloc_r+0xa8>
 800a0d6:	bf00      	nop
 800a0d8:	200030ec 	.word	0x200030ec

0800a0dc <__malloc_lock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__malloc_lock+0x8>)
 800a0de:	f7ff bf0f 	b.w	8009f00 <__retarget_lock_acquire_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	200030e4 	.word	0x200030e4

0800a0e8 <__malloc_unlock>:
 800a0e8:	4801      	ldr	r0, [pc, #4]	@ (800a0f0 <__malloc_unlock+0x8>)
 800a0ea:	f7ff bf0a 	b.w	8009f02 <__retarget_lock_release_recursive>
 800a0ee:	bf00      	nop
 800a0f0:	200030e4 	.word	0x200030e4

0800a0f4 <__ssputs_r>:
 800a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	688e      	ldr	r6, [r1, #8]
 800a0fa:	461f      	mov	r7, r3
 800a0fc:	42be      	cmp	r6, r7
 800a0fe:	680b      	ldr	r3, [r1, #0]
 800a100:	4682      	mov	sl, r0
 800a102:	460c      	mov	r4, r1
 800a104:	4690      	mov	r8, r2
 800a106:	d82d      	bhi.n	800a164 <__ssputs_r+0x70>
 800a108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a10c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a110:	d026      	beq.n	800a160 <__ssputs_r+0x6c>
 800a112:	6965      	ldr	r5, [r4, #20]
 800a114:	6909      	ldr	r1, [r1, #16]
 800a116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a11a:	eba3 0901 	sub.w	r9, r3, r1
 800a11e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a122:	1c7b      	adds	r3, r7, #1
 800a124:	444b      	add	r3, r9
 800a126:	106d      	asrs	r5, r5, #1
 800a128:	429d      	cmp	r5, r3
 800a12a:	bf38      	it	cc
 800a12c:	461d      	movcc	r5, r3
 800a12e:	0553      	lsls	r3, r2, #21
 800a130:	d527      	bpl.n	800a182 <__ssputs_r+0x8e>
 800a132:	4629      	mov	r1, r5
 800a134:	f7ff ff52 	bl	8009fdc <_malloc_r>
 800a138:	4606      	mov	r6, r0
 800a13a:	b360      	cbz	r0, 800a196 <__ssputs_r+0xa2>
 800a13c:	6921      	ldr	r1, [r4, #16]
 800a13e:	464a      	mov	r2, r9
 800a140:	f000 fae8 	bl	800a714 <memcpy>
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a14a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	6126      	str	r6, [r4, #16]
 800a152:	6165      	str	r5, [r4, #20]
 800a154:	444e      	add	r6, r9
 800a156:	eba5 0509 	sub.w	r5, r5, r9
 800a15a:	6026      	str	r6, [r4, #0]
 800a15c:	60a5      	str	r5, [r4, #8]
 800a15e:	463e      	mov	r6, r7
 800a160:	42be      	cmp	r6, r7
 800a162:	d900      	bls.n	800a166 <__ssputs_r+0x72>
 800a164:	463e      	mov	r6, r7
 800a166:	6820      	ldr	r0, [r4, #0]
 800a168:	4632      	mov	r2, r6
 800a16a:	4641      	mov	r1, r8
 800a16c:	f000 faa8 	bl	800a6c0 <memmove>
 800a170:	68a3      	ldr	r3, [r4, #8]
 800a172:	1b9b      	subs	r3, r3, r6
 800a174:	60a3      	str	r3, [r4, #8]
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	4433      	add	r3, r6
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	2000      	movs	r0, #0
 800a17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a182:	462a      	mov	r2, r5
 800a184:	f000 fad4 	bl	800a730 <_realloc_r>
 800a188:	4606      	mov	r6, r0
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d1e0      	bne.n	800a150 <__ssputs_r+0x5c>
 800a18e:	6921      	ldr	r1, [r4, #16]
 800a190:	4650      	mov	r0, sl
 800a192:	f7ff feb7 	bl	8009f04 <_free_r>
 800a196:	230c      	movs	r3, #12
 800a198:	f8ca 3000 	str.w	r3, [sl]
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	e7e9      	b.n	800a17e <__ssputs_r+0x8a>
	...

0800a1ac <_svfiprintf_r>:
 800a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	4698      	mov	r8, r3
 800a1b2:	898b      	ldrh	r3, [r1, #12]
 800a1b4:	061b      	lsls	r3, r3, #24
 800a1b6:	b09d      	sub	sp, #116	@ 0x74
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	4614      	mov	r4, r2
 800a1be:	d510      	bpl.n	800a1e2 <_svfiprintf_r+0x36>
 800a1c0:	690b      	ldr	r3, [r1, #16]
 800a1c2:	b973      	cbnz	r3, 800a1e2 <_svfiprintf_r+0x36>
 800a1c4:	2140      	movs	r1, #64	@ 0x40
 800a1c6:	f7ff ff09 	bl	8009fdc <_malloc_r>
 800a1ca:	6028      	str	r0, [r5, #0]
 800a1cc:	6128      	str	r0, [r5, #16]
 800a1ce:	b930      	cbnz	r0, 800a1de <_svfiprintf_r+0x32>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	b01d      	add	sp, #116	@ 0x74
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	2340      	movs	r3, #64	@ 0x40
 800a1e0:	616b      	str	r3, [r5, #20]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e6:	2320      	movs	r3, #32
 800a1e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f0:	2330      	movs	r3, #48	@ 0x30
 800a1f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a390 <_svfiprintf_r+0x1e4>
 800a1f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1fa:	f04f 0901 	mov.w	r9, #1
 800a1fe:	4623      	mov	r3, r4
 800a200:	469a      	mov	sl, r3
 800a202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a206:	b10a      	cbz	r2, 800a20c <_svfiprintf_r+0x60>
 800a208:	2a25      	cmp	r2, #37	@ 0x25
 800a20a:	d1f9      	bne.n	800a200 <_svfiprintf_r+0x54>
 800a20c:	ebba 0b04 	subs.w	fp, sl, r4
 800a210:	d00b      	beq.n	800a22a <_svfiprintf_r+0x7e>
 800a212:	465b      	mov	r3, fp
 800a214:	4622      	mov	r2, r4
 800a216:	4629      	mov	r1, r5
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ff6b 	bl	800a0f4 <__ssputs_r>
 800a21e:	3001      	adds	r0, #1
 800a220:	f000 80a7 	beq.w	800a372 <_svfiprintf_r+0x1c6>
 800a224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a226:	445a      	add	r2, fp
 800a228:	9209      	str	r2, [sp, #36]	@ 0x24
 800a22a:	f89a 3000 	ldrb.w	r3, [sl]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 809f 	beq.w	800a372 <_svfiprintf_r+0x1c6>
 800a234:	2300      	movs	r3, #0
 800a236:	f04f 32ff 	mov.w	r2, #4294967295
 800a23a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a23e:	f10a 0a01 	add.w	sl, sl, #1
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	9307      	str	r3, [sp, #28]
 800a246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a24a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a24c:	4654      	mov	r4, sl
 800a24e:	2205      	movs	r2, #5
 800a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a254:	484e      	ldr	r0, [pc, #312]	@ (800a390 <_svfiprintf_r+0x1e4>)
 800a256:	f7f5 ffd3 	bl	8000200 <memchr>
 800a25a:	9a04      	ldr	r2, [sp, #16]
 800a25c:	b9d8      	cbnz	r0, 800a296 <_svfiprintf_r+0xea>
 800a25e:	06d0      	lsls	r0, r2, #27
 800a260:	bf44      	itt	mi
 800a262:	2320      	movmi	r3, #32
 800a264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a268:	0711      	lsls	r1, r2, #28
 800a26a:	bf44      	itt	mi
 800a26c:	232b      	movmi	r3, #43	@ 0x2b
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a272:	f89a 3000 	ldrb.w	r3, [sl]
 800a276:	2b2a      	cmp	r3, #42	@ 0x2a
 800a278:	d015      	beq.n	800a2a6 <_svfiprintf_r+0xfa>
 800a27a:	9a07      	ldr	r2, [sp, #28]
 800a27c:	4654      	mov	r4, sl
 800a27e:	2000      	movs	r0, #0
 800a280:	f04f 0c0a 	mov.w	ip, #10
 800a284:	4621      	mov	r1, r4
 800a286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28a:	3b30      	subs	r3, #48	@ 0x30
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	d94b      	bls.n	800a328 <_svfiprintf_r+0x17c>
 800a290:	b1b0      	cbz	r0, 800a2c0 <_svfiprintf_r+0x114>
 800a292:	9207      	str	r2, [sp, #28]
 800a294:	e014      	b.n	800a2c0 <_svfiprintf_r+0x114>
 800a296:	eba0 0308 	sub.w	r3, r0, r8
 800a29a:	fa09 f303 	lsl.w	r3, r9, r3
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	46a2      	mov	sl, r4
 800a2a4:	e7d2      	b.n	800a24c <_svfiprintf_r+0xa0>
 800a2a6:	9b03      	ldr	r3, [sp, #12]
 800a2a8:	1d19      	adds	r1, r3, #4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	9103      	str	r1, [sp, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bfbb      	ittet	lt
 800a2b2:	425b      	neglt	r3, r3
 800a2b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b8:	9307      	strge	r3, [sp, #28]
 800a2ba:	9307      	strlt	r3, [sp, #28]
 800a2bc:	bfb8      	it	lt
 800a2be:	9204      	strlt	r2, [sp, #16]
 800a2c0:	7823      	ldrb	r3, [r4, #0]
 800a2c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2c4:	d10a      	bne.n	800a2dc <_svfiprintf_r+0x130>
 800a2c6:	7863      	ldrb	r3, [r4, #1]
 800a2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ca:	d132      	bne.n	800a332 <_svfiprintf_r+0x186>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	9203      	str	r2, [sp, #12]
 800a2d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2d8:	3402      	adds	r4, #2
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a3a0 <_svfiprintf_r+0x1f4>
 800a2e0:	7821      	ldrb	r1, [r4, #0]
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	f7f5 ff8b 	bl	8000200 <memchr>
 800a2ea:	b138      	cbz	r0, 800a2fc <_svfiprintf_r+0x150>
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	eba0 000a 	sub.w	r0, r0, sl
 800a2f2:	2240      	movs	r2, #64	@ 0x40
 800a2f4:	4082      	lsls	r2, r0
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	3401      	adds	r4, #1
 800a2fa:	9304      	str	r3, [sp, #16]
 800a2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a300:	4824      	ldr	r0, [pc, #144]	@ (800a394 <_svfiprintf_r+0x1e8>)
 800a302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a306:	2206      	movs	r2, #6
 800a308:	f7f5 ff7a 	bl	8000200 <memchr>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d036      	beq.n	800a37e <_svfiprintf_r+0x1d2>
 800a310:	4b21      	ldr	r3, [pc, #132]	@ (800a398 <_svfiprintf_r+0x1ec>)
 800a312:	bb1b      	cbnz	r3, 800a35c <_svfiprintf_r+0x1b0>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	3307      	adds	r3, #7
 800a318:	f023 0307 	bic.w	r3, r3, #7
 800a31c:	3308      	adds	r3, #8
 800a31e:	9303      	str	r3, [sp, #12]
 800a320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a322:	4433      	add	r3, r6
 800a324:	9309      	str	r3, [sp, #36]	@ 0x24
 800a326:	e76a      	b.n	800a1fe <_svfiprintf_r+0x52>
 800a328:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32c:	460c      	mov	r4, r1
 800a32e:	2001      	movs	r0, #1
 800a330:	e7a8      	b.n	800a284 <_svfiprintf_r+0xd8>
 800a332:	2300      	movs	r3, #0
 800a334:	3401      	adds	r4, #1
 800a336:	9305      	str	r3, [sp, #20]
 800a338:	4619      	mov	r1, r3
 800a33a:	f04f 0c0a 	mov.w	ip, #10
 800a33e:	4620      	mov	r0, r4
 800a340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a344:	3a30      	subs	r2, #48	@ 0x30
 800a346:	2a09      	cmp	r2, #9
 800a348:	d903      	bls.n	800a352 <_svfiprintf_r+0x1a6>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0c6      	beq.n	800a2dc <_svfiprintf_r+0x130>
 800a34e:	9105      	str	r1, [sp, #20]
 800a350:	e7c4      	b.n	800a2dc <_svfiprintf_r+0x130>
 800a352:	fb0c 2101 	mla	r1, ip, r1, r2
 800a356:	4604      	mov	r4, r0
 800a358:	2301      	movs	r3, #1
 800a35a:	e7f0      	b.n	800a33e <_svfiprintf_r+0x192>
 800a35c:	ab03      	add	r3, sp, #12
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	462a      	mov	r2, r5
 800a362:	4b0e      	ldr	r3, [pc, #56]	@ (800a39c <_svfiprintf_r+0x1f0>)
 800a364:	a904      	add	r1, sp, #16
 800a366:	4638      	mov	r0, r7
 800a368:	f3af 8000 	nop.w
 800a36c:	1c42      	adds	r2, r0, #1
 800a36e:	4606      	mov	r6, r0
 800a370:	d1d6      	bne.n	800a320 <_svfiprintf_r+0x174>
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	065b      	lsls	r3, r3, #25
 800a376:	f53f af2d 	bmi.w	800a1d4 <_svfiprintf_r+0x28>
 800a37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a37c:	e72c      	b.n	800a1d8 <_svfiprintf_r+0x2c>
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	462a      	mov	r2, r5
 800a384:	4b05      	ldr	r3, [pc, #20]	@ (800a39c <_svfiprintf_r+0x1f0>)
 800a386:	a904      	add	r1, sp, #16
 800a388:	4638      	mov	r0, r7
 800a38a:	f000 f879 	bl	800a480 <_printf_i>
 800a38e:	e7ed      	b.n	800a36c <_svfiprintf_r+0x1c0>
 800a390:	0800aa78 	.word	0x0800aa78
 800a394:	0800aa82 	.word	0x0800aa82
 800a398:	00000000 	.word	0x00000000
 800a39c:	0800a0f5 	.word	0x0800a0f5
 800a3a0:	0800aa7e 	.word	0x0800aa7e

0800a3a4 <_printf_common>:
 800a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	4698      	mov	r8, r3
 800a3ac:	688a      	ldr	r2, [r1, #8]
 800a3ae:	690b      	ldr	r3, [r1, #16]
 800a3b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	bfb8      	it	lt
 800a3b8:	4613      	movlt	r3, r2
 800a3ba:	6033      	str	r3, [r6, #0]
 800a3bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	b10a      	cbz	r2, 800a3ca <_printf_common+0x26>
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	6033      	str	r3, [r6, #0]
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	0699      	lsls	r1, r3, #26
 800a3ce:	bf42      	ittt	mi
 800a3d0:	6833      	ldrmi	r3, [r6, #0]
 800a3d2:	3302      	addmi	r3, #2
 800a3d4:	6033      	strmi	r3, [r6, #0]
 800a3d6:	6825      	ldr	r5, [r4, #0]
 800a3d8:	f015 0506 	ands.w	r5, r5, #6
 800a3dc:	d106      	bne.n	800a3ec <_printf_common+0x48>
 800a3de:	f104 0a19 	add.w	sl, r4, #25
 800a3e2:	68e3      	ldr	r3, [r4, #12]
 800a3e4:	6832      	ldr	r2, [r6, #0]
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	dc26      	bgt.n	800a43a <_printf_common+0x96>
 800a3ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3f0:	6822      	ldr	r2, [r4, #0]
 800a3f2:	3b00      	subs	r3, #0
 800a3f4:	bf18      	it	ne
 800a3f6:	2301      	movne	r3, #1
 800a3f8:	0692      	lsls	r2, r2, #26
 800a3fa:	d42b      	bmi.n	800a454 <_printf_common+0xb0>
 800a3fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a400:	4641      	mov	r1, r8
 800a402:	4638      	mov	r0, r7
 800a404:	47c8      	blx	r9
 800a406:	3001      	adds	r0, #1
 800a408:	d01e      	beq.n	800a448 <_printf_common+0xa4>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	6922      	ldr	r2, [r4, #16]
 800a40e:	f003 0306 	and.w	r3, r3, #6
 800a412:	2b04      	cmp	r3, #4
 800a414:	bf02      	ittt	eq
 800a416:	68e5      	ldreq	r5, [r4, #12]
 800a418:	6833      	ldreq	r3, [r6, #0]
 800a41a:	1aed      	subeq	r5, r5, r3
 800a41c:	68a3      	ldr	r3, [r4, #8]
 800a41e:	bf0c      	ite	eq
 800a420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a424:	2500      	movne	r5, #0
 800a426:	4293      	cmp	r3, r2
 800a428:	bfc4      	itt	gt
 800a42a:	1a9b      	subgt	r3, r3, r2
 800a42c:	18ed      	addgt	r5, r5, r3
 800a42e:	2600      	movs	r6, #0
 800a430:	341a      	adds	r4, #26
 800a432:	42b5      	cmp	r5, r6
 800a434:	d11a      	bne.n	800a46c <_printf_common+0xc8>
 800a436:	2000      	movs	r0, #0
 800a438:	e008      	b.n	800a44c <_printf_common+0xa8>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4652      	mov	r2, sl
 800a43e:	4641      	mov	r1, r8
 800a440:	4638      	mov	r0, r7
 800a442:	47c8      	blx	r9
 800a444:	3001      	adds	r0, #1
 800a446:	d103      	bne.n	800a450 <_printf_common+0xac>
 800a448:	f04f 30ff 	mov.w	r0, #4294967295
 800a44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a450:	3501      	adds	r5, #1
 800a452:	e7c6      	b.n	800a3e2 <_printf_common+0x3e>
 800a454:	18e1      	adds	r1, r4, r3
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	2030      	movs	r0, #48	@ 0x30
 800a45a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a45e:	4422      	add	r2, r4
 800a460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a468:	3302      	adds	r3, #2
 800a46a:	e7c7      	b.n	800a3fc <_printf_common+0x58>
 800a46c:	2301      	movs	r3, #1
 800a46e:	4622      	mov	r2, r4
 800a470:	4641      	mov	r1, r8
 800a472:	4638      	mov	r0, r7
 800a474:	47c8      	blx	r9
 800a476:	3001      	adds	r0, #1
 800a478:	d0e6      	beq.n	800a448 <_printf_common+0xa4>
 800a47a:	3601      	adds	r6, #1
 800a47c:	e7d9      	b.n	800a432 <_printf_common+0x8e>
	...

0800a480 <_printf_i>:
 800a480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a484:	7e0f      	ldrb	r7, [r1, #24]
 800a486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a488:	2f78      	cmp	r7, #120	@ 0x78
 800a48a:	4691      	mov	r9, r2
 800a48c:	4680      	mov	r8, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	469a      	mov	sl, r3
 800a492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a496:	d807      	bhi.n	800a4a8 <_printf_i+0x28>
 800a498:	2f62      	cmp	r7, #98	@ 0x62
 800a49a:	d80a      	bhi.n	800a4b2 <_printf_i+0x32>
 800a49c:	2f00      	cmp	r7, #0
 800a49e:	f000 80d2 	beq.w	800a646 <_printf_i+0x1c6>
 800a4a2:	2f58      	cmp	r7, #88	@ 0x58
 800a4a4:	f000 80b9 	beq.w	800a61a <_printf_i+0x19a>
 800a4a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4b0:	e03a      	b.n	800a528 <_printf_i+0xa8>
 800a4b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4b6:	2b15      	cmp	r3, #21
 800a4b8:	d8f6      	bhi.n	800a4a8 <_printf_i+0x28>
 800a4ba:	a101      	add	r1, pc, #4	@ (adr r1, 800a4c0 <_printf_i+0x40>)
 800a4bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4c0:	0800a519 	.word	0x0800a519
 800a4c4:	0800a52d 	.word	0x0800a52d
 800a4c8:	0800a4a9 	.word	0x0800a4a9
 800a4cc:	0800a4a9 	.word	0x0800a4a9
 800a4d0:	0800a4a9 	.word	0x0800a4a9
 800a4d4:	0800a4a9 	.word	0x0800a4a9
 800a4d8:	0800a52d 	.word	0x0800a52d
 800a4dc:	0800a4a9 	.word	0x0800a4a9
 800a4e0:	0800a4a9 	.word	0x0800a4a9
 800a4e4:	0800a4a9 	.word	0x0800a4a9
 800a4e8:	0800a4a9 	.word	0x0800a4a9
 800a4ec:	0800a62d 	.word	0x0800a62d
 800a4f0:	0800a557 	.word	0x0800a557
 800a4f4:	0800a5e7 	.word	0x0800a5e7
 800a4f8:	0800a4a9 	.word	0x0800a4a9
 800a4fc:	0800a4a9 	.word	0x0800a4a9
 800a500:	0800a64f 	.word	0x0800a64f
 800a504:	0800a4a9 	.word	0x0800a4a9
 800a508:	0800a557 	.word	0x0800a557
 800a50c:	0800a4a9 	.word	0x0800a4a9
 800a510:	0800a4a9 	.word	0x0800a4a9
 800a514:	0800a5ef 	.word	0x0800a5ef
 800a518:	6833      	ldr	r3, [r6, #0]
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6032      	str	r2, [r6, #0]
 800a520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a528:	2301      	movs	r3, #1
 800a52a:	e09d      	b.n	800a668 <_printf_i+0x1e8>
 800a52c:	6833      	ldr	r3, [r6, #0]
 800a52e:	6820      	ldr	r0, [r4, #0]
 800a530:	1d19      	adds	r1, r3, #4
 800a532:	6031      	str	r1, [r6, #0]
 800a534:	0606      	lsls	r6, r0, #24
 800a536:	d501      	bpl.n	800a53c <_printf_i+0xbc>
 800a538:	681d      	ldr	r5, [r3, #0]
 800a53a:	e003      	b.n	800a544 <_printf_i+0xc4>
 800a53c:	0645      	lsls	r5, r0, #25
 800a53e:	d5fb      	bpl.n	800a538 <_printf_i+0xb8>
 800a540:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a544:	2d00      	cmp	r5, #0
 800a546:	da03      	bge.n	800a550 <_printf_i+0xd0>
 800a548:	232d      	movs	r3, #45	@ 0x2d
 800a54a:	426d      	negs	r5, r5
 800a54c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a550:	4859      	ldr	r0, [pc, #356]	@ (800a6b8 <_printf_i+0x238>)
 800a552:	230a      	movs	r3, #10
 800a554:	e011      	b.n	800a57a <_printf_i+0xfa>
 800a556:	6821      	ldr	r1, [r4, #0]
 800a558:	6833      	ldr	r3, [r6, #0]
 800a55a:	0608      	lsls	r0, r1, #24
 800a55c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a560:	d402      	bmi.n	800a568 <_printf_i+0xe8>
 800a562:	0649      	lsls	r1, r1, #25
 800a564:	bf48      	it	mi
 800a566:	b2ad      	uxthmi	r5, r5
 800a568:	2f6f      	cmp	r7, #111	@ 0x6f
 800a56a:	4853      	ldr	r0, [pc, #332]	@ (800a6b8 <_printf_i+0x238>)
 800a56c:	6033      	str	r3, [r6, #0]
 800a56e:	bf14      	ite	ne
 800a570:	230a      	movne	r3, #10
 800a572:	2308      	moveq	r3, #8
 800a574:	2100      	movs	r1, #0
 800a576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a57a:	6866      	ldr	r6, [r4, #4]
 800a57c:	60a6      	str	r6, [r4, #8]
 800a57e:	2e00      	cmp	r6, #0
 800a580:	bfa2      	ittt	ge
 800a582:	6821      	ldrge	r1, [r4, #0]
 800a584:	f021 0104 	bicge.w	r1, r1, #4
 800a588:	6021      	strge	r1, [r4, #0]
 800a58a:	b90d      	cbnz	r5, 800a590 <_printf_i+0x110>
 800a58c:	2e00      	cmp	r6, #0
 800a58e:	d04b      	beq.n	800a628 <_printf_i+0x1a8>
 800a590:	4616      	mov	r6, r2
 800a592:	fbb5 f1f3 	udiv	r1, r5, r3
 800a596:	fb03 5711 	mls	r7, r3, r1, r5
 800a59a:	5dc7      	ldrb	r7, [r0, r7]
 800a59c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5a0:	462f      	mov	r7, r5
 800a5a2:	42bb      	cmp	r3, r7
 800a5a4:	460d      	mov	r5, r1
 800a5a6:	d9f4      	bls.n	800a592 <_printf_i+0x112>
 800a5a8:	2b08      	cmp	r3, #8
 800a5aa:	d10b      	bne.n	800a5c4 <_printf_i+0x144>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	07df      	lsls	r7, r3, #31
 800a5b0:	d508      	bpl.n	800a5c4 <_printf_i+0x144>
 800a5b2:	6923      	ldr	r3, [r4, #16]
 800a5b4:	6861      	ldr	r1, [r4, #4]
 800a5b6:	4299      	cmp	r1, r3
 800a5b8:	bfde      	ittt	le
 800a5ba:	2330      	movle	r3, #48	@ 0x30
 800a5bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5c4:	1b92      	subs	r2, r2, r6
 800a5c6:	6122      	str	r2, [r4, #16]
 800a5c8:	f8cd a000 	str.w	sl, [sp]
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	aa03      	add	r2, sp, #12
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	f7ff fee6 	bl	800a3a4 <_printf_common>
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d14a      	bne.n	800a672 <_printf_i+0x1f2>
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	b004      	add	sp, #16
 800a5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	f043 0320 	orr.w	r3, r3, #32
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	4833      	ldr	r0, [pc, #204]	@ (800a6bc <_printf_i+0x23c>)
 800a5f0:	2778      	movs	r7, #120	@ 0x78
 800a5f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	6831      	ldr	r1, [r6, #0]
 800a5fa:	061f      	lsls	r7, r3, #24
 800a5fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800a600:	d402      	bmi.n	800a608 <_printf_i+0x188>
 800a602:	065f      	lsls	r7, r3, #25
 800a604:	bf48      	it	mi
 800a606:	b2ad      	uxthmi	r5, r5
 800a608:	6031      	str	r1, [r6, #0]
 800a60a:	07d9      	lsls	r1, r3, #31
 800a60c:	bf44      	itt	mi
 800a60e:	f043 0320 	orrmi.w	r3, r3, #32
 800a612:	6023      	strmi	r3, [r4, #0]
 800a614:	b11d      	cbz	r5, 800a61e <_printf_i+0x19e>
 800a616:	2310      	movs	r3, #16
 800a618:	e7ac      	b.n	800a574 <_printf_i+0xf4>
 800a61a:	4827      	ldr	r0, [pc, #156]	@ (800a6b8 <_printf_i+0x238>)
 800a61c:	e7e9      	b.n	800a5f2 <_printf_i+0x172>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	f023 0320 	bic.w	r3, r3, #32
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	e7f6      	b.n	800a616 <_printf_i+0x196>
 800a628:	4616      	mov	r6, r2
 800a62a:	e7bd      	b.n	800a5a8 <_printf_i+0x128>
 800a62c:	6833      	ldr	r3, [r6, #0]
 800a62e:	6825      	ldr	r5, [r4, #0]
 800a630:	6961      	ldr	r1, [r4, #20]
 800a632:	1d18      	adds	r0, r3, #4
 800a634:	6030      	str	r0, [r6, #0]
 800a636:	062e      	lsls	r6, r5, #24
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	d501      	bpl.n	800a640 <_printf_i+0x1c0>
 800a63c:	6019      	str	r1, [r3, #0]
 800a63e:	e002      	b.n	800a646 <_printf_i+0x1c6>
 800a640:	0668      	lsls	r0, r5, #25
 800a642:	d5fb      	bpl.n	800a63c <_printf_i+0x1bc>
 800a644:	8019      	strh	r1, [r3, #0]
 800a646:	2300      	movs	r3, #0
 800a648:	6123      	str	r3, [r4, #16]
 800a64a:	4616      	mov	r6, r2
 800a64c:	e7bc      	b.n	800a5c8 <_printf_i+0x148>
 800a64e:	6833      	ldr	r3, [r6, #0]
 800a650:	1d1a      	adds	r2, r3, #4
 800a652:	6032      	str	r2, [r6, #0]
 800a654:	681e      	ldr	r6, [r3, #0]
 800a656:	6862      	ldr	r2, [r4, #4]
 800a658:	2100      	movs	r1, #0
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7f5 fdd0 	bl	8000200 <memchr>
 800a660:	b108      	cbz	r0, 800a666 <_printf_i+0x1e6>
 800a662:	1b80      	subs	r0, r0, r6
 800a664:	6060      	str	r0, [r4, #4]
 800a666:	6863      	ldr	r3, [r4, #4]
 800a668:	6123      	str	r3, [r4, #16]
 800a66a:	2300      	movs	r3, #0
 800a66c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a670:	e7aa      	b.n	800a5c8 <_printf_i+0x148>
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	4632      	mov	r2, r6
 800a676:	4649      	mov	r1, r9
 800a678:	4640      	mov	r0, r8
 800a67a:	47d0      	blx	sl
 800a67c:	3001      	adds	r0, #1
 800a67e:	d0ad      	beq.n	800a5dc <_printf_i+0x15c>
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	079b      	lsls	r3, r3, #30
 800a684:	d413      	bmi.n	800a6ae <_printf_i+0x22e>
 800a686:	68e0      	ldr	r0, [r4, #12]
 800a688:	9b03      	ldr	r3, [sp, #12]
 800a68a:	4298      	cmp	r0, r3
 800a68c:	bfb8      	it	lt
 800a68e:	4618      	movlt	r0, r3
 800a690:	e7a6      	b.n	800a5e0 <_printf_i+0x160>
 800a692:	2301      	movs	r3, #1
 800a694:	4632      	mov	r2, r6
 800a696:	4649      	mov	r1, r9
 800a698:	4640      	mov	r0, r8
 800a69a:	47d0      	blx	sl
 800a69c:	3001      	adds	r0, #1
 800a69e:	d09d      	beq.n	800a5dc <_printf_i+0x15c>
 800a6a0:	3501      	adds	r5, #1
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	9903      	ldr	r1, [sp, #12]
 800a6a6:	1a5b      	subs	r3, r3, r1
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	dcf2      	bgt.n	800a692 <_printf_i+0x212>
 800a6ac:	e7eb      	b.n	800a686 <_printf_i+0x206>
 800a6ae:	2500      	movs	r5, #0
 800a6b0:	f104 0619 	add.w	r6, r4, #25
 800a6b4:	e7f5      	b.n	800a6a2 <_printf_i+0x222>
 800a6b6:	bf00      	nop
 800a6b8:	0800aa89 	.word	0x0800aa89
 800a6bc:	0800aa9a 	.word	0x0800aa9a

0800a6c0 <memmove>:
 800a6c0:	4288      	cmp	r0, r1
 800a6c2:	b510      	push	{r4, lr}
 800a6c4:	eb01 0402 	add.w	r4, r1, r2
 800a6c8:	d902      	bls.n	800a6d0 <memmove+0x10>
 800a6ca:	4284      	cmp	r4, r0
 800a6cc:	4623      	mov	r3, r4
 800a6ce:	d807      	bhi.n	800a6e0 <memmove+0x20>
 800a6d0:	1e43      	subs	r3, r0, #1
 800a6d2:	42a1      	cmp	r1, r4
 800a6d4:	d008      	beq.n	800a6e8 <memmove+0x28>
 800a6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6de:	e7f8      	b.n	800a6d2 <memmove+0x12>
 800a6e0:	4402      	add	r2, r0
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	428a      	cmp	r2, r1
 800a6e6:	d100      	bne.n	800a6ea <memmove+0x2a>
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6f2:	e7f7      	b.n	800a6e4 <memmove+0x24>

0800a6f4 <_sbrk_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d06      	ldr	r5, [pc, #24]	@ (800a710 <_sbrk_r+0x1c>)
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	4608      	mov	r0, r1
 800a6fe:	602b      	str	r3, [r5, #0]
 800a700:	f7f6 f9be 	bl	8000a80 <_sbrk>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d102      	bne.n	800a70e <_sbrk_r+0x1a>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	b103      	cbz	r3, 800a70e <_sbrk_r+0x1a>
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	200030e0 	.word	0x200030e0

0800a714 <memcpy>:
 800a714:	440a      	add	r2, r1
 800a716:	4291      	cmp	r1, r2
 800a718:	f100 33ff 	add.w	r3, r0, #4294967295
 800a71c:	d100      	bne.n	800a720 <memcpy+0xc>
 800a71e:	4770      	bx	lr
 800a720:	b510      	push	{r4, lr}
 800a722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a72a:	4291      	cmp	r1, r2
 800a72c:	d1f9      	bne.n	800a722 <memcpy+0xe>
 800a72e:	bd10      	pop	{r4, pc}

0800a730 <_realloc_r>:
 800a730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	4680      	mov	r8, r0
 800a736:	4615      	mov	r5, r2
 800a738:	460c      	mov	r4, r1
 800a73a:	b921      	cbnz	r1, 800a746 <_realloc_r+0x16>
 800a73c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a740:	4611      	mov	r1, r2
 800a742:	f7ff bc4b 	b.w	8009fdc <_malloc_r>
 800a746:	b92a      	cbnz	r2, 800a754 <_realloc_r+0x24>
 800a748:	f7ff fbdc 	bl	8009f04 <_free_r>
 800a74c:	2400      	movs	r4, #0
 800a74e:	4620      	mov	r0, r4
 800a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a754:	f000 f81a 	bl	800a78c <_malloc_usable_size_r>
 800a758:	4285      	cmp	r5, r0
 800a75a:	4606      	mov	r6, r0
 800a75c:	d802      	bhi.n	800a764 <_realloc_r+0x34>
 800a75e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a762:	d8f4      	bhi.n	800a74e <_realloc_r+0x1e>
 800a764:	4629      	mov	r1, r5
 800a766:	4640      	mov	r0, r8
 800a768:	f7ff fc38 	bl	8009fdc <_malloc_r>
 800a76c:	4607      	mov	r7, r0
 800a76e:	2800      	cmp	r0, #0
 800a770:	d0ec      	beq.n	800a74c <_realloc_r+0x1c>
 800a772:	42b5      	cmp	r5, r6
 800a774:	462a      	mov	r2, r5
 800a776:	4621      	mov	r1, r4
 800a778:	bf28      	it	cs
 800a77a:	4632      	movcs	r2, r6
 800a77c:	f7ff ffca 	bl	800a714 <memcpy>
 800a780:	4621      	mov	r1, r4
 800a782:	4640      	mov	r0, r8
 800a784:	f7ff fbbe 	bl	8009f04 <_free_r>
 800a788:	463c      	mov	r4, r7
 800a78a:	e7e0      	b.n	800a74e <_realloc_r+0x1e>

0800a78c <_malloc_usable_size_r>:
 800a78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a790:	1f18      	subs	r0, r3, #4
 800a792:	2b00      	cmp	r3, #0
 800a794:	bfbc      	itt	lt
 800a796:	580b      	ldrlt	r3, [r1, r0]
 800a798:	18c0      	addlt	r0, r0, r3
 800a79a:	4770      	bx	lr

0800a79c <_init>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	bf00      	nop
 800a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	469e      	mov	lr, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_fini>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr
