
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd50  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800bf00  0800bf00  0000cf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c050  0800c050  0000e168  2**0
                  CONTENTS
  4 .ARM          00000008  0800c050  0800c050  0000d050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c058  0800c058  0000e168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c058  0800c058  0000d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c05c  0800c05c  0000d05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800c060  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e168  2**0
                  CONTENTS
 10 .bss          00009e44  20000168  20000168  0000e168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009fac  20009fac  0000e168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d638  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ae2  00000000  00000000  0002b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  000302b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a5  00000000  00000000  00031b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a37a  00000000  00000000  00032dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020d95  00000000  00000000  0005d137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6ee0  00000000  00000000  0007decc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00164dac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c84  00000000  00000000  00164df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0016ba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000168 	.word	0x20000168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bee8 	.word	0x0800bee8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	0800bee8 	.word	0x0800bee8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2010      	movs	r0, #16
 80005c4:	f001 fe25 	bl	8002212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f001 fe3e 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2039      	movs	r0, #57	@ 0x39
 80005d4:	f001 fe1d 	bl	8002212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80005d8:	2039      	movs	r0, #57	@ 0x39
 80005da:	f001 fe36 	bl	800224a <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_ETH_Init+0x84>)
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <MX_ETH_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000604:	22e1      	movs	r2, #225	@ 0xe1
 8000606:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_ETH_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_ETH_Init+0x84>)
 800061c:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <MX_ETH_Init+0x8c>)
 800061e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_ETH_Init+0x84>)
 8000622:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000626:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_ETH_Init+0x84>)
 800062a:	4a14      	ldr	r2, [pc, #80]	@ (800067c <MX_ETH_Init+0x90>)
 800062c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_ETH_Init+0x84>)
 8000630:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_ETH_Init+0x94>)
 8000632:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_ETH_Init+0x84>)
 8000636:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800063a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_ETH_Init+0x84>)
 800063e:	f002 fa21 	bl	8002a84 <HAL_ETH_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000648:	f000 fa7c 	bl	8000b44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800064c:	2238      	movs	r2, #56	@ 0x38
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <MX_ETH_Init+0x98>)
 8000652:	f00a feb7 	bl	800b3c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_ETH_Init+0x98>)
 8000658:	2221      	movs	r2, #33	@ 0x21
 800065a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_ETH_Init+0x98>)
 800065e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000662:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_ETH_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200002fc 	.word	0x200002fc
 8000674:	40028000 	.word	0x40028000
 8000678:	200003ac 	.word	0x200003ac
 800067c:	20000224 	.word	0x20000224
 8000680:	20000184 	.word	0x20000184
 8000684:	200002c4 	.word	0x200002c4

08000688 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	@ 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a55      	ldr	r2, [pc, #340]	@ (80007fc <HAL_ETH_MspInit+0x174>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 80a4 	bne.w	80007f4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
 80006b0:	4b53      	ldr	r3, [pc, #332]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	4a52      	ldr	r2, [pc, #328]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80006bc:	4b50      	ldr	r3, [pc, #320]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006c4:	623b      	str	r3, [r7, #32]
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	4b4c      	ldr	r3, [pc, #304]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	4a4b      	ldr	r2, [pc, #300]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d8:	4b49      	ldr	r3, [pc, #292]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	4b45      	ldr	r3, [pc, #276]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	4a44      	ldr	r2, [pc, #272]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f4:	4b42      	ldr	r3, [pc, #264]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	4b3e      	ldr	r3, [pc, #248]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000708:	4a3d      	ldr	r2, [pc, #244]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000710:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000724:	4a36      	ldr	r2, [pc, #216]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6313      	str	r3, [r2, #48]	@ 0x30
 800072c:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000762:	6313      	str	r3, [r2, #48]	@ 0x30
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <HAL_ETH_MspInit+0x178>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000770:	2332      	movs	r3, #50	@ 0x32
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	@ (8000804 <HAL_ETH_MspInit+0x17c>)
 800078c:	f002 fcca 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000790:	2386      	movs	r3, #134	@ 0x86
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4817      	ldr	r0, [pc, #92]	@ (8000808 <HAL_ETH_MspInit+0x180>)
 80007ac:	f002 fcba 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c2:	230b      	movs	r3, #11
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ca:	4619      	mov	r1, r3
 80007cc:	480f      	ldr	r0, [pc, #60]	@ (800080c <HAL_ETH_MspInit+0x184>)
 80007ce:	f002 fca9 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4808      	ldr	r0, [pc, #32]	@ (8000810 <HAL_ETH_MspInit+0x188>)
 80007f0:	f002 fc98 	bl	8003124 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f4:	bf00      	nop
 80007f6:	3738      	adds	r7, #56	@ 0x38
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40028000 	.word	0x40028000
 8000800:	40023800 	.word	0x40023800
 8000804:	40020800 	.word	0x40020800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020400 	.word	0x40020400
 8000810:	40021800 	.word	0x40021800

08000814 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b58      	ldr	r3, [pc, #352]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a57      	ldr	r2, [pc, #348]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b55      	ldr	r3, [pc, #340]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b51      	ldr	r3, [pc, #324]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a50      	ldr	r2, [pc, #320]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b4a      	ldr	r3, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a49      	ldr	r2, [pc, #292]	@ (8000990 <MX_GPIO_Init+0x17c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b47      	ldr	r3, [pc, #284]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a42      	ldr	r2, [pc, #264]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b40      	ldr	r3, [pc, #256]	@ (8000990 <MX_GPIO_Init+0x17c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a34      	ldr	r2, [pc, #208]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <MX_GPIO_Init+0x17c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008d8:	482e      	ldr	r0, [pc, #184]	@ (8000994 <MX_GPIO_Init+0x180>)
 80008da:	f002 fdcf 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	482d      	ldr	r0, [pc, #180]	@ (8000998 <MX_GPIO_Init+0x184>)
 80008e4:	f002 fdca 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4827      	ldr	r0, [pc, #156]	@ (800099c <MX_GPIO_Init+0x188>)
 8000900:	f002 fc10 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000904:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481d      	ldr	r0, [pc, #116]	@ (8000994 <MX_GPIO_Init+0x180>)
 800091e:	f002 fc01 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000922:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000934:	2307      	movs	r3, #7
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4818      	ldr	r0, [pc, #96]	@ (80009a0 <MX_GPIO_Init+0x18c>)
 8000940:	f002 fbf0 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x184>)
 800095c:	f002 fbe2 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x184>)
 8000974:	f002 fbd6 	bl	8003124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2028      	movs	r0, #40	@ 0x28
 800097e:	f001 fc48 	bl	8002212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000982:	2028      	movs	r0, #40	@ 0x28
 8000984:	f001 fc61 	bl	800224a <HAL_NVIC_EnableIRQ>

}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00

080009a4 <_write>:

// #define MAX_MSEQ                1000

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    Q_Write(&USB_TX_Q, ptr, len);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <_write+0x24>)
 80009ba:	f000 f8e8 	bl	8000b8e <Q_Write>
    // User_CDC_Transmit_FS(ptr, len);
    return (len);
 80009be:	687b      	ldr	r3, [r7, #4]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200003b4 	.word	0x200003b4

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f001 faae 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f84c 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f7ff ff1c 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 80009dc:	f7ff fdd0 	bl	8000580 <MX_DMA_Init>
  MX_ETH_Init();
 80009e0:	f7ff fe04 	bl	80005ec <MX_ETH_Init>
  MX_USART2_UART_Init();
 80009e4:	f000 fc94 	bl	8001310 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80009e8:	f000 fcbe 	bl	8001368 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80009ec:	f009 fda0 	bl	800a530 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80009f0:	f000 fc16 	bl	8001220 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Q_Init(&USB_TX_Q, (uint8_t *) USB_TX_Data, 2000);
 80009f4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009f8:	4914      	ldr	r1, [pc, #80]	@ (8000a4c <main+0x80>)
 80009fa:	4815      	ldr	r0, [pc, #84]	@ (8000a50 <main+0x84>)
 80009fc:	f000 f8a8 	bl	8000b50 <Q_Init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a04:	4913      	ldr	r1, [pc, #76]	@ (8000a54 <main+0x88>)
 8000a06:	4814      	ldr	r0, [pc, #80]	@ (8000a58 <main+0x8c>)
 8000a08:	f005 f999 	bl	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <main+0x90>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <main+0x90>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0208 	bic.w	r2, r2, #8
 8000a1a:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8000a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a20:	490f      	ldr	r1, [pc, #60]	@ (8000a60 <main+0x94>)
 8000a22:	4810      	ldr	r0, [pc, #64]	@ (8000a64 <main+0x98>)
 8000a24:	f005 f98b 	bl	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <main+0x9c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <main+0x9c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 0208 	bic.w	r2, r2, #8
 8000a36:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <main+0xa0>)
 8000a3a:	f004 fc8b 	bl	8005354 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UART_RX_BufferClear();
 8000a3e:	f001 f9e3 	bl	8001e08 <UART_RX_BufferClear>
    debug_buf_read();
 8000a42:	f000 ffc9 	bl	80019d8 <debug_buf_read>
  {
 8000a46:	bf00      	nop
 8000a48:	e7f9      	b.n	8000a3e <main+0x72>
 8000a4a:	bf00      	nop
 8000a4c:	20000d34 	.word	0x20000d34
 8000a50:	200003b4 	.word	0x200003b4
 8000a54:	20001514 	.word	0x20001514
 8000a58:	20000410 	.word	0x20000410
 8000a5c:	200004a0 	.word	0x200004a0
 8000a60:	2000289c 	.word	0x2000289c
 8000a64:	20000458 	.word	0x20000458
 8000a68:	20000500 	.word	0x20000500
 8000a6c:	200003c8 	.word	0x200003c8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00a fca0 	bl	800b3c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae4:	23a8      	movs	r3, #168	@ 0xa8
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 ff45 	bl	8004984 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 f820 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2105      	movs	r1, #5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 f9a6 	bl	8004e74 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b2e:	f000 f809 	bl	8000b44 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	@ 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <Q_Init>:
#include "queue.h"

void Q_Init(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	80fb      	strh	r3, [r7, #6]
    queue->idx_read = 0;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	809a      	strh	r2, [r3, #4]
    queue->idx_write = 0;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2200      	movs	r2, #0
 8000b68:	805a      	strh	r2, [r3, #2]
    queue->count_full = 0;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	80da      	strh	r2, [r3, #6]
    queue->count_empty = 0;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	811a      	strh	r2, [r3, #8]
    queue->size = len;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	88fa      	ldrh	r2, [r7, #6]
 8000b7a:	801a      	strh	r2, [r3, #0]
    queue->data = data;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	60da      	str	r2, [r3, #12]
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <Q_Write>:

void Q_Clear(Q_queue_t *queue){
    queue->idx_write = queue->idx_read;
}

bool Q_Write(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b088      	sub	sp, #32
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	80fb      	strh	r3, [r7, #6]
    int empty_bytes;
    uint16_t next_idx;
    uint16_t num_first;
    bool ret = false;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	77fb      	strb	r3, [r7, #31]
    
    empty_bytes = Q_NumEmptyBytes(queue);  
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f000 f8ea 	bl	8000d7a <Q_NumEmptyBytes>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	61bb      	str	r3, [r7, #24]
    if(empty_bytes >= len){
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	db44      	blt.n	8000c3c <Q_Write+0xae>
        next_idx = queue->idx_write + len;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	82fb      	strh	r3, [r7, #22]
        if(next_idx < queue->size){
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	8afa      	ldrh	r2, [r7, #22]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d20b      	bcs.n	8000be2 <Q_Write+0x54>
            memcpy(&(queue->data[queue->idx_write]),data,len);  //memcpy(dest,source,num)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	88fa      	ldrh	r2, [r7, #6]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00a fc6d 	bl	800b4ba <memcpy>
 8000be0:	e01d      	b.n	8000c1e <Q_Write+0x90>
        }
        else{
            num_first = queue->size-queue->idx_write;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	881a      	ldrh	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	82bb      	strh	r3, [r7, #20]
            memcpy(&(queue->data[queue->idx_write]),data,num_first);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	8aba      	ldrh	r2, [r7, #20]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00a fc59 	bl	800b4ba <memcpy>
            memcpy(&(queue->data[0]),&(data[num_first]),len-num_first);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	68d8      	ldr	r0, [r3, #12]
 8000c0c:	8abb      	ldrh	r3, [r7, #20]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	18d1      	adds	r1, r2, r3
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	8abb      	ldrh	r3, [r7, #20]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	f00a fc4e 	bl	800b4ba <memcpy>
        }        
        queue->idx_write = next_idx % queue->size;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	8afb      	ldrh	r3, [r7, #22]
 8000c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c28:	fb01 f202 	mul.w	r2, r1, r2
 8000c2c:	1a9b      	subs	r3, r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	805a      	strh	r2, [r3, #2]
        ret = true;        
 8000c36:	2301      	movs	r3, #1
 8000c38:	77fb      	strb	r3, [r7, #31]
 8000c3a:	e00e      	b.n	8000c5a <Q_Write+0xcc>
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);      
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	88db      	ldrh	r3, [r3, #6]
 8000c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d004      	beq.n	8000c52 <Q_Write+0xc4>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	88db      	ldrh	r3, [r3, #6]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	e001      	b.n	8000c56 <Q_Write+0xc8>
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	80da      	strh	r2, [r3, #6]
    return ret;    
 8000c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <Q_Read>:
    }
    else    queue->count_full = _upperlimit(queue->count_full+1,0xFFFF);
    return ret;    
}

bool Q_Read(Q_queue_t *queue, uint8_t *data, uint16_t len){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	80fb      	strh	r3, [r7, #6]
    bool ret;
    uint16_t next_idx;
    uint16_t num_first;

    if(Q_NumContents(queue) >= len){
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 f864 	bl	8000d40 <Q_NumContents>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d848      	bhi.n	8000d14 <Q_Read+0xb0>
        next_idx = queue->idx_read + len;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	82bb      	strh	r3, [r7, #20]
        if(next_idx < queue->size){
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	8aba      	ldrh	r2, [r7, #20]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d20b      	bcs.n	8000cb2 <Q_Read+0x4e>
            memcpy(data,&(queue->data[queue->idx_read]),len);  //memcpy(dest,source,num)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	68b8      	ldr	r0, [r7, #8]
 8000cac:	f00a fc05 	bl	800b4ba <memcpy>
 8000cb0:	e01d      	b.n	8000cee <Q_Read+0x8a>
        }
        else{
            num_first = queue->size-queue->idx_read;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	881a      	ldrh	r2, [r3, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	827b      	strh	r3, [r7, #18]
            memcpy(data,&(queue->data[queue->idx_read]),num_first);  //memcpy(dest,source,num)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	8a7a      	ldrh	r2, [r7, #18]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	68b8      	ldr	r0, [r7, #8]
 8000cd4:	f00a fbf1 	bl	800b4ba <memcpy>
            memcpy(&(data[num_first]),&(queue->data[0]),len-num_first);
 8000cd8:	8a7b      	ldrh	r3, [r7, #18]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	18d0      	adds	r0, r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	68d9      	ldr	r1, [r3, #12]
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	8a7b      	ldrh	r3, [r7, #18]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	f00a fbe6 	bl	800b4ba <memcpy>
        }        
        queue->idx_read = (queue->idx_read+len)%queue->size;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d02:	fb01 f202 	mul.w	r2, r1, r2
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	809a      	strh	r2, [r3, #4]
        ret = true;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e010      	b.n	8000d36 <Q_Read+0xd2>
    }
    else{
        queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	891b      	ldrh	r3, [r3, #8]
 8000d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d004      	beq.n	8000d2a <Q_Read+0xc6>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	891b      	ldrh	r3, [r3, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	e001      	b.n	8000d2e <Q_Read+0xca>
 8000d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	811a      	strh	r2, [r3, #8]
        ret = false;
 8000d32:	2300      	movs	r3, #0
 8000d34:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <Q_NumContents>:
    else    queue->count_empty = _upperlimit(queue->count_empty+1,0xFFFF);
    return ret;
}


uint16_t Q_NumContents(Q_queue_t *queue){
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    return (uint16_t)((queue->size + queue->idx_write - queue->idx_read)%(queue->size));    
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d54:	4413      	add	r3, r2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d66:	fb01 f202 	mul.w	r2, r1, r2
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	b29b      	uxth	r3, r3
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <Q_NumEmptyBytes>:

uint16_t Q_NumEmptyBytes(Q_queue_t *queue){
 8000d7a:	b590      	push	{r4, r7, lr}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
    return queue->size - (int)Q_NumContents(queue) - 1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	881c      	ldrh	r4, [r3, #0]
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffda 	bl	8000d40 <Q_NumContents>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	1ae3      	subs	r3, r4, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29b      	uxth	r3, r3
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f001 f8c5 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <DMA1_Stream5_IRQHandler+0x10>)
 8000e56:	f001 fbab 	bl	80025b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200004a0 	.word	0x200004a0

08000e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e6a:	f004 fae3 	bl	8005434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200003c8 	.word	0x200003c8

08000e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (uart_rx_IDLE_TotalCnt < 2)
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <USART2_IRQHandler+0x64>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d823      	bhi.n	8000ece <USART2_IRQHandler+0x56>
  {
    if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)))
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d006      	beq.n	8000ea2 <USART2_IRQHandler+0x2a>
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d115      	bne.n	8000ece <USART2_IRQHandler+0x56>
    {
      __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
      __HAL_UART_CLEAR_FEFLAG(&huart2);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
    //   HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
    }
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ece:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <USART2_IRQHandler+0x68>)
 8000ed0:	f004 ff92 	bl	8005df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20003c24 	.word	0x20003c24
 8000ee0:	20000410 	.word	0x20000410

08000ee4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ee8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eec:	f002 fae0 	bl	80034b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA2_Stream1_IRQHandler+0x10>)
 8000efa:	f001 fb59 	bl	80025b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000500 	.word	0x20000500

08000f08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <OTG_FS_IRQHandler+0x10>)
 8000f0e:	f002 fc2b 	bl	8003768 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000975c 	.word	0x2000975c

08000f1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <USART6_IRQHandler+0x10>)
 8000f22:	f004 ff69 	bl	8005df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000458 	.word	0x20000458

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint16_t num = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	81fb      	strh	r3, [r7, #14]
  
  if ((num = Q_NumContents(&USB_TX_Q)) > 0 )
 8000f3c:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f3e:	f7ff feff 	bl	8000d40 <Q_NumContents>
 8000f42:	4603      	mov	r3, r0
 8000f44:	81fb      	strh	r3, [r7, #14]
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d016      	beq.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (CDC_Transmit_Is_Busy() != USBD_BUSY)
 8000f4c:	f009 fbe6 	bl	800a71c <CDC_Transmit_Is_Busy>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d011      	beq.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      queDataNum += num;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f62:	801a      	strh	r2, [r3, #0]

      Q_Read(&USB_TX_Q, (uint8_t *)queData, num);
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	461a      	mov	r2, r3
 8000f68:	490f      	ldr	r1, [pc, #60]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f6c:	f7ff fe7a 	bl	8000c64 <Q_Read>

      CDC_Transmit_FS(queData, num);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f76:	f009 fb99 	bl	800a6ac <CDC_Transmit_FS>
    }
  }

  TIM1_CNT_1++; // LED ?���??????? 
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f82:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++; //
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a09      	ldr	r2, [pc, #36]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000f8c:	6013      	str	r3, [r2, #0]
  TIM1_CNT_3++; //
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200003b4 	.word	0x200003b4
 8000fa4:	20000d30 	.word	0x20000d30
 8000fa8:	20000560 	.word	0x20000560
 8000fac:	20001504 	.word	0x20001504
 8000fb0:	20001508 	.word	0x20001508
 8000fb4:	2000150c 	.word	0x2000150c

08000fb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
  uart_rx_IDLE_TotalCnt += Size;
 8000fd8:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0xd4>)
 8000fe4:	801a      	strh	r2, [r3, #0]

  if (huart->Instance == USART6)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2e      	ldr	r2, [pc, #184]	@ (80010a4 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d127      	bne.n	8001040 <HAL_UARTEx_RxEventCallback+0x74>
  {
    mseq_upload_device(Size);
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fc6e 	bl	80018d4 <mseq_upload_device>

    __HAL_DMA_DISABLE(&hdma_usart6_rx);
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001008:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001010:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart6_rx);
 8001012:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]

    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001026:	4921      	ldr	r1, [pc, #132]	@ (80010ac <HAL_UARTEx_RxEventCallback+0xe0>)
 8001028:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <HAL_UARTEx_RxEventCallback+0xe4>)
 800102a:	f004 fe88 	bl	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart2_rx);

    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
  }
}
 800103e:	e02b      	b.n	8001098 <HAL_UARTEx_RxEventCallback+0xcc>
  else if (huart->Instance == USART2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d126      	bne.n	8001098 <HAL_UARTEx_RxEventCallback+0xcc>
    mseq_upload_master(Size);
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fbc5 	bl	80017dc <mseq_upload_master>
    __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800106a:	605a      	str	r2, [r3, #4]
    __HAL_DMA_ENABLE(&hdma_usart2_rx);
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 800107c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001080:	490e      	ldr	r1, [pc, #56]	@ (80010bc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001082:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001084:	f004 fe5b 	bl	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0208 	bic.w	r2, r2, #8
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20003c24 	.word	0x20003c24
 80010a4:	40011400 	.word	0x40011400
 80010a8:	20000500 	.word	0x20000500
 80010ac:	2000289c 	.word	0x2000289c
 80010b0:	20000458 	.word	0x20000458
 80010b4:	40004400 	.word	0x40004400
 80010b8:	200004a0 	.word	0x200004a0
 80010bc:	20001514 	.word	0x20001514
 80010c0:	20000410 	.word	0x20000410

080010c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010d4:	d102      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x18>
  {
    UserButton_Flag = 1;
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x24>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
  }
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20001510 	.word	0x20001510

080010ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e00a      	b.n	8001114 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010fe:	f3af 8000 	nop.w
 8001102:	4601      	mov	r1, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	b2ca      	uxtb	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbf0      	blt.n	80010fe <_read+0x12>
  }

  return len;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800114e:	605a      	str	r2, [r3, #4]
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_isatty>:

int _isatty(int file)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f00a f94e 	bl	800b460 <__errno>
 80011c4:	4603      	mov	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20030000 	.word	0x20030000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	200003c4 	.word	0x200003c4
 80011f8:	20009fb0 	.word	0x20009fb0

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123c:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800123e:	4a1f      	ldr	r2, [pc, #124]	@ (80012bc <MX_TIM1_Init+0x9c>)
 8001240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001244:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001248:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001252:	22a7      	movs	r2, #167	@ 0xa7
 8001254:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <MX_TIM1_Init+0x98>)
 800126a:	f004 f823 	bl	80052b4 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001274:	f7ff fc66 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <MX_TIM1_Init+0x98>)
 8001286:	f004 f9c5 	bl	8005614 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001290:	f7ff fc58 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_TIM1_Init+0x98>)
 80012a2:	f004 fbed 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012ac:	f7ff fc4a 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200003c8 	.word	0x200003c8
 80012bc:	40010000 	.word	0x40010000

080012c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d115      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_TIM_Base_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2019      	movs	r0, #25
 80012f4:	f000 ff8d 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012f8:	2019      	movs	r0, #25
 80012fa:	f000 ffa6 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40010000 	.word	0x40010000
 800130c:	40023800 	.word	0x40023800

08001310 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_USART2_UART_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800131c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001324:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001328:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132a:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_USART2_UART_Init+0x50>)
 800134c:	f004 fc28 	bl	8005ba0 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001356:	f7ff fbf5 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000410 	.word	0x20000410
 8001364:	40004400 	.word	0x40004400

08001368 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <MX_USART6_UART_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001374:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001378:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800137c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001380:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800138a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_USART6_UART_Init+0x50>)
 80013a4:	f004 fbfc 	bl	8005ba0 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 80013ae:	f7ff fbc9 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000458 	.word	0x20000458
 80013bc:	40011400 	.word	0x40011400

080013c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a77      	ldr	r2, [pc, #476]	@ (80015bc <HAL_UART_MspInit+0x1fc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	f040 8081 	bne.w	80014e6 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	4b75      	ldr	r3, [pc, #468]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	4a74      	ldr	r2, [pc, #464]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f4:	4b72      	ldr	r3, [pc, #456]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	4b6e      	ldr	r3, [pc, #440]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	4a6d      	ldr	r2, [pc, #436]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001410:	4b6b      	ldr	r3, [pc, #428]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	4b67      	ldr	r3, [pc, #412]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	4a66      	ldr	r2, [pc, #408]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6313      	str	r3, [r2, #48]	@ 0x30
 800142c:	4b64      	ldr	r3, [pc, #400]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001438:	2308      	movs	r3, #8
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001448:	2307      	movs	r3, #7
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	485c      	ldr	r0, [pc, #368]	@ (80015c4 <HAL_UART_MspInit+0x204>)
 8001454:	f001 fe66 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001458:	2320      	movs	r3, #32
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001468:	2307      	movs	r3, #7
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4855      	ldr	r0, [pc, #340]	@ (80015c8 <HAL_UART_MspInit+0x208>)
 8001474:	f001 fe56 	bl	8003124 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800147a:	4a55      	ldr	r2, [pc, #340]	@ (80015d0 <HAL_UART_MspInit+0x210>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800147e:	4b53      	ldr	r3, [pc, #332]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001480:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001484:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001486:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b4f      	ldr	r3, [pc, #316]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b4e      	ldr	r3, [pc, #312]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 8001494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001498:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149a:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a0:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014b8:	4844      	ldr	r0, [pc, #272]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014ba:	f000 fee1 	bl	8002280 <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80014c4:	f7ff fb3e 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a40      	ldr	r2, [pc, #256]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ce:	4a3f      	ldr	r2, [pc, #252]	@ (80015cc <HAL_UART_MspInit+0x20c>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2026      	movs	r0, #38	@ 0x26
 80014da:	f000 fe9a 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014de:	2026      	movs	r0, #38	@ 0x26
 80014e0:	f000 feb3 	bl	800224a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80014e4:	e066      	b.n	80015b4 <HAL_UART_MspInit+0x1f4>
  else if(uartHandle->Instance==USART6)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a3a      	ldr	r2, [pc, #232]	@ (80015d4 <HAL_UART_MspInit+0x214>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d161      	bne.n	80015b4 <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b32      	ldr	r3, [pc, #200]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	4a31      	ldr	r2, [pc, #196]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 80014fa:	f043 0320 	orr.w	r3, r3, #32
 80014fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001500:	4b2f      	ldr	r3, [pc, #188]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a2a      	ldr	r2, [pc, #168]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <HAL_UART_MspInit+0x200>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001528:	23c0      	movs	r3, #192	@ 0xc0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001538:	2308      	movs	r3, #8
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	4825      	ldr	r0, [pc, #148]	@ (80015d8 <HAL_UART_MspInit+0x218>)
 8001544:	f001 fdee 	bl	8003124 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800154a:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <HAL_UART_MspInit+0x220>)
 800154c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001550:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001554:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001564:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001568:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800157c:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001588:	4814      	ldr	r0, [pc, #80]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800158a:	f000 fe79 	bl	8002280 <HAL_DMA_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8001594:	f7ff fad6 	bl	8000b44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 800159c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800159e:	4a0f      	ldr	r2, [pc, #60]	@ (80015dc <HAL_UART_MspInit+0x21c>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2047      	movs	r0, #71	@ 0x47
 80015aa:	f000 fe32 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015ae:	2047      	movs	r0, #71	@ 0x47
 80015b0:	f000 fe4b 	bl	800224a <HAL_NVIC_EnableIRQ>
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	200004a0 	.word	0x200004a0
 80015d0:	40026088 	.word	0x40026088
 80015d4:	40011400 	.word	0x40011400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	20000500 	.word	0x20000500
 80015e0:	40026428 	.word	0x40026428

080015e4 <Decode_CalChecksum>:
bool flag_end;



static uint8_t Decode_CalChecksum(uint8_t * pData, uint8_t length)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
    uint8_t ck8 = CHECKSUM_SEEDVALUE;
 80015f0:	2352      	movs	r3, #82	@ 0x52
 80015f2:	75fb      	strb	r3, [r7, #23]

    if (length <= 2)
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d813      	bhi.n	8001622 <Decode_CalChecksum+0x3e>
    {
        ck8 ^= *pData++; // MC Check 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	4053      	eors	r3, r2
 8001606:	75fb      	strb	r3, [r7, #23]

        ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001614:	b25a      	sxtb	r2, r3
 8001616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161a:	4053      	eors	r3, r2
 800161c:	b25b      	sxtb	r3, r3
 800161e:	75fb      	strb	r3, [r7, #23]
 8001620:	e027      	b.n	8001672 <Decode_CalChecksum+0x8e>
        
    }
    else if (length > 2)
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d924      	bls.n	8001672 <Decode_CalChecksum+0x8e>
    {
        ck8 ^= *pData++; // MC Check 
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	4053      	eors	r3, r2
 8001634:	75fb      	strb	r3, [r7, #23]

        ck8 ^= *pData++ & 0xC0; // CKT 6b clear. CKT Check
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001642:	b25a      	sxtb	r2, r3
 8001644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001648:	4053      	eors	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	75fb      	strb	r3, [r7, #23]

        for (uint8_t i = 0; i < length -2; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	75bb      	strb	r3, [r7, #22]
 8001652:	e009      	b.n	8001668 <Decode_CalChecksum+0x84>
        {
            ck8 ^= *pData++;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	4053      	eors	r3, r2
 8001660:	75fb      	strb	r3, [r7, #23]
        for (uint8_t i = 0; i < length -2; i++)
 8001662:	7dbb      	ldrb	r3, [r7, #22]
 8001664:	3301      	adds	r3, #1
 8001666:	75bb      	strb	r3, [r7, #22]
 8001668:	7dba      	ldrb	r2, [r7, #22]
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	3b02      	subs	r3, #2
 800166e:	429a      	cmp	r2, r3
 8001670:	dbf0      	blt.n	8001654 <Decode_CalChecksum+0x70>
    // {
    //         ck8 ^= *pData++;
    // }

    //Section A.1.6
    uint8_t bit5 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 5) & 1U) ^ ((ck8 >> 3) & 1U) ^ ((ck8 >> 1) & 1U);
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	09db      	lsrs	r3, r3, #7
 8001676:	b2da      	uxtb	r2, r3
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4053      	eors	r3, r2
 8001680:	b2da      	uxtb	r2, r3
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4053      	eors	r3, r2
 800168a:	b2da      	uxtb	r2, r3
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	085b      	lsrs	r3, r3, #1
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4053      	eors	r3, r2
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	757b      	strb	r3, [r7, #21]
    uint8_t bit4 = ((ck8 >> 6) & 1U) ^ ((ck8 >> 4) & 1U) ^ ((ck8 >> 2) & 1U) ^ (ck8 & 1U);
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4053      	eors	r3, r2
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4053      	eors	r3, r2
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	4053      	eors	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	753b      	strb	r3, [r7, #20]
    uint8_t bit3 = ((ck8 >> 7) & 1U) ^ ((ck8 >> 6) & 1U);
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	099b      	lsrs	r3, r3, #6
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4053      	eors	r3, r2
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	74fb      	strb	r3, [r7, #19]
    uint8_t bit2 = ((ck8 >> 5) & 1U) ^ ((ck8 >> 4) & 1U);
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4053      	eors	r3, r2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	74bb      	strb	r3, [r7, #18]
    uint8_t bit1 = ((ck8 >> 3) & 1U) ^ ((ck8 >> 2) & 1U);
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4053      	eors	r3, r2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	747b      	strb	r3, [r7, #17]
    uint8_t bit0 = ((ck8 >> 1) & 1U) ^ ((ck8 & 1U));
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	4053      	eors	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	743b      	strb	r3, [r7, #16]
    uint8_t ck6 =     bit5 << 5 |
 8001716:	7d7b      	ldrb	r3, [r7, #21]
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	b25a      	sxtb	r2, r3
                    bit4 << 4 |
 800171c:	7d3b      	ldrb	r3, [r7, #20]
 800171e:	011b      	lsls	r3, r3, #4
    uint8_t ck6 =     bit5 << 5 |
 8001720:	b25b      	sxtb	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b25a      	sxtb	r2, r3
                    bit3 << 3 |
 8001726:	7cfb      	ldrb	r3, [r7, #19]
 8001728:	00db      	lsls	r3, r3, #3
                    bit4 << 4 |
 800172a:	b25b      	sxtb	r3, r3
 800172c:	4313      	orrs	r3, r2
 800172e:	b25a      	sxtb	r2, r3
                    bit2 << 2 |
 8001730:	7cbb      	ldrb	r3, [r7, #18]
 8001732:	009b      	lsls	r3, r3, #2
                    bit3 << 3 |
 8001734:	b25b      	sxtb	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 800173a:	7c7b      	ldrb	r3, [r7, #17]
 800173c:	005b      	lsls	r3, r3, #1
                    bit2 << 2 |
 800173e:	b25b      	sxtb	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b25a      	sxtb	r2, r3
                    bit1 << 1 |
 8001744:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	b25b      	sxtb	r3, r3
    uint8_t ck6 =     bit5 << 5 |
 800174c:	73fb      	strb	r3, [r7, #15]
                    bit0;
    return ck6;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <Decode_CKT_GetChecksum>:

static uint8_t Decode_CKT_GetChecksum (uint8_t * pData, uint8_t length)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum6 = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
    uint8_t master_checksum = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	73bb      	strb	r3, [r7, #14]
    uint8_t checksum_mctypebit = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	737b      	strb	r3, [r7, #13]
    uint8_t calculated_checksum = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	733b      	strb	r3, [r7, #12]
    
    checksum6 = Decode_CalChecksum((uint8_t *) pData, length);
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff31 	bl	80015e4 <Decode_CalChecksum>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
    checksum_mctypebit = mseq[mseq_cnt].CKT & 0xC0;
 8001786:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <Decode_CKT_GetChecksum+0x78>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <Decode_CKT_GetChecksum+0x7c>)
 800178e:	460b      	mov	r3, r1
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	3302      	adds	r3, #2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a0:	737b      	strb	r3, [r7, #13]
    calculated_checksum = checksum_mctypebit | checksum6;
 80017a2:	7b7a      	ldrb	r2, [r7, #13]
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	733b      	strb	r3, [r7, #12]

    return (mseq[mseq_cnt].CKT == calculated_checksum) ? 1 : 0;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <Decode_CKT_GetChecksum+0x78>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <Decode_CKT_GetChecksum+0x7c>)
 80017b2:	460b      	mov	r3, r1
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	3302      	adds	r3, #2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	7b3a      	ldrb	r2, [r7, #12]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	bf0c      	ite	eq
 80017c6:	2301      	moveq	r3, #1
 80017c8:	2300      	movne	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
    // }
    // else
    // {
    //     return 0;
    // }
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20003c26 	.word	0x20003c26
 80017d8:	20003c28 	.word	0x20003c28

080017dc <mseq_upload_master>:

void mseq_upload_master (uint16_t size)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	81fb      	strh	r3, [r7, #14]

    rxdataSize = size;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	81fb      	strh	r3, [r7, #14]
    mseq[mseq_cnt].Master_octet_cnt = rxdataSize;
 80017ee:	4b36      	ldr	r3, [pc, #216]	@ (80018c8 <mseq_upload_master+0xec>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	b2d8      	uxtb	r0, r3
 80017f8:	4a34      	ldr	r2, [pc, #208]	@ (80018cc <mseq_upload_master+0xf0>)
 80017fa:	460b      	mov	r3, r1
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	330c      	adds	r3, #12
 8001806:	4602      	mov	r2, r0
 8001808:	701a      	strb	r2, [r3, #0]

    mseq[mseq_cnt].MC = uart2_rx_IDLE_buf[0];
 800180a:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <mseq_upload_master+0xec>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <mseq_upload_master+0xf4>)
 8001812:	7818      	ldrb	r0, [r3, #0]
 8001814:	4a2d      	ldr	r2, [pc, #180]	@ (80018cc <mseq_upload_master+0xf0>)
 8001816:	460b      	mov	r3, r1
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	3301      	adds	r3, #1
 8001822:	4602      	mov	r2, r0
 8001824:	701a      	strb	r2, [r3, #0]
    mseq[mseq_cnt].CKT = uart2_rx_IDLE_buf[1];
 8001826:	4b28      	ldr	r3, [pc, #160]	@ (80018c8 <mseq_upload_master+0xec>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	4619      	mov	r1, r3
 800182c:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <mseq_upload_master+0xf4>)
 800182e:	7858      	ldrb	r0, [r3, #1]
 8001830:	4a26      	ldr	r2, [pc, #152]	@ (80018cc <mseq_upload_master+0xf0>)
 8001832:	460b      	mov	r3, r1
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	3302      	adds	r3, #2
 800183e:	4602      	mov	r2, r0
 8001840:	701a      	strb	r2, [r3, #0]
    
    mseq[mseq_cnt].Start_Octet = uart2_rx_IDLE_buf[0];
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <mseq_upload_master+0xec>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	4619      	mov	r1, r3
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <mseq_upload_master+0xf4>)
 800184a:	7818      	ldrb	r0, [r3, #0]
 800184c:	4a1f      	ldr	r2, [pc, #124]	@ (80018cc <mseq_upload_master+0xf0>)
 800184e:	460b      	mov	r3, r1
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	3310      	adds	r3, #16
 800185a:	4602      	mov	r2, r0
 800185c:	701a      	strb	r2, [r3, #0]
    mseq[mseq_cnt].End_Octet = uart2_rx_IDLE_buf[rxdataSize - 1];
 800185e:	89fb      	ldrh	r3, [r7, #14]
 8001860:	3b01      	subs	r3, #1
 8001862:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <mseq_upload_master+0xec>)
 8001864:	8812      	ldrh	r2, [r2, #0]
 8001866:	4611      	mov	r1, r2
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <mseq_upload_master+0xf4>)
 800186a:	5cd0      	ldrb	r0, [r2, r3]
 800186c:	4a17      	ldr	r2, [pc, #92]	@ (80018cc <mseq_upload_master+0xf0>)
 800186e:	460b      	mov	r3, r1
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	3311      	adds	r3, #17
 800187a:	4602      	mov	r2, r0
 800187c:	701a      	strb	r2, [r3, #0]

    mseq[mseq_cnt].Master_checksum = Decode_CKT_GetChecksum(uart2_rx_IDLE_buf, (rxdataSize - mseq[mseq_cnt].Device_octet_cnt));
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <mseq_upload_master+0xec>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	4910      	ldr	r1, [pc, #64]	@ (80018cc <mseq_upload_master+0xf0>)
 800188a:	4603      	mov	r3, r0
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4403      	add	r3, r0
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	440b      	add	r3, r1
 8001894:	330d      	adds	r3, #13
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <mseq_upload_master+0xec>)
 800189e:	8812      	ldrh	r2, [r2, #0]
 80018a0:	4614      	mov	r4, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	480a      	ldr	r0, [pc, #40]	@ (80018d0 <mseq_upload_master+0xf4>)
 80018a6:	f7ff ff59 	bl	800175c <Decode_CKT_GetChecksum>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <mseq_upload_master+0xf0>)
 80018b0:	4623      	mov	r3, r4
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4423      	add	r3, r4
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	330e      	adds	r3, #14
 80018bc:	460a      	mov	r2, r1
 80018be:	701a      	strb	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	20003c26 	.word	0x20003c26
 80018cc:	20003c28 	.word	0x20003c28
 80018d0:	20001514 	.word	0x20001514

080018d4 <mseq_upload_device>:

void mseq_upload_device (uint16_t size)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
    uint16_t rxdataSize = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	81fb      	strh	r3, [r7, #14]
    uint16_t cks_offset = 1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	81bb      	strh	r3, [r7, #12]

    rxdataSize = size;
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	81fb      	strh	r3, [r7, #14]
    mseq[mseq_cnt].Device_octet_cnt = rxdataSize;
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <mseq_upload_device+0x70>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	89fb      	ldrh	r3, [r7, #14]
 80018f2:	b2d8      	uxtb	r0, r3
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <mseq_upload_device+0x74>)
 80018f6:	460b      	mov	r3, r1
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	330d      	adds	r3, #13
 8001902:	4602      	mov	r2, r0
 8001904:	701a      	strb	r2, [r3, #0]
    // mseq[mseq_cnt].CKS = uart3_rx_IDLE_buf[rxdataSize - 1];
    
    mseq[(mseq_cnt + cks_offset)].CKS = uart6_rx_IDLE_buf[rxdataSize - 1];
 8001906:	89fb      	ldrh	r3, [r7, #14]
 8001908:	3b01      	subs	r3, #1
 800190a:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <mseq_upload_device+0x70>)
 800190c:	8812      	ldrh	r2, [r2, #0]
 800190e:	4611      	mov	r1, r2
 8001910:	89ba      	ldrh	r2, [r7, #12]
 8001912:	440a      	add	r2, r1
 8001914:	490d      	ldr	r1, [pc, #52]	@ (800194c <mseq_upload_device+0x78>)
 8001916:	5cc8      	ldrb	r0, [r1, r3]
 8001918:	490b      	ldr	r1, [pc, #44]	@ (8001948 <mseq_upload_device+0x74>)
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	440b      	add	r3, r1
 8001924:	3303      	adds	r3, #3
 8001926:	4602      	mov	r2, r0
 8001928:	701a      	strb	r2, [r3, #0]
    // Decode_GetChecksum(uart6_rx_IDLE_buf[0], rxdataSize);

    mseq_cnt++;
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <mseq_upload_device+0x70>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <mseq_upload_device+0x70>)
 8001934:	801a      	strh	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20003c26 	.word	0x20003c26
 8001948:	20003c28 	.word	0x20003c28
 800194c:	2000289c 	.word	0x2000289c

08001950 <mseq_display>:

void mseq_display (void)
{
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af02      	add	r7, sp, #8
    uint16_t i = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	80fb      	strh	r3, [r7, #6]

    for (i = 0; i < mseq_cnt; ++i)
 800195a:	2300      	movs	r3, #0
 800195c:	80fb      	strh	r3, [r7, #6]
 800195e:	e02a      	b.n	80019b6 <mseq_display+0x66>
    {
        // printf("%d,%d,%d,%d\r\n", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
        printf("%d,%d,%d,%d,", i, mseq[i].MC, mseq[i].CKT, mseq[i].CKS);
 8001960:	88f9      	ldrh	r1, [r7, #6]
 8001962:	88fa      	ldrh	r2, [r7, #6]
 8001964:	4819      	ldr	r0, [pc, #100]	@ (80019cc <mseq_display+0x7c>)
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4403      	add	r3, r0
 8001970:	3301      	adds	r3, #1
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461c      	mov	r4, r3
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	4814      	ldr	r0, [pc, #80]	@ (80019cc <mseq_display+0x7c>)
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4403      	add	r3, r0
 8001984:	3302      	adds	r3, #2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461d      	mov	r5, r3
 800198a:	88fa      	ldrh	r2, [r7, #6]
 800198c:	480f      	ldr	r0, [pc, #60]	@ (80019cc <mseq_display+0x7c>)
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4403      	add	r3, r0
 8001998:	3303      	adds	r3, #3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	462b      	mov	r3, r5
 80019a0:	4622      	mov	r2, r4
 80019a2:	480b      	ldr	r0, [pc, #44]	@ (80019d0 <mseq_display+0x80>)
 80019a4:	f009 fbc6 	bl	800b134 <iprintf>
        Mseq_Display_PacketFrame(i);
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f924 	bl	8001bf8 <Mseq_Display_PacketFrame>
    for (i = 0; i < mseq_cnt; ++i)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	3301      	adds	r3, #1
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <mseq_display+0x84>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3cf      	bcc.n	8001960 <mseq_display+0x10>
        // HAL_Delay(1);
    }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20003c28 	.word	0x20003c28
 80019d0:	0800bf34 	.word	0x0800bf34
 80019d4:	20003c26 	.word	0x20003c26

080019d8 <debug_buf_read>:


void debug_buf_read (void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  if (uart_rx_IDLE_TotalCnt >= MAX_RX_DATA)
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <debug_buf_read+0x2c>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d90a      	bls.n	80019fe <debug_buf_read+0x26>
  {
    uart_rx_IDLE_TotalCnt = 0;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <debug_buf_read+0x2c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	801a      	strh	r2, [r3, #0]

    mseq_display();
 80019ee:	f7ff ffaf 	bl	8001950 <mseq_display>
    // Mseq_Display_PacketFrame();

    HAL_UART_DMAStop(&huart2);
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <debug_buf_read+0x30>)
 80019f4:	f004 f924 	bl	8005c40 <HAL_UART_DMAStop>
    HAL_UART_DMAStop(&huart6);
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <debug_buf_read+0x34>)
 80019fa:	f004 f921 	bl	8005c40 <HAL_UART_DMAStop>
  }
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20003c24 	.word	0x20003c24
 8001a08:	20000410 	.word	0x20000410
 8001a0c:	20000458 	.word	0x20000458

08001a10 <Decode_MC_ReadWrite>:

static uint8_t Decode_MC_ReadWrite (uint8_t Data)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 7) & 0x01;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	09db      	lsrs	r3, r3, #7
 8001a26:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <Decode_MC_ReadWrite+0x24>
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d002      	beq.n	8001a38 <Decode_MC_ReadWrite+0x28>
 8001a32:	e003      	b.n	8001a3c <Decode_MC_ReadWrite+0x2c>
    {
        case 0 :
            return 'W';
 8001a34:	2357      	movs	r3, #87	@ 0x57
 8001a36:	e005      	b.n	8001a44 <Decode_MC_ReadWrite+0x34>
        case 1 :
            return 'R';
 8001a38:	2352      	movs	r3, #82	@ 0x52
 8001a3a:	e003      	b.n	8001a44 <Decode_MC_ReadWrite+0x34>
        default :
            printf("Unexpected value\n");
 8001a3c:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <Decode_MC_ReadWrite+0x3c>)
 8001a3e:	f009 fbe1 	bl	800b204 <puts>
            return 'X';
 8001a42:	2358      	movs	r3, #88	@ 0x58
    }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	0800bf44 	.word	0x0800bf44

08001a50 <Print_MC_CommunicationChannel>:

//     return MCdata & 0x03;
// }

static uint8_t Print_MC_CommunicationChannel (uint8_t Data)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	73fb      	strb	r3, [r7, #15]
    MCdata = (MCdata >> 5) & 0x03;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	73fb      	strb	r3, [r7, #15]
    
    switch (MCdata)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d827      	bhi.n	8001ac4 <Print_MC_CommunicationChannel+0x74>
 8001a74:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <Print_MC_CommunicationChannel+0x2c>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a9b 	.word	0x08001a9b
 8001a84:	08001aa9 	.word	0x08001aa9
 8001a88:	08001ab7 	.word	0x08001ab7
    {
        case 0 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_0);
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <Print_MC_CommunicationChannel+0x80>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4810      	ldr	r0, [pc, #64]	@ (8001ad4 <Print_MC_CommunicationChannel+0x84>)
 8001a94:	f009 fb4e 	bl	800b134 <iprintf>
            break;
 8001a98:	e014      	b.n	8001ac4 <Print_MC_CommunicationChannel+0x74>
        case 1 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_1);
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <Print_MC_CommunicationChannel+0x80>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <Print_MC_CommunicationChannel+0x84>)
 8001aa2:	f009 fb47 	bl	800b134 <iprintf>
            break;
 8001aa6:	e00d      	b.n	8001ac4 <Print_MC_CommunicationChannel+0x74>
        case 2 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_2);
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <Print_MC_CommunicationChannel+0x80>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <Print_MC_CommunicationChannel+0x84>)
 8001ab0:	f009 fb40 	bl	800b134 <iprintf>
            break;
 8001ab4:	e006      	b.n	8001ac4 <Print_MC_CommunicationChannel+0x74>
        case 3 :
            printf("%s,", CommunicationChannel.MC_Com_Ch_3);
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <Print_MC_CommunicationChannel+0x80>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <Print_MC_CommunicationChannel+0x84>)
 8001abe:	f009 fb39 	bl	800b134 <iprintf>
            break;
 8001ac2:	bf00      	nop
    }
}
 8001ac4:	bf00      	nop
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	0800bf58 	.word	0x0800bf58

08001ad8 <Decode_MC_Address>:

static uint8_t Decode_MC_Address (uint8_t Data)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	73fb      	strb	r3, [r7, #15]
    
    return MCdata & 0x1F;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	b2db      	uxtb	r3, r3
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <Decode_CKT_Type>:

static uint8_t Decode_CKT_Type (uint8_t Data)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
    
    MCdata = Data;
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	73fb      	strb	r3, [r7, #15]

    return (MCdata >> 6) & 0x03;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	b2db      	uxtb	r3, r3
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <Decode_CKT_Checksum>:

static uint8_t Decode_CKT_Checksum (uint8_t Data)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b3a:	b2db      	uxtb	r3, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <Decode_CKS_EventFlag>:

static uint8_t Decode_CKS_EventFlag (uint8_t Data)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	73fb      	strb	r3, [r7, #15]

    #if 0
    return (MCdata >> 7) & 0x01;
    #else
    MCdata = (MCdata >> 7) & 0x01;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	09db      	lsrs	r3, r3, #7
 8001b5e:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <Decode_CKS_EventFlag+0x24>
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d002      	beq.n	8001b70 <Decode_CKS_EventFlag+0x28>
 8001b6a:	e003      	b.n	8001b74 <Decode_CKS_EventFlag+0x2c>
    {
        case 0 :
            return 'N';
 8001b6c:	234e      	movs	r3, #78	@ 0x4e
 8001b6e:	e005      	b.n	8001b7c <Decode_CKS_EventFlag+0x34>
        case 1 :
            return 'E';
 8001b70:	2345      	movs	r3, #69	@ 0x45
 8001b72:	e003      	b.n	8001b7c <Decode_CKS_EventFlag+0x34>
        default :
            printf("Unexpected value\n");
 8001b74:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <Decode_CKS_EventFlag+0x3c>)
 8001b76:	f009 fb45 	bl	800b204 <puts>
            return 'X';
 8001b7a:	2358      	movs	r3, #88	@ 0x58
    }
    #endif
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	0800bf44 	.word	0x0800bf44

08001b88 <Decode_CKS_PDStatus>:

static uint8_t Decode_CKS_PDStatus (uint8_t Data)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	73fb      	strb	r3, [r7, #15]

    #if 0
    return (MCdata >> 6) & 0x01;
    #else
    MCdata = (MCdata >> 6) & 0x01;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]

    switch (MCdata)
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <Decode_CKS_PDStatus+0x2a>
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d002      	beq.n	8001bb6 <Decode_CKS_PDStatus+0x2e>
 8001bb0:	e003      	b.n	8001bba <Decode_CKS_PDStatus+0x32>
    {
        case 0 :
            return 'V';
 8001bb2:	2356      	movs	r3, #86	@ 0x56
 8001bb4:	e005      	b.n	8001bc2 <Decode_CKS_PDStatus+0x3a>
        case 1 :
            return 'N';
 8001bb6:	234e      	movs	r3, #78	@ 0x4e
 8001bb8:	e003      	b.n	8001bc2 <Decode_CKS_PDStatus+0x3a>
        default :
            printf("Unexpected value\n");
 8001bba:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <Decode_CKS_PDStatus+0x44>)
 8001bbc:	f009 fb22 	bl	800b204 <puts>
            return 'X';
 8001bc0:	2358      	movs	r3, #88	@ 0x58
    }
    #endif
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	0800bf44 	.word	0x0800bf44

08001bd0 <Decode_CKS_Checksum>:

static uint8_t Decode_CKS_Checksum (uint8_t Data)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
    uint8_t MCdata = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]

    MCdata = Data;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	73fb      	strb	r3, [r7, #15]

    return MCdata & 0x3F;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001be8:	b2db      	uxtb	r3, r3
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <Mseq_Display_PacketFrame>:
}



void Mseq_Display_PacketFrame (uint16_t cnt)
{
 8001bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	b089      	sub	sp, #36	@ 0x24
 8001bfe:	af04      	add	r7, sp, #16
 8001c00:	4603      	mov	r3, r0
 8001c02:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	81fb      	strh	r3, [r7, #14]
    i = cnt;
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	81fb      	strh	r3, [r7, #14]

    printf("%c,",Decode_MC_ReadWrite(mseq[i].MC));
 8001c0c:	89fa      	ldrh	r2, [r7, #14]
 8001c0e:	4960      	ldr	r1, [pc, #384]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	440b      	add	r3, r1
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fef6 	bl	8001a10 <Decode_MC_ReadWrite>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4619      	mov	r1, r3
 8001c28:	485a      	ldr	r0, [pc, #360]	@ (8001d94 <Mseq_Display_PacketFrame+0x19c>)
 8001c2a:	f009 fa83 	bl	800b134 <iprintf>
    Print_MC_CommunicationChannel(mseq[i].MC);
 8001c2e:	89fa      	ldrh	r2, [r7, #14]
 8001c30:	4957      	ldr	r1, [pc, #348]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff05 	bl	8001a50 <Print_MC_CommunicationChannel>
    printf("%02X,%d,%02X,%c,%c,%02X,", 
                                        Decode_MC_Address(mseq[i].MC),
 8001c46:	89fa      	ldrh	r2, [r7, #14]
 8001c48:	4951      	ldr	r1, [pc, #324]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	3301      	adds	r3, #1
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff3d 	bl	8001ad8 <Decode_MC_Address>
 8001c5e:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001c60:	461e      	mov	r6, r3
                                        Decode_CKT_Type(mseq[i].CKT),
 8001c62:	89fa      	ldrh	r2, [r7, #14]
 8001c64:	494a      	ldr	r1, [pc, #296]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	440b      	add	r3, r1
 8001c70:	3302      	adds	r3, #2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff42 	bl	8001afe <Decode_CKT_Type>
 8001c7a:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001c7c:	4698      	mov	r8, r3
                                        Decode_CKT_Checksum(mseq[i].CKT),
 8001c7e:	89fa      	ldrh	r2, [r7, #14]
 8001c80:	4943      	ldr	r1, [pc, #268]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff46 	bl	8001b22 <Decode_CKT_Checksum>
 8001c96:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001c98:	4699      	mov	r9, r3
                                        Decode_CKS_EventFlag(mseq[i].CKS),
 8001c9a:	89fa      	ldrh	r2, [r7, #14]
 8001c9c:	493c      	ldr	r1, [pc, #240]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3303      	adds	r3, #3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff4b 	bl	8001b48 <Decode_CKS_EventFlag>
 8001cb2:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001cb4:	461c      	mov	r4, r3
                                        Decode_CKS_PDStatus(mseq[i].CKS),
 8001cb6:	89fa      	ldrh	r2, [r7, #14]
 8001cb8:	4935      	ldr	r1, [pc, #212]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3303      	adds	r3, #3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <Decode_CKS_PDStatus>
 8001cce:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001cd0:	461d      	mov	r5, r3
                                        Decode_CKS_Checksum(mseq[i].CKS)
 8001cd2:	89fa      	ldrh	r2, [r7, #14]
 8001cd4:	492e      	ldr	r1, [pc, #184]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	440b      	add	r3, r1
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff73 	bl	8001bd0 <Decode_CKS_Checksum>
 8001cea:	4603      	mov	r3, r0
    printf("%02X,%d,%02X,%c,%c,%02X,", 
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	9501      	str	r5, [sp, #4]
 8001cf0:	9400      	str	r4, [sp, #0]
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	4642      	mov	r2, r8
 8001cf6:	4631      	mov	r1, r6
 8001cf8:	4827      	ldr	r0, [pc, #156]	@ (8001d98 <Mseq_Display_PacketFrame+0x1a0>)
 8001cfa:	f009 fa1b 	bl	800b134 <iprintf>
                                        );
    printf("%d,%d,%02X,%02X,%02X,%02X\r\n", 
                                        mseq[i].Master_octet_cnt,
 8001cfe:	89fa      	ldrh	r2, [r7, #14]
 8001d00:	4923      	ldr	r1, [pc, #140]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	440b      	add	r3, r1
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X\r\n", 
 8001d10:	461d      	mov	r5, r3
                                        mseq[i].Device_octet_cnt,
 8001d12:	89fa      	ldrh	r2, [r7, #14]
 8001d14:	491e      	ldr	r1, [pc, #120]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	440b      	add	r3, r1
 8001d20:	330d      	adds	r3, #13
 8001d22:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X\r\n", 
 8001d24:	461e      	mov	r6, r3
                                        mseq[i].Master_checksum,
 8001d26:	89fa      	ldrh	r2, [r7, #14]
 8001d28:	4919      	ldr	r1, [pc, #100]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	440b      	add	r3, r1
 8001d34:	330e      	adds	r3, #14
 8001d36:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X\r\n", 
 8001d38:	469c      	mov	ip, r3
                                        mseq[i].Device_checksum,
 8001d3a:	89fa      	ldrh	r2, [r7, #14]
 8001d3c:	4914      	ldr	r1, [pc, #80]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	440b      	add	r3, r1
 8001d48:	330f      	adds	r3, #15
 8001d4a:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X\r\n", 
 8001d4c:	4618      	mov	r0, r3
                                        mseq[i].Start_Octet,
 8001d4e:	89fa      	ldrh	r2, [r7, #14]
 8001d50:	490f      	ldr	r1, [pc, #60]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3310      	adds	r3, #16
 8001d5e:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X\r\n", 
 8001d60:	461c      	mov	r4, r3
                                        mseq[i].End_Octet
 8001d62:	89fa      	ldrh	r2, [r7, #14]
 8001d64:	490a      	ldr	r1, [pc, #40]	@ (8001d90 <Mseq_Display_PacketFrame+0x198>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	440b      	add	r3, r1
 8001d70:	3311      	adds	r3, #17
 8001d72:	781b      	ldrb	r3, [r3, #0]
    printf("%d,%d,%02X,%02X,%02X,%02X\r\n", 
 8001d74:	9302      	str	r3, [sp, #8]
 8001d76:	9401      	str	r4, [sp, #4]
 8001d78:	9000      	str	r0, [sp, #0]
 8001d7a:	4663      	mov	r3, ip
 8001d7c:	4632      	mov	r2, r6
 8001d7e:	4629      	mov	r1, r5
 8001d80:	4806      	ldr	r0, [pc, #24]	@ (8001d9c <Mseq_Display_PacketFrame+0x1a4>)
 8001d82:	f009 f9d7 	bl	800b134 <iprintf>
                                        );
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d90:	20003c28 	.word	0x20003c28
 8001d94:	0800bf5c 	.word	0x0800bf5c
 8001d98:	0800bf60 	.word	0x0800bf60
 8001d9c:	0800bf7c 	.word	0x0800bf7c

08001da0 <UserButton_BufferClear>:


static uint8_t UserButton_BufferClear (void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    uint8_t buttonstatus = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]

    if (TIM1_CNT_2 >= 100)
 8001daa:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <UserButton_BufferClear+0x58>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b63      	cmp	r3, #99	@ 0x63
 8001db0:	d918      	bls.n	8001de4 <UserButton_BufferClear+0x44>
    {
        TIM1_CNT_2 = 0;
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <UserButton_BufferClear+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        if (UserButton_Flag == 1)
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <UserButton_BufferClear+0x5c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d111      	bne.n	8001de4 <UserButton_BufferClear+0x44>
        {
            buttonstatus = UserButton_Flag;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <UserButton_BufferClear+0x5c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	71fb      	strb	r3, [r7, #7]

            UserButton_Flag = 0;
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <UserButton_BufferClear+0x5c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]

            memset(uart2_rx_IDLE_buf, 0, UART_RX_IDLE_BUFSIZE);
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <UserButton_BufferClear+0x60>)
 8001dd4:	f009 faf6 	bl	800b3c4 <memset>
            memset(uart6_rx_IDLE_buf, 0, UART_RX_IDLE_BUFSIZE);
 8001dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4809      	ldr	r0, [pc, #36]	@ (8001e04 <UserButton_BufferClear+0x64>)
 8001de0:	f009 faf0 	bl	800b3c4 <memset>
            // memset(mseq, 0, 1000);
        }
    }
    return !buttonstatus;
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20001508 	.word	0x20001508
 8001dfc:	20001510 	.word	0x20001510
 8001e00:	20001514 	.word	0x20001514
 8001e04:	2000289c 	.word	0x2000289c

08001e08 <UART_RX_BufferClear>:

void UART_RX_BufferClear (void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    if(UserButton_BufferClear() == HAL_OK)
 8001e0c:	f7ff ffc8 	bl	8001da0 <UserButton_BufferClear>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d14e      	bne.n	8001eb4 <UART_RX_BufferClear+0xac>
    {
        printf("\r\nUART RX Buffer Clear.\r\n\n");
 8001e16:	4828      	ldr	r0, [pc, #160]	@ (8001eb8 <UART_RX_BufferClear+0xb0>)
 8001e18:	f009 f9f4 	bl	800b204 <puts>
        
        uart_rx_IDLE_TotalCnt = 0;
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <UART_RX_BufferClear+0xb4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	801a      	strh	r2, [r3, #0]
        mseq_cnt = 0;
 8001e22:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <UART_RX_BufferClear+0xb8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	801a      	strh	r2, [r3, #0]
        
        __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8001e28:	4b26      	ldr	r3, [pc, #152]	@ (8001ec4 <UART_RX_BufferClear+0xbc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <UART_RX_BufferClear+0xbc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <UART_RX_BufferClear+0xbc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e40:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart2_rx);
 8001e42:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <UART_RX_BufferClear+0xbc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <UART_RX_BufferClear+0xbc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e56:	491c      	ldr	r1, [pc, #112]	@ (8001ec8 <UART_RX_BufferClear+0xc0>)
 8001e58:	481c      	ldr	r0, [pc, #112]	@ (8001ecc <UART_RX_BufferClear+0xc4>)
 8001e5a:	f003 ff70 	bl	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001e5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <UART_RX_BufferClear+0xbc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <UART_RX_BufferClear+0xbc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0208 	bic.w	r2, r2, #8
 8001e6c:	601a      	str	r2, [r3, #0]

        __HAL_DMA_DISABLE(&hdma_usart6_rx);
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <UART_RX_BufferClear+0xc8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <UART_RX_BufferClear+0xc8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
        hdma_usart6_rx.Instance->NDTR = UART_RX_IDLE_BUFSIZE;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <UART_RX_BufferClear+0xc8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart6_rx);
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <UART_RX_BufferClear+0xc8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <UART_RX_BufferClear+0xc8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

        HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *)uart6_rx_IDLE_buf, UART_RX_IDLE_BUFSIZE);
 8001e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9c:	490d      	ldr	r1, [pc, #52]	@ (8001ed4 <UART_RX_BufferClear+0xcc>)
 8001e9e:	480e      	ldr	r0, [pc, #56]	@ (8001ed8 <UART_RX_BufferClear+0xd0>)
 8001ea0:	f003 ff4d 	bl	8005d3e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <UART_RX_BufferClear+0xc8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <UART_RX_BufferClear+0xc8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0208 	bic.w	r2, r2, #8
 8001eb2:	601a      	str	r2, [r3, #0]
        // HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);
        // HAL_UART_Receive_DMA(&huart3, uart3_rx_buf, UART_RXDATA_MAX);
    }

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0800bf98 	.word	0x0800bf98
 8001ebc:	20003c24 	.word	0x20003c24
 8001ec0:	20003c26 	.word	0x20003c26
 8001ec4:	200004a0 	.word	0x200004a0
 8001ec8:	20001514 	.word	0x20001514
 8001ecc:	20000410 	.word	0x20000410
 8001ed0:	20000500 	.word	0x20000500
 8001ed4:	2000289c 	.word	0x2000289c
 8001ed8:	20000458 	.word	0x20000458

08001edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ee0:	f7ff f98c 	bl	80011fc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee4:	480c      	ldr	r0, [pc, #48]	@ (8001f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ee6:	490d      	ldr	r1, [pc, #52]	@ (8001f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001efc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f009 faaf 	bl	800b46c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0e:	f7fe fd5d 	bl	80009cc <main>
  bx  lr    
 8001f12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001f20:	0800c060 	.word	0x0800c060
  ldr r2, =_sbss
 8001f24:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001f28:	20009fac 	.word	0x20009fac

08001f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f34:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	@ (8001f70 <HAL_Init+0x40>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <HAL_Init+0x40>)
 8001f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a07      	ldr	r2, [pc, #28]	@ (8001f70 <HAL_Init+0x40>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f000 f94f 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 f808 	bl	8001f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f64:	f7fe ff1c 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <HAL_InitTick+0x54>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_InitTick+0x58>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f967 	bl	8002266 <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00e      	b.n	8001fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d80a      	bhi.n	8001fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f000 f92f 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb4:	4a06      	ldr	r2, [pc, #24]	@ (8001fd0 <HAL_InitTick+0x5c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000018 	.word	0x20000018
 8001fd0:	20000014 	.word	0x20000014

08001fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_IncTick+0x20>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_IncTick+0x24>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	@ (8001ff8 <HAL_IncTick+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000018 	.word	0x20000018
 8001ff8:	20008278 	.word	0x20008278

08001ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b03      	ldr	r3, [pc, #12]	@ (8002010 <HAL_GetTick+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20008278 	.word	0x20008278

08002014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff ffee 	bl	8001ffc <HAL_GetTick>
 8002020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d005      	beq.n	800203a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_Delay+0x44>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203a:	bf00      	nop
 800203c:	f7ff ffde 	bl	8001ffc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f7      	bhi.n	800203c <HAL_Delay+0x28>
  {
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000018 	.word	0x20000018

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	@ (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	@ (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	@ (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	@ 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff29 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff3e 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff8e 	bl	8002150 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff31 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff feb6 	bl	8001ffc <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e099      	b.n	80023d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022bc:	e00f      	b.n	80022de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022be:	f7ff fe9d 	bl	8001ffc <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d908      	bls.n	80022de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2203      	movs	r2, #3
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e078      	b.n	80023d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e8      	bne.n	80022be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4b38      	ldr	r3, [pc, #224]	@ (80023d8 <HAL_DMA_Init+0x158>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	2b04      	cmp	r3, #4
 8002336:	d107      	bne.n	8002348 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	4313      	orrs	r3, r2
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f023 0307 	bic.w	r3, r3, #7
 800235e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	2b04      	cmp	r3, #4
 8002370:	d117      	bne.n	80023a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00e      	beq.n	80023a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fb01 	bl	800298c <DMA_CheckFifoParam>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800239e:	2301      	movs	r3, #1
 80023a0:	e016      	b.n	80023d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fab8 	bl	8002920 <DMA_CalcBaseAndBitshift>
 80023b0:	4603      	mov	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b8:	223f      	movs	r2, #63	@ 0x3f
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	f010803f 	.word	0xf010803f

080023dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_DMA_Start_IT+0x26>
 80023fe:	2302      	movs	r3, #2
 8002400:	e040      	b.n	8002484 <HAL_DMA_Start_IT+0xa8>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d12f      	bne.n	8002476 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2202      	movs	r2, #2
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fa4a 	bl	80028c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002434:	223f      	movs	r2, #63	@ 0x3f
 8002436:	409a      	lsls	r2, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0216 	orr.w	r2, r2, #22
 800244a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0208 	orr.w	r2, r2, #8
 8002462:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e005      	b.n	8002482 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800247e:	2302      	movs	r3, #2
 8002480:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002482:	7dfb      	ldrb	r3, [r7, #23]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002498:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800249a:	f7ff fdaf 	bl	8001ffc <HAL_GetTick>
 800249e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d008      	beq.n	80024be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e052      	b.n	8002564 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0216 	bic.w	r2, r2, #22
 80024cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <HAL_DMA_Abort+0x62>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0208 	bic.w	r2, r2, #8
 80024fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250e:	e013      	b.n	8002538 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002510:	f7ff fd74 	bl	8001ffc <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b05      	cmp	r3, #5
 800251c:	d90c      	bls.n	8002538 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2203      	movs	r2, #3
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e015      	b.n	8002564 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e4      	bne.n	8002510 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	223f      	movs	r2, #63	@ 0x3f
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d004      	beq.n	800258a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00c      	b.n	80025a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2205      	movs	r2, #5
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025bc:	4b8e      	ldr	r3, [pc, #568]	@ (80027f8 <HAL_DMA_IRQHandler+0x248>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a8e      	ldr	r2, [pc, #568]	@ (80027fc <HAL_DMA_IRQHandler+0x24c>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025da:	2208      	movs	r2, #8
 80025dc:	409a      	lsls	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01a      	beq.n	800261c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0204 	bic.w	r2, r2, #4
 8002602:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002608:	2208      	movs	r2, #8
 800260a:	409a      	lsls	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	2201      	movs	r2, #1
 8002622:	409a      	lsls	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	2201      	movs	r2, #1
 8002640:	409a      	lsls	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264a:	f043 0202 	orr.w	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002656:	2204      	movs	r2, #4
 8002658:	409a      	lsls	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00b      	beq.n	8002688 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	2204      	movs	r2, #4
 8002676:	409a      	lsls	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	2210      	movs	r2, #16
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d043      	beq.n	8002720 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03c      	beq.n	8002720 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	2210      	movs	r2, #16
 80026ac:	409a      	lsls	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d018      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d024      	beq.n	8002720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
 80026de:	e01f      	b.n	8002720 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01b      	beq.n	8002720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
 80026f0:	e016      	b.n	8002720 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d107      	bne.n	8002710 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0208 	bic.w	r2, r2, #8
 800270e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002724:	2220      	movs	r2, #32
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 808f 	beq.w	8002850 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8087 	beq.w	8002850 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	2220      	movs	r2, #32
 8002748:	409a      	lsls	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b05      	cmp	r3, #5
 8002758:	d136      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0216 	bic.w	r2, r2, #22
 8002768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002778:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <HAL_DMA_IRQHandler+0x1da>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0208 	bic.w	r2, r2, #8
 8002798:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	223f      	movs	r2, #63	@ 0x3f
 80027a0:	409a      	lsls	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d07e      	beq.n	80028bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
        }
        return;
 80027c6:	e079      	b.n	80028bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01d      	beq.n	8002812 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d031      	beq.n	8002850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
 80027f4:	e02c      	b.n	8002850 <HAL_DMA_IRQHandler+0x2a0>
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000
 80027fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d023      	beq.n	8002850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
 8002810:	e01e      	b.n	8002850 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10f      	bne.n	8002840 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0210 	bic.w	r2, r2, #16
 800282e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	2b00      	cmp	r3, #0
 8002856:	d032      	beq.n	80028be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d022      	beq.n	80028aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2205      	movs	r2, #5
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3301      	adds	r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	d307      	bcc.n	8002898 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f2      	bne.n	800287c <HAL_DMA_IRQHandler+0x2cc>
 8002896:	e000      	b.n	800289a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002898:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
 80028ba:	e000      	b.n	80028be <HAL_DMA_IRQHandler+0x30e>
        return;
 80028bc:	bf00      	nop
    }
  }
}
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b40      	cmp	r3, #64	@ 0x40
 80028f0:	d108      	bne.n	8002904 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002902:	e007      	b.n	8002914 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	3b10      	subs	r3, #16
 8002930:	4a14      	ldr	r2, [pc, #80]	@ (8002984 <DMA_CalcBaseAndBitshift+0x64>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800293a:	4a13      	ldr	r2, [pc, #76]	@ (8002988 <DMA_CalcBaseAndBitshift+0x68>)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d909      	bls.n	8002962 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	1d1a      	adds	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002960:	e007      	b.n	8002972 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	aaaaaaab 	.word	0xaaaaaaab
 8002988:	0800c014 	.word	0x0800c014

0800298c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11f      	bne.n	80029e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d856      	bhi.n	8002a5a <DMA_CheckFifoParam+0xce>
 80029ac:	a201      	add	r2, pc, #4	@ (adr r2, 80029b4 <DMA_CheckFifoParam+0x28>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	080029c5 	.word	0x080029c5
 80029b8:	080029d7 	.word	0x080029d7
 80029bc:	080029c5 	.word	0x080029c5
 80029c0:	08002a5b 	.word	0x08002a5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d046      	beq.n	8002a5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d4:	e043      	b.n	8002a5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029de:	d140      	bne.n	8002a62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e4:	e03d      	b.n	8002a62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ee:	d121      	bne.n	8002a34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d837      	bhi.n	8002a66 <DMA_CheckFifoParam+0xda>
 80029f6:	a201      	add	r2, pc, #4	@ (adr r2, 80029fc <DMA_CheckFifoParam+0x70>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a0d 	.word	0x08002a0d
 8002a00:	08002a13 	.word	0x08002a13
 8002a04:	08002a0d 	.word	0x08002a0d
 8002a08:	08002a25 	.word	0x08002a25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a10:	e030      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d025      	beq.n	8002a6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a22:	e022      	b.n	8002a6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a2c:	d11f      	bne.n	8002a6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a32:	e01c      	b.n	8002a6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d903      	bls.n	8002a42 <DMA_CheckFifoParam+0xb6>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d003      	beq.n	8002a48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a40:	e018      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      break;
 8002a46:	e015      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e00b      	b.n	8002a72 <DMA_CheckFifoParam+0xe6>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e00a      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e008      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e006      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e004      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
    }
  } 
  
  return status; 
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop

08002a84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e08a      	b.n	8002bac <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2223      	movs	r2, #35	@ 0x23
 8002aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fd fded 	bl	8000688 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b40      	ldr	r3, [pc, #256]	@ (8002bb4 <HAL_ETH_Init+0x130>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb4 <HAL_ETH_Init+0x130>)
 8002ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb4 <HAL_ETH_Init+0x130>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_ETH_Init+0x134>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb8 <HAL_ETH_Init+0x134>)
 8002ad0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ad4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ad6:	4b38      	ldr	r3, [pc, #224]	@ (8002bb8 <HAL_ETH_Init+0x134>)
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4936      	ldr	r1, [pc, #216]	@ (8002bb8 <HAL_ETH_Init+0x134>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <HAL_ETH_Init+0x134>)
 8002ae6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002afe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b00:	f7ff fa7c 	bl	8001ffc <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b06:	e011      	b.n	8002b2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b08:	f7ff fa78 	bl	8001ffc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b16:	d909      	bls.n	8002b2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	22e0      	movs	r2, #224	@ 0xe0
 8002b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e03f      	b.n	8002bac <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e4      	bne.n	8002b08 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f97a 	bl	8002e38 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fa25 	bl	8002f94 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa7b 	bl	8003046 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	461a      	mov	r2, r3
 8002b56:	2100      	movs	r1, #0
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f9e3 	bl	8002f24 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b82:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002b96:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40013800 	.word	0x40013800

08002bbc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4b53      	ldr	r3, [pc, #332]	@ (8002d20 <ETH_SetMACConfig+0x164>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	7b9b      	ldrb	r3, [r3, #14]
 8002bda:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	7c12      	ldrb	r2, [r2, #16]
 8002be0:	2a00      	cmp	r2, #0
 8002be2:	d102      	bne.n	8002bea <ETH_SetMACConfig+0x2e>
 8002be4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002be8:	e000      	b.n	8002bec <ETH_SetMACConfig+0x30>
 8002bea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002bec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	7c52      	ldrb	r2, [r2, #17]
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	d102      	bne.n	8002bfc <ETH_SetMACConfig+0x40>
 8002bf6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002bfa:	e000      	b.n	8002bfe <ETH_SetMACConfig+0x42>
 8002bfc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002bfe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	7fdb      	ldrb	r3, [r3, #31]
 8002c0a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002c0c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	7f92      	ldrb	r2, [r2, #30]
 8002c18:	2a00      	cmp	r2, #0
 8002c1a:	d102      	bne.n	8002c22 <ETH_SetMACConfig+0x66>
 8002c1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c20:	e000      	b.n	8002c24 <ETH_SetMACConfig+0x68>
 8002c22:	2200      	movs	r2, #0
                        macconf->Speed |
 8002c24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	7f1b      	ldrb	r3, [r3, #28]
 8002c2a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c2c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	791b      	ldrb	r3, [r3, #4]
 8002c38:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002c3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c42:	2a00      	cmp	r2, #0
 8002c44:	d102      	bne.n	8002c4c <ETH_SetMACConfig+0x90>
 8002c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c4a:	e000      	b.n	8002c4e <ETH_SetMACConfig+0x92>
 8002c4c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	7bdb      	ldrb	r3, [r3, #15]
 8002c54:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c56:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c64:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002c66:	4313      	orrs	r3, r2
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff f9c8 	bl	8002014 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002caa:	2a00      	cmp	r2, #0
 8002cac:	d101      	bne.n	8002cb2 <ETH_SetMACConfig+0xf6>
 8002cae:	2280      	movs	r2, #128	@ 0x80
 8002cb0:	e000      	b.n	8002cb4 <ETH_SetMACConfig+0xf8>
 8002cb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cb4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002cba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002cc2:	2a01      	cmp	r2, #1
 8002cc4:	d101      	bne.n	8002cca <ETH_SetMACConfig+0x10e>
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	e000      	b.n	8002ccc <ETH_SetMACConfig+0x110>
 8002cca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ccc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002cd4:	2a01      	cmp	r2, #1
 8002cd6:	d101      	bne.n	8002cdc <ETH_SetMACConfig+0x120>
 8002cd8:	2204      	movs	r2, #4
 8002cda:	e000      	b.n	8002cde <ETH_SetMACConfig+0x122>
 8002cdc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002cde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d101      	bne.n	8002cee <ETH_SetMACConfig+0x132>
 8002cea:	2202      	movs	r2, #2
 8002cec:	e000      	b.n	8002cf0 <ETH_SetMACConfig+0x134>
 8002cee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff f983 	bl	8002014 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	fd20810f 	.word	0xfd20810f

08002d24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e34 <ETH_SetDMAConfig+0x110>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	7b1b      	ldrb	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <ETH_SetDMAConfig+0x2c>
 8002d4a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d4e:	e000      	b.n	8002d52 <ETH_SetDMAConfig+0x2e>
 8002d50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	7b5b      	ldrb	r3, [r3, #13]
 8002d56:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d58:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	7f52      	ldrb	r2, [r2, #29]
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d102      	bne.n	8002d68 <ETH_SetDMAConfig+0x44>
 8002d62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d66:	e000      	b.n	8002d6a <ETH_SetDMAConfig+0x46>
 8002d68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	7b9b      	ldrb	r3, [r3, #14]
 8002d70:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d72:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	7f1b      	ldrb	r3, [r3, #28]
 8002d7e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	7f9b      	ldrb	r3, [r3, #30]
 8002d86:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d88:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d96:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da8:	461a      	mov	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7ff f92a 	bl	8002014 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	791b      	ldrb	r3, [r3, #4]
 8002dd2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dd8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002dde:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002de4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002dee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002df6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002dfc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e0a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f7ff f8fb 	bl	8002014 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	f8de3f23 	.word	0xf8de3f23

08002e38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b0a6      	sub	sp, #152	@ 0x98
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ea0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ea6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002eb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fe7f 	bl	8002bbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002eea:	2301      	movs	r3, #1
 8002eec:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002eee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ef2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ef4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ef8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002efe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f0e:	f107 0308 	add.w	r3, r7, #8
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff05 	bl	8002d24 <ETH_SetDMAConfig>
}
 8002f1a:	bf00      	nop
 8002f1c:	3798      	adds	r7, #152	@ 0x98
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3305      	adds	r3, #5
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	3204      	adds	r2, #4
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <ETH_MACAddressConfig+0x68>)
 8002f46:	4413      	add	r3, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3303      	adds	r3, #3
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	061a      	lsls	r2, r3, #24
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3302      	adds	r3, #2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3301      	adds	r3, #1
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	7812      	ldrb	r2, [r2, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <ETH_MACAddressConfig+0x6c>)
 8002f76:	4413      	add	r3, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6013      	str	r3, [r2, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40028040 	.word	0x40028040
 8002f90:	40028044 	.word	0x40028044

08002f94 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e03e      	b.n	8003020 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68d9      	ldr	r1, [r3, #12]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	3206      	adds	r2, #6
 8002fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d80c      	bhi.n	8003004 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68d9      	ldr	r1, [r3, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e004      	b.n	800300e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	461a      	mov	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3301      	adds	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d9bd      	bls.n	8002fa2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003038:	611a      	str	r2, [r3, #16]
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e048      	b.n	80030e6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6919      	ldr	r1, [r3, #16]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	440b      	add	r3, r1
 8003064:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2200      	movs	r2, #0
 8003082:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003090:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	3212      	adds	r2, #18
 80030b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d80c      	bhi.n	80030d6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6919      	ldr	r1, [r3, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60da      	str	r2, [r3, #12]
 80030d4:	e004      	b.n	80030e0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d9b3      	bls.n	8003054 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003116:	60da      	str	r2, [r3, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e177      	b.n	8003430 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	f040 8166 	bne.w	800342a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d005      	beq.n	8003176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003172:	2b02      	cmp	r3, #2
 8003174:	d130      	bne.n	80031d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 0201 	and.w	r2, r3, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d017      	beq.n	8003214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d123      	bne.n	8003268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	08da      	lsrs	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3208      	adds	r2, #8
 8003262:	69b9      	ldr	r1, [r7, #24]
 8003264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0203 	and.w	r2, r3, #3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80c0 	beq.w	800342a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b66      	ldr	r3, [pc, #408]	@ (8003448 <HAL_GPIO_Init+0x324>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	4a65      	ldr	r2, [pc, #404]	@ (8003448 <HAL_GPIO_Init+0x324>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ba:	4b63      	ldr	r3, [pc, #396]	@ (8003448 <HAL_GPIO_Init+0x324>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c6:	4a61      	ldr	r2, [pc, #388]	@ (800344c <HAL_GPIO_Init+0x328>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <HAL_GPIO_Init+0x32c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d037      	beq.n	8003362 <HAL_GPIO_Init+0x23e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a57      	ldr	r2, [pc, #348]	@ (8003454 <HAL_GPIO_Init+0x330>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_GPIO_Init+0x23a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a56      	ldr	r2, [pc, #344]	@ (8003458 <HAL_GPIO_Init+0x334>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02b      	beq.n	800335a <HAL_GPIO_Init+0x236>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a55      	ldr	r2, [pc, #340]	@ (800345c <HAL_GPIO_Init+0x338>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d025      	beq.n	8003356 <HAL_GPIO_Init+0x232>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a54      	ldr	r2, [pc, #336]	@ (8003460 <HAL_GPIO_Init+0x33c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01f      	beq.n	8003352 <HAL_GPIO_Init+0x22e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a53      	ldr	r2, [pc, #332]	@ (8003464 <HAL_GPIO_Init+0x340>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d019      	beq.n	800334e <HAL_GPIO_Init+0x22a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a52      	ldr	r2, [pc, #328]	@ (8003468 <HAL_GPIO_Init+0x344>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_GPIO_Init+0x226>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a51      	ldr	r2, [pc, #324]	@ (800346c <HAL_GPIO_Init+0x348>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00d      	beq.n	8003346 <HAL_GPIO_Init+0x222>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a50      	ldr	r2, [pc, #320]	@ (8003470 <HAL_GPIO_Init+0x34c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <HAL_GPIO_Init+0x21e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4f      	ldr	r2, [pc, #316]	@ (8003474 <HAL_GPIO_Init+0x350>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_GPIO_Init+0x21a>
 800333a:	2309      	movs	r3, #9
 800333c:	e012      	b.n	8003364 <HAL_GPIO_Init+0x240>
 800333e:	230a      	movs	r3, #10
 8003340:	e010      	b.n	8003364 <HAL_GPIO_Init+0x240>
 8003342:	2308      	movs	r3, #8
 8003344:	e00e      	b.n	8003364 <HAL_GPIO_Init+0x240>
 8003346:	2307      	movs	r3, #7
 8003348:	e00c      	b.n	8003364 <HAL_GPIO_Init+0x240>
 800334a:	2306      	movs	r3, #6
 800334c:	e00a      	b.n	8003364 <HAL_GPIO_Init+0x240>
 800334e:	2305      	movs	r3, #5
 8003350:	e008      	b.n	8003364 <HAL_GPIO_Init+0x240>
 8003352:	2304      	movs	r3, #4
 8003354:	e006      	b.n	8003364 <HAL_GPIO_Init+0x240>
 8003356:	2303      	movs	r3, #3
 8003358:	e004      	b.n	8003364 <HAL_GPIO_Init+0x240>
 800335a:	2302      	movs	r3, #2
 800335c:	e002      	b.n	8003364 <HAL_GPIO_Init+0x240>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_GPIO_Init+0x240>
 8003362:	2300      	movs	r3, #0
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f002 0203 	and.w	r2, r2, #3
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	4093      	lsls	r3, r2
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003374:	4935      	ldr	r1, [pc, #212]	@ (800344c <HAL_GPIO_Init+0x328>)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_GPIO_Init+0x354>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033a6:	4a34      	ldr	r2, [pc, #208]	@ (8003478 <HAL_GPIO_Init+0x354>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_GPIO_Init+0x354>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d0:	4a29      	ldr	r2, [pc, #164]	@ (8003478 <HAL_GPIO_Init+0x354>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033d6:	4b28      	ldr	r3, [pc, #160]	@ (8003478 <HAL_GPIO_Init+0x354>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003478 <HAL_GPIO_Init+0x354>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003400:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_GPIO_Init+0x354>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003424:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <HAL_GPIO_Init+0x354>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3301      	adds	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b0f      	cmp	r3, #15
 8003434:	f67f ae84 	bls.w	8003140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3724      	adds	r7, #36	@ 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40013800 	.word	0x40013800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40021400 	.word	0x40021400
 8003468:	40021800 	.word	0x40021800
 800346c:	40021c00 	.word	0x40021c00
 8003470:	40022000 	.word	0x40022000
 8003474:	40022400 	.word	0x40022400
 8003478:	40013c00 	.word	0x40013c00

0800347c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
 8003488:	4613      	mov	r3, r2
 800348a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800348c:	787b      	ldrb	r3, [r7, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003498:	e003      	b.n	80034a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800349a:	887b      	ldrh	r3, [r7, #2]
 800349c:	041a      	lsls	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	619a      	str	r2, [r3, #24]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034ba:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034c6:	4a05      	ldr	r2, [pc, #20]	@ (80034dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fdf8 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e101      	b.n	80036f6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d106      	bne.n	8003512 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f007 fa2d 	bl	800a96c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2203      	movs	r2, #3
 8003516:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003520:	d102      	bne.n	8003528 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f003 fdfc 	bl	800712a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7c1a      	ldrb	r2, [r3, #16]
 800353a:	f88d 2000 	strb.w	r2, [sp]
 800353e:	3304      	adds	r3, #4
 8003540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003542:	f003 fcdb 	bl	8006efc <USB_CoreInit>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0ce      	b.n	80036f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f003 fdf4 	bl	800714c <USB_SetCurrentMode>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0bf      	b.n	80036f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	e04a      	b.n	8003612 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3315      	adds	r3, #21
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3314      	adds	r3, #20
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	b298      	uxth	r0, r3
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	332e      	adds	r3, #46	@ 0x2e
 80035b8:	4602      	mov	r2, r0
 80035ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3318      	adds	r3, #24
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	331c      	adds	r3, #28
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3320      	adds	r3, #32
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3324      	adds	r3, #36	@ 0x24
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	791b      	ldrb	r3, [r3, #4]
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3af      	bcc.n	800357c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e044      	b.n	80036ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3301      	adds	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	791b      	ldrb	r3, [r3, #4]
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3b5      	bcc.n	8003622 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7c1a      	ldrb	r2, [r3, #16]
 80036be:	f88d 2000 	strb.w	r2, [sp]
 80036c2:	3304      	adds	r3, #4
 80036c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c6:	f003 fd8d 	bl	80071e4 <USB_DevInit>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e00c      	b.n	80036f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f004 fdd7 	bl	80082a2 <USB_DevDisconnect>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_PCD_Start+0x1c>
 8003716:	2302      	movs	r3, #2
 8003718:	e022      	b.n	8003760 <HAL_PCD_Start+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f003 fcde 	bl	8007108 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f004 fd85 	bl	8008260 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b08d      	sub	sp, #52	@ 0x34
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f004 fe43 	bl	800840a <USB_GetMode>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 848c 	bne.w	80040a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f004 fda7 	bl	80082e4 <USB_ReadInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8482 	beq.w	80040a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 fd94 	bl	80082e4 <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d107      	bne.n	80037d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f002 0202 	and.w	r2, r2, #2
 80037d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 fd82 	bl	80082e4 <USB_ReadInterrupts>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d161      	bne.n	80038ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0210 	bic.w	r2, r2, #16
 80037f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	0c5b      	lsrs	r3, r3, #17
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	2b02      	cmp	r3, #2
 8003824:	d124      	bne.n	8003870 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d035      	beq.n	800389e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	6a38      	ldr	r0, [r7, #32]
 8003846:	f004 fbb9 	bl	8007fbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003856:	441a      	add	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003868:	441a      	add	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	615a      	str	r2, [r3, #20]
 800386e:	e016      	b.n	800389e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	0c5b      	lsrs	r3, r3, #17
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	2b06      	cmp	r3, #6
 800387a:	d110      	bne.n	800389e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003882:	2208      	movs	r2, #8
 8003884:	4619      	mov	r1, r3
 8003886:	6a38      	ldr	r0, [r7, #32]
 8003888:	f004 fb98 	bl	8007fbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003898:	441a      	add	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0210 	orr.w	r2, r2, #16
 80038ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f004 fd16 	bl	80082e4 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038c2:	f040 80a7 	bne.w	8003a14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 fd1b 	bl	800830a <USB_ReadDevAllOutEpInterrupt>
 80038d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80038d6:	e099      	b.n	8003a0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 808e 	beq.w	8003a00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 fd3f 	bl	8008372 <USB_ReadDevOutEPInterrupt>
 80038f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	2301      	movs	r3, #1
 8003910:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fea3 	bl	8004660 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	2308      	movs	r3, #8
 8003934:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003936:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 ff79 	bl	8004830 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003954:	461a      	mov	r2, r3
 8003956:	2310      	movs	r3, #16
 8003958:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d030      	beq.n	80039c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b80      	cmp	r3, #128	@ 0x80
 800396e:	d109      	bne.n	8003984 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800397e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003982:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f007 f8f0 	bl	800ab94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	2302      	movs	r3, #2
 80039c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039dc:	461a      	mov	r2, r3
 80039de:	2320      	movs	r3, #32
 80039e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	3301      	adds	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f47f af62 	bne.w	80038d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 fc63 	bl	80082e4 <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a28:	f040 80db 	bne.w	8003be2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f004 fc84 	bl	800833e <USB_ReadDevAllInEpInterrupt>
 8003a36:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a3c:	e0cd      	b.n	8003bda <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80c2 	beq.w	8003bce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f004 fcaa 	bl	80083ae <USB_ReadDevInEPInterrupt>
 8003a5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d057      	beq.n	8003b16 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69f9      	ldr	r1, [r7, #28]
 8003a82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a86:	4013      	ands	r3, r2
 8003a88:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	2301      	movs	r3, #1
 8003a9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	799b      	ldrb	r3, [r3, #6]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d132      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4403      	add	r3, r0
 8003ac4:	331c      	adds	r3, #28
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4419      	add	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	3320      	adds	r3, #32
 8003ada:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d113      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x3a2>
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3324      	adds	r3, #36	@ 0x24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b02:	461a      	mov	r2, r3
 8003b04:	2101      	movs	r1, #1
 8003b06:	f004 fcb1 	bl	800846c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f006 ffba 	bl	800aa8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2308      	movs	r3, #8
 8003b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b64:	461a      	mov	r2, r3
 8003b66:	2340      	movs	r3, #64	@ 0x40
 8003b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d023      	beq.n	8003bbc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b76:	6a38      	ldr	r0, [r7, #32]
 8003b78:	f003 fc98 	bl	80074ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	3310      	adds	r3, #16
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	78db      	ldrb	r3, [r3, #3]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d108      	bne.n	8003baa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f007 f807 	bl	800abb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2302      	movs	r3, #2
 8003bba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fcbd 	bl	8004548 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f af2e 	bne.w	8003a3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f004 fb7c 	bl	80082e4 <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bf6:	d122      	bne.n	8003c3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d108      	bne.n	8003c28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c1e:	2100      	movs	r1, #0
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fea3 	bl	800496c <HAL_PCDEx_LPM_Callback>
 8003c26:	e002      	b.n	8003c2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f006 ffa5 	bl	800ab78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 fb4e 	bl	80082e4 <USB_ReadInterrupts>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c52:	d112      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d102      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f006 ff61 	bl	800ab2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c78:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 fb30 	bl	80082e4 <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8e:	f040 80b7 	bne.w	8003e00 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2110      	movs	r1, #16
 8003cac:	4618      	mov	r0, r3
 8003cae:	f003 fbfd 	bl	80074ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb6:	e046      	b.n	8003d46 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cdc:	0151      	lsls	r1, r2, #5
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	440a      	add	r2, r1
 8003ce2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ce6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cfe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d10:	0151      	lsls	r1, r2, #5
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	440a      	add	r2, r1
 8003d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d3e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d42:	3301      	adds	r3, #1
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	791b      	ldrb	r3, [r3, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d3b2      	bcc.n	8003cb8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d60:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7bdb      	ldrb	r3, [r3, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d7e:	f043 030b 	orr.w	r3, r3, #11
 8003d82:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d94:	f043 030b 	orr.w	r3, r3, #11
 8003d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d9a:	e015      	b.n	8003dc8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003daa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003db2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dc2:	f043 030b 	orr.w	r3, r3, #11
 8003dc6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dd6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003dda:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dea:	461a      	mov	r2, r3
 8003dec:	f004 fb3e 	bl	800846c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f004 fa6d 	bl	80082e4 <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e14:	d123      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 fb03 	bl	8008426 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f003 fbba 	bl	800759e <USB_GetDevSpeed>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681c      	ldr	r4, [r3, #0]
 8003e36:	f001 fa09 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8003e3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e40:	461a      	mov	r2, r3
 8003e42:	4620      	mov	r0, r4
 8003e44:	f003 f8be 	bl	8006fc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f006 fe46 	bl	800aada <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f004 fa3e 	bl	80082e4 <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d10a      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f006 fe23 	bl	800aabe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f002 0208 	and.w	r2, r2, #8
 8003e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f004 fa29 	bl	80082e4 <USB_ReadInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	d123      	bne.n	8003ee4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eac:	e014      	b.n	8003ed8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fb0a 	bl	80044e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	791b      	ldrb	r3, [r3, #4]
 8003edc:	461a      	mov	r2, r3
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d3e4      	bcc.n	8003eae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f004 f9fb 	bl	80082e4 <USB_ReadInterrupts>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef8:	d13c      	bne.n	8003f74 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003efa:	2301      	movs	r3, #1
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efe:	e02b      	b.n	8003f58 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3318      	adds	r3, #24
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d115      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da12      	bge.n	8003f52 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3317      	adds	r3, #23
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 faca 	bl	80044e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	3301      	adds	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	791b      	ldrb	r3, [r3, #4]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d3cd      	bcc.n	8003f00 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f004 f9b3 	bl	80082e4 <USB_ReadInterrupts>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f88:	d156      	bne.n	8004038 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8e:	e045      	b.n	800401c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d12e      	bne.n	8004016 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da2b      	bge.n	8004016 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003fca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d121      	bne.n	8004016 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800400e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004012:	6053      	str	r3, [r2, #4]
            break;
 8004014:	e008      	b.n	8004028 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	3301      	adds	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	791b      	ldrb	r3, [r3, #4]
 8004020:	461a      	mov	r2, r3
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	4293      	cmp	r3, r2
 8004026:	d3b3      	bcc.n	8003f90 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f004 f951 	bl	80082e4 <USB_ReadInterrupts>
 8004042:	4603      	mov	r3, r0
 8004044:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404c:	d10a      	bne.n	8004064 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f006 fdc4 	bl	800abdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f004 f93b 	bl	80082e4 <USB_ReadInterrupts>
 800406e:	4603      	mov	r3, r0
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d115      	bne.n	80040a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f006 fdb4 	bl	800abf8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	e000      	b.n	80040a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80040a2:	bf00      	nop
    }
  }
}
 80040a4:	3734      	adds	r7, #52	@ 0x34
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd90      	pop	{r4, r7, pc}

080040aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_PCD_SetAddress+0x1a>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e012      	b.n	80040ea <HAL_PCD_SetAddress+0x40>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f004 f89a 	bl	8008214 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	4608      	mov	r0, r1
 80040fc:	4611      	mov	r1, r2
 80040fe:	461a      	mov	r2, r3
 8004100:	4603      	mov	r3, r0
 8004102:	70fb      	strb	r3, [r7, #3]
 8004104:	460b      	mov	r3, r1
 8004106:	803b      	strh	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004114:	2b00      	cmp	r3, #0
 8004116:	da0f      	bge.n	8004138 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3310      	adds	r3, #16
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	705a      	strb	r2, [r3, #1]
 8004136:	e00f      	b.n	8004158 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	3304      	adds	r3, #4
 8004150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004164:	883b      	ldrh	r3, [r7, #0]
 8004166:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	78ba      	ldrb	r2, [r7, #2]
 8004172:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004186:	78bb      	ldrb	r3, [r7, #2]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d102      	bne.n	8004192 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_PCD_EP_Open+0xae>
 800419c:	2302      	movs	r3, #2
 800419e:	e00e      	b.n	80041be <HAL_PCD_EP_Open+0xcc>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68f9      	ldr	r1, [r7, #12]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 fa1a 	bl	80075e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80041bc:	7afb      	ldrb	r3, [r7, #11]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da0f      	bge.n	80041fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 020f 	and.w	r2, r3, #15
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3310      	adds	r3, #16
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	705a      	strb	r2, [r3, #1]
 80041f8:	e00f      	b.n	800421a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	b2da      	uxtb	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_PCD_EP_Close+0x6e>
 8004230:	2302      	movs	r3, #2
 8004232:	e00e      	b.n	8004252 <HAL_PCD_EP_Close+0x8c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	4618      	mov	r0, r3
 8004244:	f003 fa58 	bl	80076f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	460b      	mov	r3, r1
 8004268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2200      	movs	r2, #0
 8004294:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800429c:	7afb      	ldrb	r3, [r7, #11]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	799b      	ldrb	r3, [r3, #6]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d102      	bne.n	80042b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	799b      	ldrb	r3, [r3, #6]
 80042be:	461a      	mov	r2, r3
 80042c0:	6979      	ldr	r1, [r7, #20]
 80042c2:	f003 faf5 	bl	80078b0 <USB_EPStartXfer>

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	460b      	mov	r3, r1
 800430e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	3310      	adds	r3, #16
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2200      	movs	r2, #0
 8004338:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2201      	movs	r2, #1
 800433e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004340:	7afb      	ldrb	r3, [r7, #11]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	b2da      	uxtb	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	799b      	ldrb	r3, [r3, #6]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d102      	bne.n	800435a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	799b      	ldrb	r3, [r3, #6]
 8004362:	461a      	mov	r2, r3
 8004364:	6979      	ldr	r1, [r7, #20]
 8004366:	f003 faa3 	bl	80078b0 <USB_EPStartXfer>

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	7912      	ldrb	r2, [r2, #4]
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e04f      	b.n	8004432 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004396:	2b00      	cmp	r3, #0
 8004398:	da0f      	bge.n	80043ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	f003 020f 	and.w	r2, r3, #15
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	3310      	adds	r3, #16
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	3304      	adds	r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	705a      	strb	r2, [r3, #1]
 80043b8:	e00d      	b.n	80043d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_PCD_EP_SetStall+0x82>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e01d      	b.n	8004432 <HAL_PCD_EP_SetStall+0xbe>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4618      	mov	r0, r3
 8004406:	f003 fe31 	bl	800806c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	7999      	ldrb	r1, [r3, #6]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004422:	461a      	mov	r2, r3
 8004424:	f004 f822 	bl	800846c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	7912      	ldrb	r2, [r2, #4]
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e042      	b.n	80044de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445c:	2b00      	cmp	r3, #0
 800445e:	da0f      	bge.n	8004480 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 020f 	and.w	r2, r3, #15
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	3310      	adds	r3, #16
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4413      	add	r3, r2
 8004474:	3304      	adds	r3, #4
 8004476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	705a      	strb	r2, [r3, #1]
 800447e:	e00f      	b.n	80044a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	3304      	adds	r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_PCD_EP_ClrStall+0x86>
 80044bc:	2302      	movs	r3, #2
 80044be:	e00e      	b.n	80044de <HAL_PCD_EP_ClrStall+0xa4>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68f9      	ldr	r1, [r7, #12]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f003 fe3a 	bl	8008148 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da0c      	bge.n	8004514 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	3310      	adds	r3, #16
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	3304      	adds	r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e00c      	b.n	800452e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	3304      	adds	r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	4618      	mov	r0, r3
 8004536:	f003 fc59 	bl	8007dec <USB_EPStopXfer>
 800453a:	4603      	mov	r3, r0
 800453c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800453e:	7afb      	ldrb	r3, [r7, #11]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af02      	add	r7, sp, #8
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3310      	adds	r3, #16
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	429a      	cmp	r2, r3
 800457a:	d901      	bls.n	8004580 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e06b      	b.n	8004658 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	429a      	cmp	r2, r3
 8004594:	d902      	bls.n	800459c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3303      	adds	r3, #3
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045a4:	e02a      	b.n	80045fc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d902      	bls.n	80045c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3303      	adds	r3, #3
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4603      	mov	r3, r0
 80045de:	6978      	ldr	r0, [r7, #20]
 80045e0:	f003 fcae 	bl	8007f40 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	441a      	add	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	429a      	cmp	r2, r3
 8004610:	d809      	bhi.n	8004626 <PCD_WriteEmptyTxFifo+0xde>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800461a:	429a      	cmp	r2, r3
 800461c:	d203      	bcs.n	8004626 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1bf      	bne.n	80045a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	429a      	cmp	r2, r3
 8004630:	d811      	bhi.n	8004656 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	2201      	movs	r2, #1
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	43db      	mvns	r3, r3
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004652:	4013      	ands	r3, r2
 8004654:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	333c      	adds	r3, #60	@ 0x3c
 8004678:	3304      	adds	r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	799b      	ldrb	r3, [r3, #6]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d17b      	bne.n	800478e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4a61      	ldr	r2, [pc, #388]	@ (8004828 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	f240 80b9 	bls.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80b3 	beq.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c8:	6093      	str	r3, [r2, #8]
 80046ca:	e0a7      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e2:	461a      	mov	r2, r3
 80046e4:	2320      	movs	r3, #32
 80046e6:	6093      	str	r3, [r2, #8]
 80046e8:	e098      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 8093 	bne.w	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004828 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d90f      	bls.n	800471e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	461a      	mov	r2, r3
 8004716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471a:	6093      	str	r3, [r2, #8]
 800471c:	e07e      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	3304      	adds	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	0159      	lsls	r1, r3, #5
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	440b      	add	r3, r1
 8004740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d114      	bne.n	8004780 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004768:	461a      	mov	r2, r3
 800476a:	2101      	movs	r1, #1
 800476c:	f003 fe7e 	bl	800846c <USB_EP0_OutStart>
 8004770:	e006      	b.n	8004780 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	441a      	add	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f006 f964 	bl	800aa54 <HAL_PCD_DataOutStageCallback>
 800478c:	e046      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4a26      	ldr	r2, [pc, #152]	@ (800482c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d124      	bne.n	80047e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	6093      	str	r3, [r2, #8]
 80047b4:	e032      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047cc:	461a      	mov	r2, r3
 80047ce:	2320      	movs	r3, #32
 80047d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f006 f93b 	bl	800aa54 <HAL_PCD_DataOutStageCallback>
 80047de:	e01d      	b.n	800481c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d108      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004808:	461a      	mov	r2, r3
 800480a:	2100      	movs	r1, #0
 800480c:	f003 fe2e 	bl	800846c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f006 f91c 	bl	800aa54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	4f54300a 	.word	0x4f54300a
 800482c:	4f54310a 	.word	0x4f54310a

08004830 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	333c      	adds	r3, #60	@ 0x3c
 8004848:	3304      	adds	r3, #4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a15      	ldr	r2, [pc, #84]	@ (80048b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d90e      	bls.n	8004884 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487c:	461a      	mov	r2, r3
 800487e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004882:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f006 f8d3 	bl	800aa30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a0a      	ldr	r2, [pc, #40]	@ (80048b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d90c      	bls.n	80048ac <PCD_EP_OutSetupPacket_int+0x7c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	799b      	ldrb	r3, [r3, #6]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d108      	bne.n	80048ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048a4:	461a      	mov	r2, r3
 80048a6:	2101      	movs	r1, #1
 80048a8:	f003 fde0 	bl	800846c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	4f54300a 	.word	0x4f54300a

080048bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
 80048c8:	4613      	mov	r3, r2
 80048ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048da:	883b      	ldrh	r3, [r7, #0]
 80048dc:	0419      	lsls	r1, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048e8:	e028      	b.n	800493c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	e00d      	b.n	800491a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	3340      	adds	r3, #64	@ 0x40
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	3301      	adds	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	3b01      	subs	r3, #1
 8004920:	429a      	cmp	r2, r3
 8004922:	d3ec      	bcc.n	80048fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004924:	883b      	ldrh	r3, [r7, #0]
 8004926:	0418      	lsls	r0, r3, #16
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	3b01      	subs	r3, #1
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	4302      	orrs	r2, r0
 8004934:	3340      	adds	r3, #64	@ 0x40
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e267      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d075      	beq.n	8004a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049a2:	4b88      	ldr	r3, [pc, #544]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d00c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ae:	4b85      	ldr	r3, [pc, #532]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d112      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	4b82      	ldr	r3, [pc, #520]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c6:	d10b      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	4b7e      	ldr	r3, [pc, #504]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d05b      	beq.n	8004a8c <HAL_RCC_OscConfig+0x108>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d157      	bne.n	8004a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e242      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_OscConfig+0x74>
 80049ea:	4b76      	ldr	r3, [pc, #472]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a75      	ldr	r2, [pc, #468]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 80049f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e01d      	b.n	8004a34 <HAL_RCC_OscConfig+0xb0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x98>
 8004a02:	4b70      	ldr	r3, [pc, #448]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6f      	ldr	r2, [pc, #444]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6c      	ldr	r2, [pc, #432]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00b      	b.n	8004a34 <HAL_RCC_OscConfig+0xb0>
 8004a1c:	4b69      	ldr	r3, [pc, #420]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a68      	ldr	r2, [pc, #416]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4b66      	ldr	r3, [pc, #408]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a65      	ldr	r2, [pc, #404]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fade 	bl	8001ffc <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd fada 	bl	8001ffc <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	@ 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e207      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0xc0>
 8004a62:	e014      	b.n	8004a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fd faca 	bl	8001ffc <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd fac6 	bl	8001ffc <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1f3      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7e:	4b51      	ldr	r3, [pc, #324]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0xe8>
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d063      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d11c      	bne.n	8004aec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab2:	4b44      	ldr	r3, [pc, #272]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004abe:	4b41      	ldr	r3, [pc, #260]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x152>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e1c7      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4937      	ldr	r1, [pc, #220]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	e03a      	b.n	8004b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d020      	beq.n	8004b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af4:	4b34      	ldr	r3, [pc, #208]	@ (8004bc8 <HAL_RCC_OscConfig+0x244>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd fa7f 	bl	8001ffc <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b02:	f7fd fa7b 	bl	8001ffc <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e1a8      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b14:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b20:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4925      	ldr	r1, [pc, #148]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]
 8004b34:	e015      	b.n	8004b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b36:	4b24      	ldr	r3, [pc, #144]	@ (8004bc8 <HAL_RCC_OscConfig+0x244>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fd fa5e 	bl	8001ffc <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b44:	f7fd fa5a 	bl	8001ffc <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e187      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b56:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d036      	beq.n	8004bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d016      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b76:	4b15      	ldr	r3, [pc, #84]	@ (8004bcc <HAL_RCC_OscConfig+0x248>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7fd fa3e 	bl	8001ffc <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b84:	f7fd fa3a 	bl	8001ffc <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e167      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCC_OscConfig+0x240>)
 8004b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x200>
 8004ba2:	e01b      	b.n	8004bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba4:	4b09      	ldr	r3, [pc, #36]	@ (8004bcc <HAL_RCC_OscConfig+0x248>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004baa:	f7fd fa27 	bl	8001ffc <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb0:	e00e      	b.n	8004bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb2:	f7fd fa23 	bl	8001ffc <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d907      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e150      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	42470000 	.word	0x42470000
 8004bcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd0:	4b88      	ldr	r3, [pc, #544]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1ea      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8097 	beq.w	8004d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bee:	4b81      	ldr	r3, [pc, #516]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	4a7c      	ldr	r2, [pc, #496]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1a:	4b77      	ldr	r3, [pc, #476]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d118      	bne.n	8004c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c26:	4b74      	ldr	r3, [pc, #464]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a73      	ldr	r2, [pc, #460]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c32:	f7fd f9e3 	bl	8001ffc <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fd f9df 	bl	8001ffc <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e10c      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004df8 <HAL_RCC_OscConfig+0x474>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x2ea>
 8004c60:	4b64      	ldr	r3, [pc, #400]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c64:	4a63      	ldr	r2, [pc, #396]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6c:	e01c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x324>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x30c>
 8004c76:	4b5f      	ldr	r3, [pc, #380]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	f043 0304 	orr.w	r3, r3, #4
 8004c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c82:	4b5c      	ldr	r3, [pc, #368]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	4a5b      	ldr	r2, [pc, #364]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x324>
 8004c90:	4b58      	ldr	r3, [pc, #352]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c94:	4a57      	ldr	r2, [pc, #348]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c9c:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	4a54      	ldr	r2, [pc, #336]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f023 0304 	bic.w	r3, r3, #4
 8004ca6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d015      	beq.n	8004cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fd f9a4 	bl	8001ffc <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fd f9a0 	bl	8001ffc <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0cb      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cce:	4b49      	ldr	r3, [pc, #292]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0ee      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x334>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cdc:	f7fd f98e 	bl	8001ffc <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fd f98a 	bl	8001ffc <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0b5      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1ee      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0c:	4b39      	ldr	r3, [pc, #228]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	4a38      	ldr	r2, [pc, #224]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a1 	beq.w	8004e64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d22:	4b34      	ldr	r3, [pc, #208]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d05c      	beq.n	8004de8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d141      	bne.n	8004dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fd f95e 	bl	8001ffc <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd f95a 	bl	8001ffc <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e087      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d56:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	041b      	lsls	r3, r3, #16
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	061b      	lsls	r3, r3, #24
 8004d86:	491b      	ldr	r1, [pc, #108]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fd f933 	bl	8001ffc <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9a:	f7fd f92f 	bl	8001ffc <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e05c      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dac:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x416>
 8004db8:	e054      	b.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dba:	4b10      	ldr	r3, [pc, #64]	@ (8004dfc <HAL_RCC_OscConfig+0x478>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fd f91c 	bl	8001ffc <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fd f918 	bl	8001ffc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e045      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dda:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x444>
 8004de6:	e03d      	b.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e038      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <HAL_RCC_OscConfig+0x4ec>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d028      	beq.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d121      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d11a      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d111      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800

08004e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0cc      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e88:	4b68      	ldr	r3, [pc, #416]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d90c      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	4b65      	ldr	r3, [pc, #404]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	4b63      	ldr	r3, [pc, #396]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0b8      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec8:	4b59      	ldr	r3, [pc, #356]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4a58      	ldr	r2, [pc, #352]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ed2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ee0:	4b53      	ldr	r3, [pc, #332]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a52      	ldr	r2, [pc, #328]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eec:	4b50      	ldr	r3, [pc, #320]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	494d      	ldr	r1, [pc, #308]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d044      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d107      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b47      	ldr	r3, [pc, #284]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d119      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e07f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d107      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f32:	4b3f      	ldr	r3, [pc, #252]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e06f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f42:	4b3b      	ldr	r3, [pc, #236]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e067      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f52:	4b37      	ldr	r3, [pc, #220]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 0203 	bic.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4934      	ldr	r1, [pc, #208]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f64:	f7fd f84a 	bl	8001ffc <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f6c:	f7fd f846 	bl	8001ffc <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e04f      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	4b2b      	ldr	r3, [pc, #172]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 020c 	and.w	r2, r3, #12
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1eb      	bne.n	8004f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f94:	4b25      	ldr	r3, [pc, #148]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d20c      	bcs.n	8004fbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa2:	4b22      	ldr	r3, [pc, #136]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004faa:	4b20      	ldr	r3, [pc, #128]	@ (800502c <HAL_RCC_ClockConfig+0x1b8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e032      	b.n	8005022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc8:	4b19      	ldr	r3, [pc, #100]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4916      	ldr	r1, [pc, #88]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fe6:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	490e      	ldr	r1, [pc, #56]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ffa:	f000 f821 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8004ffe:	4602      	mov	r2, r0
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	091b      	lsrs	r3, r3, #4
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	490a      	ldr	r1, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x1c0>)
 800500c:	5ccb      	ldrb	r3, [r1, r3]
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	4a09      	ldr	r2, [pc, #36]	@ (8005038 <HAL_RCC_ClockConfig+0x1c4>)
 8005014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005016:	4b09      	ldr	r3, [pc, #36]	@ (800503c <HAL_RCC_ClockConfig+0x1c8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc ffaa 	bl	8001f74 <HAL_InitTick>

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40023c00 	.word	0x40023c00
 8005030:	40023800 	.word	0x40023800
 8005034:	0800bffc 	.word	0x0800bffc
 8005038:	20000000 	.word	0x20000000
 800503c:	20000014 	.word	0x20000014

08005040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005044:	b094      	sub	sp, #80	@ 0x50
 8005046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005058:	4b79      	ldr	r3, [pc, #484]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b08      	cmp	r3, #8
 8005062:	d00d      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x40>
 8005064:	2b08      	cmp	r3, #8
 8005066:	f200 80e1 	bhi.w	800522c <HAL_RCC_GetSysClockFreq+0x1ec>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_RCC_GetSysClockFreq+0x34>
 800506e:	2b04      	cmp	r3, #4
 8005070:	d003      	beq.n	800507a <HAL_RCC_GetSysClockFreq+0x3a>
 8005072:	e0db      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b73      	ldr	r3, [pc, #460]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x204>)
 8005076:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005078:	e0db      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800507a:	4b73      	ldr	r3, [pc, #460]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x208>)
 800507c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800507e:	e0d8      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005080:	4b6f      	ldr	r3, [pc, #444]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800508a:	4b6d      	ldr	r3, [pc, #436]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d063      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005096:	4b6a      	ldr	r3, [pc, #424]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	2200      	movs	r2, #0
 800509e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050aa:	2300      	movs	r3, #0
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	f04f 0000 	mov.w	r0, #0
 80050ba:	f04f 0100 	mov.w	r1, #0
 80050be:	0159      	lsls	r1, r3, #5
 80050c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050c4:	0150      	lsls	r0, r2, #5
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4621      	mov	r1, r4
 80050cc:	1a51      	subs	r1, r2, r1
 80050ce:	6139      	str	r1, [r7, #16]
 80050d0:	4629      	mov	r1, r5
 80050d2:	eb63 0301 	sbc.w	r3, r3, r1
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050e4:	4659      	mov	r1, fp
 80050e6:	018b      	lsls	r3, r1, #6
 80050e8:	4651      	mov	r1, sl
 80050ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ee:	4651      	mov	r1, sl
 80050f0:	018a      	lsls	r2, r1, #6
 80050f2:	4651      	mov	r1, sl
 80050f4:	ebb2 0801 	subs.w	r8, r2, r1
 80050f8:	4659      	mov	r1, fp
 80050fa:	eb63 0901 	sbc.w	r9, r3, r1
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800510e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005112:	4690      	mov	r8, r2
 8005114:	4699      	mov	r9, r3
 8005116:	4623      	mov	r3, r4
 8005118:	eb18 0303 	adds.w	r3, r8, r3
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	462b      	mov	r3, r5
 8005120:	eb49 0303 	adc.w	r3, r9, r3
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005132:	4629      	mov	r1, r5
 8005134:	024b      	lsls	r3, r1, #9
 8005136:	4621      	mov	r1, r4
 8005138:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800513c:	4621      	mov	r1, r4
 800513e:	024a      	lsls	r2, r1, #9
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005146:	2200      	movs	r2, #0
 8005148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800514a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005150:	f7fb f89e 	bl	8000290 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4613      	mov	r3, r2
 800515a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800515c:	e058      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515e:	4b38      	ldr	r3, [pc, #224]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	099b      	lsrs	r3, r3, #6
 8005164:	2200      	movs	r2, #0
 8005166:	4618      	mov	r0, r3
 8005168:	4611      	mov	r1, r2
 800516a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800516e:	623b      	str	r3, [r7, #32]
 8005170:	2300      	movs	r3, #0
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
 8005174:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	f04f 0000 	mov.w	r0, #0
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	0159      	lsls	r1, r3, #5
 8005186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800518a:	0150      	lsls	r0, r2, #5
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4641      	mov	r1, r8
 8005192:	ebb2 0a01 	subs.w	sl, r2, r1
 8005196:	4649      	mov	r1, r9
 8005198:	eb63 0b01 	sbc.w	fp, r3, r1
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051b0:	ebb2 040a 	subs.w	r4, r2, sl
 80051b4:	eb63 050b 	sbc.w	r5, r3, fp
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	00eb      	lsls	r3, r5, #3
 80051c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051c6:	00e2      	lsls	r2, r4, #3
 80051c8:	4614      	mov	r4, r2
 80051ca:	461d      	mov	r5, r3
 80051cc:	4643      	mov	r3, r8
 80051ce:	18e3      	adds	r3, r4, r3
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	464b      	mov	r3, r9
 80051d4:	eb45 0303 	adc.w	r3, r5, r3
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051e6:	4629      	mov	r1, r5
 80051e8:	028b      	lsls	r3, r1, #10
 80051ea:	4621      	mov	r1, r4
 80051ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051f0:	4621      	mov	r1, r4
 80051f2:	028a      	lsls	r2, r1, #10
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051fa:	2200      	movs	r2, #0
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	61fa      	str	r2, [r7, #28]
 8005200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005204:	f7fb f844 	bl	8000290 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4613      	mov	r3, r2
 800520e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x200>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	3301      	adds	r3, #1
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005220:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800522a:	e002      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800522c:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x204>)
 800522e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005234:	4618      	mov	r0, r3
 8005236:	3750      	adds	r7, #80	@ 0x50
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
 8005244:	00f42400 	.word	0x00f42400
 8005248:	007a1200 	.word	0x007a1200

0800524c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005250:	4b03      	ldr	r3, [pc, #12]	@ (8005260 <HAL_RCC_GetHCLKFreq+0x14>)
 8005252:	681b      	ldr	r3, [r3, #0]
}
 8005254:	4618      	mov	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000000 	.word	0x20000000

08005264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005268:	f7ff fff0 	bl	800524c <HAL_RCC_GetHCLKFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	0a9b      	lsrs	r3, r3, #10
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	4903      	ldr	r1, [pc, #12]	@ (8005288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40023800 	.word	0x40023800
 8005288:	0800c00c 	.word	0x0800c00c

0800528c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005290:	f7ff ffdc 	bl	800524c <HAL_RCC_GetHCLKFreq>
 8005294:	4602      	mov	r2, r0
 8005296:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	0b5b      	lsrs	r3, r3, #13
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	4903      	ldr	r1, [pc, #12]	@ (80052b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40023800 	.word	0x40023800
 80052b0:	0800c00c 	.word	0x0800c00c

080052b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e041      	b.n	800534a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fb fff0 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f000 fa7e 	bl	80057f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e04e      	b.n	800540a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a23      	ldr	r2, [pc, #140]	@ (8005418 <HAL_TIM_Base_Start_IT+0xc4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d022      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005396:	d01d      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1f      	ldr	r2, [pc, #124]	@ (800541c <HAL_TIM_Base_Start_IT+0xc8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005420 <HAL_TIM_Base_Start_IT+0xcc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005424 <HAL_TIM_Base_Start_IT+0xd0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_TIM_Base_Start_IT+0xd4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a19      	ldr	r2, [pc, #100]	@ (800542c <HAL_TIM_Base_Start_IT+0xd8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_TIM_Base_Start_IT+0xdc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d111      	bne.n	80053f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b06      	cmp	r3, #6
 80053e4:	d010      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	e007      	b.n	8005408 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40000c00 	.word	0x40000c00
 8005428:	40010400 	.word	0x40010400
 800542c:	40014000 	.word	0x40014000
 8005430:	40001800 	.word	0x40001800

08005434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0202 	mvn.w	r2, #2
 8005468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f999 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f98b 	bl	80057a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f99c 	bl	80057ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0204 	mvn.w	r2, #4
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2202      	movs	r2, #2
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f973 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f965 	bl	80057a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f976 	bl	80057ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d020      	beq.n	8005530 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f94d 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f93f 	bl	80057a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f950 	bl	80057ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0210 	mvn.w	r2, #16
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2208      	movs	r2, #8
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f927 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f919 	bl	80057a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f92a 	bl	80057ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0201 	mvn.w	r2, #1
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fb fcc8 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00c      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fae4 	bl	8005b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f8fb 	bl	80057de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0220 	mvn.w	r2, #32
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fab6 	bl	8005b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_TIM_ConfigClockSource+0x1c>
 800562c:	2302      	movs	r3, #2
 800562e:	e0b4      	b.n	800579a <HAL_TIM_ConfigClockSource+0x186>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800564e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005668:	d03e      	beq.n	80056e8 <HAL_TIM_ConfigClockSource+0xd4>
 800566a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800566e:	f200 8087 	bhi.w	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005676:	f000 8086 	beq.w	8005786 <HAL_TIM_ConfigClockSource+0x172>
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567e:	d87f      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b70      	cmp	r3, #112	@ 0x70
 8005682:	d01a      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0xa6>
 8005684:	2b70      	cmp	r3, #112	@ 0x70
 8005686:	d87b      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b60      	cmp	r3, #96	@ 0x60
 800568a:	d050      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x11a>
 800568c:	2b60      	cmp	r3, #96	@ 0x60
 800568e:	d877      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b50      	cmp	r3, #80	@ 0x50
 8005692:	d03c      	beq.n	800570e <HAL_TIM_ConfigClockSource+0xfa>
 8005694:	2b50      	cmp	r3, #80	@ 0x50
 8005696:	d873      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005698:	2b40      	cmp	r3, #64	@ 0x40
 800569a:	d058      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x13a>
 800569c:	2b40      	cmp	r3, #64	@ 0x40
 800569e:	d86f      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 80056a0:	2b30      	cmp	r3, #48	@ 0x30
 80056a2:	d064      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x15a>
 80056a4:	2b30      	cmp	r3, #48	@ 0x30
 80056a6:	d86b      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d060      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x15a>
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d867      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d05c      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x15a>
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d05a      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x15a>
 80056b8:	e062      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ca:	f000 f9b9 	bl	8005a40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	609a      	str	r2, [r3, #8]
      break;
 80056e6:	e04f      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056f8:	f000 f9a2 	bl	8005a40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800570a:	609a      	str	r2, [r3, #8]
      break;
 800570c:	e03c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800571a:	461a      	mov	r2, r3
 800571c:	f000 f916 	bl	800594c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2150      	movs	r1, #80	@ 0x50
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f96f 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 800572c:	e02c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800573a:	461a      	mov	r2, r3
 800573c:	f000 f935 	bl	80059aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2160      	movs	r1, #96	@ 0x60
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f95f 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 800574c:	e01c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	461a      	mov	r2, r3
 800575c:	f000 f8f6 	bl	800594c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2140      	movs	r1, #64	@ 0x40
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f94f 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 800576c:	e00c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f000 f946 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 800577e:	e003      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
      break;
 8005784:	e000      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a46      	ldr	r2, [pc, #280]	@ (8005920 <TIM_Base_SetConfig+0x12c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005812:	d00f      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a43      	ldr	r2, [pc, #268]	@ (8005924 <TIM_Base_SetConfig+0x130>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a42      	ldr	r2, [pc, #264]	@ (8005928 <TIM_Base_SetConfig+0x134>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a41      	ldr	r2, [pc, #260]	@ (800592c <TIM_Base_SetConfig+0x138>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a40      	ldr	r2, [pc, #256]	@ (8005930 <TIM_Base_SetConfig+0x13c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a35      	ldr	r2, [pc, #212]	@ (8005920 <TIM_Base_SetConfig+0x12c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d02b      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005854:	d027      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a32      	ldr	r2, [pc, #200]	@ (8005924 <TIM_Base_SetConfig+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d023      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a31      	ldr	r2, [pc, #196]	@ (8005928 <TIM_Base_SetConfig+0x134>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d01f      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a30      	ldr	r2, [pc, #192]	@ (800592c <TIM_Base_SetConfig+0x138>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d01b      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2f      	ldr	r2, [pc, #188]	@ (8005930 <TIM_Base_SetConfig+0x13c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d017      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2e      	ldr	r2, [pc, #184]	@ (8005934 <TIM_Base_SetConfig+0x140>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2d      	ldr	r2, [pc, #180]	@ (8005938 <TIM_Base_SetConfig+0x144>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00f      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2c      	ldr	r2, [pc, #176]	@ (800593c <TIM_Base_SetConfig+0x148>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a2b      	ldr	r2, [pc, #172]	@ (8005940 <TIM_Base_SetConfig+0x14c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2a      	ldr	r2, [pc, #168]	@ (8005944 <TIM_Base_SetConfig+0x150>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a29      	ldr	r2, [pc, #164]	@ (8005948 <TIM_Base_SetConfig+0x154>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d108      	bne.n	80058b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a10      	ldr	r2, [pc, #64]	@ (8005920 <TIM_Base_SetConfig+0x12c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0xf8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a12      	ldr	r2, [pc, #72]	@ (8005930 <TIM_Base_SetConfig+0x13c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d103      	bne.n	80058f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b01      	cmp	r3, #1
 8005904:	d105      	bne.n	8005912 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f023 0201 	bic.w	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	611a      	str	r2, [r3, #16]
  }
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40010000 	.word	0x40010000
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40010400 	.word	0x40010400
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800
 8005940:	40001800 	.word	0x40001800
 8005944:	40001c00 	.word	0x40001c00
 8005948:	40002000 	.word	0x40002000

0800594c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0201 	bic.w	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 030a 	bic.w	r3, r3, #10
 8005988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	621a      	str	r2, [r3, #32]
}
 800599e:	bf00      	nop
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b087      	sub	sp, #28
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f023 0210 	bic.w	r2, r3, #16
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	031b      	lsls	r3, r3, #12
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f043 0307 	orr.w	r3, r3, #7
 8005a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	021a      	lsls	r2, r3, #8
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e05a      	b.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a21      	ldr	r2, [pc, #132]	@ (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae4:	d01d      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1d      	ldr	r2, [pc, #116]	@ (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1a      	ldr	r2, [pc, #104]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a18      	ldr	r2, [pc, #96]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a17      	ldr	r2, [pc, #92]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10c      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40010400 	.word	0x40010400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40001800 	.word	0x40001800

08005b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e042      	b.n	8005c38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fb fbfa 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	@ 0x24
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 ff15 	bl	8006a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b090      	sub	sp, #64	@ 0x40
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c56:	2b80      	cmp	r3, #128	@ 0x80
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b21      	cmp	r3, #33	@ 0x21
 8005c6c:	d128      	bne.n	8005cc0 <HAL_UART_DMAStop+0x80>
 8005c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d025      	beq.n	8005cc0 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3314      	adds	r3, #20
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	623b      	str	r3, [r7, #32]
   return(result);
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c94:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e5      	bne.n	8005c74 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fc fbe9 	bl	800248c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fce4 	bl	8006688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cca:	2b40      	cmp	r3, #64	@ 0x40
 8005ccc:	bf0c      	ite	eq
 8005cce:	2301      	moveq	r3, #1
 8005cd0:	2300      	movne	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b22      	cmp	r3, #34	@ 0x22
 8005ce0:	d128      	bne.n	8005d34 <HAL_UART_DMAStop+0xf4>
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d025      	beq.n	8005d34 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3314      	adds	r3, #20
 8005cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d08:	61fa      	str	r2, [r7, #28]
 8005d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	69b9      	ldr	r1, [r7, #24]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	617b      	str	r3, [r7, #20]
   return(result);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fc fbaf 	bl	800248c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fcd2 	bl	80066d8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3740      	adds	r7, #64	@ 0x40
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b08c      	sub	sp, #48	@ 0x30
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d14a      	bne.n	8005dee <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e043      	b.n	8005df0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	461a      	mov	r2, r3
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fbea 	bl	8006554 <UART_Start_Receive_DMA>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d12c      	bne.n	8005de8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d125      	bne.n	8005de2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	617b      	str	r3, [r7, #20]
   return(result);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f043 0310 	orr.w	r3, r3, #16
 8005dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6a39      	ldr	r1, [r7, #32]
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005de0:	e002      	b.n	8005de8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005de8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dec:	e000      	b.n	8005df0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
  }
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3730      	adds	r7, #48	@ 0x30
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10f      	bne.n	8005e5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <HAL_UART_IRQHandler+0x66>
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fd1d 	bl	8006896 <UART_Receive_IT>
      return;
 8005e5c:	e25b      	b.n	8006316 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 80de 	beq.w	8006024 <HAL_UART_IRQHandler+0x22c>
 8005e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80d1 	beq.w	8006024 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xae>
 8005e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	f043 0201 	orr.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_UART_IRQHandler+0xd2>
 8005eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec2:	f043 0202 	orr.w	r2, r3, #2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <HAL_UART_IRQHandler+0xf6>
 8005ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee6:	f043 0204 	orr.w	r2, r3, #4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d011      	beq.n	8005f1e <HAL_UART_IRQHandler+0x126>
 8005efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f16:	f043 0208 	orr.w	r2, r3, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 81f2 	beq.w	800630c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <HAL_UART_IRQHandler+0x14e>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fca8 	bl	8006896 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f50:	2b40      	cmp	r3, #64	@ 0x40
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <HAL_UART_IRQHandler+0x17a>
 8005f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04f      	beq.n	8006012 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fbb0 	bl	80066d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d141      	bne.n	800600a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3314      	adds	r3, #20
 8005fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1d9      	bne.n	8005f86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	4a7e      	ldr	r2, [pc, #504]	@ (80061d8 <HAL_UART_IRQHandler+0x3e0>)
 8005fe0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fc fac0 	bl	800256c <HAL_DMA_Abort_IT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00e      	b.n	8006020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f99e 	bl	8006344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00a      	b.n	8006020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f99a 	bl	8006344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e006      	b.n	8006020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f996 	bl	8006344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800601e:	e175      	b.n	800630c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	bf00      	nop
    return;
 8006022:	e173      	b.n	800630c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006028:	2b01      	cmp	r3, #1
 800602a:	f040 814f 	bne.w	80062cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006032:	f003 0310 	and.w	r3, r3, #16
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8148 	beq.w	80062cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8141 	beq.w	80062cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606a:	2b40      	cmp	r3, #64	@ 0x40
 800606c:	f040 80b6 	bne.w	80061dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800607c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8145 	beq.w	8006310 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800608a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800608e:	429a      	cmp	r2, r3
 8006090:	f080 813e 	bcs.w	8006310 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800609a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060a6:	f000 8088 	beq.w	80061ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	330c      	adds	r3, #12
 80060b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1d9      	bne.n	80060aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3314      	adds	r3, #20
 8006116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800611a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800611e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006122:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800612c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e1      	bne.n	80060f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3314      	adds	r3, #20
 8006152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006156:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006158:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800615c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e3      	bne.n	8006132 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618a:	f023 0310 	bic.w	r3, r3, #16
 800618e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800619c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800619e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e3      	bne.n	8006178 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fc f969 	bl	800248c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fa fefb 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061d6:	e09b      	b.n	8006310 <HAL_UART_IRQHandler+0x518>
 80061d8:	0800679f 	.word	0x0800679f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 808e 	beq.w	8006314 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8089 	beq.w	8006314 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006226:	647a      	str	r2, [r7, #68]	@ 0x44
 8006228:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800622c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e3      	bne.n	8006202 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3314      	adds	r3, #20
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	623b      	str	r3, [r7, #32]
   return(result);
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3314      	adds	r3, #20
 800625a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800625e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e3      	bne.n	800623a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0310 	bic.w	r3, r3, #16
 8006296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062a4:	61fa      	str	r2, [r7, #28]
 80062a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	69b9      	ldr	r1, [r7, #24]
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	617b      	str	r3, [r7, #20]
   return(result);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e3      	bne.n	8006280 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fa fe81 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062ca:	e023      	b.n	8006314 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d009      	beq.n	80062ec <HAL_UART_IRQHandler+0x4f4>
 80062d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fa6e 	bl	80067c6 <UART_Transmit_IT>
    return;
 80062ea:	e014      	b.n	8006316 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00e      	beq.n	8006316 <HAL_UART_IRQHandler+0x51e>
 80062f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 faae 	bl	8006866 <UART_EndTransmit_IT>
    return;
 800630a:	e004      	b.n	8006316 <HAL_UART_IRQHandler+0x51e>
    return;
 800630c:	bf00      	nop
 800630e:	e002      	b.n	8006316 <HAL_UART_IRQHandler+0x51e>
      return;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <HAL_UART_IRQHandler+0x51e>
      return;
 8006314:	bf00      	nop
  }
}
 8006316:	37e8      	adds	r7, #232	@ 0xe8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b09c      	sub	sp, #112	@ 0x70
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006364:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006370:	2b00      	cmp	r3, #0
 8006372:	d172      	bne.n	800645a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006376:	2200      	movs	r2, #0
 8006378:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800637a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800638a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800638c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	330c      	adds	r3, #12
 8006398:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800639a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800639c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e5      	bne.n	800637a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3314      	adds	r3, #20
 80063b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80063c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80063ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80063d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e5      	bne.n	80063ae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	623b      	str	r3, [r7, #32]
   return(result);
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3314      	adds	r3, #20
 8006400:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006402:	633a      	str	r2, [r7, #48]	@ 0x30
 8006404:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e5      	bne.n	80063e2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006418:	2220      	movs	r2, #32
 800641a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	2b01      	cmp	r3, #1
 8006424:	d119      	bne.n	800645a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	60fb      	str	r3, [r7, #12]
   return(result);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f023 0310 	bic.w	r3, r3, #16
 800643c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800643e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006446:	61fa      	str	r2, [r7, #28]
 8006448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	69b9      	ldr	r1, [r7, #24]
 800644c:	69fa      	ldr	r2, [r7, #28]
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	617b      	str	r3, [r7, #20]
   return(result);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800645a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800645c:	2200      	movs	r2, #0
 800645e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006464:	2b01      	cmp	r3, #1
 8006466:	d106      	bne.n	8006476 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800646a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800646c:	4619      	mov	r1, r3
 800646e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006470:	f7fa fdac 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006474:	e002      	b.n	800647c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006476:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006478:	f7fa fd9e 	bl	8000fb8 <HAL_UART_RxCpltCallback>
}
 800647c:	bf00      	nop
 800647e:	3770      	adds	r7, #112	@ 0x70
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649c:	2b01      	cmp	r3, #1
 800649e:	d108      	bne.n	80064b2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4619      	mov	r1, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7fa fd8e 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064b0:	e002      	b.n	80064b8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff ff3c 	bl	8006330 <HAL_UART_RxHalfCpltCallback>
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064dc:	2b80      	cmp	r3, #128	@ 0x80
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b21      	cmp	r3, #33	@ 0x21
 80064f2:	d108      	bne.n	8006506 <UART_DMAError+0x46>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2200      	movs	r2, #0
 80064fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006500:	68b8      	ldr	r0, [r7, #8]
 8006502:	f000 f8c1 	bl	8006688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006510:	2b40      	cmp	r3, #64	@ 0x40
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b22      	cmp	r3, #34	@ 0x22
 8006526:	d108      	bne.n	800653a <UART_DMAError+0x7a>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006534:	68b8      	ldr	r0, [r7, #8]
 8006536:	f000 f8cf 	bl	80066d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653e:	f043 0210 	orr.w	r2, r3, #16
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006546:	68b8      	ldr	r0, [r7, #8]
 8006548:	f7ff fefc 	bl	8006344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654c:	bf00      	nop
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b098      	sub	sp, #96	@ 0x60
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2222      	movs	r2, #34	@ 0x22
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006580:	4a3e      	ldr	r2, [pc, #248]	@ (800667c <UART_Start_Receive_DMA+0x128>)
 8006582:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006588:	4a3d      	ldr	r2, [pc, #244]	@ (8006680 <UART_Start_Receive_DMA+0x12c>)
 800658a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006590:	4a3c      	ldr	r2, [pc, #240]	@ (8006684 <UART_Start_Receive_DMA+0x130>)
 8006592:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006598:	2200      	movs	r2, #0
 800659a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800659c:	f107 0308 	add.w	r3, r7, #8
 80065a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	f7fb ff12 	bl	80023dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065b8:	2300      	movs	r3, #0
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d019      	beq.n	800660a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80065f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80065fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e5      	bne.n	80065d6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3314      	adds	r3, #20
 8006610:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	657b      	str	r3, [r7, #84]	@ 0x54
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800662a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e5      	bne.n	800660a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3314      	adds	r3, #20
 8006644:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	617b      	str	r3, [r7, #20]
   return(result);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006654:	653b      	str	r3, [r7, #80]	@ 0x50
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3314      	adds	r3, #20
 800665c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800665e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6a39      	ldr	r1, [r7, #32]
 8006664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	61fb      	str	r3, [r7, #28]
   return(result);
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e5      	bne.n	800663e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3760      	adds	r7, #96	@ 0x60
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	08006359 	.word	0x08006359
 8006680:	08006485 	.word	0x08006485
 8006684:	080064c1 	.word	0x080064c1

08006688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006688:	b480      	push	{r7}
 800668a:	b089      	sub	sp, #36	@ 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	60bb      	str	r3, [r7, #8]
   return(result);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	330c      	adds	r3, #12
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	61ba      	str	r2, [r7, #24]
 80066b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6979      	ldr	r1, [r7, #20]
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	613b      	str	r3, [r7, #16]
   return(result);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e5      	bne.n	8006690 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80066cc:	bf00      	nop
 80066ce:	3724      	adds	r7, #36	@ 0x24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b095      	sub	sp, #84	@ 0x54
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006700:	643a      	str	r2, [r7, #64]	@ 0x40
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3314      	adds	r3, #20
 800671a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	61fb      	str	r3, [r7, #28]
   return(result);
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3314      	adds	r3, #20
 8006732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800673a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	2b01      	cmp	r3, #1
 800674e:	d119      	bne.n	8006784 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330c      	adds	r3, #12
 8006756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0310 	bic.w	r3, r3, #16
 8006766:	647b      	str	r3, [r7, #68]	@ 0x44
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006770:	61ba      	str	r2, [r7, #24]
 8006772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6979      	ldr	r1, [r7, #20]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	613b      	str	r3, [r7, #16]
   return(result);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006792:	bf00      	nop
 8006794:	3754      	adds	r7, #84	@ 0x54
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f7ff fdc3 	bl	8006344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b21      	cmp	r3, #33	@ 0x21
 80067d8:	d13e      	bne.n	8006858 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067e2:	d114      	bne.n	800680e <UART_Transmit_IT+0x48>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d110      	bne.n	800680e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006800:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	1c9a      	adds	r2, r3, #2
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	621a      	str	r2, [r3, #32]
 800680c:	e008      	b.n	8006820 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	1c59      	adds	r1, r3, #1
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6211      	str	r1, [r2, #32]
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29b      	uxth	r3, r3
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4619      	mov	r1, r3
 800682e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10f      	bne.n	8006854 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006842:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006852:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	e000      	b.n	800685a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006858:	2302      	movs	r3, #2
  }
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800687c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fd48 	bl	800631c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b08c      	sub	sp, #48	@ 0x30
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b22      	cmp	r3, #34	@ 0x22
 80068a8:	f040 80ae 	bne.w	8006a08 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b4:	d117      	bne.n	80068e6 <UART_Receive_IT+0x50>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d113      	bne.n	80068e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068de:	1c9a      	adds	r2, r3, #2
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80068e4:	e026      	b.n	8006934 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f8:	d007      	beq.n	800690a <UART_Receive_IT+0x74>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <UART_Receive_IT+0x82>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e008      	b.n	800692a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006924:	b2da      	uxtb	r2, r3
 8006926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006928:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29b      	uxth	r3, r3
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	4619      	mov	r1, r3
 8006942:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006944:	2b00      	cmp	r3, #0
 8006946:	d15d      	bne.n	8006a04 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0220 	bic.w	r2, r2, #32
 8006956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695a      	ldr	r2, [r3, #20]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698a:	2b01      	cmp	r3, #1
 800698c:	d135      	bne.n	80069fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	613b      	str	r3, [r7, #16]
   return(result);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f023 0310 	bic.w	r3, r3, #16
 80069aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b4:	623a      	str	r2, [r7, #32]
 80069b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	69f9      	ldr	r1, [r7, #28]
 80069ba:	6a3a      	ldr	r2, [r7, #32]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e5      	bne.n	8006994 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0310 	and.w	r3, r3, #16
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d10a      	bne.n	80069ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fa faea 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
 80069f8:	e002      	b.n	8006a00 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fa fadc 	bl	8000fb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e002      	b.n	8006a0a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e000      	b.n	8006a0a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
  }
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3730      	adds	r7, #48	@ 0x30
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a18:	b0c0      	sub	sp, #256	@ 0x100
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	68d9      	ldr	r1, [r3, #12]
 8006a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	ea40 0301 	orr.w	r3, r0, r1
 8006a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a6c:	f021 010c 	bic.w	r1, r1, #12
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8e:	6999      	ldr	r1, [r3, #24]
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	ea40 0301 	orr.w	r3, r0, r1
 8006a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b8f      	ldr	r3, [pc, #572]	@ (8006ce0 <UART_SetConfig+0x2cc>)
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d005      	beq.n	8006ab4 <UART_SetConfig+0xa0>
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4b8d      	ldr	r3, [pc, #564]	@ (8006ce4 <UART_SetConfig+0x2d0>)
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d104      	bne.n	8006abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ab4:	f7fe fbea 	bl	800528c <HAL_RCC_GetPCLK2Freq>
 8006ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006abc:	e003      	b.n	8006ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006abe:	f7fe fbd1 	bl	8005264 <HAL_RCC_GetPCLK1Freq>
 8006ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ad0:	f040 810c 	bne.w	8006cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ade:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	462b      	mov	r3, r5
 8006aea:	1891      	adds	r1, r2, r2
 8006aec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006aee:	415b      	adcs	r3, r3
 8006af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006af6:	4621      	mov	r1, r4
 8006af8:	eb12 0801 	adds.w	r8, r2, r1
 8006afc:	4629      	mov	r1, r5
 8006afe:	eb43 0901 	adc.w	r9, r3, r1
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b16:	4690      	mov	r8, r2
 8006b18:	4699      	mov	r9, r3
 8006b1a:	4623      	mov	r3, r4
 8006b1c:	eb18 0303 	adds.w	r3, r8, r3
 8006b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b24:	462b      	mov	r3, r5
 8006b26:	eb49 0303 	adc.w	r3, r9, r3
 8006b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b42:	460b      	mov	r3, r1
 8006b44:	18db      	adds	r3, r3, r3
 8006b46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b48:	4613      	mov	r3, r2
 8006b4a:	eb42 0303 	adc.w	r3, r2, r3
 8006b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b58:	f7f9 fb9a 	bl	8000290 <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4b61      	ldr	r3, [pc, #388]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006b62:	fba3 2302 	umull	r2, r3, r3, r2
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	011c      	lsls	r4, r3, #4
 8006b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	1891      	adds	r1, r2, r2
 8006b82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b84:	415b      	adcs	r3, r3
 8006b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b8c:	4641      	mov	r1, r8
 8006b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b92:	4649      	mov	r1, r9
 8006b94:	eb43 0b01 	adc.w	fp, r3, r1
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bac:	4692      	mov	sl, r2
 8006bae:	469b      	mov	fp, r3
 8006bb0:	4643      	mov	r3, r8
 8006bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8006bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8006bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	18db      	adds	r3, r3, r3
 8006bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bde:	4613      	mov	r3, r2
 8006be0:	eb42 0303 	adc.w	r3, r2, r3
 8006be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006bee:	f7f9 fb4f 	bl	8000290 <__aeabi_uldivmod>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	2264      	movs	r2, #100	@ 0x64
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	1acb      	subs	r3, r1, r3
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006c0e:	4b36      	ldr	r3, [pc, #216]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006c10:	fba3 2302 	umull	r2, r3, r3, r2
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006c1c:	441c      	add	r4, r3
 8006c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006c30:	4642      	mov	r2, r8
 8006c32:	464b      	mov	r3, r9
 8006c34:	1891      	adds	r1, r2, r2
 8006c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c38:	415b      	adcs	r3, r3
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c40:	4641      	mov	r1, r8
 8006c42:	1851      	adds	r1, r2, r1
 8006c44:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c46:	4649      	mov	r1, r9
 8006c48:	414b      	adcs	r3, r1
 8006c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c58:	4659      	mov	r1, fp
 8006c5a:	00cb      	lsls	r3, r1, #3
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c62:	4651      	mov	r1, sl
 8006c64:	00ca      	lsls	r2, r1, #3
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c74:	464b      	mov	r3, r9
 8006c76:	460a      	mov	r2, r1
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c94:	460b      	mov	r3, r1
 8006c96:	18db      	adds	r3, r3, r3
 8006c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006caa:	f7f9 faf1 	bl	8000290 <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	2164      	movs	r1, #100	@ 0x64
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	3332      	adds	r3, #50	@ 0x32
 8006cc6:	4a08      	ldr	r2, [pc, #32]	@ (8006ce8 <UART_SetConfig+0x2d4>)
 8006cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f003 0207 	and.w	r2, r3, #7
 8006cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4422      	add	r2, r4
 8006cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cdc:	e106      	b.n	8006eec <UART_SetConfig+0x4d8>
 8006cde:	bf00      	nop
 8006ce0:	40011000 	.word	0x40011000
 8006ce4:	40011400 	.word	0x40011400
 8006ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	1891      	adds	r1, r2, r2
 8006d04:	6239      	str	r1, [r7, #32]
 8006d06:	415b      	adcs	r3, r3
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d0e:	4641      	mov	r1, r8
 8006d10:	1854      	adds	r4, r2, r1
 8006d12:	4649      	mov	r1, r9
 8006d14:	eb43 0501 	adc.w	r5, r3, r1
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	00eb      	lsls	r3, r5, #3
 8006d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d26:	00e2      	lsls	r2, r4, #3
 8006d28:	4614      	mov	r4, r2
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	4643      	mov	r3, r8
 8006d2e:	18e3      	adds	r3, r4, r3
 8006d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d34:	464b      	mov	r3, r9
 8006d36:	eb45 0303 	adc.w	r3, r5, r3
 8006d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	008b      	lsls	r3, r1, #2
 8006d5e:	4621      	mov	r1, r4
 8006d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d64:	4621      	mov	r1, r4
 8006d66:	008a      	lsls	r2, r1, #2
 8006d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d6c:	f7f9 fa90 	bl	8000290 <__aeabi_uldivmod>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4b60      	ldr	r3, [pc, #384]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006d76:	fba3 2302 	umull	r2, r3, r3, r2
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	011c      	lsls	r4, r3, #4
 8006d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d90:	4642      	mov	r2, r8
 8006d92:	464b      	mov	r3, r9
 8006d94:	1891      	adds	r1, r2, r2
 8006d96:	61b9      	str	r1, [r7, #24]
 8006d98:	415b      	adcs	r3, r3
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006da0:	4641      	mov	r1, r8
 8006da2:	1851      	adds	r1, r2, r1
 8006da4:	6139      	str	r1, [r7, #16]
 8006da6:	4649      	mov	r1, r9
 8006da8:	414b      	adcs	r3, r1
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006db8:	4659      	mov	r1, fp
 8006dba:	00cb      	lsls	r3, r1, #3
 8006dbc:	4651      	mov	r1, sl
 8006dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	00ca      	lsls	r2, r1, #3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	4642      	mov	r2, r8
 8006dce:	189b      	adds	r3, r3, r2
 8006dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	460a      	mov	r2, r1
 8006dd8:	eb42 0303 	adc.w	r3, r2, r3
 8006ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006df8:	4649      	mov	r1, r9
 8006dfa:	008b      	lsls	r3, r1, #2
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e02:	4641      	mov	r1, r8
 8006e04:	008a      	lsls	r2, r1, #2
 8006e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006e0a:	f7f9 fa41 	bl	8000290 <__aeabi_uldivmod>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4611      	mov	r1, r2
 8006e14:	4b38      	ldr	r3, [pc, #224]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006e16:	fba3 2301 	umull	r2, r3, r3, r1
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	2264      	movs	r2, #100	@ 0x64
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	1acb      	subs	r3, r1, r3
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	3332      	adds	r3, #50	@ 0x32
 8006e28:	4a33      	ldr	r2, [pc, #204]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e34:	441c      	add	r4, r3
 8006e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e44:	4642      	mov	r2, r8
 8006e46:	464b      	mov	r3, r9
 8006e48:	1891      	adds	r1, r2, r2
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	415b      	adcs	r3, r3
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e54:	4641      	mov	r1, r8
 8006e56:	1851      	adds	r1, r2, r1
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	414b      	adcs	r3, r1
 8006e5e:	607b      	str	r3, [r7, #4]
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e6c:	4659      	mov	r1, fp
 8006e6e:	00cb      	lsls	r3, r1, #3
 8006e70:	4651      	mov	r1, sl
 8006e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e76:	4651      	mov	r1, sl
 8006e78:	00ca      	lsls	r2, r1, #3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4642      	mov	r2, r8
 8006e82:	189b      	adds	r3, r3, r2
 8006e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e86:	464b      	mov	r3, r9
 8006e88:	460a      	mov	r2, r1
 8006e8a:	eb42 0303 	adc.w	r3, r2, r3
 8006e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	008b      	lsls	r3, r1, #2
 8006eac:	4641      	mov	r1, r8
 8006eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	008a      	lsls	r2, r1, #2
 8006eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006eba:	f7f9 f9e9 	bl	8000290 <__aeabi_uldivmod>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	2164      	movs	r1, #100	@ 0x64
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	3332      	adds	r3, #50	@ 0x32
 8006ed6:	4a08      	ldr	r2, [pc, #32]	@ (8006ef8 <UART_SetConfig+0x4e4>)
 8006ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4422      	add	r2, r4
 8006eea:	609a      	str	r2, [r3, #8]
}
 8006eec:	bf00      	nop
 8006eee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ef8:	51eb851f 	.word	0x51eb851f

08006efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006efc:	b084      	sub	sp, #16
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	f107 001c 	add.w	r0, r7, #28
 8006f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d123      	bne.n	8006f5e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d105      	bne.n	8006f52 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fae8 	bl	8008528 <USB_CoreReset>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	e01b      	b.n	8006f96 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fadc 	bl	8008528 <USB_CoreReset>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f88:	e005      	b.n	8006f96 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f96:	7fbb      	ldrb	r3, [r7, #30]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d10b      	bne.n	8006fb4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f043 0206 	orr.w	r2, r3, #6
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f043 0220 	orr.w	r2, r3, #32
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fc0:	b004      	add	sp, #16
 8006fc2:	4770      	bx	lr

08006fc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d165      	bne.n	80070a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4a41      	ldr	r2, [pc, #260]	@ (80070e0 <USB_SetTurnaroundTime+0x11c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d906      	bls.n	8006fee <USB_SetTurnaroundTime+0x2a>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a40      	ldr	r2, [pc, #256]	@ (80070e4 <USB_SetTurnaroundTime+0x120>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d202      	bcs.n	8006fee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006fe8:	230f      	movs	r3, #15
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e062      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80070e4 <USB_SetTurnaroundTime+0x120>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d306      	bcc.n	8007004 <USB_SetTurnaroundTime+0x40>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80070e8 <USB_SetTurnaroundTime+0x124>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d202      	bcs.n	8007004 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ffe:	230e      	movs	r3, #14
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	e057      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4a38      	ldr	r2, [pc, #224]	@ (80070e8 <USB_SetTurnaroundTime+0x124>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d306      	bcc.n	800701a <USB_SetTurnaroundTime+0x56>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a37      	ldr	r2, [pc, #220]	@ (80070ec <USB_SetTurnaroundTime+0x128>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d202      	bcs.n	800701a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007014:	230d      	movs	r3, #13
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e04c      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	4a33      	ldr	r2, [pc, #204]	@ (80070ec <USB_SetTurnaroundTime+0x128>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d306      	bcc.n	8007030 <USB_SetTurnaroundTime+0x6c>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4a32      	ldr	r2, [pc, #200]	@ (80070f0 <USB_SetTurnaroundTime+0x12c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d802      	bhi.n	8007030 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800702a:	230c      	movs	r3, #12
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e041      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4a2f      	ldr	r2, [pc, #188]	@ (80070f0 <USB_SetTurnaroundTime+0x12c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d906      	bls.n	8007046 <USB_SetTurnaroundTime+0x82>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4a2e      	ldr	r2, [pc, #184]	@ (80070f4 <USB_SetTurnaroundTime+0x130>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d802      	bhi.n	8007046 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007040:	230b      	movs	r3, #11
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	e036      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4a2a      	ldr	r2, [pc, #168]	@ (80070f4 <USB_SetTurnaroundTime+0x130>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d906      	bls.n	800705c <USB_SetTurnaroundTime+0x98>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4a29      	ldr	r2, [pc, #164]	@ (80070f8 <USB_SetTurnaroundTime+0x134>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d802      	bhi.n	800705c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007056:	230a      	movs	r3, #10
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	e02b      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4a26      	ldr	r2, [pc, #152]	@ (80070f8 <USB_SetTurnaroundTime+0x134>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d906      	bls.n	8007072 <USB_SetTurnaroundTime+0xae>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4a25      	ldr	r2, [pc, #148]	@ (80070fc <USB_SetTurnaroundTime+0x138>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d202      	bcs.n	8007072 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800706c:	2309      	movs	r3, #9
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e020      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4a21      	ldr	r2, [pc, #132]	@ (80070fc <USB_SetTurnaroundTime+0x138>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d306      	bcc.n	8007088 <USB_SetTurnaroundTime+0xc4>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4a20      	ldr	r2, [pc, #128]	@ (8007100 <USB_SetTurnaroundTime+0x13c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d802      	bhi.n	8007088 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007082:	2308      	movs	r3, #8
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e015      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4a1d      	ldr	r2, [pc, #116]	@ (8007100 <USB_SetTurnaroundTime+0x13c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d906      	bls.n	800709e <USB_SetTurnaroundTime+0xda>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4a1c      	ldr	r2, [pc, #112]	@ (8007104 <USB_SetTurnaroundTime+0x140>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d202      	bcs.n	800709e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007098:	2307      	movs	r3, #7
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e00a      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800709e:	2306      	movs	r3, #6
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e007      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d102      	bne.n	80070b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80070aa:	2309      	movs	r3, #9
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e001      	b.n	80070b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070b0:	2309      	movs	r3, #9
 80070b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	029b      	lsls	r3, r3, #10
 80070c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80070cc:	431a      	orrs	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	00d8acbf 	.word	0x00d8acbf
 80070e4:	00e4e1c0 	.word	0x00e4e1c0
 80070e8:	00f42400 	.word	0x00f42400
 80070ec:	01067380 	.word	0x01067380
 80070f0:	011a499f 	.word	0x011a499f
 80070f4:	01312cff 	.word	0x01312cff
 80070f8:	014ca43f 	.word	0x014ca43f
 80070fc:	016e3600 	.word	0x016e3600
 8007100:	01a6ab1f 	.word	0x01a6ab1f
 8007104:	01e84800 	.word	0x01e84800

08007108 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f043 0201 	orr.w	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f023 0201 	bic.w	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d115      	bne.n	800719a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800717a:	200a      	movs	r0, #10
 800717c:	f7fa ff4a 	bl	8002014 <HAL_Delay>
      ms += 10U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	330a      	adds	r3, #10
 8007184:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 f93f 	bl	800840a <USB_GetMode>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	d01e      	beq.n	80071d0 <USB_SetCurrentMode+0x84>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2bc7      	cmp	r3, #199	@ 0xc7
 8007196:	d9f0      	bls.n	800717a <USB_SetCurrentMode+0x2e>
 8007198:	e01a      	b.n	80071d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d115      	bne.n	80071cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071ac:	200a      	movs	r0, #10
 80071ae:	f7fa ff31 	bl	8002014 <HAL_Delay>
      ms += 10U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	330a      	adds	r3, #10
 80071b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f926 	bl	800840a <USB_GetMode>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <USB_SetCurrentMode+0x84>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80071c8:	d9f0      	bls.n	80071ac <USB_SetCurrentMode+0x60>
 80071ca:	e001      	b.n	80071d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e005      	b.n	80071dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80071d4:	d101      	bne.n	80071da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071e4:	b084      	sub	sp, #16
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b086      	sub	sp, #24
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80071f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e009      	b.n	8007218 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	3340      	adds	r3, #64	@ 0x40
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	2200      	movs	r2, #0
 8007210:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	3301      	adds	r3, #1
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b0e      	cmp	r3, #14
 800721c:	d9f2      	bls.n	8007204 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800721e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007222:	2b00      	cmp	r3, #0
 8007224:	d11c      	bne.n	8007260 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007234:	f043 0302 	orr.w	r3, r3, #2
 8007238:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007256:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	639a      	str	r2, [r3, #56]	@ 0x38
 800725e:	e00b      	b.n	8007278 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007264:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007270:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800727e:	461a      	mov	r2, r3
 8007280:	2300      	movs	r3, #0
 8007282:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007284:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007288:	2b01      	cmp	r3, #1
 800728a:	d10d      	bne.n	80072a8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800728c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007294:	2100      	movs	r1, #0
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f968 	bl	800756c <USB_SetDevSpeed>
 800729c:	e008      	b.n	80072b0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800729e:	2101      	movs	r1, #1
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f963 	bl	800756c <USB_SetDevSpeed>
 80072a6:	e003      	b.n	80072b0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072a8:	2103      	movs	r1, #3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f95e 	bl	800756c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072b0:	2110      	movs	r1, #16
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f8fa 	bl	80074ac <USB_FlushTxFifo>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f924 	bl	8007510 <USB_FlushRxFifo>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d8:	461a      	mov	r2, r3
 80072da:	2300      	movs	r3, #0
 80072dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e4:	461a      	mov	r2, r3
 80072e6:	2300      	movs	r3, #0
 80072e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f0:	461a      	mov	r2, r3
 80072f2:	2300      	movs	r3, #0
 80072f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072f6:	2300      	movs	r3, #0
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	e043      	b.n	8007384 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800730e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007312:	d118      	bne.n	8007346 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007326:	461a      	mov	r2, r3
 8007328:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	e013      	b.n	8007358 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800733c:	461a      	mov	r2, r3
 800733e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	e008      	b.n	8007358 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007352:	461a      	mov	r2, r3
 8007354:	2300      	movs	r3, #0
 8007356:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007364:	461a      	mov	r2, r3
 8007366:	2300      	movs	r3, #0
 8007368:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007376:	461a      	mov	r2, r3
 8007378:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800737c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	3301      	adds	r3, #1
 8007382:	613b      	str	r3, [r7, #16]
 8007384:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007388:	461a      	mov	r2, r3
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4293      	cmp	r3, r2
 800738e:	d3b5      	bcc.n	80072fc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	e043      	b.n	800741e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073ac:	d118      	bne.n	80073e0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c0:	461a      	mov	r2, r3
 80073c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	e013      	b.n	80073f2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d6:	461a      	mov	r2, r3
 80073d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	e008      	b.n	80073f2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ec:	461a      	mov	r2, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fe:	461a      	mov	r2, r3
 8007400:	2300      	movs	r3, #0
 8007402:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007410:	461a      	mov	r2, r3
 8007412:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007416:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	3301      	adds	r3, #1
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007422:	461a      	mov	r2, r3
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4293      	cmp	r3, r2
 8007428:	d3b5      	bcc.n	8007396 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800743c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800744a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800744c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	f043 0210 	orr.w	r2, r3, #16
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <USB_DevInit+0x2c4>)
 8007466:	4313      	orrs	r3, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800746c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f043 0208 	orr.w	r2, r3, #8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007480:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007484:	2b01      	cmp	r3, #1
 8007486:	d107      	bne.n	8007498 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007490:	f043 0304 	orr.w	r3, r3, #4
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074a4:	b004      	add	sp, #16
 80074a6:	4770      	bx	lr
 80074a8:	803c3800 	.word	0x803c3800

080074ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074c6:	d901      	bls.n	80074cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e01b      	b.n	8007504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	daf2      	bge.n	80074ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	019b      	lsls	r3, r3, #6
 80074dc:	f043 0220 	orr.w	r2, r3, #32
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f0:	d901      	bls.n	80074f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e006      	b.n	8007504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d0f0      	beq.n	80074e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007528:	d901      	bls.n	800752e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e018      	b.n	8007560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	daf2      	bge.n	800751c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2210      	movs	r2, #16
 800753e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800754c:	d901      	bls.n	8007552 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e006      	b.n	8007560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b10      	cmp	r3, #16
 800755c:	d0f0      	beq.n	8007540 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800758c:	4313      	orrs	r3, r2
 800758e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800759e:	b480      	push	{r7}
 80075a0:	b087      	sub	sp, #28
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0306 	and.w	r3, r3, #6
 80075b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
 80075c2:	e00a      	b.n	80075da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d002      	beq.n	80075d0 <USB_GetDevSpeed+0x32>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d102      	bne.n	80075d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80075d0:	2302      	movs	r3, #2
 80075d2:	75fb      	strb	r3, [r7, #23]
 80075d4:	e001      	b.n	80075da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80075d6:	230f      	movs	r3, #15
 80075d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d13a      	bne.n	800767a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	2101      	movs	r1, #1
 8007616:	fa01 f303 	lsl.w	r3, r1, r3
 800761a:	b29b      	uxth	r3, r3
 800761c:	68f9      	ldr	r1, [r7, #12]
 800761e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007622:	4313      	orrs	r3, r2
 8007624:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d155      	bne.n	80076e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007658:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	059b      	lsls	r3, r3, #22
 800765e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007660:	4313      	orrs	r3, r2
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800766e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e036      	b.n	80076e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	2101      	movs	r1, #1
 800768c:	fa01 f303 	lsl.w	r3, r1, r3
 8007690:	041b      	lsls	r3, r3, #16
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007698:	4313      	orrs	r3, r2
 800769a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11a      	bne.n	80076e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	791b      	ldrb	r3, [r3, #4]
 80076cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076ce:	430b      	orrs	r3, r1
 80076d0:	4313      	orrs	r3, r2
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d161      	bne.n	80077d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800772a:	d11f      	bne.n	800776c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	440a      	add	r2, r1
 8007742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007746:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800774a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	440a      	add	r2, r1
 8007762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007766:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800776a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	2101      	movs	r1, #1
 800777e:	fa01 f303 	lsl.w	r3, r1, r3
 8007782:	b29b      	uxth	r3, r3
 8007784:	43db      	mvns	r3, r3
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800778c:	4013      	ands	r3, r2
 800778e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	2101      	movs	r1, #1
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	43db      	mvns	r3, r3
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b0:	4013      	ands	r3, r2
 80077b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	0159      	lsls	r1, r3, #5
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	440b      	add	r3, r1
 80077ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ce:	4619      	mov	r1, r3
 80077d0:	4b35      	ldr	r3, [pc, #212]	@ (80078a8 <USB_DeactivateEndpoint+0x1b0>)
 80077d2:	4013      	ands	r3, r2
 80077d4:	600b      	str	r3, [r1, #0]
 80077d6:	e060      	b.n	800789a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077ee:	d11f      	bne.n	8007830 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800780a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800780e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800782a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800782e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	2101      	movs	r1, #1
 8007842:	fa01 f303 	lsl.w	r3, r1, r3
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	43db      	mvns	r3, r3
 800784a:	68f9      	ldr	r1, [r7, #12]
 800784c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007850:	4013      	ands	r3, r2
 8007852:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	2101      	movs	r1, #1
 8007866:	fa01 f303 	lsl.w	r3, r1, r3
 800786a:	041b      	lsls	r3, r3, #16
 800786c:	43db      	mvns	r3, r3
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007874:	4013      	ands	r3, r2
 8007876:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	0159      	lsls	r1, r3, #5
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	440b      	add	r3, r1
 800788e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007892:	4619      	mov	r1, r3
 8007894:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <USB_DeactivateEndpoint+0x1b4>)
 8007896:	4013      	ands	r3, r2
 8007898:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	ec337800 	.word	0xec337800
 80078ac:	eff37800 	.word	0xeff37800

080078b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	@ 0x28
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	4613      	mov	r3, r2
 80078bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	f040 817f 	bne.w	8007bd0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d132      	bne.n	8007940 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078f4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078f8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007918:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800791c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007938:	0cdb      	lsrs	r3, r3, #19
 800793a:	04db      	lsls	r3, r3, #19
 800793c:	6113      	str	r3, [r2, #16]
 800793e:	e097      	b.n	8007a70 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800795a:	0cdb      	lsrs	r3, r3, #19
 800795c:	04db      	lsls	r3, r3, #19
 800795e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800797a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800797e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007982:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d11a      	bne.n	80079c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	429a      	cmp	r2, r3
 8007994:	d903      	bls.n	800799e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	0151      	lsls	r1, r2, #5
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	440a      	add	r2, r1
 80079b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079bc:	6113      	str	r3, [r2, #16]
 80079be:	e044      	b.n	8007a4a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	4413      	add	r3, r2
 80079ca:	1e5a      	subs	r2, r3, #1
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	8afb      	ldrh	r3, [r7, #22]
 80079e6:	04d9      	lsls	r1, r3, #19
 80079e8:	4ba4      	ldr	r3, [pc, #656]	@ (8007c7c <USB_EPStartXfer+0x3cc>)
 80079ea:	400b      	ands	r3, r1
 80079ec:	69b9      	ldr	r1, [r7, #24]
 80079ee:	0148      	lsls	r0, r1, #5
 80079f0:	69f9      	ldr	r1, [r7, #28]
 80079f2:	4401      	add	r1, r0
 80079f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079f8:	4313      	orrs	r3, r2
 80079fa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	791b      	ldrb	r3, [r3, #4]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d122      	bne.n	8007a4a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	0151      	lsls	r1, r2, #5
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	440a      	add	r2, r1
 8007a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a1e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007a22:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	075b      	lsls	r3, r3, #29
 8007a36:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007a3a:	69b9      	ldr	r1, [r7, #24]
 8007a3c:	0148      	lsls	r0, r1, #5
 8007a3e:	69f9      	ldr	r1, [r7, #28]
 8007a40:	4401      	add	r1, r0
 8007a42:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a46:	4313      	orrs	r3, r2
 8007a48:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a60:	69b9      	ldr	r1, [r7, #24]
 8007a62:	0148      	lsls	r0, r1, #5
 8007a64:	69f9      	ldr	r1, [r7, #28]
 8007a66:	4401      	add	r1, r0
 8007a68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d14b      	bne.n	8007b0e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d128      	bne.n	8007aec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d110      	bne.n	8007acc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	0151      	lsls	r1, r2, #5
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	440a      	add	r2, r1
 8007ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ac4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e00f      	b.n	8007aec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	e166      	b.n	8007ddc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b28:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b2c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	791b      	ldrb	r3, [r3, #4]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d015      	beq.n	8007b62 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 814e 	beq.w	8007ddc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	2101      	movs	r1, #1
 8007b52:	fa01 f303 	lsl.w	r3, r1, r3
 8007b56:	69f9      	ldr	r1, [r7, #28]
 8007b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007b60:	e13c      	b.n	8007ddc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d110      	bne.n	8007b94 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	e00f      	b.n	8007bb4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	68d9      	ldr	r1, [r3, #12]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	b298      	uxth	r0, r3
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f9b9 	bl	8007f40 <USB_WritePacket>
 8007bce:	e105      	b.n	8007ddc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	0151      	lsls	r1, r2, #5
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	440a      	add	r2, r1
 8007be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bea:	0cdb      	lsrs	r3, r3, #19
 8007bec:	04db      	lsls	r3, r3, #19
 8007bee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c0a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c0e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c12:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d132      	bne.n	8007c80 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	0148      	lsls	r0, r1, #5
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	4401      	add	r1, r0
 8007c50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c54:	4313      	orrs	r3, r2
 8007c56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	0151      	lsls	r1, r2, #5
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c76:	6113      	str	r3, [r2, #16]
 8007c78:	e062      	b.n	8007d40 <USB_EPStartXfer+0x490>
 8007c7a:	bf00      	nop
 8007c7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d123      	bne.n	8007cd0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c9e:	69b9      	ldr	r1, [r7, #24]
 8007ca0:	0148      	lsls	r0, r1, #5
 8007ca2:	69f9      	ldr	r1, [r7, #28]
 8007ca4:	4401      	add	r1, r0
 8007ca6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007caa:	4313      	orrs	r3, r2
 8007cac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ccc:	6113      	str	r3, [r2, #16]
 8007cce:	e037      	b.n	8007d40 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	4413      	add	r3, r2
 8007cda:	1e5a      	subs	r2, r3, #1
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	8afa      	ldrh	r2, [r7, #22]
 8007cec:	fb03 f202 	mul.w	r2, r3, r2
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d00:	691a      	ldr	r2, [r3, #16]
 8007d02:	8afb      	ldrh	r3, [r7, #22]
 8007d04:	04d9      	lsls	r1, r3, #19
 8007d06:	4b38      	ldr	r3, [pc, #224]	@ (8007de8 <USB_EPStartXfer+0x538>)
 8007d08:	400b      	ands	r3, r1
 8007d0a:	69b9      	ldr	r1, [r7, #24]
 8007d0c:	0148      	lsls	r0, r1, #5
 8007d0e:	69f9      	ldr	r1, [r7, #28]
 8007d10:	4401      	add	r1, r0
 8007d12:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d16:	4313      	orrs	r3, r2
 8007d18:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d30:	69b9      	ldr	r1, [r7, #24]
 8007d32:	0148      	lsls	r0, r1, #5
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	4401      	add	r1, r0
 8007d38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d10d      	bne.n	8007d62 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d009      	beq.n	8007d62 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	68d9      	ldr	r1, [r3, #12]
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5e:	460a      	mov	r2, r1
 8007d60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d128      	bne.n	8007dbc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d110      	bne.n	8007d9c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	0151      	lsls	r1, r2, #5
 8007d8c:	69fa      	ldr	r2, [r7, #28]
 8007d8e:	440a      	add	r2, r1
 8007d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	e00f      	b.n	8007dbc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	0151      	lsls	r1, r2, #5
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	440a      	add	r2, r1
 8007db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dd6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007dda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3720      	adds	r7, #32
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	1ff80000 	.word	0x1ff80000

08007dec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d14a      	bne.n	8007ea0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e22:	f040 8086 	bne.w	8007f32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	7812      	ldrb	r2, [r2, #0]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	7812      	ldrb	r2, [r2, #0]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3301      	adds	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d902      	bls.n	8007e84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	75fb      	strb	r3, [r7, #23]
          break;
 8007e82:	e056      	b.n	8007f32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e9c:	d0e7      	beq.n	8007e6e <USB_EPStopXfer+0x82>
 8007e9e:	e048      	b.n	8007f32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007eb8:	d13b      	bne.n	8007f32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	7812      	ldrb	r2, [r2, #0]
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ed8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007edc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	7812      	ldrb	r2, [r2, #0]
 8007ef2:	0151      	lsls	r1, r2, #5
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	440a      	add	r2, r1
 8007ef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007efc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3301      	adds	r3, #1
 8007f06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d902      	bls.n	8007f18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	75fb      	strb	r3, [r7, #23]
          break;
 8007f16:	e00c      	b.n	8007f32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f30:	d0e7      	beq.n	8007f02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	@ 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	460b      	mov	r3, r1
 8007f50:	71fb      	strb	r3, [r7, #7]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d123      	bne.n	8007fae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f66:	88bb      	ldrh	r3, [r7, #4]
 8007f68:	3303      	adds	r3, #3
 8007f6a:	089b      	lsrs	r3, r3, #2
 8007f6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61bb      	str	r3, [r7, #24]
 8007f72:	e018      	b.n	8007fa6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	031a      	lsls	r2, r3, #12
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f80:	461a      	mov	r2, r3
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	3301      	adds	r3, #1
 8007f92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	3301      	adds	r3, #1
 8007f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	61bb      	str	r3, [r7, #24]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d3e2      	bcc.n	8007f74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3724      	adds	r7, #36	@ 0x24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b08b      	sub	sp, #44	@ 0x2c
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	089b      	lsrs	r3, r3, #2
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	f003 0303 	and.w	r3, r3, #3
 8007fe0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	623b      	str	r3, [r7, #32]
 8007fe6:	e014      	b.n	8008012 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	3301      	adds	r3, #1
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	3301      	adds	r3, #1
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	3301      	adds	r3, #1
 8008010:	623b      	str	r3, [r7, #32]
 8008012:	6a3a      	ldr	r2, [r7, #32]
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	429a      	cmp	r2, r3
 8008018:	d3e6      	bcc.n	8007fe8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800801a:	8bfb      	ldrh	r3, [r7, #30]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01e      	beq.n	800805e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800802a:	461a      	mov	r2, r3
 800802c:	f107 0310 	add.w	r3, r7, #16
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	fa22 f303 	lsr.w	r3, r2, r3
 8008040:	b2da      	uxtb	r2, r3
 8008042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008044:	701a      	strb	r2, [r3, #0]
      i++;
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	3301      	adds	r3, #1
 800804a:	623b      	str	r3, [r7, #32]
      pDest++;
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804e:	3301      	adds	r3, #1
 8008050:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008052:	8bfb      	ldrh	r3, [r7, #30]
 8008054:	3b01      	subs	r3, #1
 8008056:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008058:	8bfb      	ldrh	r3, [r7, #30]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1ea      	bne.n	8008034 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008060:	4618      	mov	r0, r3
 8008062:	372c      	adds	r7, #44	@ 0x2c
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	785b      	ldrb	r3, [r3, #1]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d12c      	bne.n	80080e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	db12      	blt.n	80080c0 <USB_EPSetStall+0x54>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00f      	beq.n	80080c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	e02b      	b.n	800813a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	db12      	blt.n	800811a <USB_EPSetStall+0xae>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00f      	beq.n	800811a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008114:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008118:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	440a      	add	r2, r1
 8008130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008134:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008138:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d128      	bne.n	80081b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	0151      	lsls	r1, r2, #5
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	440a      	add	r2, r1
 800817a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800817e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008182:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	791b      	ldrb	r3, [r3, #4]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d003      	beq.n	8008194 <USB_EPClearStall+0x4c>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	791b      	ldrb	r3, [r3, #4]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d138      	bne.n	8008206 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	e027      	b.n	8008206 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	0151      	lsls	r1, r2, #5
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	440a      	add	r2, r1
 80081cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	791b      	ldrb	r3, [r3, #4]
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d003      	beq.n	80081e6 <USB_EPClearStall+0x9e>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	791b      	ldrb	r3, [r3, #4]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d10f      	bne.n	8008206 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	0151      	lsls	r1, r2, #5
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	440a      	add	r2, r1
 80081fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008204:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008232:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008236:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008248:	68f9      	ldr	r1, [r7, #12]
 800824a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800824e:	4313      	orrs	r3, r2
 8008250:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800828e:	f023 0302 	bic.w	r3, r3, #2
 8008292:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082bc:	f023 0303 	bic.w	r3, r3, #3
 80082c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082d0:	f043 0302 	orr.w	r3, r3, #2
 80082d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4013      	ands	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082fc:	68fb      	ldr	r3, [r7, #12]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	4013      	ands	r3, r2
 800832c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	0c1b      	lsrs	r3, r3, #16
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800833e:	b480      	push	{r7}
 8008340:	b085      	sub	sp, #20
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	4013      	ands	r3, r2
 8008360:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	b29b      	uxth	r3, r3
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	4013      	ands	r3, r2
 800839e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083a0:	68bb      	ldr	r3, [r7, #8]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b087      	sub	sp, #28
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	fa22 f303 	lsr.w	r3, r2, r3
 80083de:	01db      	lsls	r3, r3, #7
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4013      	ands	r3, r2
 80083fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083fc:	68bb      	ldr	r3, [r7, #8]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	f003 0301 	and.w	r3, r3, #1
}
 800841a:	4618      	mov	r0, r3
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008440:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008444:	f023 0307 	bic.w	r3, r3, #7
 8008448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800845c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	460b      	mov	r3, r1
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	333c      	adds	r3, #60	@ 0x3c
 8008482:	3304      	adds	r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4a26      	ldr	r2, [pc, #152]	@ (8008524 <USB_EP0_OutStart+0xb8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d90a      	bls.n	80084a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800849c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084a0:	d101      	bne.n	80084a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e037      	b.n	8008516 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ac:	461a      	mov	r2, r3
 80084ae:	2300      	movs	r3, #0
 80084b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084d4:	f043 0318 	orr.w	r3, r3, #24
 80084d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80084ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d10f      	bne.n	8008514 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800850e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008512:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	4f54300a 	.word	0x4f54300a

08008528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008540:	d901      	bls.n	8008546 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e01b      	b.n	800857e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	daf2      	bge.n	8008534 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f043 0201 	orr.w	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3301      	adds	r3, #1
 8008562:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800856a:	d901      	bls.n	8008570 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e006      	b.n	800857e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b01      	cmp	r3, #1
 800857a:	d0f0      	beq.n	800855e <USB_CoreReset+0x36>

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
	...

0800858c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008598:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800859c:	f002 fcc4 	bl	800af28 <USBD_static_malloc>
 80085a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d109      	bne.n	80085bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	32b0      	adds	r2, #176	@ 0xb0
 80085b2:	2100      	movs	r1, #0
 80085b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80085b8:	2302      	movs	r3, #2
 80085ba:	e0d4      	b.n	8008766 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80085bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80085c0:	2100      	movs	r1, #0
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f002 fefe 	bl	800b3c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	32b0      	adds	r2, #176	@ 0xb0
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	32b0      	adds	r2, #176	@ 0xb0
 80085e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7c1b      	ldrb	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d138      	bne.n	8008666 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085f4:	4b5e      	ldr	r3, [pc, #376]	@ (8008770 <USBD_CDC_Init+0x1e4>)
 80085f6:	7819      	ldrb	r1, [r3, #0]
 80085f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085fc:	2202      	movs	r2, #2
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f002 fb6f 	bl	800ace2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008604:	4b5a      	ldr	r3, [pc, #360]	@ (8008770 <USBD_CDC_Init+0x1e4>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	f003 020f 	and.w	r2, r3, #15
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	440b      	add	r3, r1
 8008618:	3324      	adds	r3, #36	@ 0x24
 800861a:	2201      	movs	r2, #1
 800861c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800861e:	4b55      	ldr	r3, [pc, #340]	@ (8008774 <USBD_CDC_Init+0x1e8>)
 8008620:	7819      	ldrb	r1, [r3, #0]
 8008622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008626:	2202      	movs	r2, #2
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f002 fb5a 	bl	800ace2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800862e:	4b51      	ldr	r3, [pc, #324]	@ (8008774 <USBD_CDC_Init+0x1e8>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f003 020f 	and.w	r2, r3, #15
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008646:	2201      	movs	r2, #1
 8008648:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800864a:	4b4b      	ldr	r3, [pc, #300]	@ (8008778 <USBD_CDC_Init+0x1ec>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	f003 020f 	and.w	r2, r3, #15
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	440b      	add	r3, r1
 800865e:	3326      	adds	r3, #38	@ 0x26
 8008660:	2210      	movs	r2, #16
 8008662:	801a      	strh	r2, [r3, #0]
 8008664:	e035      	b.n	80086d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008666:	4b42      	ldr	r3, [pc, #264]	@ (8008770 <USBD_CDC_Init+0x1e4>)
 8008668:	7819      	ldrb	r1, [r3, #0]
 800866a:	2340      	movs	r3, #64	@ 0x40
 800866c:	2202      	movs	r2, #2
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f002 fb37 	bl	800ace2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008674:	4b3e      	ldr	r3, [pc, #248]	@ (8008770 <USBD_CDC_Init+0x1e4>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	f003 020f 	and.w	r2, r3, #15
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	440b      	add	r3, r1
 8008688:	3324      	adds	r3, #36	@ 0x24
 800868a:	2201      	movs	r2, #1
 800868c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800868e:	4b39      	ldr	r3, [pc, #228]	@ (8008774 <USBD_CDC_Init+0x1e8>)
 8008690:	7819      	ldrb	r1, [r3, #0]
 8008692:	2340      	movs	r3, #64	@ 0x40
 8008694:	2202      	movs	r2, #2
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f002 fb23 	bl	800ace2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800869c:	4b35      	ldr	r3, [pc, #212]	@ (8008774 <USBD_CDC_Init+0x1e8>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f003 020f 	and.w	r2, r3, #15
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086b4:	2201      	movs	r2, #1
 80086b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80086b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008778 <USBD_CDC_Init+0x1ec>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	f003 020f 	and.w	r2, r3, #15
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	3326      	adds	r3, #38	@ 0x26
 80086ce:	2210      	movs	r2, #16
 80086d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80086d2:	4b29      	ldr	r3, [pc, #164]	@ (8008778 <USBD_CDC_Init+0x1ec>)
 80086d4:	7819      	ldrb	r1, [r3, #0]
 80086d6:	2308      	movs	r3, #8
 80086d8:	2203      	movs	r2, #3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f002 fb01 	bl	800ace2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80086e0:	4b25      	ldr	r3, [pc, #148]	@ (8008778 <USBD_CDC_Init+0x1ec>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 020f 	and.w	r2, r3, #15
 80086e8:	6879      	ldr	r1, [r7, #4]
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	440b      	add	r3, r1
 80086f4:	3324      	adds	r3, #36	@ 0x24
 80086f6:	2201      	movs	r2, #1
 80086f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	33b0      	adds	r3, #176	@ 0xb0
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008730:	2302      	movs	r3, #2
 8008732:	e018      	b.n	8008766 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	7c1b      	ldrb	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800873c:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <USBD_CDC_Init+0x1e8>)
 800873e:	7819      	ldrb	r1, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008746:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f002 fbb8 	bl	800aec0 <USBD_LL_PrepareReceive>
 8008750:	e008      	b.n	8008764 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008752:	4b08      	ldr	r3, [pc, #32]	@ (8008774 <USBD_CDC_Init+0x1e8>)
 8008754:	7819      	ldrb	r1, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800875c:	2340      	movs	r3, #64	@ 0x40
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f002 fbae 	bl	800aec0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200000a3 	.word	0x200000a3
 8008774:	200000a4 	.word	0x200000a4
 8008778:	200000a5 	.word	0x200000a5

0800877c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008788:	4b3a      	ldr	r3, [pc, #232]	@ (8008874 <USBD_CDC_DeInit+0xf8>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f002 facd 	bl	800ad2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008794:	4b37      	ldr	r3, [pc, #220]	@ (8008874 <USBD_CDC_DeInit+0xf8>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	f003 020f 	and.w	r2, r3, #15
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	3324      	adds	r3, #36	@ 0x24
 80087aa:	2200      	movs	r2, #0
 80087ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80087ae:	4b32      	ldr	r3, [pc, #200]	@ (8008878 <USBD_CDC_DeInit+0xfc>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f002 faba 	bl	800ad2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80087ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008878 <USBD_CDC_DeInit+0xfc>)
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	f003 020f 	and.w	r2, r3, #15
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087d2:	2200      	movs	r2, #0
 80087d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80087d6:	4b29      	ldr	r3, [pc, #164]	@ (800887c <USBD_CDC_DeInit+0x100>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f002 faa6 	bl	800ad2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80087e2:	4b26      	ldr	r3, [pc, #152]	@ (800887c <USBD_CDC_DeInit+0x100>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	f003 020f 	and.w	r2, r3, #15
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	3324      	adds	r3, #36	@ 0x24
 80087f8:	2200      	movs	r2, #0
 80087fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80087fc:	4b1f      	ldr	r3, [pc, #124]	@ (800887c <USBD_CDC_DeInit+0x100>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3326      	adds	r3, #38	@ 0x26
 8008812:	2200      	movs	r2, #0
 8008814:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	32b0      	adds	r2, #176	@ 0xb0
 8008820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d01f      	beq.n	8008868 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	33b0      	adds	r3, #176	@ 0xb0
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	32b0      	adds	r2, #176	@ 0xb0
 8008846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884a:	4618      	mov	r0, r3
 800884c:	f002 fb7a 	bl	800af44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	32b0      	adds	r2, #176	@ 0xb0
 800885a:	2100      	movs	r1, #0
 800885c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	200000a3 	.word	0x200000a3
 8008878:	200000a4 	.word	0x200000a4
 800887c:	200000a5 	.word	0x200000a5

08008880 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	32b0      	adds	r2, #176	@ 0xb0
 8008894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008898:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e0bf      	b.n	8008a30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d050      	beq.n	800895e <USBD_CDC_Setup+0xde>
 80088bc:	2b20      	cmp	r3, #32
 80088be:	f040 80af 	bne.w	8008a20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	88db      	ldrh	r3, [r3, #6]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d03a      	beq.n	8008940 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	da1b      	bge.n	800890c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	33b0      	adds	r3, #176	@ 0xb0
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80088ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	88d2      	ldrh	r2, [r2, #6]
 80088f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	88db      	ldrh	r3, [r3, #6]
 80088f6:	2b07      	cmp	r3, #7
 80088f8:	bf28      	it	cs
 80088fa:	2307      	movcs	r3, #7
 80088fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	89fa      	ldrh	r2, [r7, #14]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 fd93 	bl	800a430 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800890a:	e090      	b.n	8008a2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	785a      	ldrb	r2, [r3, #1]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	2b3f      	cmp	r3, #63	@ 0x3f
 800891c:	d803      	bhi.n	8008926 <USBD_CDC_Setup+0xa6>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	88db      	ldrh	r3, [r3, #6]
 8008922:	b2da      	uxtb	r2, r3
 8008924:	e000      	b.n	8008928 <USBD_CDC_Setup+0xa8>
 8008926:	2240      	movs	r2, #64	@ 0x40
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800892e:	6939      	ldr	r1, [r7, #16]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008936:	461a      	mov	r2, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 fda5 	bl	800a488 <USBD_CtlPrepareRx>
      break;
 800893e:	e076      	b.n	8008a2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	33b0      	adds	r3, #176	@ 0xb0
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	7850      	ldrb	r0, [r2, #1]
 8008956:	2200      	movs	r2, #0
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	4798      	blx	r3
      break;
 800895c:	e067      	b.n	8008a2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b0b      	cmp	r3, #11
 8008964:	d851      	bhi.n	8008a0a <USBD_CDC_Setup+0x18a>
 8008966:	a201      	add	r2, pc, #4	@ (adr r2, 800896c <USBD_CDC_Setup+0xec>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	0800899d 	.word	0x0800899d
 8008970:	08008a19 	.word	0x08008a19
 8008974:	08008a0b 	.word	0x08008a0b
 8008978:	08008a0b 	.word	0x08008a0b
 800897c:	08008a0b 	.word	0x08008a0b
 8008980:	08008a0b 	.word	0x08008a0b
 8008984:	08008a0b 	.word	0x08008a0b
 8008988:	08008a0b 	.word	0x08008a0b
 800898c:	08008a0b 	.word	0x08008a0b
 8008990:	08008a0b 	.word	0x08008a0b
 8008994:	080089c7 	.word	0x080089c7
 8008998:	080089f1 	.word	0x080089f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d107      	bne.n	80089b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089a8:	f107 030a 	add.w	r3, r7, #10
 80089ac:	2202      	movs	r2, #2
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 fd3d 	bl	800a430 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089b6:	e032      	b.n	8008a1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 fcbb 	bl	800a336 <USBD_CtlError>
            ret = USBD_FAIL;
 80089c0:	2303      	movs	r3, #3
 80089c2:	75fb      	strb	r3, [r7, #23]
          break;
 80089c4:	e02b      	b.n	8008a1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d107      	bne.n	80089e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80089d2:	f107 030d 	add.w	r3, r7, #13
 80089d6:	2201      	movs	r2, #1
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f001 fd28 	bl	800a430 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089e0:	e01d      	b.n	8008a1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 fca6 	bl	800a336 <USBD_CtlError>
            ret = USBD_FAIL;
 80089ea:	2303      	movs	r3, #3
 80089ec:	75fb      	strb	r3, [r7, #23]
          break;
 80089ee:	e016      	b.n	8008a1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d00f      	beq.n	8008a1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f001 fc99 	bl	800a336 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a08:	e008      	b.n	8008a1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 fc92 	bl	800a336 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a12:	2303      	movs	r3, #3
 8008a14:	75fb      	strb	r3, [r7, #23]
          break;
 8008a16:	e002      	b.n	8008a1e <USBD_CDC_Setup+0x19e>
          break;
 8008a18:	bf00      	nop
 8008a1a:	e008      	b.n	8008a2e <USBD_CDC_Setup+0x1ae>
          break;
 8008a1c:	bf00      	nop
      }
      break;
 8008a1e:	e006      	b.n	8008a2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 fc87 	bl	800a336 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	32b0      	adds	r2, #176	@ 0xb0
 8008a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e065      	b.n	8008b2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	32b0      	adds	r2, #176	@ 0xb0
 8008a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	3318      	adds	r3, #24
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d02f      	beq.n	8008aec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	f003 020f 	and.w	r2, r3, #15
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	3318      	adds	r3, #24
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	f003 010f 	and.w	r1, r3, #15
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	440b      	add	r3, r1
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4403      	add	r3, r0
 8008ab4:	331c      	adds	r3, #28
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d112      	bne.n	8008aec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	f003 020f 	and.w	r2, r3, #15
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3318      	adds	r3, #24
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ade:	78f9      	ldrb	r1, [r7, #3]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f002 f9ca 	bl	800ae7e <USBD_LL_Transmit>
 8008aea:	e01f      	b.n	8008b2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	33b0      	adds	r3, #176	@ 0xb0
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d010      	beq.n	8008b2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	33b0      	adds	r3, #176	@ 0xb0
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b28:	78fa      	ldrb	r2, [r7, #3]
 8008b2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	32b0      	adds	r2, #176	@ 0xb0
 8008b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	32b0      	adds	r2, #176	@ 0xb0
 8008b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e01a      	b.n	8008b9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f002 f9c8 	bl	800af02 <USBD_LL_GetRxDataSize>
 8008b72:	4602      	mov	r2, r0
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	33b0      	adds	r3, #176	@ 0xb0
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	32b0      	adds	r2, #176	@ 0xb0
 8008bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e024      	b.n	8008c12 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	33b0      	adds	r3, #176	@ 0xb0
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d019      	beq.n	8008c10 <USBD_CDC_EP0_RxReady+0x6a>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008be2:	2bff      	cmp	r3, #255	@ 0xff
 8008be4:	d014      	beq.n	8008c10 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	33b0      	adds	r3, #176	@ 0xb0
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008bfe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	22ff      	movs	r2, #255	@ 0xff
 8008c0c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c24:	2182      	movs	r1, #130	@ 0x82
 8008c26:	4818      	ldr	r0, [pc, #96]	@ (8008c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c28:	f000 fd4f 	bl	80096ca <USBD_GetEpDesc>
 8008c2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c2e:	2101      	movs	r1, #1
 8008c30:	4815      	ldr	r0, [pc, #84]	@ (8008c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c32:	f000 fd4a 	bl	80096ca <USBD_GetEpDesc>
 8008c36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c38:	2181      	movs	r1, #129	@ 0x81
 8008c3a:	4813      	ldr	r0, [pc, #76]	@ (8008c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c3c:	f000 fd45 	bl	80096ca <USBD_GetEpDesc>
 8008c40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2210      	movs	r2, #16
 8008c4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d006      	beq.n	8008c62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c5c:	711a      	strb	r2, [r3, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c70:	711a      	strb	r2, [r3, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2243      	movs	r2, #67	@ 0x43
 8008c7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c7c:	4b02      	ldr	r3, [pc, #8]	@ (8008c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000060 	.word	0x20000060

08008c8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c94:	2182      	movs	r1, #130	@ 0x82
 8008c96:	4818      	ldr	r0, [pc, #96]	@ (8008cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c98:	f000 fd17 	bl	80096ca <USBD_GetEpDesc>
 8008c9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	4815      	ldr	r0, [pc, #84]	@ (8008cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ca2:	f000 fd12 	bl	80096ca <USBD_GetEpDesc>
 8008ca6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ca8:	2181      	movs	r1, #129	@ 0x81
 8008caa:	4813      	ldr	r0, [pc, #76]	@ (8008cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008cac:	f000 fd0d 	bl	80096ca <USBD_GetEpDesc>
 8008cb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2210      	movs	r2, #16
 8008cbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d006      	beq.n	8008cd2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	711a      	strb	r2, [r3, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f042 0202 	orr.w	r2, r2, #2
 8008cd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	711a      	strb	r2, [r3, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f042 0202 	orr.w	r2, r2, #2
 8008ce4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2243      	movs	r2, #67	@ 0x43
 8008cea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cec:	4b02      	ldr	r3, [pc, #8]	@ (8008cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20000060 	.word	0x20000060

08008cfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d04:	2182      	movs	r1, #130	@ 0x82
 8008d06:	4818      	ldr	r0, [pc, #96]	@ (8008d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d08:	f000 fcdf 	bl	80096ca <USBD_GetEpDesc>
 8008d0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4815      	ldr	r0, [pc, #84]	@ (8008d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d12:	f000 fcda 	bl	80096ca <USBD_GetEpDesc>
 8008d16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d18:	2181      	movs	r1, #129	@ 0x81
 8008d1a:	4813      	ldr	r0, [pc, #76]	@ (8008d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d1c:	f000 fcd5 	bl	80096ca <USBD_GetEpDesc>
 8008d20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2210      	movs	r2, #16
 8008d2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d006      	beq.n	8008d42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d3c:	711a      	strb	r2, [r3, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d006      	beq.n	8008d56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d50:	711a      	strb	r2, [r3, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2243      	movs	r2, #67	@ 0x43
 8008d5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d5c:	4b02      	ldr	r3, [pc, #8]	@ (8008d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000060 	.word	0x20000060

08008d6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	220a      	movs	r2, #10
 8008d78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d7a:	4b03      	ldr	r3, [pc, #12]	@ (8008d88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	2000001c 	.word	0x2000001c

08008d8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e009      	b.n	8008db4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	33b0      	adds	r3, #176	@ 0xb0
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	32b0      	adds	r2, #176	@ 0xb0
 8008dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dda:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e008      	b.n	8008df8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	32b0      	adds	r2, #176	@ 0xb0
 8008e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e004      	b.n	8008e32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
	...

08008e40 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	32b0      	adds	r2, #176	@ 0xb0
 8008e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e56:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e025      	b.n	8008eb2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d11f      	bne.n	8008eb0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008e78:	4b10      	ldr	r3, [pc, #64]	@ (8008ebc <USBD_CDC_TransmitPacket+0x7c>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	f003 020f 	and.w	r2, r3, #15
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4403      	add	r3, r0
 8008e92:	3318      	adds	r3, #24
 8008e94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008e96:	4b09      	ldr	r3, [pc, #36]	@ (8008ebc <USBD_CDC_TransmitPacket+0x7c>)
 8008e98:	7819      	ldrb	r1, [r3, #0]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 ffe9 	bl	800ae7e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	200000a3 	.word	0x200000a3

08008ec0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32b0      	adds	r2, #176	@ 0xb0
 8008ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32b0      	adds	r2, #176	@ 0xb0
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e018      	b.n	8008f20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	7c1b      	ldrb	r3, [r3, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8008f28 <USBD_CDC_ReceivePacket+0x68>)
 8008ef8:	7819      	ldrb	r1, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 ffdb 	bl	800aec0 <USBD_LL_PrepareReceive>
 8008f0a:	e008      	b.n	8008f1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f0c:	4b06      	ldr	r3, [pc, #24]	@ (8008f28 <USBD_CDC_ReceivePacket+0x68>)
 8008f0e:	7819      	ldrb	r1, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f16:	2340      	movs	r3, #64	@ 0x40
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 ffd1 	bl	800aec0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	200000a4 	.word	0x200000a4

08008f2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	4613      	mov	r3, r2
 8008f38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e01f      	b.n	8008f84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	79fa      	ldrb	r2, [r7, #7]
 8008f76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f001 fe4b 	bl	800ac14 <USBD_LL_Init>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e025      	b.n	8008ff0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	32ae      	adds	r2, #174	@ 0xae
 8008fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00f      	beq.n	8008fe0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	32ae      	adds	r2, #174	@ 0xae
 8008fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd0:	f107 020e 	add.w	r2, r7, #14
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4798      	blx	r3
 8008fd8:	4602      	mov	r2, r0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f001 fe53 	bl	800acac <USBD_LL_Start>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903c:	2b00      	cmp	r3, #0
 800903e:	d009      	beq.n	8009054 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	4611      	mov	r1, r2
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009084:	2303      	movs	r3, #3
 8009086:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 f90c 	bl	800a2c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80090b8:	461a      	mov	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d01a      	beq.n	8009104 <USBD_LL_SetupStage+0x72>
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d822      	bhi.n	8009118 <USBD_LL_SetupStage+0x86>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <USBD_LL_SetupStage+0x4a>
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d00a      	beq.n	80090f0 <USBD_LL_SetupStage+0x5e>
 80090da:	e01d      	b.n	8009118 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fb63 	bl	80097b0 <USBD_StdDevReq>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
      break;
 80090ee:	e020      	b.n	8009132 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fbcb 	bl	8009894 <USBD_StdItfReq>
 80090fe:	4603      	mov	r3, r0
 8009100:	73fb      	strb	r3, [r7, #15]
      break;
 8009102:	e016      	b.n	8009132 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc2d 	bl	800996c <USBD_StdEPReq>
 8009112:	4603      	mov	r3, r0
 8009114:	73fb      	strb	r3, [r7, #15]
      break;
 8009116:	e00c      	b.n	8009132 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800911e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009122:	b2db      	uxtb	r3, r3
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fe20 	bl	800ad6c <USBD_LL_StallEP>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
      break;
 8009130:	bf00      	nop
  }

  return ret;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	460b      	mov	r3, r1
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d16e      	bne.n	8009232 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800915a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009162:	2b03      	cmp	r3, #3
 8009164:	f040 8098 	bne.w	8009298 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	429a      	cmp	r2, r3
 8009172:	d913      	bls.n	800919c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	689a      	ldr	r2, [r3, #8]
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	1ad2      	subs	r2, r2, r3
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	4293      	cmp	r3, r2
 800918c:	bf28      	it	cs
 800918e:	4613      	movcs	r3, r2
 8009190:	461a      	mov	r2, r3
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f001 f994 	bl	800a4c2 <USBD_CtlContinueRx>
 800919a:	e07d      	b.n	8009298 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80091a2:	f003 031f 	and.w	r3, r3, #31
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d014      	beq.n	80091d4 <USBD_LL_DataOutStage+0x98>
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d81d      	bhi.n	80091ea <USBD_LL_DataOutStage+0xae>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <USBD_LL_DataOutStage+0x7c>
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d003      	beq.n	80091be <USBD_LL_DataOutStage+0x82>
 80091b6:	e018      	b.n	80091ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	75bb      	strb	r3, [r7, #22]
            break;
 80091bc:	e018      	b.n	80091f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	4619      	mov	r1, r3
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fa64 	bl	8009696 <USBD_CoreFindIF>
 80091ce:	4603      	mov	r3, r0
 80091d0:	75bb      	strb	r3, [r7, #22]
            break;
 80091d2:	e00d      	b.n	80091f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	4619      	mov	r1, r3
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 fa66 	bl	80096b0 <USBD_CoreFindEP>
 80091e4:	4603      	mov	r3, r0
 80091e6:	75bb      	strb	r3, [r7, #22]
            break;
 80091e8:	e002      	b.n	80091f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75bb      	strb	r3, [r7, #22]
            break;
 80091ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80091f0:	7dbb      	ldrb	r3, [r7, #22]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d119      	bne.n	800922a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d113      	bne.n	800922a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009202:	7dba      	ldrb	r2, [r7, #22]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	32ae      	adds	r2, #174	@ 0xae
 8009208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00b      	beq.n	800922a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009212:	7dba      	ldrb	r2, [r7, #22]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800921a:	7dba      	ldrb	r2, [r7, #22]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	32ae      	adds	r2, #174	@ 0xae
 8009220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f001 f95a 	bl	800a4e4 <USBD_CtlSendStatus>
 8009230:	e032      	b.n	8009298 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009232:	7afb      	ldrb	r3, [r7, #11]
 8009234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009238:	b2db      	uxtb	r3, r3
 800923a:	4619      	mov	r1, r3
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 fa37 	bl	80096b0 <USBD_CoreFindEP>
 8009242:	4603      	mov	r3, r0
 8009244:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009246:	7dbb      	ldrb	r3, [r7, #22]
 8009248:	2bff      	cmp	r3, #255	@ 0xff
 800924a:	d025      	beq.n	8009298 <USBD_LL_DataOutStage+0x15c>
 800924c:	7dbb      	ldrb	r3, [r7, #22]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d122      	bne.n	8009298 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b03      	cmp	r3, #3
 800925c:	d117      	bne.n	800928e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800925e:	7dba      	ldrb	r2, [r7, #22]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	32ae      	adds	r2, #174	@ 0xae
 8009264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00f      	beq.n	800928e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800926e:	7dba      	ldrb	r2, [r7, #22]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009276:	7dba      	ldrb	r2, [r7, #22]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	32ae      	adds	r2, #174	@ 0xae
 800927c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	7afa      	ldrb	r2, [r7, #11]
 8009284:	4611      	mov	r1, r2
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	4798      	blx	r3
 800928a:	4603      	mov	r3, r0
 800928c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	e000      	b.n	800929a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	460b      	mov	r3, r1
 80092ac:	607a      	str	r2, [r7, #4]
 80092ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d16f      	bne.n	8009396 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3314      	adds	r3, #20
 80092ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d15a      	bne.n	800937c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d914      	bls.n	80092fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	1ad2      	subs	r2, r2, r3
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f001 f8bc 	bl	800a466 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092ee:	2300      	movs	r3, #0
 80092f0:	2200      	movs	r2, #0
 80092f2:	2100      	movs	r1, #0
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f001 fde3 	bl	800aec0 <USBD_LL_PrepareReceive>
 80092fa:	e03f      	b.n	800937c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	68da      	ldr	r2, [r3, #12]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	429a      	cmp	r2, r3
 8009306:	d11c      	bne.n	8009342 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009310:	429a      	cmp	r2, r3
 8009312:	d316      	bcc.n	8009342 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800931e:	429a      	cmp	r2, r3
 8009320:	d20f      	bcs.n	8009342 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009322:	2200      	movs	r2, #0
 8009324:	2100      	movs	r1, #0
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f001 f89d 	bl	800a466 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009334:	2300      	movs	r3, #0
 8009336:	2200      	movs	r2, #0
 8009338:	2100      	movs	r1, #0
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f001 fdc0 	bl	800aec0 <USBD_LL_PrepareReceive>
 8009340:	e01c      	b.n	800937c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b03      	cmp	r3, #3
 800934c:	d10f      	bne.n	800936e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800936e:	2180      	movs	r1, #128	@ 0x80
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f001 fcfb 	bl	800ad6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f001 f8c7 	bl	800a50a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d03a      	beq.n	80093fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff fe42 	bl	8009010 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009394:	e032      	b.n	80093fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800939c:	b2db      	uxtb	r3, r3
 800939e:	4619      	mov	r1, r3
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f985 	bl	80096b0 <USBD_CoreFindEP>
 80093a6:	4603      	mov	r3, r0
 80093a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
 80093ac:	2bff      	cmp	r3, #255	@ 0xff
 80093ae:	d025      	beq.n	80093fc <USBD_LL_DataInStage+0x15a>
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d122      	bne.n	80093fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d11c      	bne.n	80093fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80093c2:	7dfa      	ldrb	r2, [r7, #23]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	32ae      	adds	r2, #174	@ 0xae
 80093c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d014      	beq.n	80093fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80093d2:	7dfa      	ldrb	r2, [r7, #23]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80093da:	7dfa      	ldrb	r2, [r7, #23]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	32ae      	adds	r2, #174	@ 0xae
 80093e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	7afa      	ldrb	r2, [r7, #11]
 80093e8:	4611      	mov	r1, r2
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	4798      	blx	r3
 80093ee:	4603      	mov	r3, r0
 80093f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80093f2:	7dbb      	ldrb	r3, [r7, #22]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80093f8:	7dbb      	ldrb	r3, [r7, #22]
 80093fa:	e000      	b.n	80093fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d014      	beq.n	800946c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6852      	ldr	r2, [r2, #4]
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	4611      	mov	r1, r2
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4798      	blx	r3
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009468:	2303      	movs	r3, #3
 800946a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800946c:	2340      	movs	r3, #64	@ 0x40
 800946e:	2200      	movs	r2, #0
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 fc35 	bl	800ace2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2240      	movs	r2, #64	@ 0x40
 8009484:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009488:	2340      	movs	r3, #64	@ 0x40
 800948a:	2200      	movs	r2, #0
 800948c:	2180      	movs	r1, #128	@ 0x80
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fc27 	bl	800ace2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2240      	movs	r2, #64	@ 0x40
 800949e:	621a      	str	r2, [r3, #32]

  return ret;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d006      	beq.n	80094ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2204      	movs	r2, #4
 80094f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b04      	cmp	r3, #4
 8009514:	d106      	bne.n	8009524 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800951c:	b2da      	uxtb	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b03      	cmp	r3, #3
 8009544:	d110      	bne.n	8009568 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d005      	beq.n	8009568 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	32ae      	adds	r2, #174	@ 0xae
 8009588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009590:	2303      	movs	r3, #3
 8009592:	e01c      	b.n	80095ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b03      	cmp	r3, #3
 800959e:	d115      	bne.n	80095cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	32ae      	adds	r2, #174	@ 0xae
 80095aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00b      	beq.n	80095cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	32ae      	adds	r2, #174	@ 0xae
 80095be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	78fa      	ldrb	r2, [r7, #3]
 80095c6:	4611      	mov	r1, r2
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	32ae      	adds	r2, #174	@ 0xae
 80095ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e01c      	b.n	8009632 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b03      	cmp	r3, #3
 8009602:	d115      	bne.n	8009630 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	32ae      	adds	r2, #174	@ 0xae
 800960e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00b      	beq.n	8009630 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	32ae      	adds	r2, #174	@ 0xae
 8009622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009628:	78fa      	ldrb	r2, [r7, #3]
 800962a:	4611      	mov	r1, r2
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00e      	beq.n	800968c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	6852      	ldr	r2, [r2, #4]
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	4611      	mov	r1, r2
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	4798      	blx	r3
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009688:	2303      	movs	r3, #3
 800968a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b086      	sub	sp, #24
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	885b      	ldrh	r3, [r3, #2]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	7812      	ldrb	r2, [r2, #0]
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d91f      	bls.n	8009730 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80096f6:	e013      	b.n	8009720 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80096f8:	f107 030a 	add.w	r3, r7, #10
 80096fc:	4619      	mov	r1, r3
 80096fe:	6978      	ldr	r0, [r7, #20]
 8009700:	f000 f81b 	bl	800973a <USBD_GetNextDesc>
 8009704:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b05      	cmp	r3, #5
 800970c:	d108      	bne.n	8009720 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	789b      	ldrb	r3, [r3, #2]
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	429a      	cmp	r2, r3
 800971a:	d008      	beq.n	800972e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	885b      	ldrh	r3, [r3, #2]
 8009724:	b29a      	uxth	r2, r3
 8009726:	897b      	ldrh	r3, [r7, #10]
 8009728:	429a      	cmp	r2, r3
 800972a:	d8e5      	bhi.n	80096f8 <USBD_GetEpDesc+0x2e>
 800972c:	e000      	b.n	8009730 <USBD_GetEpDesc+0x66>
          break;
 800972e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009730:	693b      	ldr	r3, [r7, #16]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800973a:	b480      	push	{r7}
 800973c:	b085      	sub	sp, #20
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	7812      	ldrb	r2, [r2, #0]
 8009750:	4413      	add	r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4413      	add	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009764:	68fb      	ldr	r3, [r7, #12]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009772:	b480      	push	{r7}
 8009774:	b087      	sub	sp, #28
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	3301      	adds	r3, #1
 8009788:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009790:	8a3b      	ldrh	r3, [r7, #16]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	b21a      	sxth	r2, r3
 8009796:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800979a:	4313      	orrs	r3, r2
 800979c:	b21b      	sxth	r3, r3
 800979e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80097a0:	89fb      	ldrh	r3, [r7, #14]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
	...

080097b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097c6:	2b40      	cmp	r3, #64	@ 0x40
 80097c8:	d005      	beq.n	80097d6 <USBD_StdDevReq+0x26>
 80097ca:	2b40      	cmp	r3, #64	@ 0x40
 80097cc:	d857      	bhi.n	800987e <USBD_StdDevReq+0xce>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00f      	beq.n	80097f2 <USBD_StdDevReq+0x42>
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d153      	bne.n	800987e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	32ae      	adds	r2, #174	@ 0xae
 80097e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
      break;
 80097f0:	e04a      	b.n	8009888 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2b09      	cmp	r3, #9
 80097f8:	d83b      	bhi.n	8009872 <USBD_StdDevReq+0xc2>
 80097fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <USBD_StdDevReq+0x50>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	08009855 	.word	0x08009855
 8009804:	08009869 	.word	0x08009869
 8009808:	08009873 	.word	0x08009873
 800980c:	0800985f 	.word	0x0800985f
 8009810:	08009873 	.word	0x08009873
 8009814:	08009833 	.word	0x08009833
 8009818:	08009829 	.word	0x08009829
 800981c:	08009873 	.word	0x08009873
 8009820:	0800984b 	.word	0x0800984b
 8009824:	0800983d 	.word	0x0800983d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa3c 	bl	8009ca8 <USBD_GetDescriptor>
          break;
 8009830:	e024      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fba1 	bl	8009f7c <USBD_SetAddress>
          break;
 800983a:	e01f      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fbe0 	bl	800a004 <USBD_SetConfig>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]
          break;
 8009848:	e018      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fc83 	bl	800a158 <USBD_GetConfig>
          break;
 8009852:	e013      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fcb4 	bl	800a1c4 <USBD_GetStatus>
          break;
 800985c:	e00e      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fce3 	bl	800a22c <USBD_SetFeature>
          break;
 8009866:	e009      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fd07 	bl	800a27e <USBD_ClrFeature>
          break;
 8009870:	e004      	b.n	800987c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fd5e 	bl	800a336 <USBD_CtlError>
          break;
 800987a:	bf00      	nop
      }
      break;
 800987c:	e004      	b.n	8009888 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fd58 	bl	800a336 <USBD_CtlError>
      break;
 8009886:	bf00      	nop
  }

  return ret;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop

08009894 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098aa:	2b40      	cmp	r3, #64	@ 0x40
 80098ac:	d005      	beq.n	80098ba <USBD_StdItfReq+0x26>
 80098ae:	2b40      	cmp	r3, #64	@ 0x40
 80098b0:	d852      	bhi.n	8009958 <USBD_StdItfReq+0xc4>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <USBD_StdItfReq+0x26>
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	d14e      	bne.n	8009958 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d840      	bhi.n	800994a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	889b      	ldrh	r3, [r3, #4]
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d836      	bhi.n	8009940 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	889b      	ldrh	r3, [r3, #4]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff fedb 	bl	8009696 <USBD_CoreFindIF>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	2bff      	cmp	r3, #255	@ 0xff
 80098e8:	d01d      	beq.n	8009926 <USBD_StdItfReq+0x92>
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11a      	bne.n	8009926 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80098f0:	7bba      	ldrb	r2, [r7, #14]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	@ 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00f      	beq.n	8009920 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009900:	7bba      	ldrb	r2, [r7, #14]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009908:	7bba      	ldrb	r2, [r7, #14]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	32ae      	adds	r2, #174	@ 0xae
 800990e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800991e:	e004      	b.n	800992a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009920:	2303      	movs	r3, #3
 8009922:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009924:	e001      	b.n	800992a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009926:	2303      	movs	r3, #3
 8009928:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	88db      	ldrh	r3, [r3, #6]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d110      	bne.n	8009954 <USBD_StdItfReq+0xc0>
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10d      	bne.n	8009954 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fdd3 	bl	800a4e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800993e:	e009      	b.n	8009954 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fcf7 	bl	800a336 <USBD_CtlError>
          break;
 8009948:	e004      	b.n	8009954 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fcf2 	bl	800a336 <USBD_CtlError>
          break;
 8009952:	e000      	b.n	8009956 <USBD_StdItfReq+0xc2>
          break;
 8009954:	bf00      	nop
      }
      break;
 8009956:	e004      	b.n	8009962 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fceb 	bl	800a336 <USBD_CtlError>
      break;
 8009960:	bf00      	nop
  }

  return ret;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	889b      	ldrh	r3, [r3, #4]
 800997e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009988:	2b40      	cmp	r3, #64	@ 0x40
 800998a:	d007      	beq.n	800999c <USBD_StdEPReq+0x30>
 800998c:	2b40      	cmp	r3, #64	@ 0x40
 800998e:	f200 817f 	bhi.w	8009c90 <USBD_StdEPReq+0x324>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d02a      	beq.n	80099ec <USBD_StdEPReq+0x80>
 8009996:	2b20      	cmp	r3, #32
 8009998:	f040 817a 	bne.w	8009c90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff fe85 	bl	80096b0 <USBD_CoreFindEP>
 80099a6:	4603      	mov	r3, r0
 80099a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099aa:	7b7b      	ldrb	r3, [r7, #13]
 80099ac:	2bff      	cmp	r3, #255	@ 0xff
 80099ae:	f000 8174 	beq.w	8009c9a <USBD_StdEPReq+0x32e>
 80099b2:	7b7b      	ldrb	r3, [r7, #13]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f040 8170 	bne.w	8009c9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099ba:	7b7a      	ldrb	r2, [r7, #13]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099c2:	7b7a      	ldrb	r2, [r7, #13]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	32ae      	adds	r2, #174	@ 0xae
 80099c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 8163 	beq.w	8009c9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80099d4:	7b7a      	ldrb	r2, [r7, #13]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	32ae      	adds	r2, #174	@ 0xae
 80099da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	4798      	blx	r3
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099ea:	e156      	b.n	8009c9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	785b      	ldrb	r3, [r3, #1]
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d008      	beq.n	8009a06 <USBD_StdEPReq+0x9a>
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	f300 8145 	bgt.w	8009c84 <USBD_StdEPReq+0x318>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 809b 	beq.w	8009b36 <USBD_StdEPReq+0x1ca>
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d03c      	beq.n	8009a7e <USBD_StdEPReq+0x112>
 8009a04:	e13e      	b.n	8009c84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d002      	beq.n	8009a18 <USBD_StdEPReq+0xac>
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d016      	beq.n	8009a44 <USBD_StdEPReq+0xd8>
 8009a16:	e02c      	b.n	8009a72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00d      	beq.n	8009a3a <USBD_StdEPReq+0xce>
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b80      	cmp	r3, #128	@ 0x80
 8009a22:	d00a      	beq.n	8009a3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 f99f 	bl	800ad6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a2e:	2180      	movs	r1, #128	@ 0x80
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f001 f99b 	bl	800ad6c <USBD_LL_StallEP>
 8009a36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a38:	e020      	b.n	8009a7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fc7a 	bl	800a336 <USBD_CtlError>
              break;
 8009a42:	e01b      	b.n	8009a7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	885b      	ldrh	r3, [r3, #2]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10e      	bne.n	8009a6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00b      	beq.n	8009a6a <USBD_StdEPReq+0xfe>
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b80      	cmp	r3, #128	@ 0x80
 8009a56:	d008      	beq.n	8009a6a <USBD_StdEPReq+0xfe>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	88db      	ldrh	r3, [r3, #6]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 f981 	bl	800ad6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fd3a 	bl	800a4e4 <USBD_CtlSendStatus>

              break;
 8009a70:	e004      	b.n	8009a7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fc5e 	bl	800a336 <USBD_CtlError>
              break;
 8009a7a:	bf00      	nop
          }
          break;
 8009a7c:	e107      	b.n	8009c8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d002      	beq.n	8009a90 <USBD_StdEPReq+0x124>
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d016      	beq.n	8009abc <USBD_StdEPReq+0x150>
 8009a8e:	e04b      	b.n	8009b28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00d      	beq.n	8009ab2 <USBD_StdEPReq+0x146>
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	2b80      	cmp	r3, #128	@ 0x80
 8009a9a:	d00a      	beq.n	8009ab2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 f963 	bl	800ad6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aa6:	2180      	movs	r1, #128	@ 0x80
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 f95f 	bl	800ad6c <USBD_LL_StallEP>
 8009aae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ab0:	e040      	b.n	8009b34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fc3e 	bl	800a336 <USBD_CtlError>
              break;
 8009aba:	e03b      	b.n	8009b34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	885b      	ldrh	r3, [r3, #2]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d136      	bne.n	8009b32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f001 f969 	bl	800adaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fd03 	bl	800a4e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff fde4 	bl	80096b0 <USBD_CoreFindEP>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aec:	7b7b      	ldrb	r3, [r7, #13]
 8009aee:	2bff      	cmp	r3, #255	@ 0xff
 8009af0:	d01f      	beq.n	8009b32 <USBD_StdEPReq+0x1c6>
 8009af2:	7b7b      	ldrb	r3, [r7, #13]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d11c      	bne.n	8009b32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009af8:	7b7a      	ldrb	r2, [r7, #13]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b00:	7b7a      	ldrb	r2, [r7, #13]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	32ae      	adds	r2, #174	@ 0xae
 8009b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d010      	beq.n	8009b32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b10:	7b7a      	ldrb	r2, [r7, #13]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	32ae      	adds	r2, #174	@ 0xae
 8009b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b26:	e004      	b.n	8009b32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fc03 	bl	800a336 <USBD_CtlError>
              break;
 8009b30:	e000      	b.n	8009b34 <USBD_StdEPReq+0x1c8>
              break;
 8009b32:	bf00      	nop
          }
          break;
 8009b34:	e0ab      	b.n	8009c8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d002      	beq.n	8009b48 <USBD_StdEPReq+0x1dc>
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d032      	beq.n	8009bac <USBD_StdEPReq+0x240>
 8009b46:	e097      	b.n	8009c78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d007      	beq.n	8009b5e <USBD_StdEPReq+0x1f2>
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b80      	cmp	r3, #128	@ 0x80
 8009b52:	d004      	beq.n	8009b5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fbed 	bl	800a336 <USBD_CtlError>
                break;
 8009b5c:	e091      	b.n	8009c82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da0b      	bge.n	8009b7e <USBD_StdEPReq+0x212>
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	3310      	adds	r3, #16
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	4413      	add	r3, r2
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	e00b      	b.n	8009b96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	3304      	adds	r3, #4
 8009b96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fc43 	bl	800a430 <USBD_CtlSendData>
              break;
 8009baa:	e06a      	b.n	8009c82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	da11      	bge.n	8009bd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	f003 020f 	and.w	r2, r3, #15
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	3324      	adds	r3, #36	@ 0x24
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d117      	bne.n	8009bfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fbb0 	bl	800a336 <USBD_CtlError>
                  break;
 8009bd6:	e054      	b.n	8009c82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	f003 020f 	and.w	r2, r3, #15
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	4613      	mov	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	440b      	add	r3, r1
 8009bea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d104      	bne.n	8009bfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fb9d 	bl	800a336 <USBD_CtlError>
                  break;
 8009bfc:	e041      	b.n	8009c82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	da0b      	bge.n	8009c1e <USBD_StdEPReq+0x2b2>
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	3310      	adds	r3, #16
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	4413      	add	r3, r2
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	e00b      	b.n	8009c36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	4413      	add	r3, r2
 8009c34:	3304      	adds	r3, #4
 8009c36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <USBD_StdEPReq+0x2d8>
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	2b80      	cmp	r3, #128	@ 0x80
 8009c42:	d103      	bne.n	8009c4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e00e      	b.n	8009c6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 f8c9 	bl	800ade8 <USBD_LL_IsStallEP>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	e002      	b.n	8009c6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fbdd 	bl	800a430 <USBD_CtlSendData>
              break;
 8009c76:	e004      	b.n	8009c82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fb5b 	bl	800a336 <USBD_CtlError>
              break;
 8009c80:	bf00      	nop
          }
          break;
 8009c82:	e004      	b.n	8009c8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fb55 	bl	800a336 <USBD_CtlError>
          break;
 8009c8c:	bf00      	nop
      }
      break;
 8009c8e:	e005      	b.n	8009c9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb4f 	bl	800a336 <USBD_CtlError>
      break;
 8009c98:	e000      	b.n	8009c9c <USBD_StdEPReq+0x330>
      break;
 8009c9a:	bf00      	nop
  }

  return ret;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	2b06      	cmp	r3, #6
 8009cca:	f200 8128 	bhi.w	8009f1e <USBD_GetDescriptor+0x276>
 8009cce:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <USBD_GetDescriptor+0x2c>)
 8009cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd4:	08009cf1 	.word	0x08009cf1
 8009cd8:	08009d09 	.word	0x08009d09
 8009cdc:	08009d49 	.word	0x08009d49
 8009ce0:	08009f1f 	.word	0x08009f1f
 8009ce4:	08009f1f 	.word	0x08009f1f
 8009ce8:	08009ebf 	.word	0x08009ebf
 8009cec:	08009eeb 	.word	0x08009eeb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	7c12      	ldrb	r2, [r2, #16]
 8009cfc:	f107 0108 	add.w	r1, r7, #8
 8009d00:	4610      	mov	r0, r2
 8009d02:	4798      	blx	r3
 8009d04:	60f8      	str	r0, [r7, #12]
      break;
 8009d06:	e112      	b.n	8009f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7c1b      	ldrb	r3, [r3, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10d      	bne.n	8009d2c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d18:	f107 0208 	add.w	r2, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3301      	adds	r3, #1
 8009d26:	2202      	movs	r2, #2
 8009d28:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d2a:	e100      	b.n	8009f2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d34:	f107 0208 	add.w	r2, r7, #8
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4798      	blx	r3
 8009d3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	3301      	adds	r3, #1
 8009d42:	2202      	movs	r2, #2
 8009d44:	701a      	strb	r2, [r3, #0]
      break;
 8009d46:	e0f2      	b.n	8009f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	885b      	ldrh	r3, [r3, #2]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b05      	cmp	r3, #5
 8009d50:	f200 80ac 	bhi.w	8009eac <USBD_GetDescriptor+0x204>
 8009d54:	a201      	add	r2, pc, #4	@ (adr r2, 8009d5c <USBD_GetDescriptor+0xb4>)
 8009d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5a:	bf00      	nop
 8009d5c:	08009d75 	.word	0x08009d75
 8009d60:	08009da9 	.word	0x08009da9
 8009d64:	08009ddd 	.word	0x08009ddd
 8009d68:	08009e11 	.word	0x08009e11
 8009d6c:	08009e45 	.word	0x08009e45
 8009d70:	08009e79 	.word	0x08009e79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00b      	beq.n	8009d98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d96:	e091      	b.n	8009ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 facb 	bl	800a336 <USBD_CtlError>
            err++;
 8009da0:	7afb      	ldrb	r3, [r7, #11]
 8009da2:	3301      	adds	r3, #1
 8009da4:	72fb      	strb	r3, [r7, #11]
          break;
 8009da6:	e089      	b.n	8009ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00b      	beq.n	8009dcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	7c12      	ldrb	r2, [r2, #16]
 8009dc0:	f107 0108 	add.w	r1, r7, #8
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
 8009dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dca:	e077      	b.n	8009ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fab1 	bl	800a336 <USBD_CtlError>
            err++;
 8009dd4:	7afb      	ldrb	r3, [r7, #11]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dda:	e06f      	b.n	8009ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	7c12      	ldrb	r2, [r2, #16]
 8009df4:	f107 0108 	add.w	r1, r7, #8
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dfe:	e05d      	b.n	8009ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fa97 	bl	800a336 <USBD_CtlError>
            err++;
 8009e08:	7afb      	ldrb	r3, [r7, #11]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e0e:	e055      	b.n	8009ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7c12      	ldrb	r2, [r2, #16]
 8009e28:	f107 0108 	add.w	r1, r7, #8
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4798      	blx	r3
 8009e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e32:	e043      	b.n	8009ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fa7d 	bl	800a336 <USBD_CtlError>
            err++;
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	72fb      	strb	r3, [r7, #11]
          break;
 8009e42:	e03b      	b.n	8009ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	7c12      	ldrb	r2, [r2, #16]
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e66:	e029      	b.n	8009ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa63 	bl	800a336 <USBD_CtlError>
            err++;
 8009e70:	7afb      	ldrb	r3, [r7, #11]
 8009e72:	3301      	adds	r3, #1
 8009e74:	72fb      	strb	r3, [r7, #11]
          break;
 8009e76:	e021      	b.n	8009ebc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00b      	beq.n	8009e9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	7c12      	ldrb	r2, [r2, #16]
 8009e90:	f107 0108 	add.w	r1, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9a:	e00f      	b.n	8009ebc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fa49 	bl	800a336 <USBD_CtlError>
            err++;
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eaa:	e007      	b.n	8009ebc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fa41 	bl	800a336 <USBD_CtlError>
          err++;
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009eba:	bf00      	nop
      }
      break;
 8009ebc:	e037      	b.n	8009f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	7c1b      	ldrb	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d109      	bne.n	8009eda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ece:	f107 0208 	add.w	r2, r7, #8
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	4798      	blx	r3
 8009ed6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ed8:	e029      	b.n	8009f2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fa2a 	bl	800a336 <USBD_CtlError>
        err++;
 8009ee2:	7afb      	ldrb	r3, [r7, #11]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ee8:	e021      	b.n	8009f2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7c1b      	ldrb	r3, [r3, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10d      	bne.n	8009f0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009efa:	f107 0208 	add.w	r2, r7, #8
 8009efe:	4610      	mov	r0, r2
 8009f00:	4798      	blx	r3
 8009f02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3301      	adds	r3, #1
 8009f08:	2207      	movs	r2, #7
 8009f0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f0c:	e00f      	b.n	8009f2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fa10 	bl	800a336 <USBD_CtlError>
        err++;
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f1c:	e007      	b.n	8009f2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fa08 	bl	800a336 <USBD_CtlError>
      err++;
 8009f26:	7afb      	ldrb	r3, [r7, #11]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f2c:	bf00      	nop
  }

  if (err != 0U)
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d11e      	bne.n	8009f72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	88db      	ldrh	r3, [r3, #6]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d016      	beq.n	8009f6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f3c:	893b      	ldrh	r3, [r7, #8]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00e      	beq.n	8009f60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	88da      	ldrh	r2, [r3, #6]
 8009f46:	893b      	ldrh	r3, [r7, #8]
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	bf28      	it	cs
 8009f4c:	4613      	movcs	r3, r2
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f52:	893b      	ldrh	r3, [r7, #8]
 8009f54:	461a      	mov	r2, r3
 8009f56:	68f9      	ldr	r1, [r7, #12]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fa69 	bl	800a430 <USBD_CtlSendData>
 8009f5e:	e009      	b.n	8009f74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f9e7 	bl	800a336 <USBD_CtlError>
 8009f68:	e004      	b.n	8009f74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 faba 	bl	800a4e4 <USBD_CtlSendStatus>
 8009f70:	e000      	b.n	8009f74 <USBD_GetDescriptor+0x2cc>
    return;
 8009f72:	bf00      	nop
  }
}
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop

08009f7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	889b      	ldrh	r3, [r3, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d131      	bne.n	8009ff2 <USBD_SetAddress+0x76>
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	88db      	ldrh	r3, [r3, #6]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d12d      	bne.n	8009ff2 <USBD_SetAddress+0x76>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	885b      	ldrh	r3, [r3, #2]
 8009f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f9c:	d829      	bhi.n	8009ff2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	885b      	ldrh	r3, [r3, #2]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fa8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d104      	bne.n	8009fc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f9bc 	bl	800a336 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fbe:	e01d      	b.n	8009ffc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	7bfa      	ldrb	r2, [r7, #15]
 8009fc4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 ff37 	bl	800ae40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fa86 	bl	800a4e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d004      	beq.n	8009fe8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe6:	e009      	b.n	8009ffc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff0:	e004      	b.n	8009ffc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f99e 	bl	800a336 <USBD_CtlError>
  }
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	885b      	ldrh	r3, [r3, #2]
 800a016:	b2da      	uxtb	r2, r3
 800a018:	4b4e      	ldr	r3, [pc, #312]	@ (800a154 <USBD_SetConfig+0x150>)
 800a01a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a01c:	4b4d      	ldr	r3, [pc, #308]	@ (800a154 <USBD_SetConfig+0x150>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d905      	bls.n	800a030 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f985 	bl	800a336 <USBD_CtlError>
    return USBD_FAIL;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e08c      	b.n	800a14a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d002      	beq.n	800a042 <USBD_SetConfig+0x3e>
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d029      	beq.n	800a094 <USBD_SetConfig+0x90>
 800a040:	e075      	b.n	800a12e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a042:	4b44      	ldr	r3, [pc, #272]	@ (800a154 <USBD_SetConfig+0x150>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d020      	beq.n	800a08c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a04a:	4b42      	ldr	r3, [pc, #264]	@ (800a154 <USBD_SetConfig+0x150>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a054:	4b3f      	ldr	r3, [pc, #252]	@ (800a154 <USBD_SetConfig+0x150>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7fe ffe3 	bl	8009026 <USBD_SetClassConfig>
 800a060:	4603      	mov	r3, r0
 800a062:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d008      	beq.n	800a07c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f962 	bl	800a336 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2202      	movs	r2, #2
 800a076:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a07a:	e065      	b.n	800a148 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fa31 	bl	800a4e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2203      	movs	r2, #3
 800a086:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a08a:	e05d      	b.n	800a148 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fa29 	bl	800a4e4 <USBD_CtlSendStatus>
      break;
 800a092:	e059      	b.n	800a148 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a094:	4b2f      	ldr	r3, [pc, #188]	@ (800a154 <USBD_SetConfig+0x150>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d112      	bne.n	800a0c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0a4:	4b2b      	ldr	r3, [pc, #172]	@ (800a154 <USBD_SetConfig+0x150>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0ae:	4b29      	ldr	r3, [pc, #164]	@ (800a154 <USBD_SetConfig+0x150>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7fe ffd2 	bl	800905e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fa12 	bl	800a4e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0c0:	e042      	b.n	800a148 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a0c2:	4b24      	ldr	r3, [pc, #144]	@ (800a154 <USBD_SetConfig+0x150>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d02a      	beq.n	800a126 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7fe ffc0 	bl	800905e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0de:	4b1d      	ldr	r3, [pc, #116]	@ (800a154 <USBD_SetConfig+0x150>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a154 <USBD_SetConfig+0x150>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7fe ff99 	bl	8009026 <USBD_SetClassConfig>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00f      	beq.n	800a11e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f918 	bl	800a336 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7fe ffa5 	bl	800905e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a11c:	e014      	b.n	800a148 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f9e0 	bl	800a4e4 <USBD_CtlSendStatus>
      break;
 800a124:	e010      	b.n	800a148 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f9dc 	bl	800a4e4 <USBD_CtlSendStatus>
      break;
 800a12c:	e00c      	b.n	800a148 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f900 	bl	800a336 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a136:	4b07      	ldr	r3, [pc, #28]	@ (800a154 <USBD_SetConfig+0x150>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7fe ff8e 	bl	800905e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a142:	2303      	movs	r3, #3
 800a144:	73fb      	strb	r3, [r7, #15]
      break;
 800a146:	bf00      	nop
  }

  return ret;
 800a148:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	2000827c 	.word	0x2000827c

0800a158 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	88db      	ldrh	r3, [r3, #6]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d004      	beq.n	800a174 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f8e2 	bl	800a336 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a172:	e023      	b.n	800a1bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	dc02      	bgt.n	800a186 <USBD_GetConfig+0x2e>
 800a180:	2b00      	cmp	r3, #0
 800a182:	dc03      	bgt.n	800a18c <USBD_GetConfig+0x34>
 800a184:	e015      	b.n	800a1b2 <USBD_GetConfig+0x5a>
 800a186:	2b03      	cmp	r3, #3
 800a188:	d00b      	beq.n	800a1a2 <USBD_GetConfig+0x4a>
 800a18a:	e012      	b.n	800a1b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3308      	adds	r3, #8
 800a196:	2201      	movs	r2, #1
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f948 	bl	800a430 <USBD_CtlSendData>
        break;
 800a1a0:	e00c      	b.n	800a1bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f940 	bl	800a430 <USBD_CtlSendData>
        break;
 800a1b0:	e004      	b.n	800a1bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f8be 	bl	800a336 <USBD_CtlError>
        break;
 800a1ba:	bf00      	nop
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d81e      	bhi.n	800a21a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	88db      	ldrh	r3, [r3, #6]
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d004      	beq.n	800a1ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f8a5 	bl	800a336 <USBD_CtlError>
        break;
 800a1ec:	e01a      	b.n	800a224 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f043 0202 	orr.w	r2, r3, #2
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	330c      	adds	r3, #12
 800a20e:	2202      	movs	r2, #2
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f90c 	bl	800a430 <USBD_CtlSendData>
      break;
 800a218:	e004      	b.n	800a224 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f88a 	bl	800a336 <USBD_CtlError>
      break;
 800a222:	bf00      	nop
  }
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	885b      	ldrh	r3, [r3, #2]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d107      	bne.n	800a24e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f94c 	bl	800a4e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a24c:	e013      	b.n	800a276 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	885b      	ldrh	r3, [r3, #2]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d10b      	bne.n	800a26e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	889b      	ldrh	r3, [r3, #4]
 800a25a:	0a1b      	lsrs	r3, r3, #8
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f93c 	bl	800a4e4 <USBD_CtlSendStatus>
}
 800a26c:	e003      	b.n	800a276 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f860 	bl	800a336 <USBD_CtlError>
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	3b01      	subs	r3, #1
 800a292:	2b02      	cmp	r3, #2
 800a294:	d80b      	bhi.n	800a2ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	885b      	ldrh	r3, [r3, #2]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d10c      	bne.n	800a2b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f91c 	bl	800a4e4 <USBD_CtlSendStatus>
      }
      break;
 800a2ac:	e004      	b.n	800a2b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f840 	bl	800a336 <USBD_CtlError>
      break;
 800a2b6:	e000      	b.n	800a2ba <USBD_ClrFeature+0x3c>
      break;
 800a2b8:	bf00      	nop
  }
}
 800a2ba:	bf00      	nop
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	781a      	ldrb	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff fa40 	bl	8009772 <SWAPBYTE>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3301      	adds	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7ff fa33 	bl	8009772 <SWAPBYTE>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3301      	adds	r3, #1
 800a318:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3301      	adds	r3, #1
 800a31e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f7ff fa26 	bl	8009772 <SWAPBYTE>
 800a326:	4603      	mov	r3, r0
 800a328:	461a      	mov	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	80da      	strh	r2, [r3, #6]
}
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a340:	2180      	movs	r1, #128	@ 0x80
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fd12 	bl	800ad6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a348:	2100      	movs	r1, #0
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fd0e 	bl	800ad6c <USBD_LL_StallEP>
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a364:	2300      	movs	r3, #0
 800a366:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d042      	beq.n	800a3f4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a372:	6938      	ldr	r0, [r7, #16]
 800a374:	f000 f842 	bl	800a3fc <USBD_GetLen>
 800a378:	4603      	mov	r3, r0
 800a37a:	3301      	adds	r3, #1
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a382:	d808      	bhi.n	800a396 <USBD_GetString+0x3e>
 800a384:	6938      	ldr	r0, [r7, #16]
 800a386:	f000 f839 	bl	800a3fc <USBD_GetLen>
 800a38a:	4603      	mov	r3, r0
 800a38c:	3301      	adds	r3, #1
 800a38e:	b29b      	uxth	r3, r3
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	b29a      	uxth	r2, r3
 800a394:	e001      	b.n	800a39a <USBD_GetString+0x42>
 800a396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	7812      	ldrb	r2, [r2, #0]
 800a3a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	2203      	movs	r2, #3
 800a3b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3c0:	e013      	b.n	800a3ea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	7812      	ldrb	r2, [r2, #0]
 800a3cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	613b      	str	r3, [r7, #16]
    idx++;
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	4413      	add	r3, r2
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e7      	bne.n	800a3c2 <USBD_GetString+0x6a>
 800a3f2:	e000      	b.n	800a3f6 <USBD_GetString+0x9e>
    return;
 800a3f4:	bf00      	nop
  }
}
 800a3f6:	3718      	adds	r7, #24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a40c:	e005      	b.n	800a41a <USBD_GetLen+0x1e>
  {
    len++;
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
 800a410:	3301      	adds	r3, #1
 800a412:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	3301      	adds	r3, #1
 800a418:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f5      	bne.n	800a40e <USBD_GetLen+0x12>
  }

  return len;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2202      	movs	r2, #2
 800a440:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	2100      	movs	r1, #0
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 fd11 	bl	800ae7e <USBD_LL_Transmit>

  return USBD_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b084      	sub	sp, #16
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	60f8      	str	r0, [r7, #12]
 800a46e:	60b9      	str	r1, [r7, #8]
 800a470:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	2100      	movs	r1, #0
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 fd00 	bl	800ae7e <USBD_LL_Transmit>

  return USBD_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2203      	movs	r2, #3
 800a498:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 fd04 	bl	800aec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	60f8      	str	r0, [r7, #12]
 800a4ca:	60b9      	str	r1, [r7, #8]
 800a4cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 fcf3 	bl	800aec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2204      	movs	r2, #4
 800a4f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fcbf 	bl	800ae7e <USBD_LL_Transmit>

  return USBD_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b082      	sub	sp, #8
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2205      	movs	r2, #5
 800a516:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a51a:	2300      	movs	r3, #0
 800a51c:	2200      	movs	r2, #0
 800a51e:	2100      	movs	r1, #0
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fccd 	bl	800aec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a534:	2200      	movs	r2, #0
 800a536:	4912      	ldr	r1, [pc, #72]	@ (800a580 <MX_USB_DEVICE_Init+0x50>)
 800a538:	4812      	ldr	r0, [pc, #72]	@ (800a584 <MX_USB_DEVICE_Init+0x54>)
 800a53a:	f7fe fcf7 	bl	8008f2c <USBD_Init>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a544:	f7f6 fafe 	bl	8000b44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a548:	490f      	ldr	r1, [pc, #60]	@ (800a588 <MX_USB_DEVICE_Init+0x58>)
 800a54a:	480e      	ldr	r0, [pc, #56]	@ (800a584 <MX_USB_DEVICE_Init+0x54>)
 800a54c:	f7fe fd1e 	bl	8008f8c <USBD_RegisterClass>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a556:	f7f6 faf5 	bl	8000b44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a55a:	490c      	ldr	r1, [pc, #48]	@ (800a58c <MX_USB_DEVICE_Init+0x5c>)
 800a55c:	4809      	ldr	r0, [pc, #36]	@ (800a584 <MX_USB_DEVICE_Init+0x54>)
 800a55e:	f7fe fc15 	bl	8008d8c <USBD_CDC_RegisterInterface>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a568:	f7f6 faec 	bl	8000b44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a56c:	4805      	ldr	r0, [pc, #20]	@ (800a584 <MX_USB_DEVICE_Init+0x54>)
 800a56e:	f7fe fd43 	bl	8008ff8 <USBD_Start>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a578:	f7f6 fae4 	bl	8000b44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a57c:	bf00      	nop
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	200000bc 	.word	0x200000bc
 800a584:	20008280 	.word	0x20008280
 800a588:	20000028 	.word	0x20000028
 800a58c:	200000a8 	.word	0x200000a8

0800a590 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a594:	2200      	movs	r2, #0
 800a596:	4905      	ldr	r1, [pc, #20]	@ (800a5ac <CDC_Init_FS+0x1c>)
 800a598:	4805      	ldr	r0, [pc, #20]	@ (800a5b0 <CDC_Init_FS+0x20>)
 800a59a:	f7fe fc11 	bl	8008dc0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a59e:	4905      	ldr	r1, [pc, #20]	@ (800a5b4 <CDC_Init_FS+0x24>)
 800a5a0:	4803      	ldr	r0, [pc, #12]	@ (800a5b0 <CDC_Init_FS+0x20>)
 800a5a2:	f7fe fc2f 	bl	8008e04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20008d5c 	.word	0x20008d5c
 800a5b0:	20008280 	.word	0x20008280
 800a5b4:	2000855c 	.word	0x2000855c

0800a5b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	6039      	str	r1, [r7, #0]
 800a5d2:	71fb      	strb	r3, [r7, #7]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5d8:	79fb      	ldrb	r3, [r7, #7]
 800a5da:	2b23      	cmp	r3, #35	@ 0x23
 800a5dc:	d84a      	bhi.n	800a674 <CDC_Control_FS+0xac>
 800a5de:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e4 <CDC_Control_FS+0x1c>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a675 	.word	0x0800a675
 800a5e8:	0800a675 	.word	0x0800a675
 800a5ec:	0800a675 	.word	0x0800a675
 800a5f0:	0800a675 	.word	0x0800a675
 800a5f4:	0800a675 	.word	0x0800a675
 800a5f8:	0800a675 	.word	0x0800a675
 800a5fc:	0800a675 	.word	0x0800a675
 800a600:	0800a675 	.word	0x0800a675
 800a604:	0800a675 	.word	0x0800a675
 800a608:	0800a675 	.word	0x0800a675
 800a60c:	0800a675 	.word	0x0800a675
 800a610:	0800a675 	.word	0x0800a675
 800a614:	0800a675 	.word	0x0800a675
 800a618:	0800a675 	.word	0x0800a675
 800a61c:	0800a675 	.word	0x0800a675
 800a620:	0800a675 	.word	0x0800a675
 800a624:	0800a675 	.word	0x0800a675
 800a628:	0800a675 	.word	0x0800a675
 800a62c:	0800a675 	.word	0x0800a675
 800a630:	0800a675 	.word	0x0800a675
 800a634:	0800a675 	.word	0x0800a675
 800a638:	0800a675 	.word	0x0800a675
 800a63c:	0800a675 	.word	0x0800a675
 800a640:	0800a675 	.word	0x0800a675
 800a644:	0800a675 	.word	0x0800a675
 800a648:	0800a675 	.word	0x0800a675
 800a64c:	0800a675 	.word	0x0800a675
 800a650:	0800a675 	.word	0x0800a675
 800a654:	0800a675 	.word	0x0800a675
 800a658:	0800a675 	.word	0x0800a675
 800a65c:	0800a675 	.word	0x0800a675
 800a660:	0800a675 	.word	0x0800a675
 800a664:	0800a675 	.word	0x0800a675
 800a668:	0800a675 	.word	0x0800a675
 800a66c:	0800a675 	.word	0x0800a675
 800a670:	0800a675 	.word	0x0800a675
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a674:	bf00      	nop
  }

  return (USBD_OK);
 800a676:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a68e:	6879      	ldr	r1, [r7, #4]
 800a690:	4805      	ldr	r0, [pc, #20]	@ (800a6a8 <CDC_Receive_FS+0x24>)
 800a692:	f7fe fbb7 	bl	8008e04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a696:	4804      	ldr	r0, [pc, #16]	@ (800a6a8 <CDC_Receive_FS+0x24>)
 800a698:	f7fe fc12 	bl	8008ec0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a69c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20008280 	.word	0x20008280

0800a6ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f4 <CDC_Transmit_FS+0x48>)
 800a6be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e00b      	b.n	800a6ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a6d2:	887b      	ldrh	r3, [r7, #2]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	4806      	ldr	r0, [pc, #24]	@ (800a6f4 <CDC_Transmit_FS+0x48>)
 800a6da:	f7fe fb71 	bl	8008dc0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a6de:	4805      	ldr	r0, [pc, #20]	@ (800a6f4 <CDC_Transmit_FS+0x48>)
 800a6e0:	f7fe fbae 	bl	8008e40 <USBD_CDC_TransmitPacket>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20008280 	.word	0x20008280

0800a6f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	4613      	mov	r3, r2
 800a704:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a70a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	371c      	adds	r7, #28
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
	...

0800a71c <CDC_Transmit_Is_Busy>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_Transmit_Is_Busy(void){
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a722:	4b09      	ldr	r3, [pc, #36]	@ (800a748 <CDC_Transmit_Is_Busy+0x2c>)
 800a724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a728:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState != 0)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <CDC_Transmit_Is_Busy+0x1c>
    return USBD_BUSY;
 800a734:	2301      	movs	r3, #1
 800a736:	e000      	b.n	800a73a <CDC_Transmit_Is_Busy+0x1e>
  else
    return USBD_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	20008280 	.word	0x20008280

0800a74c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	2212      	movs	r2, #18
 800a75c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a75e:	4b03      	ldr	r3, [pc, #12]	@ (800a76c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	200000d8 	.word	0x200000d8

0800a770 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2204      	movs	r2, #4
 800a780:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a782:	4b03      	ldr	r3, [pc, #12]	@ (800a790 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	200000ec 	.word	0x200000ec

0800a794 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	6039      	str	r1, [r7, #0]
 800a79e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d105      	bne.n	800a7b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	4907      	ldr	r1, [pc, #28]	@ (800a7c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7aa:	4808      	ldr	r0, [pc, #32]	@ (800a7cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a7ac:	f7ff fdd4 	bl	800a358 <USBD_GetString>
 800a7b0:	e004      	b.n	800a7bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	4904      	ldr	r1, [pc, #16]	@ (800a7c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7b6:	4805      	ldr	r0, [pc, #20]	@ (800a7cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a7b8:	f7ff fdce 	bl	800a358 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7bc:	4b02      	ldr	r3, [pc, #8]	@ (800a7c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	2000955c 	.word	0x2000955c
 800a7cc:	0800bfb4 	.word	0x0800bfb4

0800a7d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	6039      	str	r1, [r7, #0]
 800a7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	4904      	ldr	r1, [pc, #16]	@ (800a7f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7e0:	4804      	ldr	r0, [pc, #16]	@ (800a7f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7e2:	f7ff fdb9 	bl	800a358 <USBD_GetString>
  return USBD_StrDesc;
 800a7e6:	4b02      	ldr	r3, [pc, #8]	@ (800a7f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	2000955c 	.word	0x2000955c
 800a7f4:	0800bfcc 	.word	0x0800bfcc

0800a7f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	221a      	movs	r2, #26
 800a808:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a80a:	f000 f843 	bl	800a894 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a80e:	4b02      	ldr	r3, [pc, #8]	@ (800a818 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a810:	4618      	mov	r0, r3
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	200000f0 	.word	0x200000f0

0800a81c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	6039      	str	r1, [r7, #0]
 800a826:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d105      	bne.n	800a83a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	4907      	ldr	r1, [pc, #28]	@ (800a850 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a832:	4808      	ldr	r0, [pc, #32]	@ (800a854 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a834:	f7ff fd90 	bl	800a358 <USBD_GetString>
 800a838:	e004      	b.n	800a844 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	4904      	ldr	r1, [pc, #16]	@ (800a850 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a83e:	4805      	ldr	r0, [pc, #20]	@ (800a854 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a840:	f7ff fd8a 	bl	800a358 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a844:	4b02      	ldr	r3, [pc, #8]	@ (800a850 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a846:	4618      	mov	r0, r3
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	2000955c 	.word	0x2000955c
 800a854:	0800bfe0 	.word	0x0800bfe0

0800a858 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a864:	79fb      	ldrb	r3, [r7, #7]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d105      	bne.n	800a876 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	4907      	ldr	r1, [pc, #28]	@ (800a88c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a86e:	4808      	ldr	r0, [pc, #32]	@ (800a890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a870:	f7ff fd72 	bl	800a358 <USBD_GetString>
 800a874:	e004      	b.n	800a880 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	4904      	ldr	r1, [pc, #16]	@ (800a88c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a87a:	4805      	ldr	r0, [pc, #20]	@ (800a890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a87c:	f7ff fd6c 	bl	800a358 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a880:	4b02      	ldr	r3, [pc, #8]	@ (800a88c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	2000955c 	.word	0x2000955c
 800a890:	0800bfec 	.word	0x0800bfec

0800a894 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a89a:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d8 <Get_SerialNum+0x44>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8dc <Get_SerialNum+0x48>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e0 <Get_SerialNum+0x4c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d009      	beq.n	800a8ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	4909      	ldr	r1, [pc, #36]	@ (800a8e4 <Get_SerialNum+0x50>)
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 f814 	bl	800a8ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8c4:	2204      	movs	r2, #4
 800a8c6:	4908      	ldr	r1, [pc, #32]	@ (800a8e8 <Get_SerialNum+0x54>)
 800a8c8:	68b8      	ldr	r0, [r7, #8]
 800a8ca:	f000 f80f 	bl	800a8ec <IntToUnicode>
  }
}
 800a8ce:	bf00      	nop
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	1fff7a10 	.word	0x1fff7a10
 800a8dc:	1fff7a14 	.word	0x1fff7a14
 800a8e0:	1fff7a18 	.word	0x1fff7a18
 800a8e4:	200000f2 	.word	0x200000f2
 800a8e8:	20000102 	.word	0x20000102

0800a8ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]
 800a902:	e027      	b.n	800a954 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	0f1b      	lsrs	r3, r3, #28
 800a908:	2b09      	cmp	r3, #9
 800a90a:	d80b      	bhi.n	800a924 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	0f1b      	lsrs	r3, r3, #28
 800a910:	b2da      	uxtb	r2, r3
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	4619      	mov	r1, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	440b      	add	r3, r1
 800a91c:	3230      	adds	r2, #48	@ 0x30
 800a91e:	b2d2      	uxtb	r2, r2
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	e00a      	b.n	800a93a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	0f1b      	lsrs	r3, r3, #28
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	4619      	mov	r1, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	440b      	add	r3, r1
 800a934:	3237      	adds	r2, #55	@ 0x37
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	011b      	lsls	r3, r3, #4
 800a93e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a940:	7dfb      	ldrb	r3, [r7, #23]
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	3301      	adds	r3, #1
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	4413      	add	r3, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	3301      	adds	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]
 800a954:	7dfa      	ldrb	r2, [r7, #23]
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d3d3      	bcc.n	800a904 <IntToUnicode+0x18>
  }
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
	...

0800a96c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	@ 0x28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a974:	f107 0314 	add.w	r3, r7, #20
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	605a      	str	r2, [r3, #4]
 800a97e:	609a      	str	r2, [r3, #8]
 800a980:	60da      	str	r2, [r3, #12]
 800a982:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a98c:	d147      	bne.n	800aa1e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]
 800a992:	4b25      	ldr	r3, [pc, #148]	@ (800aa28 <HAL_PCD_MspInit+0xbc>)
 800a994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a996:	4a24      	ldr	r2, [pc, #144]	@ (800aa28 <HAL_PCD_MspInit+0xbc>)
 800a998:	f043 0301 	orr.w	r3, r3, #1
 800a99c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a99e:	4b22      	ldr	r3, [pc, #136]	@ (800aa28 <HAL_PCD_MspInit+0xbc>)
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	613b      	str	r3, [r7, #16]
 800a9a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a9aa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800a9ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9bc:	230a      	movs	r3, #10
 800a9be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9c0:	f107 0314 	add.w	r3, r7, #20
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4819      	ldr	r0, [pc, #100]	@ (800aa2c <HAL_PCD_MspInit+0xc0>)
 800a9c8:	f7f8 fbac 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a9cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a9da:	f107 0314 	add.w	r3, r7, #20
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4812      	ldr	r0, [pc, #72]	@ (800aa2c <HAL_PCD_MspInit+0xc0>)
 800a9e2:	f7f8 fb9f 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9e6:	4b10      	ldr	r3, [pc, #64]	@ (800aa28 <HAL_PCD_MspInit+0xbc>)
 800a9e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ea:	4a0f      	ldr	r2, [pc, #60]	@ (800aa28 <HAL_PCD_MspInit+0xbc>)
 800a9ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9f0:	6353      	str	r3, [r2, #52]	@ 0x34
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	@ (800aa28 <HAL_PCD_MspInit+0xbc>)
 800a9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9fa:	4a0b      	ldr	r2, [pc, #44]	@ (800aa28 <HAL_PCD_MspInit+0xbc>)
 800a9fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa00:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa02:	4b09      	ldr	r3, [pc, #36]	@ (800aa28 <HAL_PCD_MspInit+0xbc>)
 800aa04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2100      	movs	r1, #0
 800aa12:	2043      	movs	r0, #67	@ 0x43
 800aa14:	f7f7 fbfd 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa18:	2043      	movs	r0, #67	@ 0x43
 800aa1a:	f7f7 fc16 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa1e:	bf00      	nop
 800aa20:	3728      	adds	r7, #40	@ 0x28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	40023800 	.word	0x40023800
 800aa2c:	40020000 	.word	0x40020000

0800aa30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7fe fb23 	bl	8009092 <USBD_LL_SetupStage>
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa66:	78fa      	ldrb	r2, [r7, #3]
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	4413      	add	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	440b      	add	r3, r1
 800aa74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	78fb      	ldrb	r3, [r7, #3]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f7fe fb5d 	bl	800913c <USBD_LL_DataOutStage>
}
 800aa82:	bf00      	nop
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa9c:	78fa      	ldrb	r2, [r7, #3]
 800aa9e:	6879      	ldr	r1, [r7, #4]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	4413      	add	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	440b      	add	r3, r1
 800aaaa:	3320      	adds	r3, #32
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	78fb      	ldrb	r3, [r7, #3]
 800aab0:	4619      	mov	r1, r3
 800aab2:	f7fe fbf6 	bl	80092a2 <USBD_LL_DataInStage>
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fd30 	bl	8009532 <USBD_LL_SOF>
}
 800aad2:	bf00      	nop
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aae2:	2301      	movs	r3, #1
 800aae4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	79db      	ldrb	r3, [r3, #7]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d102      	bne.n	800aaf4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
 800aaf2:	e008      	b.n	800ab06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	79db      	ldrb	r3, [r3, #7]
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d102      	bne.n	800ab02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aafc:	2301      	movs	r3, #1
 800aafe:	73fb      	strb	r3, [r7, #15]
 800ab00:	e001      	b.n	800ab06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ab02:	f7f6 f81f 	bl	8000b44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab0c:	7bfa      	ldrb	r2, [r7, #15]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe fcca 	bl	80094aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fe fc72 	bl	8009406 <USBD_LL_Reset>
}
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe fcc5 	bl	80094ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	6812      	ldr	r2, [r2, #0]
 800ab4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab52:	f043 0301 	orr.w	r3, r3, #1
 800ab56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	7adb      	ldrb	r3, [r3, #11]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d005      	beq.n	800ab6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab60:	4b04      	ldr	r3, [pc, #16]	@ (800ab74 <HAL_PCD_SuspendCallback+0x48>)
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	4a03      	ldr	r2, [pc, #12]	@ (800ab74 <HAL_PCD_SuspendCallback+0x48>)
 800ab66:	f043 0306 	orr.w	r3, r3, #6
 800ab6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	e000ed00 	.word	0xe000ed00

0800ab78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fcbb 	bl	8009502 <USBD_LL_Resume>
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aba6:	78fa      	ldrb	r2, [r7, #3]
 800aba8:	4611      	mov	r1, r2
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe fd13 	bl	80095d6 <USBD_LL_IsoOUTIncomplete>
}
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abca:	78fa      	ldrb	r2, [r7, #3]
 800abcc:	4611      	mov	r1, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fccf 	bl	8009572 <USBD_LL_IsoINIncomplete>
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fd25 	bl	800963a <USBD_LL_DevConnected>
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fd22 	bl	8009650 <USBD_LL_DevDisconnected>
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d13c      	bne.n	800ac9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac24:	4a20      	ldr	r2, [pc, #128]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a1e      	ldr	r2, [pc, #120]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac30:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac34:	4b1c      	ldr	r3, [pc, #112]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac3c:	4b1a      	ldr	r3, [pc, #104]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac3e:	2204      	movs	r2, #4
 800ac40:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac42:	4b19      	ldr	r3, [pc, #100]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac44:	2202      	movs	r2, #2
 800ac46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac48:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac4e:	4b16      	ldr	r3, [pc, #88]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac50:	2202      	movs	r2, #2
 800ac52:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ac54:	4b14      	ldr	r3, [pc, #80]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac56:	2201      	movs	r2, #1
 800ac58:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac5a:	4b13      	ldr	r3, [pc, #76]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac60:	4b11      	ldr	r3, [pc, #68]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ac66:	4b10      	ldr	r3, [pc, #64]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac68:	2201      	movs	r2, #1
 800ac6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac6c:	4b0e      	ldr	r3, [pc, #56]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac72:	480d      	ldr	r0, [pc, #52]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac74:	f7f8 fc34 	bl	80034e0 <HAL_PCD_Init>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac7e:	f7f5 ff61 	bl	8000b44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac82:	2180      	movs	r1, #128	@ 0x80
 800ac84:	4808      	ldr	r0, [pc, #32]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac86:	f7f9 fe60 	bl	800494a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac8a:	2240      	movs	r2, #64	@ 0x40
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4806      	ldr	r0, [pc, #24]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac90:	f7f9 fe14 	bl	80048bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac94:	2280      	movs	r2, #128	@ 0x80
 800ac96:	2101      	movs	r1, #1
 800ac98:	4803      	ldr	r0, [pc, #12]	@ (800aca8 <USBD_LL_Init+0x94>)
 800ac9a:	f7f9 fe0f 	bl	80048bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	2000975c 	.word	0x2000975c

0800acac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7f8 fd1b 	bl	80036fe <HAL_PCD_Start>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f942 	bl	800af58 <USBD_Get_USB_Status>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	461a      	mov	r2, r3
 800acf0:	4603      	mov	r3, r0
 800acf2:	70fb      	strb	r3, [r7, #3]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70bb      	strb	r3, [r7, #2]
 800acf8:	4613      	mov	r3, r2
 800acfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad0a:	78bb      	ldrb	r3, [r7, #2]
 800ad0c:	883a      	ldrh	r2, [r7, #0]
 800ad0e:	78f9      	ldrb	r1, [r7, #3]
 800ad10:	f7f9 f9ef 	bl	80040f2 <HAL_PCD_EP_Open>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 f91c 	bl	800af58 <USBD_Get_USB_Status>
 800ad20:	4603      	mov	r3, r0
 800ad22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b084      	sub	sp, #16
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	460b      	mov	r3, r1
 800ad38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad48:	78fa      	ldrb	r2, [r7, #3]
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f9 fa3a 	bl	80041c6 <HAL_PCD_EP_Close>
 800ad52:	4603      	mov	r3, r0
 800ad54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad56:	7bfb      	ldrb	r3, [r7, #15]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 f8fd 	bl	800af58 <USBD_Get_USB_Status>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad86:	78fa      	ldrb	r2, [r7, #3]
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7f9 faf2 	bl	8004374 <HAL_PCD_EP_SetStall>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 f8de 	bl	800af58 <USBD_Get_USB_Status>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b084      	sub	sp, #16
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	460b      	mov	r3, r1
 800adb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adc4:	78fa      	ldrb	r2, [r7, #3]
 800adc6:	4611      	mov	r1, r2
 800adc8:	4618      	mov	r0, r3
 800adca:	f7f9 fb36 	bl	800443a <HAL_PCD_EP_ClrStall>
 800adce:	4603      	mov	r3, r0
 800add0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add2:	7bfb      	ldrb	r3, [r7, #15]
 800add4:	4618      	mov	r0, r3
 800add6:	f000 f8bf 	bl	800af58 <USBD_Get_USB_Status>
 800adda:	4603      	mov	r3, r0
 800addc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adde:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	460b      	mov	r3, r1
 800adf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800adfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	da0b      	bge.n	800ae1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae04:	78fb      	ldrb	r3, [r7, #3]
 800ae06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	440b      	add	r3, r1
 800ae16:	3316      	adds	r3, #22
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	e00b      	b.n	800ae34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae1c:	78fb      	ldrb	r3, [r7, #3]
 800ae1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae22:	68f9      	ldr	r1, [r7, #12]
 800ae24:	4613      	mov	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	4413      	add	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	440b      	add	r3, r1
 800ae2e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ae32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3714      	adds	r7, #20
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae5a:	78fa      	ldrb	r2, [r7, #3]
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7f9 f923 	bl	80040aa <HAL_PCD_SetAddress>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae68:	7bfb      	ldrb	r3, [r7, #15]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 f874 	bl	800af58 <USBD_Get_USB_Status>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b086      	sub	sp, #24
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	60f8      	str	r0, [r7, #12]
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	603b      	str	r3, [r7, #0]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae9c:	7af9      	ldrb	r1, [r7, #11]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	f7f9 fa2d 	bl	8004300 <HAL_PCD_EP_Transmit>
 800aea6:	4603      	mov	r3, r0
 800aea8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 f853 	bl	800af58 <USBD_Get_USB_Status>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aeb6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	607a      	str	r2, [r7, #4]
 800aeca:	603b      	str	r3, [r7, #0]
 800aecc:	460b      	mov	r3, r1
 800aece:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aede:	7af9      	ldrb	r1, [r7, #11]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	f7f9 f9b9 	bl	800425a <HAL_PCD_EP_Receive>
 800aee8:	4603      	mov	r3, r0
 800aeea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 f832 	bl	800af58 <USBD_Get_USB_Status>
 800aef4:	4603      	mov	r3, r0
 800aef6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aef8:	7dbb      	ldrb	r3, [r7, #22]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b082      	sub	sp, #8
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	460b      	mov	r3, r1
 800af0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af14:	78fa      	ldrb	r2, [r7, #3]
 800af16:	4611      	mov	r1, r2
 800af18:	4618      	mov	r0, r3
 800af1a:	f7f9 f9d9 	bl	80042d0 <HAL_PCD_EP_GetRxCount>
 800af1e:	4603      	mov	r3, r0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af30:	4b03      	ldr	r3, [pc, #12]	@ (800af40 <USBD_static_malloc+0x18>)
}
 800af32:	4618      	mov	r0, r3
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	20009c40 	.word	0x20009c40

0800af44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]

}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	2b03      	cmp	r3, #3
 800af6a:	d817      	bhi.n	800af9c <USBD_Get_USB_Status+0x44>
 800af6c:	a201      	add	r2, pc, #4	@ (adr r2, 800af74 <USBD_Get_USB_Status+0x1c>)
 800af6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af72:	bf00      	nop
 800af74:	0800af85 	.word	0x0800af85
 800af78:	0800af8b 	.word	0x0800af8b
 800af7c:	0800af91 	.word	0x0800af91
 800af80:	0800af97 	.word	0x0800af97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	73fb      	strb	r3, [r7, #15]
    break;
 800af88:	e00b      	b.n	800afa2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af8a:	2303      	movs	r3, #3
 800af8c:	73fb      	strb	r3, [r7, #15]
    break;
 800af8e:	e008      	b.n	800afa2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af90:	2301      	movs	r3, #1
 800af92:	73fb      	strb	r3, [r7, #15]
    break;
 800af94:	e005      	b.n	800afa2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af96:	2303      	movs	r3, #3
 800af98:	73fb      	strb	r3, [r7, #15]
    break;
 800af9a:	e002      	b.n	800afa2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af9c:	2303      	movs	r3, #3
 800af9e:	73fb      	strb	r3, [r7, #15]
    break;
 800afa0:	bf00      	nop
  }
  return usb_status;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <std>:
 800afb0:	2300      	movs	r3, #0
 800afb2:	b510      	push	{r4, lr}
 800afb4:	4604      	mov	r4, r0
 800afb6:	e9c0 3300 	strd	r3, r3, [r0]
 800afba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afbe:	6083      	str	r3, [r0, #8]
 800afc0:	8181      	strh	r1, [r0, #12]
 800afc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800afc4:	81c2      	strh	r2, [r0, #14]
 800afc6:	6183      	str	r3, [r0, #24]
 800afc8:	4619      	mov	r1, r3
 800afca:	2208      	movs	r2, #8
 800afcc:	305c      	adds	r0, #92	@ 0x5c
 800afce:	f000 f9f9 	bl	800b3c4 <memset>
 800afd2:	4b0d      	ldr	r3, [pc, #52]	@ (800b008 <std+0x58>)
 800afd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800afd6:	4b0d      	ldr	r3, [pc, #52]	@ (800b00c <std+0x5c>)
 800afd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afda:	4b0d      	ldr	r3, [pc, #52]	@ (800b010 <std+0x60>)
 800afdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afde:	4b0d      	ldr	r3, [pc, #52]	@ (800b014 <std+0x64>)
 800afe0:	6323      	str	r3, [r4, #48]	@ 0x30
 800afe2:	4b0d      	ldr	r3, [pc, #52]	@ (800b018 <std+0x68>)
 800afe4:	6224      	str	r4, [r4, #32]
 800afe6:	429c      	cmp	r4, r3
 800afe8:	d006      	beq.n	800aff8 <std+0x48>
 800afea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afee:	4294      	cmp	r4, r2
 800aff0:	d002      	beq.n	800aff8 <std+0x48>
 800aff2:	33d0      	adds	r3, #208	@ 0xd0
 800aff4:	429c      	cmp	r4, r3
 800aff6:	d105      	bne.n	800b004 <std+0x54>
 800aff8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800affc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b000:	f000 ba58 	b.w	800b4b4 <__retarget_lock_init_recursive>
 800b004:	bd10      	pop	{r4, pc}
 800b006:	bf00      	nop
 800b008:	0800b215 	.word	0x0800b215
 800b00c:	0800b237 	.word	0x0800b237
 800b010:	0800b26f 	.word	0x0800b26f
 800b014:	0800b293 	.word	0x0800b293
 800b018:	20009e60 	.word	0x20009e60

0800b01c <stdio_exit_handler>:
 800b01c:	4a02      	ldr	r2, [pc, #8]	@ (800b028 <stdio_exit_handler+0xc>)
 800b01e:	4903      	ldr	r1, [pc, #12]	@ (800b02c <stdio_exit_handler+0x10>)
 800b020:	4803      	ldr	r0, [pc, #12]	@ (800b030 <stdio_exit_handler+0x14>)
 800b022:	f000 b869 	b.w	800b0f8 <_fwalk_sglue>
 800b026:	bf00      	nop
 800b028:	2000010c 	.word	0x2000010c
 800b02c:	0800bd71 	.word	0x0800bd71
 800b030:	2000011c 	.word	0x2000011c

0800b034 <cleanup_stdio>:
 800b034:	6841      	ldr	r1, [r0, #4]
 800b036:	4b0c      	ldr	r3, [pc, #48]	@ (800b068 <cleanup_stdio+0x34>)
 800b038:	4299      	cmp	r1, r3
 800b03a:	b510      	push	{r4, lr}
 800b03c:	4604      	mov	r4, r0
 800b03e:	d001      	beq.n	800b044 <cleanup_stdio+0x10>
 800b040:	f000 fe96 	bl	800bd70 <_fflush_r>
 800b044:	68a1      	ldr	r1, [r4, #8]
 800b046:	4b09      	ldr	r3, [pc, #36]	@ (800b06c <cleanup_stdio+0x38>)
 800b048:	4299      	cmp	r1, r3
 800b04a:	d002      	beq.n	800b052 <cleanup_stdio+0x1e>
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 fe8f 	bl	800bd70 <_fflush_r>
 800b052:	68e1      	ldr	r1, [r4, #12]
 800b054:	4b06      	ldr	r3, [pc, #24]	@ (800b070 <cleanup_stdio+0x3c>)
 800b056:	4299      	cmp	r1, r3
 800b058:	d004      	beq.n	800b064 <cleanup_stdio+0x30>
 800b05a:	4620      	mov	r0, r4
 800b05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b060:	f000 be86 	b.w	800bd70 <_fflush_r>
 800b064:	bd10      	pop	{r4, pc}
 800b066:	bf00      	nop
 800b068:	20009e60 	.word	0x20009e60
 800b06c:	20009ec8 	.word	0x20009ec8
 800b070:	20009f30 	.word	0x20009f30

0800b074 <global_stdio_init.part.0>:
 800b074:	b510      	push	{r4, lr}
 800b076:	4b0b      	ldr	r3, [pc, #44]	@ (800b0a4 <global_stdio_init.part.0+0x30>)
 800b078:	4c0b      	ldr	r4, [pc, #44]	@ (800b0a8 <global_stdio_init.part.0+0x34>)
 800b07a:	4a0c      	ldr	r2, [pc, #48]	@ (800b0ac <global_stdio_init.part.0+0x38>)
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	4620      	mov	r0, r4
 800b080:	2200      	movs	r2, #0
 800b082:	2104      	movs	r1, #4
 800b084:	f7ff ff94 	bl	800afb0 <std>
 800b088:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b08c:	2201      	movs	r2, #1
 800b08e:	2109      	movs	r1, #9
 800b090:	f7ff ff8e 	bl	800afb0 <std>
 800b094:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b098:	2202      	movs	r2, #2
 800b09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b09e:	2112      	movs	r1, #18
 800b0a0:	f7ff bf86 	b.w	800afb0 <std>
 800b0a4:	20009f98 	.word	0x20009f98
 800b0a8:	20009e60 	.word	0x20009e60
 800b0ac:	0800b01d 	.word	0x0800b01d

0800b0b0 <__sfp_lock_acquire>:
 800b0b0:	4801      	ldr	r0, [pc, #4]	@ (800b0b8 <__sfp_lock_acquire+0x8>)
 800b0b2:	f000 ba00 	b.w	800b4b6 <__retarget_lock_acquire_recursive>
 800b0b6:	bf00      	nop
 800b0b8:	20009fa1 	.word	0x20009fa1

0800b0bc <__sfp_lock_release>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	@ (800b0c4 <__sfp_lock_release+0x8>)
 800b0be:	f000 b9fb 	b.w	800b4b8 <__retarget_lock_release_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	20009fa1 	.word	0x20009fa1

0800b0c8 <__sinit>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	f7ff fff0 	bl	800b0b0 <__sfp_lock_acquire>
 800b0d0:	6a23      	ldr	r3, [r4, #32]
 800b0d2:	b11b      	cbz	r3, 800b0dc <__sinit+0x14>
 800b0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d8:	f7ff bff0 	b.w	800b0bc <__sfp_lock_release>
 800b0dc:	4b04      	ldr	r3, [pc, #16]	@ (800b0f0 <__sinit+0x28>)
 800b0de:	6223      	str	r3, [r4, #32]
 800b0e0:	4b04      	ldr	r3, [pc, #16]	@ (800b0f4 <__sinit+0x2c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1f5      	bne.n	800b0d4 <__sinit+0xc>
 800b0e8:	f7ff ffc4 	bl	800b074 <global_stdio_init.part.0>
 800b0ec:	e7f2      	b.n	800b0d4 <__sinit+0xc>
 800b0ee:	bf00      	nop
 800b0f0:	0800b035 	.word	0x0800b035
 800b0f4:	20009f98 	.word	0x20009f98

0800b0f8 <_fwalk_sglue>:
 800b0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0fc:	4607      	mov	r7, r0
 800b0fe:	4688      	mov	r8, r1
 800b100:	4614      	mov	r4, r2
 800b102:	2600      	movs	r6, #0
 800b104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b108:	f1b9 0901 	subs.w	r9, r9, #1
 800b10c:	d505      	bpl.n	800b11a <_fwalk_sglue+0x22>
 800b10e:	6824      	ldr	r4, [r4, #0]
 800b110:	2c00      	cmp	r4, #0
 800b112:	d1f7      	bne.n	800b104 <_fwalk_sglue+0xc>
 800b114:	4630      	mov	r0, r6
 800b116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d907      	bls.n	800b130 <_fwalk_sglue+0x38>
 800b120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b124:	3301      	adds	r3, #1
 800b126:	d003      	beq.n	800b130 <_fwalk_sglue+0x38>
 800b128:	4629      	mov	r1, r5
 800b12a:	4638      	mov	r0, r7
 800b12c:	47c0      	blx	r8
 800b12e:	4306      	orrs	r6, r0
 800b130:	3568      	adds	r5, #104	@ 0x68
 800b132:	e7e9      	b.n	800b108 <_fwalk_sglue+0x10>

0800b134 <iprintf>:
 800b134:	b40f      	push	{r0, r1, r2, r3}
 800b136:	b507      	push	{r0, r1, r2, lr}
 800b138:	4906      	ldr	r1, [pc, #24]	@ (800b154 <iprintf+0x20>)
 800b13a:	ab04      	add	r3, sp, #16
 800b13c:	6808      	ldr	r0, [r1, #0]
 800b13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b142:	6881      	ldr	r1, [r0, #8]
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	f000 fae9 	bl	800b71c <_vfiprintf_r>
 800b14a:	b003      	add	sp, #12
 800b14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b150:	b004      	add	sp, #16
 800b152:	4770      	bx	lr
 800b154:	20000118 	.word	0x20000118

0800b158 <_puts_r>:
 800b158:	6a03      	ldr	r3, [r0, #32]
 800b15a:	b570      	push	{r4, r5, r6, lr}
 800b15c:	6884      	ldr	r4, [r0, #8]
 800b15e:	4605      	mov	r5, r0
 800b160:	460e      	mov	r6, r1
 800b162:	b90b      	cbnz	r3, 800b168 <_puts_r+0x10>
 800b164:	f7ff ffb0 	bl	800b0c8 <__sinit>
 800b168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b16a:	07db      	lsls	r3, r3, #31
 800b16c:	d405      	bmi.n	800b17a <_puts_r+0x22>
 800b16e:	89a3      	ldrh	r3, [r4, #12]
 800b170:	0598      	lsls	r0, r3, #22
 800b172:	d402      	bmi.n	800b17a <_puts_r+0x22>
 800b174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b176:	f000 f99e 	bl	800b4b6 <__retarget_lock_acquire_recursive>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	0719      	lsls	r1, r3, #28
 800b17e:	d502      	bpl.n	800b186 <_puts_r+0x2e>
 800b180:	6923      	ldr	r3, [r4, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d135      	bne.n	800b1f2 <_puts_r+0x9a>
 800b186:	4621      	mov	r1, r4
 800b188:	4628      	mov	r0, r5
 800b18a:	f000 f8c5 	bl	800b318 <__swsetup_r>
 800b18e:	b380      	cbz	r0, 800b1f2 <_puts_r+0x9a>
 800b190:	f04f 35ff 	mov.w	r5, #4294967295
 800b194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b196:	07da      	lsls	r2, r3, #31
 800b198:	d405      	bmi.n	800b1a6 <_puts_r+0x4e>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	059b      	lsls	r3, r3, #22
 800b19e:	d402      	bmi.n	800b1a6 <_puts_r+0x4e>
 800b1a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1a2:	f000 f989 	bl	800b4b8 <__retarget_lock_release_recursive>
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	bd70      	pop	{r4, r5, r6, pc}
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da04      	bge.n	800b1b8 <_puts_r+0x60>
 800b1ae:	69a2      	ldr	r2, [r4, #24]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	dc17      	bgt.n	800b1e4 <_puts_r+0x8c>
 800b1b4:	290a      	cmp	r1, #10
 800b1b6:	d015      	beq.n	800b1e4 <_puts_r+0x8c>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	6022      	str	r2, [r4, #0]
 800b1be:	7019      	strb	r1, [r3, #0]
 800b1c0:	68a3      	ldr	r3, [r4, #8]
 800b1c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	60a3      	str	r3, [r4, #8]
 800b1ca:	2900      	cmp	r1, #0
 800b1cc:	d1ed      	bne.n	800b1aa <_puts_r+0x52>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	da11      	bge.n	800b1f6 <_puts_r+0x9e>
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	210a      	movs	r1, #10
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f000 f85f 	bl	800b29a <__swbuf_r>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d0d7      	beq.n	800b190 <_puts_r+0x38>
 800b1e0:	250a      	movs	r5, #10
 800b1e2:	e7d7      	b.n	800b194 <_puts_r+0x3c>
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 f857 	bl	800b29a <__swbuf_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d1e7      	bne.n	800b1c0 <_puts_r+0x68>
 800b1f0:	e7ce      	b.n	800b190 <_puts_r+0x38>
 800b1f2:	3e01      	subs	r6, #1
 800b1f4:	e7e4      	b.n	800b1c0 <_puts_r+0x68>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	6022      	str	r2, [r4, #0]
 800b1fc:	220a      	movs	r2, #10
 800b1fe:	701a      	strb	r2, [r3, #0]
 800b200:	e7ee      	b.n	800b1e0 <_puts_r+0x88>
	...

0800b204 <puts>:
 800b204:	4b02      	ldr	r3, [pc, #8]	@ (800b210 <puts+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f7ff bfa5 	b.w	800b158 <_puts_r>
 800b20e:	bf00      	nop
 800b210:	20000118 	.word	0x20000118

0800b214 <__sread>:
 800b214:	b510      	push	{r4, lr}
 800b216:	460c      	mov	r4, r1
 800b218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21c:	f000 f8fc 	bl	800b418 <_read_r>
 800b220:	2800      	cmp	r0, #0
 800b222:	bfab      	itete	ge
 800b224:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b226:	89a3      	ldrhlt	r3, [r4, #12]
 800b228:	181b      	addge	r3, r3, r0
 800b22a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b22e:	bfac      	ite	ge
 800b230:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b232:	81a3      	strhlt	r3, [r4, #12]
 800b234:	bd10      	pop	{r4, pc}

0800b236 <__swrite>:
 800b236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23a:	461f      	mov	r7, r3
 800b23c:	898b      	ldrh	r3, [r1, #12]
 800b23e:	05db      	lsls	r3, r3, #23
 800b240:	4605      	mov	r5, r0
 800b242:	460c      	mov	r4, r1
 800b244:	4616      	mov	r6, r2
 800b246:	d505      	bpl.n	800b254 <__swrite+0x1e>
 800b248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b24c:	2302      	movs	r3, #2
 800b24e:	2200      	movs	r2, #0
 800b250:	f000 f8d0 	bl	800b3f4 <_lseek_r>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b25a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b25e:	81a3      	strh	r3, [r4, #12]
 800b260:	4632      	mov	r2, r6
 800b262:	463b      	mov	r3, r7
 800b264:	4628      	mov	r0, r5
 800b266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b26a:	f000 b8e7 	b.w	800b43c <_write_r>

0800b26e <__sseek>:
 800b26e:	b510      	push	{r4, lr}
 800b270:	460c      	mov	r4, r1
 800b272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b276:	f000 f8bd 	bl	800b3f4 <_lseek_r>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	bf15      	itete	ne
 800b280:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b282:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b286:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b28a:	81a3      	strheq	r3, [r4, #12]
 800b28c:	bf18      	it	ne
 800b28e:	81a3      	strhne	r3, [r4, #12]
 800b290:	bd10      	pop	{r4, pc}

0800b292 <__sclose>:
 800b292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b296:	f000 b89d 	b.w	800b3d4 <_close_r>

0800b29a <__swbuf_r>:
 800b29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29c:	460e      	mov	r6, r1
 800b29e:	4614      	mov	r4, r2
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	b118      	cbz	r0, 800b2ac <__swbuf_r+0x12>
 800b2a4:	6a03      	ldr	r3, [r0, #32]
 800b2a6:	b90b      	cbnz	r3, 800b2ac <__swbuf_r+0x12>
 800b2a8:	f7ff ff0e 	bl	800b0c8 <__sinit>
 800b2ac:	69a3      	ldr	r3, [r4, #24]
 800b2ae:	60a3      	str	r3, [r4, #8]
 800b2b0:	89a3      	ldrh	r3, [r4, #12]
 800b2b2:	071a      	lsls	r2, r3, #28
 800b2b4:	d501      	bpl.n	800b2ba <__swbuf_r+0x20>
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	b943      	cbnz	r3, 800b2cc <__swbuf_r+0x32>
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 f82b 	bl	800b318 <__swsetup_r>
 800b2c2:	b118      	cbz	r0, 800b2cc <__swbuf_r+0x32>
 800b2c4:	f04f 37ff 	mov.w	r7, #4294967295
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	6922      	ldr	r2, [r4, #16]
 800b2d0:	1a98      	subs	r0, r3, r2
 800b2d2:	6963      	ldr	r3, [r4, #20]
 800b2d4:	b2f6      	uxtb	r6, r6
 800b2d6:	4283      	cmp	r3, r0
 800b2d8:	4637      	mov	r7, r6
 800b2da:	dc05      	bgt.n	800b2e8 <__swbuf_r+0x4e>
 800b2dc:	4621      	mov	r1, r4
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f000 fd46 	bl	800bd70 <_fflush_r>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d1ed      	bne.n	800b2c4 <__swbuf_r+0x2a>
 800b2e8:	68a3      	ldr	r3, [r4, #8]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	60a3      	str	r3, [r4, #8]
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	6022      	str	r2, [r4, #0]
 800b2f4:	701e      	strb	r6, [r3, #0]
 800b2f6:	6962      	ldr	r2, [r4, #20]
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d004      	beq.n	800b308 <__swbuf_r+0x6e>
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	07db      	lsls	r3, r3, #31
 800b302:	d5e1      	bpl.n	800b2c8 <__swbuf_r+0x2e>
 800b304:	2e0a      	cmp	r6, #10
 800b306:	d1df      	bne.n	800b2c8 <__swbuf_r+0x2e>
 800b308:	4621      	mov	r1, r4
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 fd30 	bl	800bd70 <_fflush_r>
 800b310:	2800      	cmp	r0, #0
 800b312:	d0d9      	beq.n	800b2c8 <__swbuf_r+0x2e>
 800b314:	e7d6      	b.n	800b2c4 <__swbuf_r+0x2a>
	...

0800b318 <__swsetup_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4b29      	ldr	r3, [pc, #164]	@ (800b3c0 <__swsetup_r+0xa8>)
 800b31c:	4605      	mov	r5, r0
 800b31e:	6818      	ldr	r0, [r3, #0]
 800b320:	460c      	mov	r4, r1
 800b322:	b118      	cbz	r0, 800b32c <__swsetup_r+0x14>
 800b324:	6a03      	ldr	r3, [r0, #32]
 800b326:	b90b      	cbnz	r3, 800b32c <__swsetup_r+0x14>
 800b328:	f7ff fece 	bl	800b0c8 <__sinit>
 800b32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b330:	0719      	lsls	r1, r3, #28
 800b332:	d422      	bmi.n	800b37a <__swsetup_r+0x62>
 800b334:	06da      	lsls	r2, r3, #27
 800b336:	d407      	bmi.n	800b348 <__swsetup_r+0x30>
 800b338:	2209      	movs	r2, #9
 800b33a:	602a      	str	r2, [r5, #0]
 800b33c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b340:	81a3      	strh	r3, [r4, #12]
 800b342:	f04f 30ff 	mov.w	r0, #4294967295
 800b346:	e033      	b.n	800b3b0 <__swsetup_r+0x98>
 800b348:	0758      	lsls	r0, r3, #29
 800b34a:	d512      	bpl.n	800b372 <__swsetup_r+0x5a>
 800b34c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b34e:	b141      	cbz	r1, 800b362 <__swsetup_r+0x4a>
 800b350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b354:	4299      	cmp	r1, r3
 800b356:	d002      	beq.n	800b35e <__swsetup_r+0x46>
 800b358:	4628      	mov	r0, r5
 800b35a:	f000 f8bd 	bl	800b4d8 <_free_r>
 800b35e:	2300      	movs	r3, #0
 800b360:	6363      	str	r3, [r4, #52]	@ 0x34
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b368:	81a3      	strh	r3, [r4, #12]
 800b36a:	2300      	movs	r3, #0
 800b36c:	6063      	str	r3, [r4, #4]
 800b36e:	6923      	ldr	r3, [r4, #16]
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	89a3      	ldrh	r3, [r4, #12]
 800b374:	f043 0308 	orr.w	r3, r3, #8
 800b378:	81a3      	strh	r3, [r4, #12]
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	b94b      	cbnz	r3, 800b392 <__swsetup_r+0x7a>
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b388:	d003      	beq.n	800b392 <__swsetup_r+0x7a>
 800b38a:	4621      	mov	r1, r4
 800b38c:	4628      	mov	r0, r5
 800b38e:	f000 fd3d 	bl	800be0c <__smakebuf_r>
 800b392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b396:	f013 0201 	ands.w	r2, r3, #1
 800b39a:	d00a      	beq.n	800b3b2 <__swsetup_r+0x9a>
 800b39c:	2200      	movs	r2, #0
 800b39e:	60a2      	str	r2, [r4, #8]
 800b3a0:	6962      	ldr	r2, [r4, #20]
 800b3a2:	4252      	negs	r2, r2
 800b3a4:	61a2      	str	r2, [r4, #24]
 800b3a6:	6922      	ldr	r2, [r4, #16]
 800b3a8:	b942      	cbnz	r2, 800b3bc <__swsetup_r+0xa4>
 800b3aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b3ae:	d1c5      	bne.n	800b33c <__swsetup_r+0x24>
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
 800b3b2:	0799      	lsls	r1, r3, #30
 800b3b4:	bf58      	it	pl
 800b3b6:	6962      	ldrpl	r2, [r4, #20]
 800b3b8:	60a2      	str	r2, [r4, #8]
 800b3ba:	e7f4      	b.n	800b3a6 <__swsetup_r+0x8e>
 800b3bc:	2000      	movs	r0, #0
 800b3be:	e7f7      	b.n	800b3b0 <__swsetup_r+0x98>
 800b3c0:	20000118 	.word	0x20000118

0800b3c4 <memset>:
 800b3c4:	4402      	add	r2, r0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d100      	bne.n	800b3ce <memset+0xa>
 800b3cc:	4770      	bx	lr
 800b3ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d2:	e7f9      	b.n	800b3c8 <memset+0x4>

0800b3d4 <_close_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d06      	ldr	r5, [pc, #24]	@ (800b3f0 <_close_r+0x1c>)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f7f5 fea1 	bl	8001126 <_close>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_close_r+0x1a>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_close_r+0x1a>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	20009f9c 	.word	0x20009f9c

0800b3f4 <_lseek_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	4d07      	ldr	r5, [pc, #28]	@ (800b414 <_lseek_r+0x20>)
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	4608      	mov	r0, r1
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	2200      	movs	r2, #0
 800b400:	602a      	str	r2, [r5, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	f7f5 feb6 	bl	8001174 <_lseek>
 800b408:	1c43      	adds	r3, r0, #1
 800b40a:	d102      	bne.n	800b412 <_lseek_r+0x1e>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	b103      	cbz	r3, 800b412 <_lseek_r+0x1e>
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	20009f9c 	.word	0x20009f9c

0800b418 <_read_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d07      	ldr	r5, [pc, #28]	@ (800b438 <_read_r+0x20>)
 800b41c:	4604      	mov	r4, r0
 800b41e:	4608      	mov	r0, r1
 800b420:	4611      	mov	r1, r2
 800b422:	2200      	movs	r2, #0
 800b424:	602a      	str	r2, [r5, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	f7f5 fe60 	bl	80010ec <_read>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_read_r+0x1e>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_read_r+0x1e>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20009f9c 	.word	0x20009f9c

0800b43c <_write_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4d07      	ldr	r5, [pc, #28]	@ (800b45c <_write_r+0x20>)
 800b440:	4604      	mov	r4, r0
 800b442:	4608      	mov	r0, r1
 800b444:	4611      	mov	r1, r2
 800b446:	2200      	movs	r2, #0
 800b448:	602a      	str	r2, [r5, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f7f5 faaa 	bl	80009a4 <_write>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_write_r+0x1e>
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	b103      	cbz	r3, 800b45a <_write_r+0x1e>
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	20009f9c 	.word	0x20009f9c

0800b460 <__errno>:
 800b460:	4b01      	ldr	r3, [pc, #4]	@ (800b468 <__errno+0x8>)
 800b462:	6818      	ldr	r0, [r3, #0]
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	20000118 	.word	0x20000118

0800b46c <__libc_init_array>:
 800b46c:	b570      	push	{r4, r5, r6, lr}
 800b46e:	4d0d      	ldr	r5, [pc, #52]	@ (800b4a4 <__libc_init_array+0x38>)
 800b470:	4c0d      	ldr	r4, [pc, #52]	@ (800b4a8 <__libc_init_array+0x3c>)
 800b472:	1b64      	subs	r4, r4, r5
 800b474:	10a4      	asrs	r4, r4, #2
 800b476:	2600      	movs	r6, #0
 800b478:	42a6      	cmp	r6, r4
 800b47a:	d109      	bne.n	800b490 <__libc_init_array+0x24>
 800b47c:	4d0b      	ldr	r5, [pc, #44]	@ (800b4ac <__libc_init_array+0x40>)
 800b47e:	4c0c      	ldr	r4, [pc, #48]	@ (800b4b0 <__libc_init_array+0x44>)
 800b480:	f000 fd32 	bl	800bee8 <_init>
 800b484:	1b64      	subs	r4, r4, r5
 800b486:	10a4      	asrs	r4, r4, #2
 800b488:	2600      	movs	r6, #0
 800b48a:	42a6      	cmp	r6, r4
 800b48c:	d105      	bne.n	800b49a <__libc_init_array+0x2e>
 800b48e:	bd70      	pop	{r4, r5, r6, pc}
 800b490:	f855 3b04 	ldr.w	r3, [r5], #4
 800b494:	4798      	blx	r3
 800b496:	3601      	adds	r6, #1
 800b498:	e7ee      	b.n	800b478 <__libc_init_array+0xc>
 800b49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49e:	4798      	blx	r3
 800b4a0:	3601      	adds	r6, #1
 800b4a2:	e7f2      	b.n	800b48a <__libc_init_array+0x1e>
 800b4a4:	0800c058 	.word	0x0800c058
 800b4a8:	0800c058 	.word	0x0800c058
 800b4ac:	0800c058 	.word	0x0800c058
 800b4b0:	0800c05c 	.word	0x0800c05c

0800b4b4 <__retarget_lock_init_recursive>:
 800b4b4:	4770      	bx	lr

0800b4b6 <__retarget_lock_acquire_recursive>:
 800b4b6:	4770      	bx	lr

0800b4b8 <__retarget_lock_release_recursive>:
 800b4b8:	4770      	bx	lr

0800b4ba <memcpy>:
 800b4ba:	440a      	add	r2, r1
 800b4bc:	4291      	cmp	r1, r2
 800b4be:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4c2:	d100      	bne.n	800b4c6 <memcpy+0xc>
 800b4c4:	4770      	bx	lr
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4d0:	4291      	cmp	r1, r2
 800b4d2:	d1f9      	bne.n	800b4c8 <memcpy+0xe>
 800b4d4:	bd10      	pop	{r4, pc}
	...

0800b4d8 <_free_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4605      	mov	r5, r0
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	d041      	beq.n	800b564 <_free_r+0x8c>
 800b4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4e4:	1f0c      	subs	r4, r1, #4
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	bfb8      	it	lt
 800b4ea:	18e4      	addlt	r4, r4, r3
 800b4ec:	f000 f8e0 	bl	800b6b0 <__malloc_lock>
 800b4f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b568 <_free_r+0x90>)
 800b4f2:	6813      	ldr	r3, [r2, #0]
 800b4f4:	b933      	cbnz	r3, 800b504 <_free_r+0x2c>
 800b4f6:	6063      	str	r3, [r4, #4]
 800b4f8:	6014      	str	r4, [r2, #0]
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b500:	f000 b8dc 	b.w	800b6bc <__malloc_unlock>
 800b504:	42a3      	cmp	r3, r4
 800b506:	d908      	bls.n	800b51a <_free_r+0x42>
 800b508:	6820      	ldr	r0, [r4, #0]
 800b50a:	1821      	adds	r1, r4, r0
 800b50c:	428b      	cmp	r3, r1
 800b50e:	bf01      	itttt	eq
 800b510:	6819      	ldreq	r1, [r3, #0]
 800b512:	685b      	ldreq	r3, [r3, #4]
 800b514:	1809      	addeq	r1, r1, r0
 800b516:	6021      	streq	r1, [r4, #0]
 800b518:	e7ed      	b.n	800b4f6 <_free_r+0x1e>
 800b51a:	461a      	mov	r2, r3
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	b10b      	cbz	r3, 800b524 <_free_r+0x4c>
 800b520:	42a3      	cmp	r3, r4
 800b522:	d9fa      	bls.n	800b51a <_free_r+0x42>
 800b524:	6811      	ldr	r1, [r2, #0]
 800b526:	1850      	adds	r0, r2, r1
 800b528:	42a0      	cmp	r0, r4
 800b52a:	d10b      	bne.n	800b544 <_free_r+0x6c>
 800b52c:	6820      	ldr	r0, [r4, #0]
 800b52e:	4401      	add	r1, r0
 800b530:	1850      	adds	r0, r2, r1
 800b532:	4283      	cmp	r3, r0
 800b534:	6011      	str	r1, [r2, #0]
 800b536:	d1e0      	bne.n	800b4fa <_free_r+0x22>
 800b538:	6818      	ldr	r0, [r3, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	6053      	str	r3, [r2, #4]
 800b53e:	4408      	add	r0, r1
 800b540:	6010      	str	r0, [r2, #0]
 800b542:	e7da      	b.n	800b4fa <_free_r+0x22>
 800b544:	d902      	bls.n	800b54c <_free_r+0x74>
 800b546:	230c      	movs	r3, #12
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	e7d6      	b.n	800b4fa <_free_r+0x22>
 800b54c:	6820      	ldr	r0, [r4, #0]
 800b54e:	1821      	adds	r1, r4, r0
 800b550:	428b      	cmp	r3, r1
 800b552:	bf04      	itt	eq
 800b554:	6819      	ldreq	r1, [r3, #0]
 800b556:	685b      	ldreq	r3, [r3, #4]
 800b558:	6063      	str	r3, [r4, #4]
 800b55a:	bf04      	itt	eq
 800b55c:	1809      	addeq	r1, r1, r0
 800b55e:	6021      	streq	r1, [r4, #0]
 800b560:	6054      	str	r4, [r2, #4]
 800b562:	e7ca      	b.n	800b4fa <_free_r+0x22>
 800b564:	bd38      	pop	{r3, r4, r5, pc}
 800b566:	bf00      	nop
 800b568:	20009fa8 	.word	0x20009fa8

0800b56c <sbrk_aligned>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	4e0f      	ldr	r6, [pc, #60]	@ (800b5ac <sbrk_aligned+0x40>)
 800b570:	460c      	mov	r4, r1
 800b572:	6831      	ldr	r1, [r6, #0]
 800b574:	4605      	mov	r5, r0
 800b576:	b911      	cbnz	r1, 800b57e <sbrk_aligned+0x12>
 800b578:	f000 fca6 	bl	800bec8 <_sbrk_r>
 800b57c:	6030      	str	r0, [r6, #0]
 800b57e:	4621      	mov	r1, r4
 800b580:	4628      	mov	r0, r5
 800b582:	f000 fca1 	bl	800bec8 <_sbrk_r>
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	d103      	bne.n	800b592 <sbrk_aligned+0x26>
 800b58a:	f04f 34ff 	mov.w	r4, #4294967295
 800b58e:	4620      	mov	r0, r4
 800b590:	bd70      	pop	{r4, r5, r6, pc}
 800b592:	1cc4      	adds	r4, r0, #3
 800b594:	f024 0403 	bic.w	r4, r4, #3
 800b598:	42a0      	cmp	r0, r4
 800b59a:	d0f8      	beq.n	800b58e <sbrk_aligned+0x22>
 800b59c:	1a21      	subs	r1, r4, r0
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f000 fc92 	bl	800bec8 <_sbrk_r>
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d1f2      	bne.n	800b58e <sbrk_aligned+0x22>
 800b5a8:	e7ef      	b.n	800b58a <sbrk_aligned+0x1e>
 800b5aa:	bf00      	nop
 800b5ac:	20009fa4 	.word	0x20009fa4

0800b5b0 <_malloc_r>:
 800b5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b4:	1ccd      	adds	r5, r1, #3
 800b5b6:	f025 0503 	bic.w	r5, r5, #3
 800b5ba:	3508      	adds	r5, #8
 800b5bc:	2d0c      	cmp	r5, #12
 800b5be:	bf38      	it	cc
 800b5c0:	250c      	movcc	r5, #12
 800b5c2:	2d00      	cmp	r5, #0
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	db01      	blt.n	800b5cc <_malloc_r+0x1c>
 800b5c8:	42a9      	cmp	r1, r5
 800b5ca:	d904      	bls.n	800b5d6 <_malloc_r+0x26>
 800b5cc:	230c      	movs	r3, #12
 800b5ce:	6033      	str	r3, [r6, #0]
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6ac <_malloc_r+0xfc>
 800b5da:	f000 f869 	bl	800b6b0 <__malloc_lock>
 800b5de:	f8d8 3000 	ldr.w	r3, [r8]
 800b5e2:	461c      	mov	r4, r3
 800b5e4:	bb44      	cbnz	r4, 800b638 <_malloc_r+0x88>
 800b5e6:	4629      	mov	r1, r5
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f7ff ffbf 	bl	800b56c <sbrk_aligned>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	d158      	bne.n	800b6a6 <_malloc_r+0xf6>
 800b5f4:	f8d8 4000 	ldr.w	r4, [r8]
 800b5f8:	4627      	mov	r7, r4
 800b5fa:	2f00      	cmp	r7, #0
 800b5fc:	d143      	bne.n	800b686 <_malloc_r+0xd6>
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	d04b      	beq.n	800b69a <_malloc_r+0xea>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	4639      	mov	r1, r7
 800b606:	4630      	mov	r0, r6
 800b608:	eb04 0903 	add.w	r9, r4, r3
 800b60c:	f000 fc5c 	bl	800bec8 <_sbrk_r>
 800b610:	4581      	cmp	r9, r0
 800b612:	d142      	bne.n	800b69a <_malloc_r+0xea>
 800b614:	6821      	ldr	r1, [r4, #0]
 800b616:	1a6d      	subs	r5, r5, r1
 800b618:	4629      	mov	r1, r5
 800b61a:	4630      	mov	r0, r6
 800b61c:	f7ff ffa6 	bl	800b56c <sbrk_aligned>
 800b620:	3001      	adds	r0, #1
 800b622:	d03a      	beq.n	800b69a <_malloc_r+0xea>
 800b624:	6823      	ldr	r3, [r4, #0]
 800b626:	442b      	add	r3, r5
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	f8d8 3000 	ldr.w	r3, [r8]
 800b62e:	685a      	ldr	r2, [r3, #4]
 800b630:	bb62      	cbnz	r2, 800b68c <_malloc_r+0xdc>
 800b632:	f8c8 7000 	str.w	r7, [r8]
 800b636:	e00f      	b.n	800b658 <_malloc_r+0xa8>
 800b638:	6822      	ldr	r2, [r4, #0]
 800b63a:	1b52      	subs	r2, r2, r5
 800b63c:	d420      	bmi.n	800b680 <_malloc_r+0xd0>
 800b63e:	2a0b      	cmp	r2, #11
 800b640:	d917      	bls.n	800b672 <_malloc_r+0xc2>
 800b642:	1961      	adds	r1, r4, r5
 800b644:	42a3      	cmp	r3, r4
 800b646:	6025      	str	r5, [r4, #0]
 800b648:	bf18      	it	ne
 800b64a:	6059      	strne	r1, [r3, #4]
 800b64c:	6863      	ldr	r3, [r4, #4]
 800b64e:	bf08      	it	eq
 800b650:	f8c8 1000 	streq.w	r1, [r8]
 800b654:	5162      	str	r2, [r4, r5]
 800b656:	604b      	str	r3, [r1, #4]
 800b658:	4630      	mov	r0, r6
 800b65a:	f000 f82f 	bl	800b6bc <__malloc_unlock>
 800b65e:	f104 000b 	add.w	r0, r4, #11
 800b662:	1d23      	adds	r3, r4, #4
 800b664:	f020 0007 	bic.w	r0, r0, #7
 800b668:	1ac2      	subs	r2, r0, r3
 800b66a:	bf1c      	itt	ne
 800b66c:	1a1b      	subne	r3, r3, r0
 800b66e:	50a3      	strne	r3, [r4, r2]
 800b670:	e7af      	b.n	800b5d2 <_malloc_r+0x22>
 800b672:	6862      	ldr	r2, [r4, #4]
 800b674:	42a3      	cmp	r3, r4
 800b676:	bf0c      	ite	eq
 800b678:	f8c8 2000 	streq.w	r2, [r8]
 800b67c:	605a      	strne	r2, [r3, #4]
 800b67e:	e7eb      	b.n	800b658 <_malloc_r+0xa8>
 800b680:	4623      	mov	r3, r4
 800b682:	6864      	ldr	r4, [r4, #4]
 800b684:	e7ae      	b.n	800b5e4 <_malloc_r+0x34>
 800b686:	463c      	mov	r4, r7
 800b688:	687f      	ldr	r7, [r7, #4]
 800b68a:	e7b6      	b.n	800b5fa <_malloc_r+0x4a>
 800b68c:	461a      	mov	r2, r3
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	42a3      	cmp	r3, r4
 800b692:	d1fb      	bne.n	800b68c <_malloc_r+0xdc>
 800b694:	2300      	movs	r3, #0
 800b696:	6053      	str	r3, [r2, #4]
 800b698:	e7de      	b.n	800b658 <_malloc_r+0xa8>
 800b69a:	230c      	movs	r3, #12
 800b69c:	6033      	str	r3, [r6, #0]
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f000 f80c 	bl	800b6bc <__malloc_unlock>
 800b6a4:	e794      	b.n	800b5d0 <_malloc_r+0x20>
 800b6a6:	6005      	str	r5, [r0, #0]
 800b6a8:	e7d6      	b.n	800b658 <_malloc_r+0xa8>
 800b6aa:	bf00      	nop
 800b6ac:	20009fa8 	.word	0x20009fa8

0800b6b0 <__malloc_lock>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	@ (800b6b8 <__malloc_lock+0x8>)
 800b6b2:	f7ff bf00 	b.w	800b4b6 <__retarget_lock_acquire_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	20009fa0 	.word	0x20009fa0

0800b6bc <__malloc_unlock>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	@ (800b6c4 <__malloc_unlock+0x8>)
 800b6be:	f7ff befb 	b.w	800b4b8 <__retarget_lock_release_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	20009fa0 	.word	0x20009fa0

0800b6c8 <__sfputc_r>:
 800b6c8:	6893      	ldr	r3, [r2, #8]
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	b410      	push	{r4}
 800b6d0:	6093      	str	r3, [r2, #8]
 800b6d2:	da08      	bge.n	800b6e6 <__sfputc_r+0x1e>
 800b6d4:	6994      	ldr	r4, [r2, #24]
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	db01      	blt.n	800b6de <__sfputc_r+0x16>
 800b6da:	290a      	cmp	r1, #10
 800b6dc:	d103      	bne.n	800b6e6 <__sfputc_r+0x1e>
 800b6de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6e2:	f7ff bdda 	b.w	800b29a <__swbuf_r>
 800b6e6:	6813      	ldr	r3, [r2, #0]
 800b6e8:	1c58      	adds	r0, r3, #1
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	7019      	strb	r1, [r3, #0]
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <__sfputs_r>:
 800b6f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	460f      	mov	r7, r1
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	18d5      	adds	r5, r2, r3
 800b700:	42ac      	cmp	r4, r5
 800b702:	d101      	bne.n	800b708 <__sfputs_r+0x12>
 800b704:	2000      	movs	r0, #0
 800b706:	e007      	b.n	800b718 <__sfputs_r+0x22>
 800b708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70c:	463a      	mov	r2, r7
 800b70e:	4630      	mov	r0, r6
 800b710:	f7ff ffda 	bl	800b6c8 <__sfputc_r>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d1f3      	bne.n	800b700 <__sfputs_r+0xa>
 800b718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b71c <_vfiprintf_r>:
 800b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	460d      	mov	r5, r1
 800b722:	b09d      	sub	sp, #116	@ 0x74
 800b724:	4614      	mov	r4, r2
 800b726:	4698      	mov	r8, r3
 800b728:	4606      	mov	r6, r0
 800b72a:	b118      	cbz	r0, 800b734 <_vfiprintf_r+0x18>
 800b72c:	6a03      	ldr	r3, [r0, #32]
 800b72e:	b90b      	cbnz	r3, 800b734 <_vfiprintf_r+0x18>
 800b730:	f7ff fcca 	bl	800b0c8 <__sinit>
 800b734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b736:	07d9      	lsls	r1, r3, #31
 800b738:	d405      	bmi.n	800b746 <_vfiprintf_r+0x2a>
 800b73a:	89ab      	ldrh	r3, [r5, #12]
 800b73c:	059a      	lsls	r2, r3, #22
 800b73e:	d402      	bmi.n	800b746 <_vfiprintf_r+0x2a>
 800b740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b742:	f7ff feb8 	bl	800b4b6 <__retarget_lock_acquire_recursive>
 800b746:	89ab      	ldrh	r3, [r5, #12]
 800b748:	071b      	lsls	r3, r3, #28
 800b74a:	d501      	bpl.n	800b750 <_vfiprintf_r+0x34>
 800b74c:	692b      	ldr	r3, [r5, #16]
 800b74e:	b99b      	cbnz	r3, 800b778 <_vfiprintf_r+0x5c>
 800b750:	4629      	mov	r1, r5
 800b752:	4630      	mov	r0, r6
 800b754:	f7ff fde0 	bl	800b318 <__swsetup_r>
 800b758:	b170      	cbz	r0, 800b778 <_vfiprintf_r+0x5c>
 800b75a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b75c:	07dc      	lsls	r4, r3, #31
 800b75e:	d504      	bpl.n	800b76a <_vfiprintf_r+0x4e>
 800b760:	f04f 30ff 	mov.w	r0, #4294967295
 800b764:	b01d      	add	sp, #116	@ 0x74
 800b766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76a:	89ab      	ldrh	r3, [r5, #12]
 800b76c:	0598      	lsls	r0, r3, #22
 800b76e:	d4f7      	bmi.n	800b760 <_vfiprintf_r+0x44>
 800b770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b772:	f7ff fea1 	bl	800b4b8 <__retarget_lock_release_recursive>
 800b776:	e7f3      	b.n	800b760 <_vfiprintf_r+0x44>
 800b778:	2300      	movs	r3, #0
 800b77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b77c:	2320      	movs	r3, #32
 800b77e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b782:	f8cd 800c 	str.w	r8, [sp, #12]
 800b786:	2330      	movs	r3, #48	@ 0x30
 800b788:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b938 <_vfiprintf_r+0x21c>
 800b78c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b790:	f04f 0901 	mov.w	r9, #1
 800b794:	4623      	mov	r3, r4
 800b796:	469a      	mov	sl, r3
 800b798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b79c:	b10a      	cbz	r2, 800b7a2 <_vfiprintf_r+0x86>
 800b79e:	2a25      	cmp	r2, #37	@ 0x25
 800b7a0:	d1f9      	bne.n	800b796 <_vfiprintf_r+0x7a>
 800b7a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b7a6:	d00b      	beq.n	800b7c0 <_vfiprintf_r+0xa4>
 800b7a8:	465b      	mov	r3, fp
 800b7aa:	4622      	mov	r2, r4
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	f7ff ffa1 	bl	800b6f6 <__sfputs_r>
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	f000 80a7 	beq.w	800b908 <_vfiprintf_r+0x1ec>
 800b7ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7bc:	445a      	add	r2, fp
 800b7be:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 809f 	beq.w	800b908 <_vfiprintf_r+0x1ec>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d4:	f10a 0a01 	add.w	sl, sl, #1
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	9307      	str	r3, [sp, #28]
 800b7dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7e2:	4654      	mov	r4, sl
 800b7e4:	2205      	movs	r2, #5
 800b7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ea:	4853      	ldr	r0, [pc, #332]	@ (800b938 <_vfiprintf_r+0x21c>)
 800b7ec:	f7f4 fd00 	bl	80001f0 <memchr>
 800b7f0:	9a04      	ldr	r2, [sp, #16]
 800b7f2:	b9d8      	cbnz	r0, 800b82c <_vfiprintf_r+0x110>
 800b7f4:	06d1      	lsls	r1, r2, #27
 800b7f6:	bf44      	itt	mi
 800b7f8:	2320      	movmi	r3, #32
 800b7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7fe:	0713      	lsls	r3, r2, #28
 800b800:	bf44      	itt	mi
 800b802:	232b      	movmi	r3, #43	@ 0x2b
 800b804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b808:	f89a 3000 	ldrb.w	r3, [sl]
 800b80c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b80e:	d015      	beq.n	800b83c <_vfiprintf_r+0x120>
 800b810:	9a07      	ldr	r2, [sp, #28]
 800b812:	4654      	mov	r4, sl
 800b814:	2000      	movs	r0, #0
 800b816:	f04f 0c0a 	mov.w	ip, #10
 800b81a:	4621      	mov	r1, r4
 800b81c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b820:	3b30      	subs	r3, #48	@ 0x30
 800b822:	2b09      	cmp	r3, #9
 800b824:	d94b      	bls.n	800b8be <_vfiprintf_r+0x1a2>
 800b826:	b1b0      	cbz	r0, 800b856 <_vfiprintf_r+0x13a>
 800b828:	9207      	str	r2, [sp, #28]
 800b82a:	e014      	b.n	800b856 <_vfiprintf_r+0x13a>
 800b82c:	eba0 0308 	sub.w	r3, r0, r8
 800b830:	fa09 f303 	lsl.w	r3, r9, r3
 800b834:	4313      	orrs	r3, r2
 800b836:	9304      	str	r3, [sp, #16]
 800b838:	46a2      	mov	sl, r4
 800b83a:	e7d2      	b.n	800b7e2 <_vfiprintf_r+0xc6>
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	1d19      	adds	r1, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	9103      	str	r1, [sp, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	bfbb      	ittet	lt
 800b848:	425b      	neglt	r3, r3
 800b84a:	f042 0202 	orrlt.w	r2, r2, #2
 800b84e:	9307      	strge	r3, [sp, #28]
 800b850:	9307      	strlt	r3, [sp, #28]
 800b852:	bfb8      	it	lt
 800b854:	9204      	strlt	r2, [sp, #16]
 800b856:	7823      	ldrb	r3, [r4, #0]
 800b858:	2b2e      	cmp	r3, #46	@ 0x2e
 800b85a:	d10a      	bne.n	800b872 <_vfiprintf_r+0x156>
 800b85c:	7863      	ldrb	r3, [r4, #1]
 800b85e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b860:	d132      	bne.n	800b8c8 <_vfiprintf_r+0x1ac>
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	1d1a      	adds	r2, r3, #4
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	9203      	str	r2, [sp, #12]
 800b86a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b86e:	3402      	adds	r4, #2
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b948 <_vfiprintf_r+0x22c>
 800b876:	7821      	ldrb	r1, [r4, #0]
 800b878:	2203      	movs	r2, #3
 800b87a:	4650      	mov	r0, sl
 800b87c:	f7f4 fcb8 	bl	80001f0 <memchr>
 800b880:	b138      	cbz	r0, 800b892 <_vfiprintf_r+0x176>
 800b882:	9b04      	ldr	r3, [sp, #16]
 800b884:	eba0 000a 	sub.w	r0, r0, sl
 800b888:	2240      	movs	r2, #64	@ 0x40
 800b88a:	4082      	lsls	r2, r0
 800b88c:	4313      	orrs	r3, r2
 800b88e:	3401      	adds	r4, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b896:	4829      	ldr	r0, [pc, #164]	@ (800b93c <_vfiprintf_r+0x220>)
 800b898:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b89c:	2206      	movs	r2, #6
 800b89e:	f7f4 fca7 	bl	80001f0 <memchr>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d03f      	beq.n	800b926 <_vfiprintf_r+0x20a>
 800b8a6:	4b26      	ldr	r3, [pc, #152]	@ (800b940 <_vfiprintf_r+0x224>)
 800b8a8:	bb1b      	cbnz	r3, 800b8f2 <_vfiprintf_r+0x1d6>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	3307      	adds	r3, #7
 800b8ae:	f023 0307 	bic.w	r3, r3, #7
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8b8:	443b      	add	r3, r7
 800b8ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8bc:	e76a      	b.n	800b794 <_vfiprintf_r+0x78>
 800b8be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	2001      	movs	r0, #1
 800b8c6:	e7a8      	b.n	800b81a <_vfiprintf_r+0xfe>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	3401      	adds	r4, #1
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	f04f 0c0a 	mov.w	ip, #10
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8da:	3a30      	subs	r2, #48	@ 0x30
 800b8dc:	2a09      	cmp	r2, #9
 800b8de:	d903      	bls.n	800b8e8 <_vfiprintf_r+0x1cc>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0c6      	beq.n	800b872 <_vfiprintf_r+0x156>
 800b8e4:	9105      	str	r1, [sp, #20]
 800b8e6:	e7c4      	b.n	800b872 <_vfiprintf_r+0x156>
 800b8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e7f0      	b.n	800b8d4 <_vfiprintf_r+0x1b8>
 800b8f2:	ab03      	add	r3, sp, #12
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	4b12      	ldr	r3, [pc, #72]	@ (800b944 <_vfiprintf_r+0x228>)
 800b8fa:	a904      	add	r1, sp, #16
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f3af 8000 	nop.w
 800b902:	4607      	mov	r7, r0
 800b904:	1c78      	adds	r0, r7, #1
 800b906:	d1d6      	bne.n	800b8b6 <_vfiprintf_r+0x19a>
 800b908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b90a:	07d9      	lsls	r1, r3, #31
 800b90c:	d405      	bmi.n	800b91a <_vfiprintf_r+0x1fe>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	059a      	lsls	r2, r3, #22
 800b912:	d402      	bmi.n	800b91a <_vfiprintf_r+0x1fe>
 800b914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b916:	f7ff fdcf 	bl	800b4b8 <__retarget_lock_release_recursive>
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	065b      	lsls	r3, r3, #25
 800b91e:	f53f af1f 	bmi.w	800b760 <_vfiprintf_r+0x44>
 800b922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b924:	e71e      	b.n	800b764 <_vfiprintf_r+0x48>
 800b926:	ab03      	add	r3, sp, #12
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	462a      	mov	r2, r5
 800b92c:	4b05      	ldr	r3, [pc, #20]	@ (800b944 <_vfiprintf_r+0x228>)
 800b92e:	a904      	add	r1, sp, #16
 800b930:	4630      	mov	r0, r6
 800b932:	f000 f879 	bl	800ba28 <_printf_i>
 800b936:	e7e4      	b.n	800b902 <_vfiprintf_r+0x1e6>
 800b938:	0800c01c 	.word	0x0800c01c
 800b93c:	0800c026 	.word	0x0800c026
 800b940:	00000000 	.word	0x00000000
 800b944:	0800b6f7 	.word	0x0800b6f7
 800b948:	0800c022 	.word	0x0800c022

0800b94c <_printf_common>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	4616      	mov	r6, r2
 800b952:	4698      	mov	r8, r3
 800b954:	688a      	ldr	r2, [r1, #8]
 800b956:	690b      	ldr	r3, [r1, #16]
 800b958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b95c:	4293      	cmp	r3, r2
 800b95e:	bfb8      	it	lt
 800b960:	4613      	movlt	r3, r2
 800b962:	6033      	str	r3, [r6, #0]
 800b964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b968:	4607      	mov	r7, r0
 800b96a:	460c      	mov	r4, r1
 800b96c:	b10a      	cbz	r2, 800b972 <_printf_common+0x26>
 800b96e:	3301      	adds	r3, #1
 800b970:	6033      	str	r3, [r6, #0]
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	0699      	lsls	r1, r3, #26
 800b976:	bf42      	ittt	mi
 800b978:	6833      	ldrmi	r3, [r6, #0]
 800b97a:	3302      	addmi	r3, #2
 800b97c:	6033      	strmi	r3, [r6, #0]
 800b97e:	6825      	ldr	r5, [r4, #0]
 800b980:	f015 0506 	ands.w	r5, r5, #6
 800b984:	d106      	bne.n	800b994 <_printf_common+0x48>
 800b986:	f104 0a19 	add.w	sl, r4, #25
 800b98a:	68e3      	ldr	r3, [r4, #12]
 800b98c:	6832      	ldr	r2, [r6, #0]
 800b98e:	1a9b      	subs	r3, r3, r2
 800b990:	42ab      	cmp	r3, r5
 800b992:	dc26      	bgt.n	800b9e2 <_printf_common+0x96>
 800b994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	3b00      	subs	r3, #0
 800b99c:	bf18      	it	ne
 800b99e:	2301      	movne	r3, #1
 800b9a0:	0692      	lsls	r2, r2, #26
 800b9a2:	d42b      	bmi.n	800b9fc <_printf_common+0xb0>
 800b9a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9a8:	4641      	mov	r1, r8
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	47c8      	blx	r9
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	d01e      	beq.n	800b9f0 <_printf_common+0xa4>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	6922      	ldr	r2, [r4, #16]
 800b9b6:	f003 0306 	and.w	r3, r3, #6
 800b9ba:	2b04      	cmp	r3, #4
 800b9bc:	bf02      	ittt	eq
 800b9be:	68e5      	ldreq	r5, [r4, #12]
 800b9c0:	6833      	ldreq	r3, [r6, #0]
 800b9c2:	1aed      	subeq	r5, r5, r3
 800b9c4:	68a3      	ldr	r3, [r4, #8]
 800b9c6:	bf0c      	ite	eq
 800b9c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9cc:	2500      	movne	r5, #0
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	bfc4      	itt	gt
 800b9d2:	1a9b      	subgt	r3, r3, r2
 800b9d4:	18ed      	addgt	r5, r5, r3
 800b9d6:	2600      	movs	r6, #0
 800b9d8:	341a      	adds	r4, #26
 800b9da:	42b5      	cmp	r5, r6
 800b9dc:	d11a      	bne.n	800ba14 <_printf_common+0xc8>
 800b9de:	2000      	movs	r0, #0
 800b9e0:	e008      	b.n	800b9f4 <_printf_common+0xa8>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	4652      	mov	r2, sl
 800b9e6:	4641      	mov	r1, r8
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	47c8      	blx	r9
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	d103      	bne.n	800b9f8 <_printf_common+0xac>
 800b9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f8:	3501      	adds	r5, #1
 800b9fa:	e7c6      	b.n	800b98a <_printf_common+0x3e>
 800b9fc:	18e1      	adds	r1, r4, r3
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	2030      	movs	r0, #48	@ 0x30
 800ba02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba06:	4422      	add	r2, r4
 800ba08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba10:	3302      	adds	r3, #2
 800ba12:	e7c7      	b.n	800b9a4 <_printf_common+0x58>
 800ba14:	2301      	movs	r3, #1
 800ba16:	4622      	mov	r2, r4
 800ba18:	4641      	mov	r1, r8
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	47c8      	blx	r9
 800ba1e:	3001      	adds	r0, #1
 800ba20:	d0e6      	beq.n	800b9f0 <_printf_common+0xa4>
 800ba22:	3601      	adds	r6, #1
 800ba24:	e7d9      	b.n	800b9da <_printf_common+0x8e>
	...

0800ba28 <_printf_i>:
 800ba28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba2c:	7e0f      	ldrb	r7, [r1, #24]
 800ba2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba30:	2f78      	cmp	r7, #120	@ 0x78
 800ba32:	4691      	mov	r9, r2
 800ba34:	4680      	mov	r8, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	469a      	mov	sl, r3
 800ba3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba3e:	d807      	bhi.n	800ba50 <_printf_i+0x28>
 800ba40:	2f62      	cmp	r7, #98	@ 0x62
 800ba42:	d80a      	bhi.n	800ba5a <_printf_i+0x32>
 800ba44:	2f00      	cmp	r7, #0
 800ba46:	f000 80d2 	beq.w	800bbee <_printf_i+0x1c6>
 800ba4a:	2f58      	cmp	r7, #88	@ 0x58
 800ba4c:	f000 80b9 	beq.w	800bbc2 <_printf_i+0x19a>
 800ba50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba58:	e03a      	b.n	800bad0 <_printf_i+0xa8>
 800ba5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba5e:	2b15      	cmp	r3, #21
 800ba60:	d8f6      	bhi.n	800ba50 <_printf_i+0x28>
 800ba62:	a101      	add	r1, pc, #4	@ (adr r1, 800ba68 <_printf_i+0x40>)
 800ba64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba68:	0800bac1 	.word	0x0800bac1
 800ba6c:	0800bad5 	.word	0x0800bad5
 800ba70:	0800ba51 	.word	0x0800ba51
 800ba74:	0800ba51 	.word	0x0800ba51
 800ba78:	0800ba51 	.word	0x0800ba51
 800ba7c:	0800ba51 	.word	0x0800ba51
 800ba80:	0800bad5 	.word	0x0800bad5
 800ba84:	0800ba51 	.word	0x0800ba51
 800ba88:	0800ba51 	.word	0x0800ba51
 800ba8c:	0800ba51 	.word	0x0800ba51
 800ba90:	0800ba51 	.word	0x0800ba51
 800ba94:	0800bbd5 	.word	0x0800bbd5
 800ba98:	0800baff 	.word	0x0800baff
 800ba9c:	0800bb8f 	.word	0x0800bb8f
 800baa0:	0800ba51 	.word	0x0800ba51
 800baa4:	0800ba51 	.word	0x0800ba51
 800baa8:	0800bbf7 	.word	0x0800bbf7
 800baac:	0800ba51 	.word	0x0800ba51
 800bab0:	0800baff 	.word	0x0800baff
 800bab4:	0800ba51 	.word	0x0800ba51
 800bab8:	0800ba51 	.word	0x0800ba51
 800babc:	0800bb97 	.word	0x0800bb97
 800bac0:	6833      	ldr	r3, [r6, #0]
 800bac2:	1d1a      	adds	r2, r3, #4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6032      	str	r2, [r6, #0]
 800bac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bacc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bad0:	2301      	movs	r3, #1
 800bad2:	e09d      	b.n	800bc10 <_printf_i+0x1e8>
 800bad4:	6833      	ldr	r3, [r6, #0]
 800bad6:	6820      	ldr	r0, [r4, #0]
 800bad8:	1d19      	adds	r1, r3, #4
 800bada:	6031      	str	r1, [r6, #0]
 800badc:	0606      	lsls	r6, r0, #24
 800bade:	d501      	bpl.n	800bae4 <_printf_i+0xbc>
 800bae0:	681d      	ldr	r5, [r3, #0]
 800bae2:	e003      	b.n	800baec <_printf_i+0xc4>
 800bae4:	0645      	lsls	r5, r0, #25
 800bae6:	d5fb      	bpl.n	800bae0 <_printf_i+0xb8>
 800bae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800baec:	2d00      	cmp	r5, #0
 800baee:	da03      	bge.n	800baf8 <_printf_i+0xd0>
 800baf0:	232d      	movs	r3, #45	@ 0x2d
 800baf2:	426d      	negs	r5, r5
 800baf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baf8:	4859      	ldr	r0, [pc, #356]	@ (800bc60 <_printf_i+0x238>)
 800bafa:	230a      	movs	r3, #10
 800bafc:	e011      	b.n	800bb22 <_printf_i+0xfa>
 800bafe:	6821      	ldr	r1, [r4, #0]
 800bb00:	6833      	ldr	r3, [r6, #0]
 800bb02:	0608      	lsls	r0, r1, #24
 800bb04:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb08:	d402      	bmi.n	800bb10 <_printf_i+0xe8>
 800bb0a:	0649      	lsls	r1, r1, #25
 800bb0c:	bf48      	it	mi
 800bb0e:	b2ad      	uxthmi	r5, r5
 800bb10:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb12:	4853      	ldr	r0, [pc, #332]	@ (800bc60 <_printf_i+0x238>)
 800bb14:	6033      	str	r3, [r6, #0]
 800bb16:	bf14      	ite	ne
 800bb18:	230a      	movne	r3, #10
 800bb1a:	2308      	moveq	r3, #8
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb22:	6866      	ldr	r6, [r4, #4]
 800bb24:	60a6      	str	r6, [r4, #8]
 800bb26:	2e00      	cmp	r6, #0
 800bb28:	bfa2      	ittt	ge
 800bb2a:	6821      	ldrge	r1, [r4, #0]
 800bb2c:	f021 0104 	bicge.w	r1, r1, #4
 800bb30:	6021      	strge	r1, [r4, #0]
 800bb32:	b90d      	cbnz	r5, 800bb38 <_printf_i+0x110>
 800bb34:	2e00      	cmp	r6, #0
 800bb36:	d04b      	beq.n	800bbd0 <_printf_i+0x1a8>
 800bb38:	4616      	mov	r6, r2
 800bb3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb3e:	fb03 5711 	mls	r7, r3, r1, r5
 800bb42:	5dc7      	ldrb	r7, [r0, r7]
 800bb44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb48:	462f      	mov	r7, r5
 800bb4a:	42bb      	cmp	r3, r7
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	d9f4      	bls.n	800bb3a <_printf_i+0x112>
 800bb50:	2b08      	cmp	r3, #8
 800bb52:	d10b      	bne.n	800bb6c <_printf_i+0x144>
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	07df      	lsls	r7, r3, #31
 800bb58:	d508      	bpl.n	800bb6c <_printf_i+0x144>
 800bb5a:	6923      	ldr	r3, [r4, #16]
 800bb5c:	6861      	ldr	r1, [r4, #4]
 800bb5e:	4299      	cmp	r1, r3
 800bb60:	bfde      	ittt	le
 800bb62:	2330      	movle	r3, #48	@ 0x30
 800bb64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb6c:	1b92      	subs	r2, r2, r6
 800bb6e:	6122      	str	r2, [r4, #16]
 800bb70:	f8cd a000 	str.w	sl, [sp]
 800bb74:	464b      	mov	r3, r9
 800bb76:	aa03      	add	r2, sp, #12
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	f7ff fee6 	bl	800b94c <_printf_common>
 800bb80:	3001      	adds	r0, #1
 800bb82:	d14a      	bne.n	800bc1a <_printf_i+0x1f2>
 800bb84:	f04f 30ff 	mov.w	r0, #4294967295
 800bb88:	b004      	add	sp, #16
 800bb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	f043 0320 	orr.w	r3, r3, #32
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	4833      	ldr	r0, [pc, #204]	@ (800bc64 <_printf_i+0x23c>)
 800bb98:	2778      	movs	r7, #120	@ 0x78
 800bb9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	6831      	ldr	r1, [r6, #0]
 800bba2:	061f      	lsls	r7, r3, #24
 800bba4:	f851 5b04 	ldr.w	r5, [r1], #4
 800bba8:	d402      	bmi.n	800bbb0 <_printf_i+0x188>
 800bbaa:	065f      	lsls	r7, r3, #25
 800bbac:	bf48      	it	mi
 800bbae:	b2ad      	uxthmi	r5, r5
 800bbb0:	6031      	str	r1, [r6, #0]
 800bbb2:	07d9      	lsls	r1, r3, #31
 800bbb4:	bf44      	itt	mi
 800bbb6:	f043 0320 	orrmi.w	r3, r3, #32
 800bbba:	6023      	strmi	r3, [r4, #0]
 800bbbc:	b11d      	cbz	r5, 800bbc6 <_printf_i+0x19e>
 800bbbe:	2310      	movs	r3, #16
 800bbc0:	e7ac      	b.n	800bb1c <_printf_i+0xf4>
 800bbc2:	4827      	ldr	r0, [pc, #156]	@ (800bc60 <_printf_i+0x238>)
 800bbc4:	e7e9      	b.n	800bb9a <_printf_i+0x172>
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	f023 0320 	bic.w	r3, r3, #32
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	e7f6      	b.n	800bbbe <_printf_i+0x196>
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	e7bd      	b.n	800bb50 <_printf_i+0x128>
 800bbd4:	6833      	ldr	r3, [r6, #0]
 800bbd6:	6825      	ldr	r5, [r4, #0]
 800bbd8:	6961      	ldr	r1, [r4, #20]
 800bbda:	1d18      	adds	r0, r3, #4
 800bbdc:	6030      	str	r0, [r6, #0]
 800bbde:	062e      	lsls	r6, r5, #24
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	d501      	bpl.n	800bbe8 <_printf_i+0x1c0>
 800bbe4:	6019      	str	r1, [r3, #0]
 800bbe6:	e002      	b.n	800bbee <_printf_i+0x1c6>
 800bbe8:	0668      	lsls	r0, r5, #25
 800bbea:	d5fb      	bpl.n	800bbe4 <_printf_i+0x1bc>
 800bbec:	8019      	strh	r1, [r3, #0]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	6123      	str	r3, [r4, #16]
 800bbf2:	4616      	mov	r6, r2
 800bbf4:	e7bc      	b.n	800bb70 <_printf_i+0x148>
 800bbf6:	6833      	ldr	r3, [r6, #0]
 800bbf8:	1d1a      	adds	r2, r3, #4
 800bbfa:	6032      	str	r2, [r6, #0]
 800bbfc:	681e      	ldr	r6, [r3, #0]
 800bbfe:	6862      	ldr	r2, [r4, #4]
 800bc00:	2100      	movs	r1, #0
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7f4 faf4 	bl	80001f0 <memchr>
 800bc08:	b108      	cbz	r0, 800bc0e <_printf_i+0x1e6>
 800bc0a:	1b80      	subs	r0, r0, r6
 800bc0c:	6060      	str	r0, [r4, #4]
 800bc0e:	6863      	ldr	r3, [r4, #4]
 800bc10:	6123      	str	r3, [r4, #16]
 800bc12:	2300      	movs	r3, #0
 800bc14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc18:	e7aa      	b.n	800bb70 <_printf_i+0x148>
 800bc1a:	6923      	ldr	r3, [r4, #16]
 800bc1c:	4632      	mov	r2, r6
 800bc1e:	4649      	mov	r1, r9
 800bc20:	4640      	mov	r0, r8
 800bc22:	47d0      	blx	sl
 800bc24:	3001      	adds	r0, #1
 800bc26:	d0ad      	beq.n	800bb84 <_printf_i+0x15c>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	079b      	lsls	r3, r3, #30
 800bc2c:	d413      	bmi.n	800bc56 <_printf_i+0x22e>
 800bc2e:	68e0      	ldr	r0, [r4, #12]
 800bc30:	9b03      	ldr	r3, [sp, #12]
 800bc32:	4298      	cmp	r0, r3
 800bc34:	bfb8      	it	lt
 800bc36:	4618      	movlt	r0, r3
 800bc38:	e7a6      	b.n	800bb88 <_printf_i+0x160>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	4649      	mov	r1, r9
 800bc40:	4640      	mov	r0, r8
 800bc42:	47d0      	blx	sl
 800bc44:	3001      	adds	r0, #1
 800bc46:	d09d      	beq.n	800bb84 <_printf_i+0x15c>
 800bc48:	3501      	adds	r5, #1
 800bc4a:	68e3      	ldr	r3, [r4, #12]
 800bc4c:	9903      	ldr	r1, [sp, #12]
 800bc4e:	1a5b      	subs	r3, r3, r1
 800bc50:	42ab      	cmp	r3, r5
 800bc52:	dcf2      	bgt.n	800bc3a <_printf_i+0x212>
 800bc54:	e7eb      	b.n	800bc2e <_printf_i+0x206>
 800bc56:	2500      	movs	r5, #0
 800bc58:	f104 0619 	add.w	r6, r4, #25
 800bc5c:	e7f5      	b.n	800bc4a <_printf_i+0x222>
 800bc5e:	bf00      	nop
 800bc60:	0800c02d 	.word	0x0800c02d
 800bc64:	0800c03e 	.word	0x0800c03e

0800bc68 <__sflush_r>:
 800bc68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc70:	0716      	lsls	r6, r2, #28
 800bc72:	4605      	mov	r5, r0
 800bc74:	460c      	mov	r4, r1
 800bc76:	d454      	bmi.n	800bd22 <__sflush_r+0xba>
 800bc78:	684b      	ldr	r3, [r1, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	dc02      	bgt.n	800bc84 <__sflush_r+0x1c>
 800bc7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dd48      	ble.n	800bd16 <__sflush_r+0xae>
 800bc84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc86:	2e00      	cmp	r6, #0
 800bc88:	d045      	beq.n	800bd16 <__sflush_r+0xae>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc90:	682f      	ldr	r7, [r5, #0]
 800bc92:	6a21      	ldr	r1, [r4, #32]
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	d030      	beq.n	800bcfa <__sflush_r+0x92>
 800bc98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	0759      	lsls	r1, r3, #29
 800bc9e:	d505      	bpl.n	800bcac <__sflush_r+0x44>
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bca6:	b10b      	cbz	r3, 800bcac <__sflush_r+0x44>
 800bca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcaa:	1ad2      	subs	r2, r2, r3
 800bcac:	2300      	movs	r3, #0
 800bcae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcb0:	6a21      	ldr	r1, [r4, #32]
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	47b0      	blx	r6
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	d106      	bne.n	800bcca <__sflush_r+0x62>
 800bcbc:	6829      	ldr	r1, [r5, #0]
 800bcbe:	291d      	cmp	r1, #29
 800bcc0:	d82b      	bhi.n	800bd1a <__sflush_r+0xb2>
 800bcc2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd6c <__sflush_r+0x104>)
 800bcc4:	410a      	asrs	r2, r1
 800bcc6:	07d6      	lsls	r6, r2, #31
 800bcc8:	d427      	bmi.n	800bd1a <__sflush_r+0xb2>
 800bcca:	2200      	movs	r2, #0
 800bccc:	6062      	str	r2, [r4, #4]
 800bcce:	04d9      	lsls	r1, r3, #19
 800bcd0:	6922      	ldr	r2, [r4, #16]
 800bcd2:	6022      	str	r2, [r4, #0]
 800bcd4:	d504      	bpl.n	800bce0 <__sflush_r+0x78>
 800bcd6:	1c42      	adds	r2, r0, #1
 800bcd8:	d101      	bne.n	800bcde <__sflush_r+0x76>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	b903      	cbnz	r3, 800bce0 <__sflush_r+0x78>
 800bcde:	6560      	str	r0, [r4, #84]	@ 0x54
 800bce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bce2:	602f      	str	r7, [r5, #0]
 800bce4:	b1b9      	cbz	r1, 800bd16 <__sflush_r+0xae>
 800bce6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcea:	4299      	cmp	r1, r3
 800bcec:	d002      	beq.n	800bcf4 <__sflush_r+0x8c>
 800bcee:	4628      	mov	r0, r5
 800bcf0:	f7ff fbf2 	bl	800b4d8 <_free_r>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcf8:	e00d      	b.n	800bd16 <__sflush_r+0xae>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b0      	blx	r6
 800bd00:	4602      	mov	r2, r0
 800bd02:	1c50      	adds	r0, r2, #1
 800bd04:	d1c9      	bne.n	800bc9a <__sflush_r+0x32>
 800bd06:	682b      	ldr	r3, [r5, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d0c6      	beq.n	800bc9a <__sflush_r+0x32>
 800bd0c:	2b1d      	cmp	r3, #29
 800bd0e:	d001      	beq.n	800bd14 <__sflush_r+0xac>
 800bd10:	2b16      	cmp	r3, #22
 800bd12:	d11e      	bne.n	800bd52 <__sflush_r+0xea>
 800bd14:	602f      	str	r7, [r5, #0]
 800bd16:	2000      	movs	r0, #0
 800bd18:	e022      	b.n	800bd60 <__sflush_r+0xf8>
 800bd1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd1e:	b21b      	sxth	r3, r3
 800bd20:	e01b      	b.n	800bd5a <__sflush_r+0xf2>
 800bd22:	690f      	ldr	r7, [r1, #16]
 800bd24:	2f00      	cmp	r7, #0
 800bd26:	d0f6      	beq.n	800bd16 <__sflush_r+0xae>
 800bd28:	0793      	lsls	r3, r2, #30
 800bd2a:	680e      	ldr	r6, [r1, #0]
 800bd2c:	bf08      	it	eq
 800bd2e:	694b      	ldreq	r3, [r1, #20]
 800bd30:	600f      	str	r7, [r1, #0]
 800bd32:	bf18      	it	ne
 800bd34:	2300      	movne	r3, #0
 800bd36:	eba6 0807 	sub.w	r8, r6, r7
 800bd3a:	608b      	str	r3, [r1, #8]
 800bd3c:	f1b8 0f00 	cmp.w	r8, #0
 800bd40:	dde9      	ble.n	800bd16 <__sflush_r+0xae>
 800bd42:	6a21      	ldr	r1, [r4, #32]
 800bd44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd46:	4643      	mov	r3, r8
 800bd48:	463a      	mov	r2, r7
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b0      	blx	r6
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	dc08      	bgt.n	800bd64 <__sflush_r+0xfc>
 800bd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd5a:	81a3      	strh	r3, [r4, #12]
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd64:	4407      	add	r7, r0
 800bd66:	eba8 0800 	sub.w	r8, r8, r0
 800bd6a:	e7e7      	b.n	800bd3c <__sflush_r+0xd4>
 800bd6c:	dfbffffe 	.word	0xdfbffffe

0800bd70 <_fflush_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	690b      	ldr	r3, [r1, #16]
 800bd74:	4605      	mov	r5, r0
 800bd76:	460c      	mov	r4, r1
 800bd78:	b913      	cbnz	r3, 800bd80 <_fflush_r+0x10>
 800bd7a:	2500      	movs	r5, #0
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	b118      	cbz	r0, 800bd8a <_fflush_r+0x1a>
 800bd82:	6a03      	ldr	r3, [r0, #32]
 800bd84:	b90b      	cbnz	r3, 800bd8a <_fflush_r+0x1a>
 800bd86:	f7ff f99f 	bl	800b0c8 <__sinit>
 800bd8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0f3      	beq.n	800bd7a <_fflush_r+0xa>
 800bd92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd94:	07d0      	lsls	r0, r2, #31
 800bd96:	d404      	bmi.n	800bda2 <_fflush_r+0x32>
 800bd98:	0599      	lsls	r1, r3, #22
 800bd9a:	d402      	bmi.n	800bda2 <_fflush_r+0x32>
 800bd9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd9e:	f7ff fb8a 	bl	800b4b6 <__retarget_lock_acquire_recursive>
 800bda2:	4628      	mov	r0, r5
 800bda4:	4621      	mov	r1, r4
 800bda6:	f7ff ff5f 	bl	800bc68 <__sflush_r>
 800bdaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdac:	07da      	lsls	r2, r3, #31
 800bdae:	4605      	mov	r5, r0
 800bdb0:	d4e4      	bmi.n	800bd7c <_fflush_r+0xc>
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	059b      	lsls	r3, r3, #22
 800bdb6:	d4e1      	bmi.n	800bd7c <_fflush_r+0xc>
 800bdb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdba:	f7ff fb7d 	bl	800b4b8 <__retarget_lock_release_recursive>
 800bdbe:	e7dd      	b.n	800bd7c <_fflush_r+0xc>

0800bdc0 <__swhatbuf_r>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	b096      	sub	sp, #88	@ 0x58
 800bdcc:	4615      	mov	r5, r2
 800bdce:	461e      	mov	r6, r3
 800bdd0:	da0d      	bge.n	800bdee <__swhatbuf_r+0x2e>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdd8:	f04f 0100 	mov.w	r1, #0
 800bddc:	bf14      	ite	ne
 800bdde:	2340      	movne	r3, #64	@ 0x40
 800bde0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bde4:	2000      	movs	r0, #0
 800bde6:	6031      	str	r1, [r6, #0]
 800bde8:	602b      	str	r3, [r5, #0]
 800bdea:	b016      	add	sp, #88	@ 0x58
 800bdec:	bd70      	pop	{r4, r5, r6, pc}
 800bdee:	466a      	mov	r2, sp
 800bdf0:	f000 f848 	bl	800be84 <_fstat_r>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	dbec      	blt.n	800bdd2 <__swhatbuf_r+0x12>
 800bdf8:	9901      	ldr	r1, [sp, #4]
 800bdfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be02:	4259      	negs	r1, r3
 800be04:	4159      	adcs	r1, r3
 800be06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be0a:	e7eb      	b.n	800bde4 <__swhatbuf_r+0x24>

0800be0c <__smakebuf_r>:
 800be0c:	898b      	ldrh	r3, [r1, #12]
 800be0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be10:	079d      	lsls	r5, r3, #30
 800be12:	4606      	mov	r6, r0
 800be14:	460c      	mov	r4, r1
 800be16:	d507      	bpl.n	800be28 <__smakebuf_r+0x1c>
 800be18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	6123      	str	r3, [r4, #16]
 800be20:	2301      	movs	r3, #1
 800be22:	6163      	str	r3, [r4, #20]
 800be24:	b003      	add	sp, #12
 800be26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be28:	ab01      	add	r3, sp, #4
 800be2a:	466a      	mov	r2, sp
 800be2c:	f7ff ffc8 	bl	800bdc0 <__swhatbuf_r>
 800be30:	9f00      	ldr	r7, [sp, #0]
 800be32:	4605      	mov	r5, r0
 800be34:	4639      	mov	r1, r7
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff fbba 	bl	800b5b0 <_malloc_r>
 800be3c:	b948      	cbnz	r0, 800be52 <__smakebuf_r+0x46>
 800be3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be42:	059a      	lsls	r2, r3, #22
 800be44:	d4ee      	bmi.n	800be24 <__smakebuf_r+0x18>
 800be46:	f023 0303 	bic.w	r3, r3, #3
 800be4a:	f043 0302 	orr.w	r3, r3, #2
 800be4e:	81a3      	strh	r3, [r4, #12]
 800be50:	e7e2      	b.n	800be18 <__smakebuf_r+0xc>
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	6020      	str	r0, [r4, #0]
 800be56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be5a:	81a3      	strh	r3, [r4, #12]
 800be5c:	9b01      	ldr	r3, [sp, #4]
 800be5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be62:	b15b      	cbz	r3, 800be7c <__smakebuf_r+0x70>
 800be64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be68:	4630      	mov	r0, r6
 800be6a:	f000 f81d 	bl	800bea8 <_isatty_r>
 800be6e:	b128      	cbz	r0, 800be7c <__smakebuf_r+0x70>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	f043 0301 	orr.w	r3, r3, #1
 800be7a:	81a3      	strh	r3, [r4, #12]
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	431d      	orrs	r5, r3
 800be80:	81a5      	strh	r5, [r4, #12]
 800be82:	e7cf      	b.n	800be24 <__smakebuf_r+0x18>

0800be84 <_fstat_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4d07      	ldr	r5, [pc, #28]	@ (800bea4 <_fstat_r+0x20>)
 800be88:	2300      	movs	r3, #0
 800be8a:	4604      	mov	r4, r0
 800be8c:	4608      	mov	r0, r1
 800be8e:	4611      	mov	r1, r2
 800be90:	602b      	str	r3, [r5, #0]
 800be92:	f7f5 f954 	bl	800113e <_fstat>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	d102      	bne.n	800bea0 <_fstat_r+0x1c>
 800be9a:	682b      	ldr	r3, [r5, #0]
 800be9c:	b103      	cbz	r3, 800bea0 <_fstat_r+0x1c>
 800be9e:	6023      	str	r3, [r4, #0]
 800bea0:	bd38      	pop	{r3, r4, r5, pc}
 800bea2:	bf00      	nop
 800bea4:	20009f9c 	.word	0x20009f9c

0800bea8 <_isatty_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4d06      	ldr	r5, [pc, #24]	@ (800bec4 <_isatty_r+0x1c>)
 800beac:	2300      	movs	r3, #0
 800beae:	4604      	mov	r4, r0
 800beb0:	4608      	mov	r0, r1
 800beb2:	602b      	str	r3, [r5, #0]
 800beb4:	f7f5 f953 	bl	800115e <_isatty>
 800beb8:	1c43      	adds	r3, r0, #1
 800beba:	d102      	bne.n	800bec2 <_isatty_r+0x1a>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	b103      	cbz	r3, 800bec2 <_isatty_r+0x1a>
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	bd38      	pop	{r3, r4, r5, pc}
 800bec4:	20009f9c 	.word	0x20009f9c

0800bec8 <_sbrk_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d06      	ldr	r5, [pc, #24]	@ (800bee4 <_sbrk_r+0x1c>)
 800becc:	2300      	movs	r3, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	f7f5 f95c 	bl	8001190 <_sbrk>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d102      	bne.n	800bee2 <_sbrk_r+0x1a>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b103      	cbz	r3, 800bee2 <_sbrk_r+0x1a>
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	20009f9c 	.word	0x20009f9c

0800bee8 <_init>:
 800bee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beea:	bf00      	nop
 800beec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beee:	bc08      	pop	{r3}
 800bef0:	469e      	mov	lr, r3
 800bef2:	4770      	bx	lr

0800bef4 <_fini>:
 800bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef6:	bf00      	nop
 800bef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befa:	bc08      	pop	{r3}
 800befc:	469e      	mov	lr, r3
 800befe:	4770      	bx	lr
