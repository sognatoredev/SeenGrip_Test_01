
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009374  08009374  0000a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009424  08009424  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  08009424  08009424  0000a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800942c  0800942c  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800942c  0800942c  0000a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009430  08009430  0000a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08009434  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          0000209c  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200021e8  200021e8  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d2b  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ec0  00000000  00000000  00022ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00026d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f89  00000000  00000000  000281d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d5a  00000000  00000000  00029161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d096  00000000  00000000  00050ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de840  00000000  00000000  0006df51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c791  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005840  00000000  00000000  0014c7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00152014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800935c 	.word	0x0800935c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000150 	.word	0x20000150
 80001ec:	0800935c 	.word	0x0800935c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_DMA_Init+0x78>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a1a      	ldr	r2, [pc, #104]	@ (8000608 <MX_DMA_Init+0x78>)
 80005a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_DMA_Init+0x78>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_DMA_Init+0x78>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_DMA_Init+0x78>)
 80005bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_DMA_Init+0x78>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200c      	movs	r0, #12
 80005d4:	f000 fe67 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005d8:	200c      	movs	r0, #12
 80005da:	f000 fe80 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2010      	movs	r0, #16
 80005e4:	f000 fe5f 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f000 fe78 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	203a      	movs	r0, #58	@ 0x3a
 80005f4:	f000 fe57 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f000 fe70 	bl	80012de <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a2f      	ldr	r2, [pc, #188]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a28      	ldr	r2, [pc, #160]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <MX_GPIO_Init+0xf8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_GPIO_Init+0xf8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000698:	481b      	ldr	r0, [pc, #108]	@ (8000708 <MX_GPIO_Init+0xfc>)
 800069a:	f001 fad1 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800069e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <MX_GPIO_Init+0x100>)
 80006b6:	f001 f917 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80006ba:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <MX_GPIO_Init+0xfc>)
 80006d4:	f001 f908 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_GPIO_Init+0x100>)
 80006f6:	f001 f8f7 	bl	80018e8 <HAL_GPIO_Init>

}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	@ 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400
 800070c:	40020800 	.word	0x40020800

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fc56 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f81a 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff76 	bl	800060c <MX_GPIO_Init>
  MX_DMA_Init();
 8000720:	f7ff ff36 	bl	8000590 <MX_DMA_Init>
  MX_TIM1_Init();
 8000724:	f000 f974 	bl	8000a10 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000728:	f000 f9ea 	bl	8000b00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800072c:	f000 fa12 	bl	8000b54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000730:	f000 fa3a 	bl	8000ba8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000734:	f007 fc4a 	bl	8007fcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <main+0x3c>)
 800073a:	f003 fa55 	bl	8003be8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 800073e:	f000 fbdf 	bl	8000f00 <GPIO_Proc>
    USB_CDC_Proc();
 8000742:	f000 fbe3 	bl	8000f0c <USB_CDC_Proc>
  {
 8000746:	bf00      	nop
 8000748:	e7f9      	b.n	800073e <main+0x2e>
 800074a:	bf00      	nop
 800074c:	2000016c 	.word	0x2000016c

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	@ 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f008 f97c 	bl	8008a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <SystemClock_Config+0xd8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a2a      	ldr	r2, [pc, #168]	@ (8000828 <SystemClock_Config+0xd8>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <SystemClock_Config+0xd8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <SystemClock_Config+0xdc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a24      	ldr	r2, [pc, #144]	@ (800082c <SystemClock_Config+0xdc>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <SystemClock_Config+0xdc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007c4:	23a8      	movs	r3, #168	@ 0xa8
 80007c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007cc:	2307      	movs	r3, #7
 80007ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fcb7 	bl	8003148 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e0:	f000 f826 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2105      	movs	r1, #5
 8000802:	4618      	mov	r0, r3
 8000804:	f002 ff18 	bl	8003638 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080e:	f000 f80f 	bl	8000830 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 8000812:	2200      	movs	r2, #0
 8000814:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8000818:	2001      	movs	r0, #1
 800081a:	f002 fff3 	bl	8003804 <HAL_RCC_MCOConfig>
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	@ 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000850:	6453      	str	r3, [r2, #68]	@ 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <NMI_Handler+0x4>

08000894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <MemManage_Handler+0x4>

080008a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 fbc1 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <DMA1_Stream1_IRQHandler+0x10>)
 80008f2:	f000 fdbd 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000034c 	.word	0x2000034c

08000900 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <DMA1_Stream5_IRQHandler+0x10>)
 8000906:	f000 fdb3 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200002ec 	.word	0x200002ec

08000914 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000918:	4802      	ldr	r0, [pc, #8]	@ (8000924 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800091a:	f003 f9d5 	bl	8003cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000016c 	.word	0x2000016c

08000928 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800092c:	4802      	ldr	r0, [pc, #8]	@ (8000938 <DMA2_Stream2_IRQHandler+0x10>)
 800092e:	f000 fd9f 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000028c 	.word	0x2000028c

0800093c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000940:	4802      	ldr	r0, [pc, #8]	@ (800094c <OTG_FS_IRQHandler+0x10>)
 8000942:	f001 faf4 	bl	8001f2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000199c 	.word	0x2000199c

08000950 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  TIM1_CNT_1++;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	4a06      	ldr	r2, [pc, #24]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000960:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++;
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	200003ac 	.word	0x200003ac
 800097c:	200003b0 	.word	0x200003b0

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f008 f85c 	bl	8008a6c <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20030000 	.word	0x20030000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	20000168 	.word	0x20000168
 80009e8:	200021e8 	.word	0x200021e8

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	@ (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aac <MX_TIM1_Init+0x9c>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8000a40:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a42:	22a7      	movs	r2, #167	@ 0xa7
 8000a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a58:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a5a:	f003 f875 	bl	8003b48 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a64:	f7ff fee4 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a76:	f003 fa17 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a80:	f7ff fed6 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_TIM1_Init+0x98>)
 8000a92:	f003 fc3f 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a9c:	f7ff fec8 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000016c 	.word	0x2000016c
 8000aac:	40010000 	.word	0x40010000

08000ab0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0e      	ldr	r2, [pc, #56]	@ (8000af8 <HAL_TIM_Base_MspInit+0x48>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d115      	bne.n	8000aee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_TIM_Base_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a0c      	ldr	r2, [pc, #48]	@ (8000afc <HAL_TIM_Base_MspInit+0x4c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_TIM_Base_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f000 fbdf 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ae8:	2019      	movs	r0, #25
 8000aea:	f000 fbf8 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010000 	.word	0x40010000
 8000afc:	40023800 	.word	0x40023800

08000b00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_USART1_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b38:	f003 fc7c 	bl	8004434 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f7ff fe75 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001b4 	.word	0x200001b4
 8000b50:	40011000 	.word	0x40011000

08000b54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_USART2_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	f003 fc52 	bl	8004434 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f7ff fe4b 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001fc 	.word	0x200001fc
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <MX_USART3_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_USART3_UART_Init+0x4c>)
 8000be0:	f003 fc28 	bl	8004434 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f7ff fe21 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000244 	.word	0x20000244
 8000bf8:	40004800 	.word	0x40004800

08000bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	@ 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a6e      	ldr	r2, [pc, #440]	@ (8000dd4 <HAL_UART_MspInit+0x1d8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d179      	bne.n	8000d12 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
 8000c22:	4b6d      	ldr	r3, [pc, #436]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a6c      	ldr	r2, [pc, #432]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	4b66      	ldr	r3, [pc, #408]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a65      	ldr	r2, [pc, #404]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b63      	ldr	r3, [pc, #396]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a5e      	ldr	r2, [pc, #376]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b5c      	ldr	r3, [pc, #368]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c84:	2307      	movs	r3, #7
 8000c86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4853      	ldr	r0, [pc, #332]	@ (8000ddc <HAL_UART_MspInit+0x1e0>)
 8000c90:	f000 fe2a 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c94:	2340      	movs	r3, #64	@ 0x40
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	484c      	ldr	r0, [pc, #304]	@ (8000de0 <HAL_UART_MspInit+0x1e4>)
 8000cb0:	f000 fe1a 	bl	80018e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cb6:	4a4c      	ldr	r2, [pc, #304]	@ (8000de8 <HAL_UART_MspInit+0x1ec>)
 8000cb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000cba:	4b4a      	ldr	r3, [pc, #296]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cc0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc2:	4b48      	ldr	r3, [pc, #288]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc8:	4b46      	ldr	r3, [pc, #280]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cce:	4b45      	ldr	r3, [pc, #276]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd6:	4b43      	ldr	r3, [pc, #268]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cdc:	4b41      	ldr	r3, [pc, #260]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ce2:	4b40      	ldr	r3, [pc, #256]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cee:	4b3d      	ldr	r3, [pc, #244]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cf4:	483b      	ldr	r0, [pc, #236]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000cf6:	f000 fb0d 	bl	8001314 <HAL_DMA_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000d00:	f7ff fd96 	bl	8000830 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a37      	ldr	r2, [pc, #220]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000d08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d0a:	4a36      	ldr	r2, [pc, #216]	@ (8000de4 <HAL_UART_MspInit+0x1e8>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d10:	e0d2      	b.n	8000eb8 <HAL_UART_MspInit+0x2bc>
  else if(uartHandle->Instance==USART2)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a35      	ldr	r2, [pc, #212]	@ (8000dec <HAL_UART_MspInit+0x1f0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d16d      	bne.n	8000df8 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a25      	ldr	r2, [pc, #148]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <HAL_UART_MspInit+0x1dc>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d54:	230c      	movs	r3, #12
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d64:	2307      	movs	r3, #7
 8000d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481b      	ldr	r0, [pc, #108]	@ (8000ddc <HAL_UART_MspInit+0x1e0>)
 8000d70:	f000 fdba 	bl	80018e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000d76:	4a1f      	ldr	r2, [pc, #124]	@ (8000df4 <HAL_UART_MspInit+0x1f8>)
 8000d78:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000d7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d80:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000d90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d94:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000db4:	480e      	ldr	r0, [pc, #56]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000db6:	f000 faad 	bl	8001314 <HAL_DMA_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8000dc0:	f7ff fd36 	bl	8000830 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dca:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <HAL_UART_MspInit+0x1f4>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000dd0:	e072      	b.n	8000eb8 <HAL_UART_MspInit+0x2bc>
 8000dd2:	bf00      	nop
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	2000028c 	.word	0x2000028c
 8000de8:	40026440 	.word	0x40026440
 8000dec:	40004400 	.word	0x40004400
 8000df0:	200002ec 	.word	0x200002ec
 8000df4:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a30      	ldr	r2, [pc, #192]	@ (8000ec0 <HAL_UART_MspInit+0x2c4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d15a      	bne.n	8000eb8 <HAL_UART_MspInit+0x2bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <HAL_UART_MspInit+0x2c8>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec4 <HAL_UART_MspInit+0x2c8>)
 8000e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <HAL_UART_MspInit+0x2c8>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <HAL_UART_MspInit+0x2c8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a27      	ldr	r2, [pc, #156]	@ (8000ec4 <HAL_UART_MspInit+0x2c8>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <HAL_UART_MspInit+0x2c8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	481c      	ldr	r0, [pc, #112]	@ (8000ec8 <HAL_UART_MspInit+0x2cc>)
 8000e58:	f000 fd46 	bl	80018e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <HAL_UART_MspInit+0x2d4>)
 8000e60:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e68:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e9c:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000e9e:	f000 fa39 	bl	8001314 <HAL_DMA_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8000ea8:	f7ff fcc2 	bl	8000830 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eb2:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_UART_MspInit+0x2d0>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000eb8:	bf00      	nop
 8000eba:	3738      	adds	r7, #56	@ 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40004800 	.word	0x40004800
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	2000034c 	.word	0x2000034c
 8000ed0:	40026028 	.word	0x40026028

08000ed4 <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 8000ed8:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <LED_Proc+0x24>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ee0:	d307      	bcc.n	8000ef2 <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <LED_Proc+0x24>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 8000ee8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <LED_Proc+0x28>)
 8000eee:	f000 fec0 	bl	8001c72 <HAL_GPIO_TogglePin>
    }    
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200003ac 	.word	0x200003ac
 8000efc:	40020400 	.word	0x40020400

08000f00 <GPIO_Proc>:

void GPIO_Proc (void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    LED_Proc();
 8000f04:	f7ff ffe6 	bl	8000ed4 <LED_Proc>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <USB_CDC_Proc>:
/*----------------------------------------------------------------------------*/
static uint16_t count = 0;

/* USER CODE BEGIN 1 */
void USB_CDC_Proc (void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    if (TIM1_CNT_2 >= 1000)
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <USB_CDC_Proc+0x54>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f18:	d320      	bcc.n	8000f5c <USB_CDC_Proc+0x50>
    {
        TIM1_CNT_2 = 0;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <USB_CDC_Proc+0x54>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "USB CDC TEST %d\r\n", count);
 8000f20:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <USB_CDC_Proc+0x58>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4910      	ldr	r1, [pc, #64]	@ (8000f68 <USB_CDC_Proc+0x5c>)
 8000f28:	4810      	ldr	r0, [pc, #64]	@ (8000f6c <USB_CDC_Proc+0x60>)
 8000f2a:	f007 fd77 	bl	8008a1c <siprintf>
        CDC_Transmit_FS(USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8000f2e:	480f      	ldr	r0, [pc, #60]	@ (8000f6c <USB_CDC_Proc+0x60>)
 8000f30:	f7ff f95e 	bl	80001f0 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <USB_CDC_Proc+0x60>)
 8000f3a:	f007 f905 	bl	8008148 <CDC_Transmit_FS>
        
        memset(USB_CdcTxBuffer_FS,0,strlen(USB_CdcTxBuffer_FS));
 8000f3e:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <USB_CDC_Proc+0x60>)
 8000f40:	f7ff f956 	bl	80001f0 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <USB_CDC_Proc+0x60>)
 8000f4c:	f007 fd86 	bl	8008a5c <memset>
        
        count++;
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <USB_CDC_Proc+0x58>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b02      	ldr	r3, [pc, #8]	@ (8000f64 <USB_CDC_Proc+0x58>)
 8000f5a:	801a      	strh	r2, [r3, #0]
    }
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200003b0 	.word	0x200003b0
 8000f64:	200004b4 	.word	0x200004b4
 8000f68:	08009374 	.word	0x08009374
 8000f6c:	200003b4 	.word	0x200003b4

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f74:	f7ff fd3a 	bl	80009ec <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f007 fd6b 	bl	8008a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fbb5 	bl	8000710 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fa8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000fb4:	08009434 	.word	0x08009434
  ldr r2, =_sbss
 8000fb8:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000fbc:	200021e8 	.word	0x200021e8

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f94f 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fc20 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f967 	bl	80012fa <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f92f 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	200004b8 	.word	0x200004b8

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200004b8 	.word	0x200004b8

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	@ (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff8e 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff29 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff3e 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff8e 	bl	80011e4 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5d 	bl	8001190 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff31 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa2 	bl	800124c <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff feb6 	bl	8001090 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e099      	b.n	8001464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001350:	e00f      	b.n	8001372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001352:	f7ff fe9d 	bl	8001090 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b05      	cmp	r3, #5
 800135e:	d908      	bls.n	8001372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2220      	movs	r2, #32
 8001364:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e078      	b.n	8001464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e8      	bne.n	8001352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4b38      	ldr	r3, [pc, #224]	@ (800146c <HAL_DMA_Init+0x158>)
 800138c:	4013      	ands	r3, r2
 800138e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d107      	bne.n	80013dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	4313      	orrs	r3, r2
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f023 0307 	bic.w	r3, r3, #7
 80013f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001402:	2b04      	cmp	r3, #4
 8001404:	d117      	bne.n	8001436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00e      	beq.n	8001436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9e9 	bl	80017f0 <DMA_CheckFifoParam>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2240      	movs	r2, #64	@ 0x40
 8001428:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001432:	2301      	movs	r3, #1
 8001434:	e016      	b.n	8001464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f9a0 	bl	8001784 <DMA_CalcBaseAndBitshift>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144c:	223f      	movs	r2, #63	@ 0x3f
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f010803f 	.word	0xf010803f

08001470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800147c:	4b8e      	ldr	r3, [pc, #568]	@ (80016b8 <HAL_DMA_IRQHandler+0x248>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a8e      	ldr	r2, [pc, #568]	@ (80016bc <HAL_DMA_IRQHandler+0x24c>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0a9b      	lsrs	r3, r3, #10
 8001488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149a:	2208      	movs	r2, #8
 800149c:	409a      	lsls	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01a      	beq.n	80014dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c8:	2208      	movs	r2, #8
 80014ca:	409a      	lsls	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	2201      	movs	r2, #1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fe:	2201      	movs	r2, #1
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150a:	f043 0202 	orr.w	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001516:	2204      	movs	r2, #4
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d012      	beq.n	8001548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001534:	2204      	movs	r2, #4
 8001536:	409a      	lsls	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	f043 0204 	orr.w	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154c:	2210      	movs	r2, #16
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d043      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03c      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156a:	2210      	movs	r2, #16
 800156c:	409a      	lsls	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d018      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d108      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d024      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
 800159e:	e01f      	b.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01b      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
 80015b0:	e016      	b.n	80015e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0208 	bic.w	r2, r2, #8
 80015ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e4:	2220      	movs	r2, #32
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 808f 	beq.w	8001710 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8087 	beq.w	8001710 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001606:	2220      	movs	r2, #32
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b05      	cmp	r3, #5
 8001618:	d136      	bne.n	8001688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0216 	bic.w	r2, r2, #22
 8001628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d103      	bne.n	800164a <HAL_DMA_IRQHandler+0x1da>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165e:	223f      	movs	r2, #63	@ 0x3f
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800167a:	2b00      	cmp	r3, #0
 800167c:	d07e      	beq.n	800177c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
        }
        return;
 8001686:	e079      	b.n	800177c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01d      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10d      	bne.n	80016c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d031      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e02c      	b.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
 80016d0:	e01e      	b.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10f      	bne.n	8001700 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0210 	bic.w	r2, r2, #16
 80016ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001714:	2b00      	cmp	r3, #0
 8001716:	d032      	beq.n	800177e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d022      	beq.n	800176a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2205      	movs	r2, #5
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	3301      	adds	r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	d307      	bcc.n	8001758 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f2      	bne.n	800173c <HAL_DMA_IRQHandler+0x2cc>
 8001756:	e000      	b.n	800175a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001758:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
 800177a:	e000      	b.n	800177e <HAL_DMA_IRQHandler+0x30e>
        return;
 800177c:	bf00      	nop
    }
  }
}
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	3b10      	subs	r3, #16
 8001794:	4a14      	ldr	r2, [pc, #80]	@ (80017e8 <DMA_CalcBaseAndBitshift+0x64>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800179e:	4a13      	ldr	r2, [pc, #76]	@ (80017ec <DMA_CalcBaseAndBitshift+0x68>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d909      	bls.n	80017c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	1d1a      	adds	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80017c4:	e007      	b.n	80017d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	aaaaaaab 	.word	0xaaaaaaab
 80017ec:	080093e8 	.word	0x080093e8

080017f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11f      	bne.n	800184a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d856      	bhi.n	80018be <DMA_CheckFifoParam+0xce>
 8001810:	a201      	add	r2, pc, #4	@ (adr r2, 8001818 <DMA_CheckFifoParam+0x28>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	08001829 	.word	0x08001829
 800181c:	0800183b 	.word	0x0800183b
 8001820:	08001829 	.word	0x08001829
 8001824:	080018bf 	.word	0x080018bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d046      	beq.n	80018c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001838:	e043      	b.n	80018c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001842:	d140      	bne.n	80018c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001848:	e03d      	b.n	80018c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001852:	d121      	bne.n	8001898 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d837      	bhi.n	80018ca <DMA_CheckFifoParam+0xda>
 800185a:	a201      	add	r2, pc, #4	@ (adr r2, 8001860 <DMA_CheckFifoParam+0x70>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001871 	.word	0x08001871
 8001864:	08001877 	.word	0x08001877
 8001868:	08001871 	.word	0x08001871
 800186c:	08001889 	.word	0x08001889
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
      break;
 8001874:	e030      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d025      	beq.n	80018ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001886:	e022      	b.n	80018ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001890:	d11f      	bne.n	80018d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001896:	e01c      	b.n	80018d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d903      	bls.n	80018a6 <DMA_CheckFifoParam+0xb6>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d003      	beq.n	80018ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018a4:	e018      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
      break;
 80018aa:	e015      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00e      	beq.n	80018d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
      break;
 80018bc:	e00b      	b.n	80018d6 <DMA_CheckFifoParam+0xe6>
      break;
 80018be:	bf00      	nop
 80018c0:	e00a      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018c2:	bf00      	nop
 80018c4:	e008      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018c6:	bf00      	nop
 80018c8:	e006      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ca:	bf00      	nop
 80018cc:	e004      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ce:	bf00      	nop
 80018d0:	e002      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018d2:	bf00      	nop
 80018d4:	e000      	b.n	80018d8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d6:	bf00      	nop
    }
  } 
  
  return status; 
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e177      	b.n	8001bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8166 	bne.w	8001bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d005      	beq.n	800193a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	2b02      	cmp	r3, #2
 8001938:	d130      	bne.n	800199c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d017      	beq.n	80019d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80c0 	beq.w	8001bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <HAL_GPIO_Init+0x324>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a65      	ldr	r2, [pc, #404]	@ (8001c0c <HAL_GPIO_Init+0x324>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b63      	ldr	r3, [pc, #396]	@ (8001c0c <HAL_GPIO_Init+0x324>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a61      	ldr	r2, [pc, #388]	@ (8001c10 <HAL_GPIO_Init+0x328>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	@ (8001c14 <HAL_GPIO_Init+0x32c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d037      	beq.n	8001b26 <HAL_GPIO_Init+0x23e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a57      	ldr	r2, [pc, #348]	@ (8001c18 <HAL_GPIO_Init+0x330>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a56      	ldr	r2, [pc, #344]	@ (8001c1c <HAL_GPIO_Init+0x334>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x236>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a55      	ldr	r2, [pc, #340]	@ (8001c20 <HAL_GPIO_Init+0x338>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a54      	ldr	r2, [pc, #336]	@ (8001c24 <HAL_GPIO_Init+0x33c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x22e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a53      	ldr	r2, [pc, #332]	@ (8001c28 <HAL_GPIO_Init+0x340>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x22a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	@ (8001c2c <HAL_GPIO_Init+0x344>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a51      	ldr	r2, [pc, #324]	@ (8001c30 <HAL_GPIO_Init+0x348>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x222>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a50      	ldr	r2, [pc, #320]	@ (8001c34 <HAL_GPIO_Init+0x34c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x21e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4f      	ldr	r2, [pc, #316]	@ (8001c38 <HAL_GPIO_Init+0x350>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x21a>
 8001afe:	2309      	movs	r3, #9
 8001b00:	e012      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b02:	230a      	movs	r3, #10
 8001b04:	e010      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b06:	2308      	movs	r3, #8
 8001b08:	e00e      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00c      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00a      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b12:	2305      	movs	r3, #5
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b26:	2300      	movs	r3, #0
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b38:	4935      	ldr	r1, [pc, #212]	@ (8001c10 <HAL_GPIO_Init+0x328>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a34      	ldr	r2, [pc, #208]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b32      	ldr	r3, [pc, #200]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a29      	ldr	r2, [pc, #164]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9a:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <HAL_GPIO_Init+0x354>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	f67f ae84 	bls.w	8001904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3724      	adds	r7, #36	@ 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40021400 	.word	0x40021400
 8001c2c:	40021800 	.word	0x40021800
 8001c30:	40021c00 	.word	0x40021c00
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40022400 	.word	0x40022400
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c50:	787b      	ldrb	r3, [r7, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c5c:	e003      	b.n	8001c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	619a      	str	r2, [r3, #24]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	041a      	lsls	r2, r3, #16
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	400b      	ands	r3, r1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af02      	add	r7, sp, #8
 8001cac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e101      	b.n	8001ebc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f006 fb80 	bl	80083d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2203      	movs	r2, #3
 8001cdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ce6:	d102      	bne.n	8001cee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 ff79 	bl	8004bea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7c1a      	ldrb	r2, [r3, #16]
 8001d00:	f88d 2000 	strb.w	r2, [sp]
 8001d04:	3304      	adds	r3, #4
 8001d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d08:	f002 fe58 	bl	80049bc <USB_CoreInit>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0ce      	b.n	8001ebc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 ff71 	bl	8004c0c <USB_SetCurrentMode>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0bf      	b.n	8001ebc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e04a      	b.n	8001dd8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3315      	adds	r3, #21
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3314      	adds	r3, #20
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	b298      	uxth	r0, r3
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	332e      	adds	r3, #46	@ 0x2e
 8001d7e:	4602      	mov	r2, r0
 8001d80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	3318      	adds	r3, #24
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	331c      	adds	r3, #28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	3320      	adds	r3, #32
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3324      	adds	r3, #36	@ 0x24
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	791b      	ldrb	r3, [r3, #4]
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d3af      	bcc.n	8001d42 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e044      	b.n	8001e72 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	791b      	ldrb	r3, [r3, #4]
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d3b5      	bcc.n	8001de8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7c1a      	ldrb	r2, [r3, #16]
 8001e84:	f88d 2000 	strb.w	r2, [sp]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8c:	f002 ff0a 	bl	8004ca4 <USB_DevInit>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00c      	b.n	8001ebc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 ff4e 	bl	8005d56 <USB_DevDisconnect>

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_PCD_Start+0x1c>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e022      	b.n	8001f26 <HAL_PCD_Start+0x62>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 fe5b 	bl	8004bc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fefc 	bl	8005d14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f2e:	b590      	push	{r4, r7, lr}
 8001f30:	b08d      	sub	sp, #52	@ 0x34
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 ffba 	bl	8005ebe <USB_GetMode>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f040 848c 	bne.w	800286a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 ff1e 	bl	8005d98 <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8482 	beq.w	8002868 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 ff0b 	bl	8005d98 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d107      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f002 0202 	and.w	r2, r2, #2
 8001f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fef9 	bl	8005d98 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b10      	cmp	r3, #16
 8001fae:	d161      	bne.n	8002074 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0210 	bic.w	r2, r2, #16
 8001fbe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f003 020f 	and.w	r2, r3, #15
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	0c5b      	lsrs	r3, r3, #17
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d124      	bne.n	8002036 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d035      	beq.n	8002064 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	6a38      	ldr	r0, [r7, #32]
 800200c:	f003 fd30 	bl	8005a70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201c:	441a      	add	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800202e:	441a      	add	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	615a      	str	r2, [r3, #20]
 8002034:	e016      	b.n	8002064 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	0c5b      	lsrs	r3, r3, #17
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	2b06      	cmp	r3, #6
 8002040:	d110      	bne.n	8002064 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002048:	2208      	movs	r2, #8
 800204a:	4619      	mov	r1, r3
 800204c:	6a38      	ldr	r0, [r7, #32]
 800204e:	f003 fd0f 	bl	8005a70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205e:	441a      	add	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0210 	orr.w	r2, r2, #16
 8002072:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fe8d 	bl	8005d98 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002084:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002088:	f040 80a7 	bne.w	80021da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fe92 	bl	8005dbe <USB_ReadDevAllOutEpInterrupt>
 800209a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800209c:	e099      	b.n	80021d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 808e 	beq.w	80021c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 feb6 	bl	8005e26 <USB_ReadDevOutEPInterrupt>
 80020ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00c      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	2301      	movs	r3, #1
 80020d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fea2 	bl	8002e24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020f6:	461a      	mov	r2, r3
 80020f8:	2308      	movs	r3, #8
 80020fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 ff78 	bl	8002ff4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800211a:	461a      	mov	r2, r3
 800211c:	2310      	movs	r3, #16
 800211e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d030      	beq.n	800218c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002132:	2b80      	cmp	r3, #128	@ 0x80
 8002134:	d109      	bne.n	800214a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002144:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002148:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800214a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f006 fa43 	bl	8008600 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002186:	461a      	mov	r2, r3
 8002188:	2302      	movs	r3, #2
 800218a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a2:	461a      	mov	r2, r3
 80021a4:	2320      	movs	r3, #32
 80021a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021be:	461a      	mov	r2, r3
 80021c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	3301      	adds	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80021cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ce:	085b      	lsrs	r3, r3, #1
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f af62 	bne.w	800209e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fdda 	bl	8005d98 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80021ee:	f040 80db 	bne.w	80023a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 fdfb 	bl	8005df2 <USB_ReadDevAllInEpInterrupt>
 80021fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002202:	e0cd      	b.n	80023a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80c2 	beq.w	8002394 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f003 fe21 	bl	8005e62 <USB_ReadDevInEPInterrupt>
 8002220:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d057      	beq.n	80022dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	2201      	movs	r2, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43db      	mvns	r3, r3
 8002246:	69f9      	ldr	r1, [r7, #28]
 8002248:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800224c:	4013      	ands	r3, r2
 800224e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800225c:	461a      	mov	r2, r3
 800225e:	2301      	movs	r3, #1
 8002260:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	799b      	ldrb	r3, [r3, #6]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d132      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	3320      	adds	r3, #32
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4403      	add	r3, r0
 800228a:	331c      	adds	r3, #28
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4419      	add	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4403      	add	r3, r0
 800229e:	3320      	adds	r3, #32
 80022a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d113      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x3a2>
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3324      	adds	r3, #36	@ 0x24
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022c8:	461a      	mov	r2, r3
 80022ca:	2101      	movs	r1, #1
 80022cc:	f003 fe28 	bl	8005f20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f006 f90d 	bl	80084f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022f2:	461a      	mov	r2, r3
 80022f4:	2308      	movs	r3, #8
 80022f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d008      	beq.n	8002314 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800230e:	461a      	mov	r2, r3
 8002310:	2310      	movs	r3, #16
 8002312:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800232a:	461a      	mov	r2, r3
 800232c:	2340      	movs	r3, #64	@ 0x40
 800232e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d023      	beq.n	8002382 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800233a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800233c:	6a38      	ldr	r0, [r7, #32]
 800233e:	f002 fe15 	bl	8004f6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	3310      	adds	r3, #16
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	78db      	ldrb	r3, [r3, #3]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d108      	bne.n	8002370 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f006 f95a 	bl	8008624 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800237c:	461a      	mov	r2, r3
 800237e:	2302      	movs	r3, #2
 8002380:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800238c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fcbb 	bl	8002d0a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	3301      	adds	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800239a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80023a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f47f af2e 	bne.w	8002204 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fcf3 	bl	8005d98 <USB_ReadInterrupts>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023bc:	d122      	bne.n	8002404 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d108      	bne.n	80023ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023e4:	2100      	movs	r1, #0
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fea2 	bl	8003130 <HAL_PCDEx_LPM_Callback>
 80023ec:	e002      	b.n	80023f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f006 f8f8 	bl	80085e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fcc5 	bl	8005d98 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002418:	d112      	bne.n	8002440 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f006 f8b4 	bl	8008598 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800243e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fca7 	bl	8005d98 <USB_ReadInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002454:	f040 80b7 	bne.w	80025c6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2110      	movs	r1, #16
 8002472:	4618      	mov	r0, r3
 8002474:	f002 fd7a 	bl	8004f6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247c:	e046      	b.n	800250c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800247e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800248a:	461a      	mov	r2, r3
 800248c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002490:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024a2:	0151      	lsls	r1, r2, #5
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	440a      	add	r2, r1
 80024a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80024ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024be:	461a      	mov	r2, r3
 80024c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024d6:	0151      	lsls	r1, r2, #5
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	440a      	add	r2, r1
 80024dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80024e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024f6:	0151      	lsls	r1, r2, #5
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	440a      	add	r2, r1
 80024fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002500:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002504:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002508:	3301      	adds	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	791b      	ldrb	r3, [r3, #4]
 8002510:	461a      	mov	r2, r3
 8002512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002514:	4293      	cmp	r3, r2
 8002516:	d3b2      	bcc.n	800247e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002526:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800252a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7bdb      	ldrb	r3, [r3, #15]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d016      	beq.n	8002562 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800253a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002544:	f043 030b 	orr.w	r3, r3, #11
 8002548:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800255a:	f043 030b 	orr.w	r3, r3, #11
 800255e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002560:	e015      	b.n	800258e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002570:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002574:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002578:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002588:	f043 030b 	orr.w	r3, r3, #11
 800258c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800259c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80025a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025b0:	461a      	mov	r2, r3
 80025b2:	f003 fcb5 	bl	8005f20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80025c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fbe4 	bl	8005d98 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025da:	d123      	bne.n	8002624 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fc7a 	bl	8005eda <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fd37 	bl	800505e <USB_GetDevSpeed>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681c      	ldr	r4, [r3, #0]
 80025fc:	f001 fa70 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8002600:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002606:	461a      	mov	r2, r3
 8002608:	4620      	mov	r0, r4
 800260a:	f002 fa3b 	bl	8004a84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f005 ff99 	bl	8008546 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002622:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 fbb5 	bl	8005d98 <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d10a      	bne.n	800264e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f005 ff76 	bl	800852a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 0208 	and.w	r2, r2, #8
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fba0 	bl	8005d98 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	2b80      	cmp	r3, #128	@ 0x80
 8002660:	d123      	bne.n	80026aa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800266e:	2301      	movs	r3, #1
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
 8002672:	e014      	b.n	800269e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fb08 	bl	8002ca8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	3301      	adds	r3, #1
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	461a      	mov	r2, r3
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d3e4      	bcc.n	8002674 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fb72 	bl	8005d98 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026be:	d13c      	bne.n	800273a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c0:	2301      	movs	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c4:	e02b      	b.n	800271e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3318      	adds	r3, #24
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d115      	bne.n	8002718 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	da12      	bge.n	8002718 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	3317      	adds	r3, #23
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fac8 	bl	8002ca8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	3301      	adds	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	791b      	ldrb	r3, [r3, #4]
 8002722:	461a      	mov	r2, r3
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	4293      	cmp	r3, r2
 8002728:	d3cd      	bcc.n	80026c6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fb2a 	bl	8005d98 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800274e:	d156      	bne.n	80027fe <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002750:	2301      	movs	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
 8002754:	e045      	b.n	80027e2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d12e      	bne.n	80027dc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800277e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	da2b      	bge.n	80027dc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002790:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002794:	429a      	cmp	r2, r3
 8002796:	d121      	bne.n	80027dc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027d8:	6053      	str	r3, [r2, #4]
            break;
 80027da:	e008      	b.n	80027ee <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	3301      	adds	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	791b      	ldrb	r3, [r3, #4]
 80027e6:	461a      	mov	r2, r3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d3b3      	bcc.n	8002756 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80027fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fac8 	bl	8005d98 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002812:	d10a      	bne.n	800282a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f005 ff17 	bl	8008648 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fab2 	bl	8005d98 <USB_ReadInterrupts>
 8002834:	4603      	mov	r3, r0
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d115      	bne.n	800286a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f005 ff07 	bl	8008664 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6859      	ldr	r1, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	e000      	b.n	800286a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002868:	bf00      	nop
    }
  }
}
 800286a:	3734      	adds	r7, #52	@ 0x34
 800286c:	46bd      	mov	sp, r7
 800286e:	bd90      	pop	{r4, r7, pc}

08002870 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_PCD_SetAddress+0x1a>
 8002886:	2302      	movs	r3, #2
 8002888:	e012      	b.n	80028b0 <HAL_PCD_SetAddress+0x40>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 fa11 	bl	8005cc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	70fb      	strb	r3, [r7, #3]
 80028ca:	460b      	mov	r3, r1
 80028cc:	803b      	strh	r3, [r7, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da0f      	bge.n	80028fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	f003 020f 	and.w	r2, r3, #15
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	3310      	adds	r3, #16
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	3304      	adds	r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	705a      	strb	r2, [r3, #1]
 80028fc:	e00f      	b.n	800291e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	f003 020f 	and.w	r2, r3, #15
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800292a:	883a      	ldrh	r2, [r7, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	78ba      	ldrb	r2, [r7, #2]
 8002934:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002948:	78bb      	ldrb	r3, [r7, #2]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d102      	bne.n	8002954 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_PCD_EP_Open+0xaa>
 800295e:	2302      	movs	r3, #2
 8002960:	e00e      	b.n	8002980 <HAL_PCD_EP_Open+0xc8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68f9      	ldr	r1, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fb99 	bl	80050a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800297e:	7afb      	ldrb	r3, [r7, #11]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002998:	2b00      	cmp	r3, #0
 800299a:	da0f      	bge.n	80029bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 020f 	and.w	r2, r3, #15
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	3310      	adds	r3, #16
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	705a      	strb	r2, [r3, #1]
 80029ba:	e00f      	b.n	80029dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	f003 020f 	and.w	r2, r3, #15
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	3304      	adds	r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_PCD_EP_Close+0x6e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e00e      	b.n	8002a14 <HAL_PCD_EP_Close+0x8c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 fbd7 	bl	80051b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a2c:	7afb      	ldrb	r3, [r7, #11]
 8002a2e:	f003 020f 	and.w	r2, r3, #15
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5e:	7afb      	ldrb	r3, [r7, #11]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	799b      	ldrb	r3, [r3, #6]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	799b      	ldrb	r3, [r3, #6]
 8002a80:	461a      	mov	r2, r3
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	f002 fc74 	bl	8005370 <USB_EPStartXfer>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002ab4:	681b      	ldr	r3, [r3, #0]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	f003 020f 	and.w	r2, r3, #15
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	3310      	adds	r3, #16
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2201      	movs	r2, #1
 8002b00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	799b      	ldrb	r3, [r3, #6]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	799b      	ldrb	r3, [r3, #6]
 8002b24:	461a      	mov	r2, r3
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	f002 fc22 	bl	8005370 <USB_EPStartXfer>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	7912      	ldrb	r2, [r2, #4]
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e04f      	b.n	8002bf4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	da0f      	bge.n	8002b7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	705a      	strb	r2, [r3, #1]
 8002b7a:	e00d      	b.n	8002b98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3304      	adds	r3, #4
 8002b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_PCD_EP_SetStall+0x82>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e01d      	b.n	8002bf4 <HAL_PCD_EP_SetStall+0xbe>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 ffaa 	bl	8005b20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7999      	ldrb	r1, [r3, #6]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002be4:	461a      	mov	r2, r3
 8002be6:	f003 f99b 	bl	8005f20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	7912      	ldrb	r2, [r2, #4]
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e042      	b.n	8002ca0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	da0f      	bge.n	8002c42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	3310      	adds	r3, #16
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	705a      	strb	r2, [r3, #1]
 8002c40:	e00f      	b.n	8002c62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_PCD_EP_ClrStall+0x86>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e00e      	b.n	8002ca0 <HAL_PCD_EP_ClrStall+0xa4>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68f9      	ldr	r1, [r7, #12]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f002 ffb3 	bl	8005bfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da0c      	bge.n	8002cd6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 020f 	and.w	r2, r3, #15
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	3310      	adds	r3, #16
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e00c      	b.n	8002cf0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	f003 020f 	and.w	r2, r3, #15
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	3304      	adds	r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68f9      	ldr	r1, [r7, #12]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fdd2 	bl	80058a0 <USB_EPStopXfer>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d00:	7afb      	ldrb	r3, [r7, #11]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b08a      	sub	sp, #40	@ 0x28
 8002d0e:	af02      	add	r7, sp, #8
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	3310      	adds	r3, #16
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3304      	adds	r3, #4
 8002d30:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d901      	bls.n	8002d42 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d902      	bls.n	8002d5e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3303      	adds	r3, #3
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d66:	e02a      	b.n	8002dbe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d902      	bls.n	8002d84 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	3303      	adds	r3, #3
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68d9      	ldr	r1, [r3, #12]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f002 fe27 	bl	80059f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	441a      	add	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	441a      	add	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d809      	bhi.n	8002de8 <PCD_WriteEmptyTxFifo+0xde>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d203      	bcs.n	8002de8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1bf      	bne.n	8002d68 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d811      	bhi.n	8002e18 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	6939      	ldr	r1, [r7, #16]
 8002e10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e14:	4013      	ands	r3, r2
 8002e16:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	333c      	adds	r3, #60	@ 0x3c
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	799b      	ldrb	r3, [r3, #6]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d17b      	bne.n	8002f52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	4a61      	ldr	r2, [pc, #388]	@ (8002fec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f240 80b9 	bls.w	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80b3 	beq.w	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e86:	461a      	mov	r2, r3
 8002e88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e8c:	6093      	str	r3, [r2, #8]
 8002e8e:	e0a7      	b.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	6093      	str	r3, [r2, #8]
 8002eac:	e098      	b.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 8093 	bne.w	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8002fec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d90f      	bls.n	8002ee2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ede:	6093      	str	r3, [r2, #8]
 8002ee0:	e07e      	b.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	0159      	lsls	r1, r3, #5
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	440b      	add	r3, r1
 8002f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0e:	1ad2      	subs	r2, r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d114      	bne.n	8002f44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2101      	movs	r1, #1
 8002f30:	f002 fff6 	bl	8005f20 <USB_EP0_OutStart>
 8002f34:	e006      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	441a      	add	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f005 fab8 	bl	80084c0 <HAL_PCD_DataOutStageCallback>
 8002f50:	e046      	b.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	4a26      	ldr	r2, [pc, #152]	@ (8002ff0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d124      	bne.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f70:	461a      	mov	r2, r3
 8002f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f76:	6093      	str	r3, [r2, #8]
 8002f78:	e032      	b.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f90:	461a      	mov	r2, r3
 8002f92:	2320      	movs	r3, #32
 8002f94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f005 fa8f 	bl	80084c0 <HAL_PCD_DataOutStageCallback>
 8002fa2:	e01d      	b.n	8002fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d114      	bne.n	8002fd4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d108      	bne.n	8002fd4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f002 ffa6 	bl	8005f20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f005 fa70 	bl	80084c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	4f54300a 	.word	0x4f54300a
 8002ff0:	4f54310a 	.word	0x4f54310a

08002ff4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	333c      	adds	r3, #60	@ 0x3c
 800300c:	3304      	adds	r3, #4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a15      	ldr	r2, [pc, #84]	@ (800307c <PCD_EP_OutSetupPacket_int+0x88>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d90e      	bls.n	8003048 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003040:	461a      	mov	r2, r3
 8003042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003046:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f005 fa27 	bl	800849c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <PCD_EP_OutSetupPacket_int+0x88>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d90c      	bls.n	8003070 <PCD_EP_OutSetupPacket_int+0x7c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	799b      	ldrb	r3, [r3, #6]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d108      	bne.n	8003070 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003068:	461a      	mov	r2, r3
 800306a:	2101      	movs	r1, #1
 800306c:	f002 ff58 	bl	8005f20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	4f54300a 	.word	0x4f54300a

08003080 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	70fb      	strb	r3, [r7, #3]
 800308c:	4613      	mov	r3, r2
 800308e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800309e:	883b      	ldrh	r3, [r7, #0]
 80030a0:	0419      	lsls	r1, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80030ac:	e028      	b.n	8003100 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	4413      	add	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e00d      	b.n	80030de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	3340      	adds	r3, #64	@ 0x40
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4413      	add	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	3301      	adds	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3ec      	bcc.n	80030c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030e8:	883b      	ldrh	r3, [r7, #0]
 80030ea:	0418      	lsls	r0, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6819      	ldr	r1, [r3, #0]
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4302      	orrs	r2, r0
 80030f8:	3340      	adds	r3, #64	@ 0x40
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e267      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d075      	beq.n	8003252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003166:	4b88      	ldr	r3, [pc, #544]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d00c      	beq.n	800318c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b85      	ldr	r3, [pc, #532]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d112      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4b82      	ldr	r3, [pc, #520]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800318a:	d10b      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	4b7e      	ldr	r3, [pc, #504]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05b      	beq.n	8003250 <HAL_RCC_OscConfig+0x108>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d157      	bne.n	8003250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e242      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x74>
 80031ae:	4b76      	ldr	r3, [pc, #472]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a75      	ldr	r2, [pc, #468]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e01d      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x98>
 80031c6:	4b70      	ldr	r3, [pc, #448]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031e0:	4b69      	ldr	r3, [pc, #420]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a68      	ldr	r2, [pc, #416]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b66      	ldr	r3, [pc, #408]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a65      	ldr	r2, [pc, #404]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd ff46 	bl	8001090 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fd ff42 	bl	8001090 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	@ 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e207      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b5b      	ldr	r3, [pc, #364]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xc0>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fd ff32 	bl	8001090 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fd ff2e 	bl	8001090 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	@ 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1f3      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	4b51      	ldr	r3, [pc, #324]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0xe8>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d063      	beq.n	8003326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325e:	4b4a      	ldr	r3, [pc, #296]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b47      	ldr	r3, [pc, #284]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003272:	2b08      	cmp	r3, #8
 8003274:	d11c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b44      	ldr	r3, [pc, #272]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d116      	bne.n	80032b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	4b41      	ldr	r3, [pc, #260]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x152>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e1c7      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4937      	ldr	r1, [pc, #220]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	e03a      	b.n	8003326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b8:	4b34      	ldr	r3, [pc, #208]	@ (800338c <HAL_RCC_OscConfig+0x244>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fd fee7 	bl	8001090 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fd fee3 	bl	8001090 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1a8      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b28      	ldr	r3, [pc, #160]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4925      	ldr	r1, [pc, #148]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	e015      	b.n	8003326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fa:	4b24      	ldr	r3, [pc, #144]	@ (800338c <HAL_RCC_OscConfig+0x244>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fd fec6 	bl	8001090 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003308:	f7fd fec2 	bl	8001090 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e187      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d036      	beq.n	80033a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333a:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <HAL_RCC_OscConfig+0x248>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fd fea6 	bl	8001090 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003348:	f7fd fea2 	bl	8001090 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e167      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_RCC_OscConfig+0x240>)
 800335c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x200>
 8003366:	e01b      	b.n	80033a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003368:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <HAL_RCC_OscConfig+0x248>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fd fe8f 	bl	8001090 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	e00e      	b.n	8003394 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003376:	f7fd fe8b 	bl	8001090 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d907      	bls.n	8003394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e150      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
 8003388:	40023800 	.word	0x40023800
 800338c:	42470000 	.word	0x42470000
 8003390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	4b88      	ldr	r3, [pc, #544]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ea      	bne.n	8003376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8097 	beq.w	80034dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b81      	ldr	r3, [pc, #516]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	4b7d      	ldr	r3, [pc, #500]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	4a7c      	ldr	r2, [pc, #496]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ce:	4b7a      	ldr	r3, [pc, #488]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b77      	ldr	r3, [pc, #476]	@ (80035bc <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b74      	ldr	r3, [pc, #464]	@ (80035bc <HAL_RCC_OscConfig+0x474>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a73      	ldr	r2, [pc, #460]	@ (80035bc <HAL_RCC_OscConfig+0x474>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fe4b 	bl	8001090 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7fd fe47 	bl	8001090 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e10c      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	4b6a      	ldr	r3, [pc, #424]	@ (80035bc <HAL_RCC_OscConfig+0x474>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x2ea>
 8003424:	4b64      	ldr	r3, [pc, #400]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003428:	4a63      	ldr	r2, [pc, #396]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x324>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x30c>
 800343a:	4b5f      	ldr	r3, [pc, #380]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a5e      	ldr	r2, [pc, #376]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
 8003446:	4b5c      	ldr	r3, [pc, #368]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344a:	4a5b      	ldr	r2, [pc, #364]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6713      	str	r3, [r2, #112]	@ 0x70
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0x324>
 8003454:	4b58      	ldr	r3, [pc, #352]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a57      	ldr	r2, [pc, #348]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003460:	4b55      	ldr	r3, [pc, #340]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003464:	4a54      	ldr	r2, [pc, #336]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 0304 	bic.w	r3, r3, #4
 800346a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d015      	beq.n	80034a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fd fe0c 	bl	8001090 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fd fe08 	bl	8001090 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0cb      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	4b49      	ldr	r3, [pc, #292]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ee      	beq.n	800347c <HAL_RCC_OscConfig+0x334>
 800349e:	e014      	b.n	80034ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fd fdf6 	bl	8001090 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fd fdf2 	bl	8001090 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0b5      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034be:	4b3e      	ldr	r3, [pc, #248]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ee      	bne.n	80034a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b39      	ldr	r3, [pc, #228]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	4a38      	ldr	r2, [pc, #224]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a1 	beq.w	8003628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e6:	4b34      	ldr	r3, [pc, #208]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d05c      	beq.n	80035ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d141      	bne.n	800357e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <HAL_RCC_OscConfig+0x478>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fd fdc6 	bl	8001090 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fd fdc2 	bl	8001090 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e087      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b27      	ldr	r3, [pc, #156]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	3b01      	subs	r3, #1
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	491b      	ldr	r1, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003550:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <HAL_RCC_OscConfig+0x478>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fd fd9b 	bl	8001090 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fd fd97 	bl	8001090 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e05c      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x416>
 800357c:	e054      	b.n	8003628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b10      	ldr	r3, [pc, #64]	@ (80035c0 <HAL_RCC_OscConfig+0x478>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fd fd84 	bl	8001090 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7fd fd80 	bl	8001090 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e045      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_RCC_OscConfig+0x470>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x444>
 80035aa:	e03d      	b.n	8003628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e038      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x4ec>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d028      	beq.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d121      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d11a      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d111      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	3b01      	subs	r3, #1
 800360e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0cc      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b68      	ldr	r3, [pc, #416]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d90c      	bls.n	8003674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b65      	ldr	r3, [pc, #404]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a58      	ldr	r2, [pc, #352]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a52      	ldr	r2, [pc, #328]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d044      	beq.n	8003758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d119      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b3f      	ldr	r3, [pc, #252]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3b      	ldr	r3, [pc, #236]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e067      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b37      	ldr	r3, [pc, #220]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4934      	ldr	r1, [pc, #208]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7fd fcb2 	bl	8001090 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fd fcae 	bl	8001090 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2b      	ldr	r3, [pc, #172]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d20c      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b22      	ldr	r3, [pc, #136]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037aa:	4b12      	ldr	r3, [pc, #72]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f889 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	@ (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fc12 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023c00 	.word	0x40023c00
 80037f4:	40023800 	.word	0x40023800
 80037f8:	080093d0 	.word	0x080093d0
 80037fc:	20000000 	.word	0x20000000
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08c      	sub	sp, #48	@ 0x30
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d129      	bne.n	800386a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	4b2b      	ldr	r3, [pc, #172]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	4a2a      	ldr	r2, [pc, #168]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6313      	str	r3, [r2, #48]	@ 0x30
 8003826:	4b28      	ldr	r3, [pc, #160]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	2303      	movs	r3, #3
 800383e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003844:	2300      	movs	r3, #0
 8003846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003848:	f107 031c 	add.w	r3, r7, #28
 800384c:	4619      	mov	r1, r3
 800384e:	481f      	ldr	r0, [pc, #124]	@ (80038cc <HAL_RCC_MCOConfig+0xc8>)
 8003850:	f7fe f84a 	bl	80018e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003854:	4b1c      	ldr	r3, [pc, #112]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	430b      	orrs	r3, r1
 8003862:	4919      	ldr	r1, [pc, #100]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003868:	e029      	b.n	80038be <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	4a15      	ldr	r2, [pc, #84]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6313      	str	r3, [r2, #48]	@ 0x30
 800387a:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800388a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003890:	2303      	movs	r3, #3
 8003892:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800389c:	f107 031c 	add.w	r3, r7, #28
 80038a0:	4619      	mov	r1, r3
 80038a2:	480b      	ldr	r0, [pc, #44]	@ (80038d0 <HAL_RCC_MCOConfig+0xcc>)
 80038a4:	f7fe f820 	bl	80018e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80038a8:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	00d9      	lsls	r1, r3, #3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	430b      	orrs	r3, r1
 80038b8:	4903      	ldr	r1, [pc, #12]	@ (80038c8 <HAL_RCC_MCOConfig+0xc4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
}
 80038be:	bf00      	nop
 80038c0:	3730      	adds	r7, #48	@ 0x30
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40020000 	.word	0x40020000
 80038d0:	40020800 	.word	0x40020800

080038d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b094      	sub	sp, #80	@ 0x50
 80038da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e0:	2300      	movs	r3, #0
 80038e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e4:	2300      	movs	r3, #0
 80038e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ec:	4b79      	ldr	r3, [pc, #484]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d00d      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x40>
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	f200 80e1 	bhi.w	8003ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x34>
 8003902:	2b04      	cmp	r3, #4
 8003904:	d003      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x3a>
 8003906:	e0db      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b73      	ldr	r3, [pc, #460]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800390a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800390c:	e0db      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390e:	4b73      	ldr	r3, [pc, #460]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x208>)
 8003910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003912:	e0d8      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003914:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800391c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800391e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d063      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	2200      	movs	r2, #0
 8003932:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003934:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393c:	633b      	str	r3, [r7, #48]	@ 0x30
 800393e:	2300      	movs	r3, #0
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
 8003942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003946:	4622      	mov	r2, r4
 8003948:	462b      	mov	r3, r5
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	0159      	lsls	r1, r3, #5
 8003954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003958:	0150      	lsls	r0, r2, #5
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4621      	mov	r1, r4
 8003960:	1a51      	subs	r1, r2, r1
 8003962:	6139      	str	r1, [r7, #16]
 8003964:	4629      	mov	r1, r5
 8003966:	eb63 0301 	sbc.w	r3, r3, r1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003978:	4659      	mov	r1, fp
 800397a:	018b      	lsls	r3, r1, #6
 800397c:	4651      	mov	r1, sl
 800397e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003982:	4651      	mov	r1, sl
 8003984:	018a      	lsls	r2, r1, #6
 8003986:	4651      	mov	r1, sl
 8003988:	ebb2 0801 	subs.w	r8, r2, r1
 800398c:	4659      	mov	r1, fp
 800398e:	eb63 0901 	sbc.w	r9, r3, r1
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800399e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a6:	4690      	mov	r8, r2
 80039a8:	4699      	mov	r9, r3
 80039aa:	4623      	mov	r3, r4
 80039ac:	eb18 0303 	adds.w	r3, r8, r3
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	462b      	mov	r3, r5
 80039b4:	eb49 0303 	adc.w	r3, r9, r3
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039c6:	4629      	mov	r1, r5
 80039c8:	024b      	lsls	r3, r1, #9
 80039ca:	4621      	mov	r1, r4
 80039cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039d0:	4621      	mov	r1, r4
 80039d2:	024a      	lsls	r2, r1, #9
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039da:	2200      	movs	r2, #0
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039e4:	f7fc fc5c 	bl	80002a0 <__aeabi_uldivmod>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4613      	mov	r3, r2
 80039ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f0:	e058      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f2:	4b38      	ldr	r3, [pc, #224]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	2200      	movs	r2, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	4611      	mov	r1, r2
 80039fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a02:	623b      	str	r3, [r7, #32]
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	f04f 0000 	mov.w	r0, #0
 8003a14:	f04f 0100 	mov.w	r1, #0
 8003a18:	0159      	lsls	r1, r3, #5
 8003a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a1e:	0150      	lsls	r0, r2, #5
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4641      	mov	r1, r8
 8003a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a44:	ebb2 040a 	subs.w	r4, r2, sl
 8003a48:	eb63 050b 	sbc.w	r5, r3, fp
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	00eb      	lsls	r3, r5, #3
 8003a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a5a:	00e2      	lsls	r2, r4, #3
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	461d      	mov	r5, r3
 8003a60:	4643      	mov	r3, r8
 8003a62:	18e3      	adds	r3, r4, r3
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	464b      	mov	r3, r9
 8003a68:	eb45 0303 	adc.w	r3, r5, r3
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	028b      	lsls	r3, r1, #10
 8003a7e:	4621      	mov	r1, r4
 8003a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a84:	4621      	mov	r1, r4
 8003a86:	028a      	lsls	r2, r1, #10
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a8e:	2200      	movs	r2, #0
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	61fa      	str	r2, [r7, #28]
 8003a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a98:	f7fc fc02 	bl	80002a0 <__aeabi_uldivmod>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003ab4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3750      	adds	r7, #80	@ 0x50
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	00f42400 	.word	0x00f42400
 8003adc:	007a1200 	.word	0x007a1200

08003ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	@ (8003af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000000 	.word	0x20000000

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003afc:	f7ff fff0 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0a9b      	lsrs	r3, r3, #10
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4903      	ldr	r1, [pc, #12]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	080093e0 	.word	0x080093e0

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b24:	f7ff ffdc 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0b5b      	lsrs	r3, r3, #13
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4903      	ldr	r1, [pc, #12]	@ (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	080093e0 	.word	0x080093e0

08003b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e041      	b.n	8003bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fc ff9e 	bl	8000ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f000 fa7e 	bl	8004088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d001      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e04e      	b.n	8003c9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a23      	ldr	r2, [pc, #140]	@ (8003cac <HAL_TIM_Base_Start_IT+0xc4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d022      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x80>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2a:	d01d      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x80>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d018      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x80>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x80>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00e      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x80>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x80>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a19      	ldr	r2, [pc, #100]	@ (8003cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x80>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d111      	bne.n	8003c8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d010      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8a:	e007      	b.n	8003c9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40010400 	.word	0x40010400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40001800 	.word	0x40001800

08003cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d020      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01b      	beq.n	8003d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0202 	mvn.w	r2, #2
 8003cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f999 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f98b 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f99c 	bl	800405e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d020      	beq.n	8003d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01b      	beq.n	8003d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0204 	mvn.w	r2, #4
 8003d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f973 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003d64:	e005      	b.n	8003d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f965 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f976 	bl	800405e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d020      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01b      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0208 	mvn.w	r2, #8
 8003d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2204      	movs	r2, #4
 8003d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f94d 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f93f 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f950 	bl	800405e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d020      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0210 	mvn.w	r2, #16
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2208      	movs	r2, #8
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f927 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f919 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f92a 	bl	800405e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00c      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0201 	mvn.w	r2, #1
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc fd8e 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fae4 	bl	8004420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8fb 	bl	8004072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0220 	mvn.w	r2, #32
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fab6 	bl	800440c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0b4      	b.n	800402e <HAL_TIM_ConfigClockSource+0x186>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003efc:	d03e      	beq.n	8003f7c <HAL_TIM_ConfigClockSource+0xd4>
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f02:	f200 8087 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0a:	f000 8086 	beq.w	800401a <HAL_TIM_ConfigClockSource+0x172>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f12:	d87f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b70      	cmp	r3, #112	@ 0x70
 8003f16:	d01a      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0xa6>
 8003f18:	2b70      	cmp	r3, #112	@ 0x70
 8003f1a:	d87b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b60      	cmp	r3, #96	@ 0x60
 8003f1e:	d050      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f20:	2b60      	cmp	r3, #96	@ 0x60
 8003f22:	d877      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b50      	cmp	r3, #80	@ 0x50
 8003f26:	d03c      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f28:	2b50      	cmp	r3, #80	@ 0x50
 8003f2a:	d873      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d058      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f30:	2b40      	cmp	r3, #64	@ 0x40
 8003f32:	d86f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b30      	cmp	r3, #48	@ 0x30
 8003f36:	d064      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b30      	cmp	r3, #48	@ 0x30
 8003f3a:	d86b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d060      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d867      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d05c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d05a      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	e062      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f5e:	f000 f9b9 	bl	80042d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	609a      	str	r2, [r3, #8]
      break;
 8003f7a:	e04f      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f8c:	f000 f9a2 	bl	80042d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f9e:	609a      	str	r2, [r3, #8]
      break;
 8003fa0:	e03c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 f916 	bl	80041e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2150      	movs	r1, #80	@ 0x50
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f96f 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e02c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 f935 	bl	800423e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2160      	movs	r1, #96	@ 0x60
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f95f 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e01c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 f8f6 	bl	80041e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2140      	movs	r1, #64	@ 0x40
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f94f 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8004000:	e00c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f000 f946 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8004012:	e003      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      break;
 8004018:	e000      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800401a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a46      	ldr	r2, [pc, #280]	@ (80041b4 <TIM_Base_SetConfig+0x12c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a6:	d00f      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a43      	ldr	r2, [pc, #268]	@ (80041b8 <TIM_Base_SetConfig+0x130>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a42      	ldr	r2, [pc, #264]	@ (80041bc <TIM_Base_SetConfig+0x134>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a41      	ldr	r2, [pc, #260]	@ (80041c0 <TIM_Base_SetConfig+0x138>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a40      	ldr	r2, [pc, #256]	@ (80041c4 <TIM_Base_SetConfig+0x13c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a35      	ldr	r2, [pc, #212]	@ (80041b4 <TIM_Base_SetConfig+0x12c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d02b      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e8:	d027      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a32      	ldr	r2, [pc, #200]	@ (80041b8 <TIM_Base_SetConfig+0x130>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d023      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a31      	ldr	r2, [pc, #196]	@ (80041bc <TIM_Base_SetConfig+0x134>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01f      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a30      	ldr	r2, [pc, #192]	@ (80041c0 <TIM_Base_SetConfig+0x138>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01b      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2f      	ldr	r2, [pc, #188]	@ (80041c4 <TIM_Base_SetConfig+0x13c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d017      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2e      	ldr	r2, [pc, #184]	@ (80041c8 <TIM_Base_SetConfig+0x140>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a2d      	ldr	r2, [pc, #180]	@ (80041cc <TIM_Base_SetConfig+0x144>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00f      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2c      	ldr	r2, [pc, #176]	@ (80041d0 <TIM_Base_SetConfig+0x148>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00b      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2b      	ldr	r2, [pc, #172]	@ (80041d4 <TIM_Base_SetConfig+0x14c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d007      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2a      	ldr	r2, [pc, #168]	@ (80041d8 <TIM_Base_SetConfig+0x150>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a29      	ldr	r2, [pc, #164]	@ (80041dc <TIM_Base_SetConfig+0x154>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d108      	bne.n	800414c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a10      	ldr	r2, [pc, #64]	@ (80041b4 <TIM_Base_SetConfig+0x12c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0xf8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a12      	ldr	r2, [pc, #72]	@ (80041c4 <TIM_Base_SetConfig+0x13c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d103      	bne.n	8004188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b01      	cmp	r3, #1
 8004198:	d105      	bne.n	80041a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f023 0201 	bic.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	611a      	str	r2, [r3, #16]
  }
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	40000c00 	.word	0x40000c00
 80041c4:	40010400 	.word	0x40010400
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40014400 	.word	0x40014400
 80041d0:	40014800 	.word	0x40014800
 80041d4:	40001800 	.word	0x40001800
 80041d8:	40001c00 	.word	0x40001c00
 80041dc:	40002000 	.word	0x40002000

080041e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 030a 	bic.w	r3, r3, #10
 800421c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 0210 	bic.w	r2, r3, #16
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800427a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f043 0307 	orr.w	r3, r3, #7
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	021a      	lsls	r2, r3, #8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e05a      	b.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d022      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004378:	d01d      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10c      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40010400 	.word	0x40010400
 8004404:	40014000 	.word	0x40014000
 8004408:	40001800 	.word	0x40001800

0800440c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fbce 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f82b 	bl	80044d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800448c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d8:	b0c0      	sub	sp, #256	@ 0x100
 80044da:	af00      	add	r7, sp, #0
 80044dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	68d9      	ldr	r1, [r3, #12]
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	ea40 0301 	orr.w	r3, r0, r1
 80044fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	431a      	orrs	r2, r3
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	431a      	orrs	r2, r3
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800452c:	f021 010c 	bic.w	r1, r1, #12
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800453a:	430b      	orrs	r3, r1
 800453c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	6999      	ldr	r1, [r3, #24]
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	ea40 0301 	orr.w	r3, r0, r1
 800455a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b8f      	ldr	r3, [pc, #572]	@ (80047a0 <UART_SetConfig+0x2cc>)
 8004564:	429a      	cmp	r2, r3
 8004566:	d005      	beq.n	8004574 <UART_SetConfig+0xa0>
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b8d      	ldr	r3, [pc, #564]	@ (80047a4 <UART_SetConfig+0x2d0>)
 8004570:	429a      	cmp	r2, r3
 8004572:	d104      	bne.n	800457e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7ff fad4 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8004578:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800457c:	e003      	b.n	8004586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800457e:	f7ff fabb 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8004582:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004590:	f040 810c 	bne.w	80047ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004598:	2200      	movs	r2, #0
 800459a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800459e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045a6:	4622      	mov	r2, r4
 80045a8:	462b      	mov	r3, r5
 80045aa:	1891      	adds	r1, r2, r2
 80045ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045ae:	415b      	adcs	r3, r3
 80045b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045b6:	4621      	mov	r1, r4
 80045b8:	eb12 0801 	adds.w	r8, r2, r1
 80045bc:	4629      	mov	r1, r5
 80045be:	eb43 0901 	adc.w	r9, r3, r1
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045d6:	4690      	mov	r8, r2
 80045d8:	4699      	mov	r9, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	eb18 0303 	adds.w	r3, r8, r3
 80045e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045e4:	462b      	mov	r3, r5
 80045e6:	eb49 0303 	adc.w	r3, r9, r3
 80045ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004602:	460b      	mov	r3, r1
 8004604:	18db      	adds	r3, r3, r3
 8004606:	653b      	str	r3, [r7, #80]	@ 0x50
 8004608:	4613      	mov	r3, r2
 800460a:	eb42 0303 	adc.w	r3, r2, r3
 800460e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004618:	f7fb fe42 	bl	80002a0 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4b61      	ldr	r3, [pc, #388]	@ (80047a8 <UART_SetConfig+0x2d4>)
 8004622:	fba3 2302 	umull	r2, r3, r3, r2
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	011c      	lsls	r4, r3, #4
 800462a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800462e:	2200      	movs	r2, #0
 8004630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004634:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	1891      	adds	r1, r2, r2
 8004642:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004644:	415b      	adcs	r3, r3
 8004646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800464c:	4641      	mov	r1, r8
 800464e:	eb12 0a01 	adds.w	sl, r2, r1
 8004652:	4649      	mov	r1, r9
 8004654:	eb43 0b01 	adc.w	fp, r3, r1
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800466c:	4692      	mov	sl, r2
 800466e:	469b      	mov	fp, r3
 8004670:	4643      	mov	r3, r8
 8004672:	eb1a 0303 	adds.w	r3, sl, r3
 8004676:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800467a:	464b      	mov	r3, r9
 800467c:	eb4b 0303 	adc.w	r3, fp, r3
 8004680:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004690:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004698:	460b      	mov	r3, r1
 800469a:	18db      	adds	r3, r3, r3
 800469c:	643b      	str	r3, [r7, #64]	@ 0x40
 800469e:	4613      	mov	r3, r2
 80046a0:	eb42 0303 	adc.w	r3, r2, r3
 80046a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046ae:	f7fb fdf7 	bl	80002a0 <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	4b3b      	ldr	r3, [pc, #236]	@ (80047a8 <UART_SetConfig+0x2d4>)
 80046ba:	fba3 2301 	umull	r2, r3, r3, r1
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2264      	movs	r2, #100	@ 0x64
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	1acb      	subs	r3, r1, r3
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046ce:	4b36      	ldr	r3, [pc, #216]	@ (80047a8 <UART_SetConfig+0x2d4>)
 80046d0:	fba3 2302 	umull	r2, r3, r3, r2
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046dc:	441c      	add	r4, r3
 80046de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046f0:	4642      	mov	r2, r8
 80046f2:	464b      	mov	r3, r9
 80046f4:	1891      	adds	r1, r2, r2
 80046f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046f8:	415b      	adcs	r3, r3
 80046fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004700:	4641      	mov	r1, r8
 8004702:	1851      	adds	r1, r2, r1
 8004704:	6339      	str	r1, [r7, #48]	@ 0x30
 8004706:	4649      	mov	r1, r9
 8004708:	414b      	adcs	r3, r1
 800470a:	637b      	str	r3, [r7, #52]	@ 0x34
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004718:	4659      	mov	r1, fp
 800471a:	00cb      	lsls	r3, r1, #3
 800471c:	4651      	mov	r1, sl
 800471e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004722:	4651      	mov	r1, sl
 8004724:	00ca      	lsls	r2, r1, #3
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	4603      	mov	r3, r0
 800472c:	4642      	mov	r2, r8
 800472e:	189b      	adds	r3, r3, r2
 8004730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004734:	464b      	mov	r3, r9
 8004736:	460a      	mov	r2, r1
 8004738:	eb42 0303 	adc.w	r3, r2, r3
 800473c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800474c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004754:	460b      	mov	r3, r1
 8004756:	18db      	adds	r3, r3, r3
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800475a:	4613      	mov	r3, r2
 800475c:	eb42 0303 	adc.w	r3, r2, r3
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800476a:	f7fb fd99 	bl	80002a0 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <UART_SetConfig+0x2d4>)
 8004774:	fba3 1302 	umull	r1, r3, r3, r2
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	2164      	movs	r1, #100	@ 0x64
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	3332      	adds	r3, #50	@ 0x32
 8004786:	4a08      	ldr	r2, [pc, #32]	@ (80047a8 <UART_SetConfig+0x2d4>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	f003 0207 	and.w	r2, r3, #7
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4422      	add	r2, r4
 800479a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800479c:	e106      	b.n	80049ac <UART_SetConfig+0x4d8>
 800479e:	bf00      	nop
 80047a0:	40011000 	.word	0x40011000
 80047a4:	40011400 	.word	0x40011400
 80047a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047be:	4642      	mov	r2, r8
 80047c0:	464b      	mov	r3, r9
 80047c2:	1891      	adds	r1, r2, r2
 80047c4:	6239      	str	r1, [r7, #32]
 80047c6:	415b      	adcs	r3, r3
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ce:	4641      	mov	r1, r8
 80047d0:	1854      	adds	r4, r2, r1
 80047d2:	4649      	mov	r1, r9
 80047d4:	eb43 0501 	adc.w	r5, r3, r1
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	00eb      	lsls	r3, r5, #3
 80047e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047e6:	00e2      	lsls	r2, r4, #3
 80047e8:	4614      	mov	r4, r2
 80047ea:	461d      	mov	r5, r3
 80047ec:	4643      	mov	r3, r8
 80047ee:	18e3      	adds	r3, r4, r3
 80047f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047f4:	464b      	mov	r3, r9
 80047f6:	eb45 0303 	adc.w	r3, r5, r3
 80047fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800480a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800481a:	4629      	mov	r1, r5
 800481c:	008b      	lsls	r3, r1, #2
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004824:	4621      	mov	r1, r4
 8004826:	008a      	lsls	r2, r1, #2
 8004828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800482c:	f7fb fd38 	bl	80002a0 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4b60      	ldr	r3, [pc, #384]	@ (80049b8 <UART_SetConfig+0x4e4>)
 8004836:	fba3 2302 	umull	r2, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	011c      	lsls	r4, r3, #4
 800483e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004842:	2200      	movs	r2, #0
 8004844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004848:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800484c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004850:	4642      	mov	r2, r8
 8004852:	464b      	mov	r3, r9
 8004854:	1891      	adds	r1, r2, r2
 8004856:	61b9      	str	r1, [r7, #24]
 8004858:	415b      	adcs	r3, r3
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004860:	4641      	mov	r1, r8
 8004862:	1851      	adds	r1, r2, r1
 8004864:	6139      	str	r1, [r7, #16]
 8004866:	4649      	mov	r1, r9
 8004868:	414b      	adcs	r3, r1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004878:	4659      	mov	r1, fp
 800487a:	00cb      	lsls	r3, r1, #3
 800487c:	4651      	mov	r1, sl
 800487e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004882:	4651      	mov	r1, sl
 8004884:	00ca      	lsls	r2, r1, #3
 8004886:	4610      	mov	r0, r2
 8004888:	4619      	mov	r1, r3
 800488a:	4603      	mov	r3, r0
 800488c:	4642      	mov	r2, r8
 800488e:	189b      	adds	r3, r3, r2
 8004890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004894:	464b      	mov	r3, r9
 8004896:	460a      	mov	r2, r1
 8004898:	eb42 0303 	adc.w	r3, r2, r3
 800489c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048b8:	4649      	mov	r1, r9
 80048ba:	008b      	lsls	r3, r1, #2
 80048bc:	4641      	mov	r1, r8
 80048be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c2:	4641      	mov	r1, r8
 80048c4:	008a      	lsls	r2, r1, #2
 80048c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ca:	f7fb fce9 	bl	80002a0 <__aeabi_uldivmod>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4611      	mov	r1, r2
 80048d4:	4b38      	ldr	r3, [pc, #224]	@ (80049b8 <UART_SetConfig+0x4e4>)
 80048d6:	fba3 2301 	umull	r2, r3, r3, r1
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2264      	movs	r2, #100	@ 0x64
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	1acb      	subs	r3, r1, r3
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	3332      	adds	r3, #50	@ 0x32
 80048e8:	4a33      	ldr	r2, [pc, #204]	@ (80049b8 <UART_SetConfig+0x4e4>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048f4:	441c      	add	r4, r3
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048fa:	2200      	movs	r2, #0
 80048fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80048fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004900:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004904:	4642      	mov	r2, r8
 8004906:	464b      	mov	r3, r9
 8004908:	1891      	adds	r1, r2, r2
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	415b      	adcs	r3, r3
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004914:	4641      	mov	r1, r8
 8004916:	1851      	adds	r1, r2, r1
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	4649      	mov	r1, r9
 800491c:	414b      	adcs	r3, r1
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800492c:	4659      	mov	r1, fp
 800492e:	00cb      	lsls	r3, r1, #3
 8004930:	4651      	mov	r1, sl
 8004932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004936:	4651      	mov	r1, sl
 8004938:	00ca      	lsls	r2, r1, #3
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	4603      	mov	r3, r0
 8004940:	4642      	mov	r2, r8
 8004942:	189b      	adds	r3, r3, r2
 8004944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004946:	464b      	mov	r3, r9
 8004948:	460a      	mov	r2, r1
 800494a:	eb42 0303 	adc.w	r3, r2, r3
 800494e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	663b      	str	r3, [r7, #96]	@ 0x60
 800495a:	667a      	str	r2, [r7, #100]	@ 0x64
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004968:	4649      	mov	r1, r9
 800496a:	008b      	lsls	r3, r1, #2
 800496c:	4641      	mov	r1, r8
 800496e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004972:	4641      	mov	r1, r8
 8004974:	008a      	lsls	r2, r1, #2
 8004976:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800497a:	f7fb fc91 	bl	80002a0 <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <UART_SetConfig+0x4e4>)
 8004984:	fba3 1302 	umull	r1, r3, r3, r2
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	2164      	movs	r1, #100	@ 0x64
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	3332      	adds	r3, #50	@ 0x32
 8004996:	4a08      	ldr	r2, [pc, #32]	@ (80049b8 <UART_SetConfig+0x4e4>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4422      	add	r2, r4
 80049aa:	609a      	str	r2, [r3, #8]
}
 80049ac:	bf00      	nop
 80049ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049b2:	46bd      	mov	sp, r7
 80049b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b8:	51eb851f 	.word	0x51eb851f

080049bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049bc:	b084      	sub	sp, #16
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	f107 001c 	add.w	r0, r7, #28
 80049ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d123      	bne.n	8004a1e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80049ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f001 fae2 	bl	8005fdc <USB_CoreReset>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e01b      	b.n	8004a56 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f001 fad6 	bl	8005fdc <USB_CoreReset>
 8004a30:	4603      	mov	r3, r0
 8004a32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a48:	e005      	b.n	8004a56 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a56:	7fbb      	ldrb	r3, [r7, #30]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d10b      	bne.n	8004a74 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f043 0206 	orr.w	r2, r3, #6
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a80:	b004      	add	sp, #16
 8004a82:	4770      	bx	lr

08004a84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d165      	bne.n	8004b64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4a41      	ldr	r2, [pc, #260]	@ (8004ba0 <USB_SetTurnaroundTime+0x11c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d906      	bls.n	8004aae <USB_SetTurnaroundTime+0x2a>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4a40      	ldr	r2, [pc, #256]	@ (8004ba4 <USB_SetTurnaroundTime+0x120>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d202      	bcs.n	8004aae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004aa8:	230f      	movs	r3, #15
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e062      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba4 <USB_SetTurnaroundTime+0x120>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d306      	bcc.n	8004ac4 <USB_SetTurnaroundTime+0x40>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba8 <USB_SetTurnaroundTime+0x124>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d202      	bcs.n	8004ac4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004abe:	230e      	movs	r3, #14
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e057      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a38      	ldr	r2, [pc, #224]	@ (8004ba8 <USB_SetTurnaroundTime+0x124>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d306      	bcc.n	8004ada <USB_SetTurnaroundTime+0x56>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a37      	ldr	r2, [pc, #220]	@ (8004bac <USB_SetTurnaroundTime+0x128>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d202      	bcs.n	8004ada <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ad4:	230d      	movs	r3, #13
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e04c      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a33      	ldr	r2, [pc, #204]	@ (8004bac <USB_SetTurnaroundTime+0x128>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d306      	bcc.n	8004af0 <USB_SetTurnaroundTime+0x6c>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a32      	ldr	r2, [pc, #200]	@ (8004bb0 <USB_SetTurnaroundTime+0x12c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d802      	bhi.n	8004af0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004aea:	230c      	movs	r3, #12
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e041      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb0 <USB_SetTurnaroundTime+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d906      	bls.n	8004b06 <USB_SetTurnaroundTime+0x82>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb4 <USB_SetTurnaroundTime+0x130>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d802      	bhi.n	8004b06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b00:	230b      	movs	r3, #11
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e036      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	@ (8004bb4 <USB_SetTurnaroundTime+0x130>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d906      	bls.n	8004b1c <USB_SetTurnaroundTime+0x98>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a29      	ldr	r2, [pc, #164]	@ (8004bb8 <USB_SetTurnaroundTime+0x134>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d802      	bhi.n	8004b1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b16:	230a      	movs	r3, #10
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e02b      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a26      	ldr	r2, [pc, #152]	@ (8004bb8 <USB_SetTurnaroundTime+0x134>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d906      	bls.n	8004b32 <USB_SetTurnaroundTime+0xae>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a25      	ldr	r2, [pc, #148]	@ (8004bbc <USB_SetTurnaroundTime+0x138>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d202      	bcs.n	8004b32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b2c:	2309      	movs	r3, #9
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e020      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4a21      	ldr	r2, [pc, #132]	@ (8004bbc <USB_SetTurnaroundTime+0x138>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d306      	bcc.n	8004b48 <USB_SetTurnaroundTime+0xc4>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	@ (8004bc0 <USB_SetTurnaroundTime+0x13c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d802      	bhi.n	8004b48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b42:	2308      	movs	r3, #8
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e015      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc0 <USB_SetTurnaroundTime+0x13c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d906      	bls.n	8004b5e <USB_SetTurnaroundTime+0xda>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc4 <USB_SetTurnaroundTime+0x140>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d202      	bcs.n	8004b5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b58:	2307      	movs	r3, #7
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e00a      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b5e:	2306      	movs	r3, #6
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e007      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b6a:	2309      	movs	r3, #9
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e001      	b.n	8004b74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b70:	2309      	movs	r3, #9
 8004b72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	029b      	lsls	r3, r3, #10
 8004b88:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	00d8acbf 	.word	0x00d8acbf
 8004ba4:	00e4e1c0 	.word	0x00e4e1c0
 8004ba8:	00f42400 	.word	0x00f42400
 8004bac:	01067380 	.word	0x01067380
 8004bb0:	011a499f 	.word	0x011a499f
 8004bb4:	01312cff 	.word	0x01312cff
 8004bb8:	014ca43f 	.word	0x014ca43f
 8004bbc:	016e3600 	.word	0x016e3600
 8004bc0:	01a6ab1f 	.word	0x01a6ab1f
 8004bc4:	01e84800 	.word	0x01e84800

08004bc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f043 0201 	orr.w	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 0201 	bic.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d115      	bne.n	8004c5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c3a:	200a      	movs	r0, #10
 8004c3c:	f7fc fa34 	bl	80010a8 <HAL_Delay>
      ms += 10U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	330a      	adds	r3, #10
 8004c44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f001 f939 	bl	8005ebe <USB_GetMode>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d01e      	beq.n	8004c90 <USB_SetCurrentMode+0x84>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c56:	d9f0      	bls.n	8004c3a <USB_SetCurrentMode+0x2e>
 8004c58:	e01a      	b.n	8004c90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d115      	bne.n	8004c8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c6c:	200a      	movs	r0, #10
 8004c6e:	f7fc fa1b 	bl	80010a8 <HAL_Delay>
      ms += 10U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	330a      	adds	r3, #10
 8004c76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 f920 	bl	8005ebe <USB_GetMode>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <USB_SetCurrentMode+0x84>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c88:	d9f0      	bls.n	8004c6c <USB_SetCurrentMode+0x60>
 8004c8a:	e001      	b.n	8004c90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e005      	b.n	8004c9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c94:	d101      	bne.n	8004c9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e009      	b.n	8004cd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	3340      	adds	r3, #64	@ 0x40
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b0e      	cmp	r3, #14
 8004cdc:	d9f2      	bls.n	8004cc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11c      	bne.n	8004d20 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cf4:	f043 0302 	orr.w	r3, r3, #2
 8004cf8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d16:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d1e:	e00b      	b.n	8004d38 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d24:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d30:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2300      	movs	r3, #0
 8004d42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10d      	bne.n	8004d68 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d54:	2100      	movs	r1, #0
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f968 	bl	800502c <USB_SetDevSpeed>
 8004d5c:	e008      	b.n	8004d70 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d5e:	2101      	movs	r1, #1
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f963 	bl	800502c <USB_SetDevSpeed>
 8004d66:	e003      	b.n	8004d70 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d68:	2103      	movs	r1, #3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f95e 	bl	800502c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d70:	2110      	movs	r1, #16
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8fa 	bl	8004f6c <USB_FlushTxFifo>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f924 	bl	8004fd0 <USB_FlushRxFifo>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da4:	461a      	mov	r2, r3
 8004da6:	2300      	movs	r3, #0
 8004da8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	e043      	b.n	8004e44 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd2:	d118      	bne.n	8004e06 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de6:	461a      	mov	r2, r3
 8004de8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e013      	b.n	8004e18 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e008      	b.n	8004e18 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	2300      	movs	r3, #0
 8004e28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e36:	461a      	mov	r2, r3
 8004e38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	3301      	adds	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e48:	461a      	mov	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d3b5      	bcc.n	8004dbc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e043      	b.n	8004ede <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e6c:	d118      	bne.n	8004ea0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e80:	461a      	mov	r2, r3
 8004e82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e013      	b.n	8004eb2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e008      	b.n	8004eb2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eac:	461a      	mov	r2, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ed6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	3301      	adds	r3, #1
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d3b5      	bcc.n	8004e56 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004efc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004f0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f043 0210 	orr.w	r2, r3, #16
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <USB_DevInit+0x2c4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f043 0208 	orr.w	r2, r3, #8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f50:	f043 0304 	orr.w	r3, r3, #4
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f64:	b004      	add	sp, #16
 8004f66:	4770      	bx	lr
 8004f68:	803c3800 	.word	0x803c3800

08004f6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f86:	d901      	bls.n	8004f8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e01b      	b.n	8004fc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	daf2      	bge.n	8004f7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	019b      	lsls	r3, r3, #6
 8004f9c:	f043 0220 	orr.w	r2, r3, #32
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb0:	d901      	bls.n	8004fb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e006      	b.n	8004fc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d0f0      	beq.n	8004fa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fe8:	d901      	bls.n	8004fee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e018      	b.n	8005020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	daf2      	bge.n	8004fdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800500c:	d901      	bls.n	8005012 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e006      	b.n	8005020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b10      	cmp	r3, #16
 800501c:	d0f0      	beq.n	8005000 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800505e:	b480      	push	{r7}
 8005060:	b087      	sub	sp, #28
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0306 	and.w	r3, r3, #6
 8005076:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]
 8005082:	e00a      	b.n	800509a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d002      	beq.n	8005090 <USB_GetDevSpeed+0x32>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b06      	cmp	r3, #6
 800508e:	d102      	bne.n	8005096 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005090:	2302      	movs	r3, #2
 8005092:	75fb      	strb	r3, [r7, #23]
 8005094:	e001      	b.n	800509a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005096:	230f      	movs	r3, #15
 8005098:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d13a      	bne.n	800513a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	2101      	movs	r1, #1
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	b29b      	uxth	r3, r3
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d155      	bne.n	80051a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	791b      	ldrb	r3, [r3, #4]
 8005116:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005118:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	059b      	lsls	r3, r3, #22
 800511e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005120:	4313      	orrs	r3, r2
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e036      	b.n	80051a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	2101      	movs	r1, #1
 800514c:	fa01 f303 	lsl.w	r3, r1, r3
 8005150:	041b      	lsls	r3, r3, #16
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005158:	4313      	orrs	r3, r2
 800515a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11a      	bne.n	80051a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	791b      	ldrb	r3, [r3, #4]
 800518c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800518e:	430b      	orrs	r3, r1
 8005190:	4313      	orrs	r3, r2
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800519e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d161      	bne.n	8005298 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ea:	d11f      	bne.n	800522c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005206:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800520a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005226:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800522a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	2101      	movs	r1, #1
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	b29b      	uxth	r3, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800524c:	4013      	ands	r3, r2
 800524e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	68f9      	ldr	r1, [r7, #12]
 800526c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005270:	4013      	ands	r3, r2
 8005272:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	0159      	lsls	r1, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	440b      	add	r3, r1
 800528a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800528e:	4619      	mov	r1, r3
 8005290:	4b35      	ldr	r3, [pc, #212]	@ (8005368 <USB_DeactivateEndpoint+0x1b0>)
 8005292:	4013      	ands	r3, r2
 8005294:	600b      	str	r3, [r1, #0]
 8005296:	e060      	b.n	800535a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ae:	d11f      	bne.n	80052f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2101      	movs	r1, #1
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	041b      	lsls	r3, r3, #16
 8005308:	43db      	mvns	r3, r3
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005310:	4013      	ands	r3, r2
 8005312:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	43db      	mvns	r3, r3
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005334:	4013      	ands	r3, r2
 8005336:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	0159      	lsls	r1, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	440b      	add	r3, r1
 800534e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005352:	4619      	mov	r1, r3
 8005354:	4b05      	ldr	r3, [pc, #20]	@ (800536c <USB_DeactivateEndpoint+0x1b4>)
 8005356:	4013      	ands	r3, r2
 8005358:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	ec337800 	.word	0xec337800
 800536c:	eff37800 	.word	0xeff37800

08005370 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	@ 0x28
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b01      	cmp	r3, #1
 800538e:	f040 817a 	bne.w	8005686 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d132      	bne.n	8005400 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053f8:	0cdb      	lsrs	r3, r3, #19
 80053fa:	04db      	lsls	r3, r3, #19
 80053fc:	6113      	str	r3, [r2, #16]
 80053fe:	e092      	b.n	8005526 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541a:	0cdb      	lsrs	r3, r3, #19
 800541c:	04db      	lsls	r3, r3, #19
 800541e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800543a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800543e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005442:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d11a      	bne.n	8005480 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	d903      	bls.n	800545e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005478:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800547c:	6113      	str	r3, [r2, #16]
 800547e:	e01b      	b.n	80054b8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6919      	ldr	r1, [r3, #16]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	440b      	add	r3, r1
 8005498:	1e59      	subs	r1, r3, #1
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	fbb1 f3f3 	udiv	r3, r1, r3
 80054a2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054a4:	4ba2      	ldr	r3, [pc, #648]	@ (8005730 <USB_EPStartXfer+0x3c0>)
 80054a6:	400b      	ands	r3, r1
 80054a8:	69b9      	ldr	r1, [r7, #24]
 80054aa:	0148      	lsls	r0, r1, #5
 80054ac:	69f9      	ldr	r1, [r7, #28]
 80054ae:	4401      	add	r1, r0
 80054b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80054b4:	4313      	orrs	r3, r2
 80054b6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ce:	69b9      	ldr	r1, [r7, #24]
 80054d0:	0148      	lsls	r0, r1, #5
 80054d2:	69f9      	ldr	r1, [r7, #28]
 80054d4:	4401      	add	r1, r0
 80054d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80054da:	4313      	orrs	r3, r2
 80054dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	791b      	ldrb	r3, [r3, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d11f      	bne.n	8005526 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005500:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005504:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005520:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005524:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d14b      	bne.n	80055c4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005540:	461a      	mov	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	791b      	ldrb	r3, [r3, #4]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d128      	bne.n	80055a2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d110      	bne.n	8005582 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800557a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	e00f      	b.n	80055a2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800559c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e165      	b.n	8005890 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	791b      	ldrb	r3, [r3, #4]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d015      	beq.n	8005618 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 814d 	beq.w	8005890 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	2101      	movs	r1, #1
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	69f9      	ldr	r1, [r7, #28]
 800560e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005612:	4313      	orrs	r3, r2
 8005614:	634b      	str	r3, [r1, #52]	@ 0x34
 8005616:	e13b      	b.n	8005890 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d110      	bne.n	800564a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005642:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	e00f      	b.n	800566a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005668:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68d9      	ldr	r1, [r3, #12]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	b298      	uxth	r0, r3
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	4603      	mov	r3, r0
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f9b8 	bl	80059f4 <USB_WritePacket>
 8005684:	e104      	b.n	8005890 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056a0:	0cdb      	lsrs	r3, r3, #19
 80056a2:	04db      	lsls	r3, r3, #19
 80056a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80056c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80056c8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d131      	bne.n	8005734 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056fe:	69b9      	ldr	r1, [r7, #24]
 8005700:	0148      	lsls	r0, r1, #5
 8005702:	69f9      	ldr	r1, [r7, #28]
 8005704:	4401      	add	r1, r0
 8005706:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800570a:	4313      	orrs	r3, r2
 800570c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005728:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800572c:	6113      	str	r3, [r2, #16]
 800572e:	e061      	b.n	80057f4 <USB_EPStartXfer+0x484>
 8005730:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d123      	bne.n	8005784 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005752:	69b9      	ldr	r1, [r7, #24]
 8005754:	0148      	lsls	r0, r1, #5
 8005756:	69f9      	ldr	r1, [r7, #28]
 8005758:	4401      	add	r1, r0
 800575a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800575e:	4313      	orrs	r3, r2
 8005760:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800577c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005780:	6113      	str	r3, [r2, #16]
 8005782:	e037      	b.n	80057f4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4413      	add	r3, r2
 800578e:	1e5a      	subs	r2, r3, #1
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	8afa      	ldrh	r2, [r7, #22]
 80057a0:	fb03 f202 	mul.w	r2, r3, r2
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	8afb      	ldrh	r3, [r7, #22]
 80057b8:	04d9      	lsls	r1, r3, #19
 80057ba:	4b38      	ldr	r3, [pc, #224]	@ (800589c <USB_EPStartXfer+0x52c>)
 80057bc:	400b      	ands	r3, r1
 80057be:	69b9      	ldr	r1, [r7, #24]
 80057c0:	0148      	lsls	r0, r1, #5
 80057c2:	69f9      	ldr	r1, [r7, #28]
 80057c4:	4401      	add	r1, r0
 80057c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057ca:	4313      	orrs	r3, r2
 80057cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e4:	69b9      	ldr	r1, [r7, #24]
 80057e6:	0148      	lsls	r0, r1, #5
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	4401      	add	r1, r0
 80057ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057f0:	4313      	orrs	r3, r2
 80057f2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d10d      	bne.n	8005816 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	68d9      	ldr	r1, [r3, #12]
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005812:	460a      	mov	r2, r1
 8005814:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	791b      	ldrb	r3, [r3, #4]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d128      	bne.n	8005870 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d110      	bne.n	8005850 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005848:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00f      	b.n	8005870 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800586e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800588a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800588e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	1ff80000 	.word	0x1ff80000

080058a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d14a      	bne.n	8005954 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058d6:	f040 8086 	bne.w	80059e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	7812      	ldrb	r2, [r2, #0]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800591c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005920:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800592e:	4293      	cmp	r3, r2
 8005930:	d902      	bls.n	8005938 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
          break;
 8005936:	e056      	b.n	80059e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800594c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005950:	d0e7      	beq.n	8005922 <USB_EPStopXfer+0x82>
 8005952:	e048      	b.n	80059e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800596c:	d13b      	bne.n	80059e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	7812      	ldrb	r2, [r2, #0]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800598c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005990:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	7812      	ldrb	r2, [r2, #0]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d902      	bls.n	80059cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ca:	e00c      	b.n	80059e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059e4:	d0e7      	beq.n	80059b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	4611      	mov	r1, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	460b      	mov	r3, r1
 8005a04:	71fb      	strb	r3, [r7, #7]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d123      	bne.n	8005a62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a1a:	88bb      	ldrh	r3, [r7, #4]
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	e018      	b.n	8005a5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	031a      	lsls	r2, r3, #12
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a34:	461a      	mov	r2, r3
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3301      	adds	r3, #1
 8005a46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	3301      	adds	r3, #1
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d3e2      	bcc.n	8005a28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3724      	adds	r7, #36	@ 0x24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b08b      	sub	sp, #44	@ 0x2c
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	089b      	lsrs	r3, r3, #2
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	e014      	b.n	8005ac6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	3301      	adds	r3, #1
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	3301      	adds	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	623b      	str	r3, [r7, #32]
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d3e6      	bcc.n	8005a9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ace:	8bfb      	ldrh	r3, [r7, #30]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01e      	beq.n	8005b12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f107 0310 	add.w	r3, r7, #16
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	701a      	strb	r2, [r3, #0]
      i++;
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	3301      	adds	r3, #1
 8005afe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	3301      	adds	r3, #1
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b06:	8bfb      	ldrh	r3, [r7, #30]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b0c:	8bfb      	ldrh	r3, [r7, #30]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1ea      	bne.n	8005ae8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	372c      	adds	r7, #44	@ 0x2c
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d12c      	bne.n	8005b96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	db12      	blt.n	8005b74 <USB_EPSetStall+0x54>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00f      	beq.n	8005b74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	e02b      	b.n	8005bee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	db12      	blt.n	8005bce <USB_EPSetStall+0xae>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00f      	beq.n	8005bce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d128      	bne.n	8005c6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	791b      	ldrb	r3, [r3, #4]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d003      	beq.n	8005c48 <USB_EPClearStall+0x4c>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	791b      	ldrb	r3, [r3, #4]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d138      	bne.n	8005cba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	e027      	b.n	8005cba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	791b      	ldrb	r3, [r3, #4]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d003      	beq.n	8005c9a <USB_EPClearStall+0x9e>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	791b      	ldrb	r3, [r3, #4]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d10f      	bne.n	8005cba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ce6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005cea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d42:	f023 0302 	bic.w	r3, r3, #2
 8005d46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d70:	f023 0303 	bic.w	r3, r3, #3
 8005d74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d84:	f043 0302 	orr.w	r3, r3, #2
 8005d88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005db0:	68fb      	ldr	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	0c1b      	lsrs	r3, r3, #16
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	b29b      	uxth	r3, r3
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4013      	ands	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e54:	68bb      	ldr	r3, [r7, #8]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e92:	01db      	lsls	r3, r3, #7
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4013      	ands	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0301 	and.w	r3, r3, #1
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ef4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ef8:	f023 0307 	bic.w	r3, r3, #7
 8005efc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	333c      	adds	r3, #60	@ 0x3c
 8005f36:	3304      	adds	r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4a26      	ldr	r2, [pc, #152]	@ (8005fd8 <USB_EP0_OutStart+0xb8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d90a      	bls.n	8005f5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f54:	d101      	bne.n	8005f5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e037      	b.n	8005fca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f60:	461a      	mov	r2, r3
 8005f62:	2300      	movs	r3, #0
 8005f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f88:	f043 0318 	orr.w	r3, r3, #24
 8005f8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f9c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005fa0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d10f      	bne.n	8005fc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fc2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005fc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	4f54300a 	.word	0x4f54300a

08005fdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ff4:	d901      	bls.n	8005ffa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e01b      	b.n	8006032 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	daf2      	bge.n	8005fe8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f043 0201 	orr.w	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800601e:	d901      	bls.n	8006024 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e006      	b.n	8006032 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d0f0      	beq.n	8006012 <USB_CoreReset+0x36>

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800604c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006050:	f002 fca0 	bl	8008994 <USBD_static_malloc>
 8006054:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	32b0      	adds	r2, #176	@ 0xb0
 8006066:	2100      	movs	r1, #0
 8006068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800606c:	2302      	movs	r3, #2
 800606e:	e0d4      	b.n	800621a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006070:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006074:	2100      	movs	r1, #0
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f002 fcf0 	bl	8008a5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	32b0      	adds	r2, #176	@ 0xb0
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	32b0      	adds	r2, #176	@ 0xb0
 8006096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	7c1b      	ldrb	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d138      	bne.n	800611a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006224 <USBD_CDC_Init+0x1e4>)
 80060aa:	7819      	ldrb	r1, [r3, #0]
 80060ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060b0:	2202      	movs	r2, #2
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f002 fb4b 	bl	800874e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006224 <USBD_CDC_Init+0x1e4>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3324      	adds	r3, #36	@ 0x24
 80060ce:	2201      	movs	r2, #1
 80060d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060d2:	4b55      	ldr	r3, [pc, #340]	@ (8006228 <USBD_CDC_Init+0x1e8>)
 80060d4:	7819      	ldrb	r1, [r3, #0]
 80060d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060da:	2202      	movs	r2, #2
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f002 fb36 	bl	800874e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060e2:	4b51      	ldr	r3, [pc, #324]	@ (8006228 <USBD_CDC_Init+0x1e8>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060fa:	2201      	movs	r2, #1
 80060fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060fe:	4b4b      	ldr	r3, [pc, #300]	@ (800622c <USBD_CDC_Init+0x1ec>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	f003 020f 	and.w	r2, r3, #15
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	3326      	adds	r3, #38	@ 0x26
 8006114:	2210      	movs	r2, #16
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	e035      	b.n	8006186 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800611a:	4b42      	ldr	r3, [pc, #264]	@ (8006224 <USBD_CDC_Init+0x1e4>)
 800611c:	7819      	ldrb	r1, [r3, #0]
 800611e:	2340      	movs	r3, #64	@ 0x40
 8006120:	2202      	movs	r2, #2
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f002 fb13 	bl	800874e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006128:	4b3e      	ldr	r3, [pc, #248]	@ (8006224 <USBD_CDC_Init+0x1e4>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	3324      	adds	r3, #36	@ 0x24
 800613e:	2201      	movs	r2, #1
 8006140:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006142:	4b39      	ldr	r3, [pc, #228]	@ (8006228 <USBD_CDC_Init+0x1e8>)
 8006144:	7819      	ldrb	r1, [r3, #0]
 8006146:	2340      	movs	r3, #64	@ 0x40
 8006148:	2202      	movs	r2, #2
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f002 faff 	bl	800874e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006150:	4b35      	ldr	r3, [pc, #212]	@ (8006228 <USBD_CDC_Init+0x1e8>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 020f 	and.w	r2, r3, #15
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006168:	2201      	movs	r2, #1
 800616a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800616c:	4b2f      	ldr	r3, [pc, #188]	@ (800622c <USBD_CDC_Init+0x1ec>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3326      	adds	r3, #38	@ 0x26
 8006182:	2210      	movs	r2, #16
 8006184:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006186:	4b29      	ldr	r3, [pc, #164]	@ (800622c <USBD_CDC_Init+0x1ec>)
 8006188:	7819      	ldrb	r1, [r3, #0]
 800618a:	2308      	movs	r3, #8
 800618c:	2203      	movs	r2, #3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f002 fadd 	bl	800874e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006194:	4b25      	ldr	r3, [pc, #148]	@ (800622c <USBD_CDC_Init+0x1ec>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	3324      	adds	r3, #36	@ 0x24
 80061aa:	2201      	movs	r2, #1
 80061ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	33b0      	adds	r3, #176	@ 0xb0
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80061e4:	2302      	movs	r3, #2
 80061e6:	e018      	b.n	800621a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7c1b      	ldrb	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <USBD_CDC_Init+0x1e8>)
 80061f2:	7819      	ldrb	r1, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f002 fb94 	bl	800892c <USBD_LL_PrepareReceive>
 8006204:	e008      	b.n	8006218 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006206:	4b08      	ldr	r3, [pc, #32]	@ (8006228 <USBD_CDC_Init+0x1e8>)
 8006208:	7819      	ldrb	r1, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006210:	2340      	movs	r3, #64	@ 0x40
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f002 fb8a 	bl	800892c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000093 	.word	0x20000093
 8006228:	20000094 	.word	0x20000094
 800622c:	20000095 	.word	0x20000095

08006230 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800623c:	4b3a      	ldr	r3, [pc, #232]	@ (8006328 <USBD_CDC_DeInit+0xf8>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f002 faa9 	bl	800879a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006248:	4b37      	ldr	r3, [pc, #220]	@ (8006328 <USBD_CDC_DeInit+0xf8>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	3324      	adds	r3, #36	@ 0x24
 800625e:	2200      	movs	r2, #0
 8006260:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006262:	4b32      	ldr	r3, [pc, #200]	@ (800632c <USBD_CDC_DeInit+0xfc>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f002 fa96 	bl	800879a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800626e:	4b2f      	ldr	r3, [pc, #188]	@ (800632c <USBD_CDC_DeInit+0xfc>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 020f 	and.w	r2, r3, #15
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006286:	2200      	movs	r2, #0
 8006288:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800628a:	4b29      	ldr	r3, [pc, #164]	@ (8006330 <USBD_CDC_DeInit+0x100>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f002 fa82 	bl	800879a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006296:	4b26      	ldr	r3, [pc, #152]	@ (8006330 <USBD_CDC_DeInit+0x100>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f003 020f 	and.w	r2, r3, #15
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	3324      	adds	r3, #36	@ 0x24
 80062ac:	2200      	movs	r2, #0
 80062ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80062b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006330 <USBD_CDC_DeInit+0x100>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	3326      	adds	r3, #38	@ 0x26
 80062c6:	2200      	movs	r2, #0
 80062c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	32b0      	adds	r2, #176	@ 0xb0
 80062d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01f      	beq.n	800631c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	33b0      	adds	r3, #176	@ 0xb0
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32b0      	adds	r2, #176	@ 0xb0
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	4618      	mov	r0, r3
 8006300:	f002 fb56 	bl	80089b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	32b0      	adds	r2, #176	@ 0xb0
 800630e:	2100      	movs	r1, #0
 8006310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000093 	.word	0x20000093
 800632c:	20000094 	.word	0x20000094
 8006330:	20000095 	.word	0x20000095

08006334 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	32b0      	adds	r2, #176	@ 0xb0
 8006348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	e0bf      	b.n	80064e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800636c:	2b00      	cmp	r3, #0
 800636e:	d050      	beq.n	8006412 <USBD_CDC_Setup+0xde>
 8006370:	2b20      	cmp	r3, #32
 8006372:	f040 80af 	bne.w	80064d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	88db      	ldrh	r3, [r3, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03a      	beq.n	80063f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	b25b      	sxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	da1b      	bge.n	80063c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	33b0      	adds	r3, #176	@ 0xb0
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800639e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	88d2      	ldrh	r2, [r2, #6]
 80063a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	88db      	ldrh	r3, [r3, #6]
 80063aa:	2b07      	cmp	r3, #7
 80063ac:	bf28      	it	cs
 80063ae:	2307      	movcs	r3, #7
 80063b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	89fa      	ldrh	r2, [r7, #14]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 fd87 	bl	8007ecc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80063be:	e090      	b.n	80064e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	785a      	ldrb	r2, [r3, #1]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	88db      	ldrh	r3, [r3, #6]
 80063ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80063d0:	d803      	bhi.n	80063da <USBD_CDC_Setup+0xa6>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	88db      	ldrh	r3, [r3, #6]
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	e000      	b.n	80063dc <USBD_CDC_Setup+0xa8>
 80063da:	2240      	movs	r2, #64	@ 0x40
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80063e2:	6939      	ldr	r1, [r7, #16]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80063ea:	461a      	mov	r2, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fd99 	bl	8007f24 <USBD_CtlPrepareRx>
      break;
 80063f2:	e076      	b.n	80064e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	33b0      	adds	r3, #176	@ 0xb0
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	7850      	ldrb	r0, [r2, #1]
 800640a:	2200      	movs	r2, #0
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	4798      	blx	r3
      break;
 8006410:	e067      	b.n	80064e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b0b      	cmp	r3, #11
 8006418:	d851      	bhi.n	80064be <USBD_CDC_Setup+0x18a>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <USBD_CDC_Setup+0xec>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006451 	.word	0x08006451
 8006424:	080064cd 	.word	0x080064cd
 8006428:	080064bf 	.word	0x080064bf
 800642c:	080064bf 	.word	0x080064bf
 8006430:	080064bf 	.word	0x080064bf
 8006434:	080064bf 	.word	0x080064bf
 8006438:	080064bf 	.word	0x080064bf
 800643c:	080064bf 	.word	0x080064bf
 8006440:	080064bf 	.word	0x080064bf
 8006444:	080064bf 	.word	0x080064bf
 8006448:	0800647b 	.word	0x0800647b
 800644c:	080064a5 	.word	0x080064a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b03      	cmp	r3, #3
 800645a:	d107      	bne.n	800646c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800645c:	f107 030a 	add.w	r3, r7, #10
 8006460:	2202      	movs	r2, #2
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 fd31 	bl	8007ecc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800646a:	e032      	b.n	80064d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fcbb 	bl	8007dea <USBD_CtlError>
            ret = USBD_FAIL;
 8006474:	2303      	movs	r3, #3
 8006476:	75fb      	strb	r3, [r7, #23]
          break;
 8006478:	e02b      	b.n	80064d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b03      	cmp	r3, #3
 8006484:	d107      	bne.n	8006496 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006486:	f107 030d 	add.w	r3, r7, #13
 800648a:	2201      	movs	r2, #1
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 fd1c 	bl	8007ecc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006494:	e01d      	b.n	80064d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fca6 	bl	8007dea <USBD_CtlError>
            ret = USBD_FAIL;
 800649e:	2303      	movs	r3, #3
 80064a0:	75fb      	strb	r3, [r7, #23]
          break;
 80064a2:	e016      	b.n	80064d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d00f      	beq.n	80064d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 fc99 	bl	8007dea <USBD_CtlError>
            ret = USBD_FAIL;
 80064b8:	2303      	movs	r3, #3
 80064ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064bc:	e008      	b.n	80064d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 fc92 	bl	8007dea <USBD_CtlError>
          ret = USBD_FAIL;
 80064c6:	2303      	movs	r3, #3
 80064c8:	75fb      	strb	r3, [r7, #23]
          break;
 80064ca:	e002      	b.n	80064d2 <USBD_CDC_Setup+0x19e>
          break;
 80064cc:	bf00      	nop
 80064ce:	e008      	b.n	80064e2 <USBD_CDC_Setup+0x1ae>
          break;
 80064d0:	bf00      	nop
      }
      break;
 80064d2:	e006      	b.n	80064e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fc87 	bl	8007dea <USBD_CtlError>
      ret = USBD_FAIL;
 80064dc:	2303      	movs	r3, #3
 80064de:	75fb      	strb	r3, [r7, #23]
      break;
 80064e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	32b0      	adds	r2, #176	@ 0xb0
 800650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006512:	2303      	movs	r3, #3
 8006514:	e065      	b.n	80065e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	32b0      	adds	r2, #176	@ 0xb0
 8006520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006524:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	f003 020f 	and.w	r2, r3, #15
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	3318      	adds	r3, #24
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d02f      	beq.n	80065a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	3318      	adds	r3, #24
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	f003 010f 	and.w	r1, r3, #15
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	460b      	mov	r3, r1
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	440b      	add	r3, r1
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4403      	add	r3, r0
 8006568:	331c      	adds	r3, #28
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006570:	fb01 f303 	mul.w	r3, r1, r3
 8006574:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006576:	2b00      	cmp	r3, #0
 8006578:	d112      	bne.n	80065a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	3318      	adds	r3, #24
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006592:	78f9      	ldrb	r1, [r7, #3]
 8006594:	2300      	movs	r3, #0
 8006596:	2200      	movs	r2, #0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f002 f9a6 	bl	80088ea <USBD_LL_Transmit>
 800659e:	e01f      	b.n	80065e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	33b0      	adds	r3, #176	@ 0xb0
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d010      	beq.n	80065e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	33b0      	adds	r3, #176	@ 0xb0
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	32b0      	adds	r2, #176	@ 0xb0
 8006600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006604:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	32b0      	adds	r2, #176	@ 0xb0
 8006610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006618:	2303      	movs	r3, #3
 800661a:	e01a      	b.n	8006652 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f002 f9a4 	bl	800896e <USBD_LL_GetRxDataSize>
 8006626:	4602      	mov	r2, r0
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	33b0      	adds	r3, #176	@ 0xb0
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800664c:	4611      	mov	r1, r2
 800664e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	32b0      	adds	r2, #176	@ 0xb0
 800666c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006670:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006678:	2303      	movs	r3, #3
 800667a:	e024      	b.n	80066c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	33b0      	adds	r3, #176	@ 0xb0
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d019      	beq.n	80066c4 <USBD_CDC_EP0_RxReady+0x6a>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006696:	2bff      	cmp	r3, #255	@ 0xff
 8006698:	d014      	beq.n	80066c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	33b0      	adds	r3, #176	@ 0xb0
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80066b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	22ff      	movs	r2, #255	@ 0xff
 80066c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066d8:	2182      	movs	r1, #130	@ 0x82
 80066da:	4818      	ldr	r0, [pc, #96]	@ (800673c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066dc:	f000 fd4f 	bl	800717e <USBD_GetEpDesc>
 80066e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066e2:	2101      	movs	r1, #1
 80066e4:	4815      	ldr	r0, [pc, #84]	@ (800673c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066e6:	f000 fd4a 	bl	800717e <USBD_GetEpDesc>
 80066ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066ec:	2181      	movs	r1, #129	@ 0x81
 80066ee:	4813      	ldr	r0, [pc, #76]	@ (800673c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066f0:	f000 fd45 	bl	800717e <USBD_GetEpDesc>
 80066f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2210      	movs	r2, #16
 8006700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	2200      	movs	r2, #0
 800670c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006710:	711a      	strb	r2, [r3, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d006      	beq.n	800672a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006724:	711a      	strb	r2, [r3, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2243      	movs	r2, #67	@ 0x43
 800672e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006730:	4b02      	ldr	r3, [pc, #8]	@ (800673c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000050 	.word	0x20000050

08006740 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006748:	2182      	movs	r1, #130	@ 0x82
 800674a:	4818      	ldr	r0, [pc, #96]	@ (80067ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800674c:	f000 fd17 	bl	800717e <USBD_GetEpDesc>
 8006750:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006752:	2101      	movs	r1, #1
 8006754:	4815      	ldr	r0, [pc, #84]	@ (80067ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006756:	f000 fd12 	bl	800717e <USBD_GetEpDesc>
 800675a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800675c:	2181      	movs	r1, #129	@ 0x81
 800675e:	4813      	ldr	r0, [pc, #76]	@ (80067ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006760:	f000 fd0d 	bl	800717e <USBD_GetEpDesc>
 8006764:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2210      	movs	r2, #16
 8006770:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2200      	movs	r2, #0
 800677c:	711a      	strb	r2, [r3, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f042 0202 	orr.w	r2, r2, #2
 8006784:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	711a      	strb	r2, [r3, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f042 0202 	orr.w	r2, r2, #2
 8006798:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2243      	movs	r2, #67	@ 0x43
 800679e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067a0:	4b02      	ldr	r3, [pc, #8]	@ (80067ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000050 	.word	0x20000050

080067b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067b8:	2182      	movs	r1, #130	@ 0x82
 80067ba:	4818      	ldr	r0, [pc, #96]	@ (800681c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067bc:	f000 fcdf 	bl	800717e <USBD_GetEpDesc>
 80067c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067c2:	2101      	movs	r1, #1
 80067c4:	4815      	ldr	r0, [pc, #84]	@ (800681c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067c6:	f000 fcda 	bl	800717e <USBD_GetEpDesc>
 80067ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067cc:	2181      	movs	r1, #129	@ 0x81
 80067ce:	4813      	ldr	r0, [pc, #76]	@ (800681c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067d0:	f000 fcd5 	bl	800717e <USBD_GetEpDesc>
 80067d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2210      	movs	r2, #16
 80067e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067f0:	711a      	strb	r2, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006804:	711a      	strb	r2, [r3, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2243      	movs	r2, #67	@ 0x43
 800680e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006810:	4b02      	ldr	r3, [pc, #8]	@ (800681c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000050 	.word	0x20000050

08006820 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	220a      	movs	r2, #10
 800682c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800682e:	4b03      	ldr	r3, [pc, #12]	@ (800683c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	2000000c 	.word	0x2000000c

08006840 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006850:	2303      	movs	r3, #3
 8006852:	e009      	b.n	8006868 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	33b0      	adds	r3, #176	@ 0xb0
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	32b0      	adds	r2, #176	@ 0xb0
 800688a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006896:	2303      	movs	r3, #3
 8006898:	e008      	b.n	80068ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	32b0      	adds	r2, #176	@ 0xb0
 80068cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80068d8:	2303      	movs	r3, #3
 80068da:	e004      	b.n	80068e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	32b0      	adds	r2, #176	@ 0xb0
 8006906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006916:	2303      	movs	r3, #3
 8006918:	e025      	b.n	8006966 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006920:	2b00      	cmp	r3, #0
 8006922:	d11f      	bne.n	8006964 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2201      	movs	r2, #1
 8006928:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800692c:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <USBD_CDC_TransmitPacket+0x7c>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4403      	add	r3, r0
 8006946:	3318      	adds	r3, #24
 8006948:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800694a:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <USBD_CDC_TransmitPacket+0x7c>)
 800694c:	7819      	ldrb	r1, [r3, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 ffc5 	bl	80088ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000093 	.word	0x20000093

08006974 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	32b0      	adds	r2, #176	@ 0xb0
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	32b0      	adds	r2, #176	@ 0xb0
 8006996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800699e:	2303      	movs	r3, #3
 80069a0:	e018      	b.n	80069d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	7c1b      	ldrb	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069aa:	4b0c      	ldr	r3, [pc, #48]	@ (80069dc <USBD_CDC_ReceivePacket+0x68>)
 80069ac:	7819      	ldrb	r1, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 ffb7 	bl	800892c <USBD_LL_PrepareReceive>
 80069be:	e008      	b.n	80069d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069c0:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <USBD_CDC_ReceivePacket+0x68>)
 80069c2:	7819      	ldrb	r1, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069ca:	2340      	movs	r3, #64	@ 0x40
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 ffad 	bl	800892c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000094 	.word	0x20000094

080069e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e01f      	b.n	8006a38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	79fa      	ldrb	r2, [r7, #7]
 8006a2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f001 fe27 	bl	8008680 <USBD_LL_Init>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e025      	b.n	8006aa4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	32ae      	adds	r2, #174	@ 0xae
 8006a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00f      	beq.n	8006a94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	32ae      	adds	r2, #174	@ 0xae
 8006a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a84:	f107 020e 	add.w	r2, r7, #14
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fe2f 	bl	8008718 <USBD_LL_Start>
 8006aba:	4603      	mov	r3, r0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006acc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	4611      	mov	r1, r2
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 f90c 	bl	8007d76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d01a      	beq.n	8006bb8 <USBD_LL_SetupStage+0x72>
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d822      	bhi.n	8006bcc <USBD_LL_SetupStage+0x86>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <USBD_LL_SetupStage+0x4a>
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d00a      	beq.n	8006ba4 <USBD_LL_SetupStage+0x5e>
 8006b8e:	e01d      	b.n	8006bcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb63 	bl	8007264 <USBD_StdDevReq>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba2:	e020      	b.n	8006be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fbcb 	bl	8007348 <USBD_StdItfReq>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb6:	e016      	b.n	8006be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fc2d 	bl	8007420 <USBD_StdEPReq>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bca:	e00c      	b.n	8006be6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006bd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fdfc 	bl	80087d8 <USBD_LL_StallEP>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
      break;
 8006be4:	bf00      	nop
  }

  return ret;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d16e      	bne.n	8006ce6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	f040 8098 	bne.w	8006d4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d913      	bls.n	8006c50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	1ad2      	subs	r2, r2, r3
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	bf28      	it	cs
 8006c42:	4613      	movcs	r3, r2
 8006c44:	461a      	mov	r2, r3
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f001 f988 	bl	8007f5e <USBD_CtlContinueRx>
 8006c4e:	e07d      	b.n	8006d4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006c56:	f003 031f 	and.w	r3, r3, #31
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d014      	beq.n	8006c88 <USBD_LL_DataOutStage+0x98>
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d81d      	bhi.n	8006c9e <USBD_LL_DataOutStage+0xae>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <USBD_LL_DataOutStage+0x7c>
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d003      	beq.n	8006c72 <USBD_LL_DataOutStage+0x82>
 8006c6a:	e018      	b.n	8006c9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75bb      	strb	r3, [r7, #22]
            break;
 8006c70:	e018      	b.n	8006ca4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fa64 	bl	800714a <USBD_CoreFindIF>
 8006c82:	4603      	mov	r3, r0
 8006c84:	75bb      	strb	r3, [r7, #22]
            break;
 8006c86:	e00d      	b.n	8006ca4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	4619      	mov	r1, r3
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fa66 	bl	8007164 <USBD_CoreFindEP>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	75bb      	strb	r3, [r7, #22]
            break;
 8006c9c:	e002      	b.n	8006ca4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ca2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ca4:	7dbb      	ldrb	r3, [r7, #22]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d119      	bne.n	8006cde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d113      	bne.n	8006cde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006cb6:	7dba      	ldrb	r2, [r7, #22]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	32ae      	adds	r2, #174	@ 0xae
 8006cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006cc6:	7dba      	ldrb	r2, [r7, #22]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006cce:	7dba      	ldrb	r2, [r7, #22]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	32ae      	adds	r2, #174	@ 0xae
 8006cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f001 f94e 	bl	8007f80 <USBD_CtlSendStatus>
 8006ce4:	e032      	b.n	8006d4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	4619      	mov	r1, r3
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fa37 	bl	8007164 <USBD_CoreFindEP>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cfa:	7dbb      	ldrb	r3, [r7, #22]
 8006cfc:	2bff      	cmp	r3, #255	@ 0xff
 8006cfe:	d025      	beq.n	8006d4c <USBD_LL_DataOutStage+0x15c>
 8006d00:	7dbb      	ldrb	r3, [r7, #22]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d122      	bne.n	8006d4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d117      	bne.n	8006d42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d12:	7dba      	ldrb	r2, [r7, #22]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	32ae      	adds	r2, #174	@ 0xae
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00f      	beq.n	8006d42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d22:	7dba      	ldrb	r2, [r7, #22]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d2a:	7dba      	ldrb	r2, [r7, #22]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	32ae      	adds	r2, #174	@ 0xae
 8006d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	7afa      	ldrb	r2, [r7, #11]
 8006d38:	4611      	mov	r1, r2
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	e000      	b.n	8006d4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b086      	sub	sp, #24
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d16f      	bne.n	8006e4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3314      	adds	r3, #20
 8006d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d15a      	bne.n	8006e30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d914      	bls.n	8006db0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f001 f8b0 	bl	8007f02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006da2:	2300      	movs	r3, #0
 8006da4:	2200      	movs	r2, #0
 8006da6:	2100      	movs	r1, #0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f001 fdbf 	bl	800892c <USBD_LL_PrepareReceive>
 8006dae:	e03f      	b.n	8006e30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d11c      	bne.n	8006df6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d316      	bcc.n	8006df6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d20f      	bcs.n	8006df6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2100      	movs	r1, #0
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 f891 	bl	8007f02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006de8:	2300      	movs	r3, #0
 8006dea:	2200      	movs	r2, #0
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f001 fd9c 	bl	800892c <USBD_LL_PrepareReceive>
 8006df4:	e01c      	b.n	8006e30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d10f      	bne.n	8006e22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e22:	2180      	movs	r1, #128	@ 0x80
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f001 fcd7 	bl	80087d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f001 f8bb 	bl	8007fa6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d03a      	beq.n	8006eb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fe42 	bl	8006ac4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006e48:	e032      	b.n	8006eb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e4a:	7afb      	ldrb	r3, [r7, #11]
 8006e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f985 	bl	8007164 <USBD_CoreFindEP>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	2bff      	cmp	r3, #255	@ 0xff
 8006e62:	d025      	beq.n	8006eb0 <USBD_LL_DataInStage+0x15a>
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d122      	bne.n	8006eb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d11c      	bne.n	8006eb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e76:	7dfa      	ldrb	r2, [r7, #23]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	32ae      	adds	r2, #174	@ 0xae
 8006e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d014      	beq.n	8006eb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e86:	7dfa      	ldrb	r2, [r7, #23]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e8e:	7dfa      	ldrb	r2, [r7, #23]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	32ae      	adds	r2, #174	@ 0xae
 8006e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	7afa      	ldrb	r2, [r7, #11]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	4798      	blx	r3
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006ea6:	7dbb      	ldrb	r3, [r7, #22]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006eac:	7dbb      	ldrb	r3, [r7, #22]
 8006eae:	e000      	b.n	8006eb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d014      	beq.n	8006f20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6852      	ldr	r2, [r2, #4]
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	4611      	mov	r1, r2
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f20:	2340      	movs	r3, #64	@ 0x40
 8006f22:	2200      	movs	r2, #0
 8006f24:	2100      	movs	r1, #0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fc11 	bl	800874e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2240      	movs	r2, #64	@ 0x40
 8006f38:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f3c:	2340      	movs	r3, #64	@ 0x40
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2180      	movs	r1, #128	@ 0x80
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fc03 	bl	800874e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2240      	movs	r2, #64	@ 0x40
 8006f52:	621a      	str	r2, [r3, #32]

  return ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	78fa      	ldrb	r2, [r7, #3]
 8006f6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d006      	beq.n	8006fa0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d106      	bne.n	8006fd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d110      	bne.n	800701c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00b      	beq.n	800701c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	32ae      	adds	r2, #174	@ 0xae
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	e01c      	b.n	8007082 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b03      	cmp	r3, #3
 8007052:	d115      	bne.n	8007080 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	32ae      	adds	r2, #174	@ 0xae
 800705e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	32ae      	adds	r2, #174	@ 0xae
 8007072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4611      	mov	r1, r2
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	460b      	mov	r3, r1
 8007094:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	32ae      	adds	r2, #174	@ 0xae
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e01c      	b.n	80070e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d115      	bne.n	80070e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	32ae      	adds	r2, #174	@ 0xae
 80070c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00b      	beq.n	80070e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	32ae      	adds	r2, #174	@ 0xae
 80070d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	78fa      	ldrb	r2, [r7, #3]
 80070de:	4611      	mov	r1, r2
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6852      	ldr	r2, [r2, #4]
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	4611      	mov	r1, r2
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007156:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007170:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	885b      	ldrh	r3, [r3, #2]
 800719a:	b29b      	uxth	r3, r3
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	7812      	ldrb	r2, [r2, #0]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d91f      	bls.n	80071e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80071aa:	e013      	b.n	80071d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80071ac:	f107 030a 	add.w	r3, r7, #10
 80071b0:	4619      	mov	r1, r3
 80071b2:	6978      	ldr	r0, [r7, #20]
 80071b4:	f000 f81b 	bl	80071ee <USBD_GetNextDesc>
 80071b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b05      	cmp	r3, #5
 80071c0:	d108      	bne.n	80071d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	789b      	ldrb	r3, [r3, #2]
 80071ca:	78fa      	ldrb	r2, [r7, #3]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d008      	beq.n	80071e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	885b      	ldrh	r3, [r3, #2]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	897b      	ldrh	r3, [r7, #10]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d8e5      	bhi.n	80071ac <USBD_GetEpDesc+0x2e>
 80071e0:	e000      	b.n	80071e4 <USBD_GetEpDesc+0x66>
          break;
 80071e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80071e4:	693b      	ldr	r3, [r7, #16]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	4413      	add	r3, r2
 8007206:	b29a      	uxth	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4413      	add	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007218:	68fb      	ldr	r3, [r7, #12]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007226:	b480      	push	{r7}
 8007228:	b087      	sub	sp, #28
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	3301      	adds	r3, #1
 800723c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007244:	8a3b      	ldrh	r3, [r7, #16]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	b21a      	sxth	r2, r3
 800724a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800724e:	4313      	orrs	r3, r2
 8007250:	b21b      	sxth	r3, r3
 8007252:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007254:	89fb      	ldrh	r3, [r7, #14]
}
 8007256:	4618      	mov	r0, r3
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800727a:	2b40      	cmp	r3, #64	@ 0x40
 800727c:	d005      	beq.n	800728a <USBD_StdDevReq+0x26>
 800727e:	2b40      	cmp	r3, #64	@ 0x40
 8007280:	d857      	bhi.n	8007332 <USBD_StdDevReq+0xce>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00f      	beq.n	80072a6 <USBD_StdDevReq+0x42>
 8007286:	2b20      	cmp	r3, #32
 8007288:	d153      	bne.n	8007332 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	32ae      	adds	r2, #174	@ 0xae
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]
      break;
 80072a4:	e04a      	b.n	800733c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	2b09      	cmp	r3, #9
 80072ac:	d83b      	bhi.n	8007326 <USBD_StdDevReq+0xc2>
 80072ae:	a201      	add	r2, pc, #4	@ (adr r2, 80072b4 <USBD_StdDevReq+0x50>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	08007309 	.word	0x08007309
 80072b8:	0800731d 	.word	0x0800731d
 80072bc:	08007327 	.word	0x08007327
 80072c0:	08007313 	.word	0x08007313
 80072c4:	08007327 	.word	0x08007327
 80072c8:	080072e7 	.word	0x080072e7
 80072cc:	080072dd 	.word	0x080072dd
 80072d0:	08007327 	.word	0x08007327
 80072d4:	080072ff 	.word	0x080072ff
 80072d8:	080072f1 	.word	0x080072f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa3c 	bl	800775c <USBD_GetDescriptor>
          break;
 80072e4:	e024      	b.n	8007330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fba1 	bl	8007a30 <USBD_SetAddress>
          break;
 80072ee:	e01f      	b.n	8007330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fbe0 	bl	8007ab8 <USBD_SetConfig>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
          break;
 80072fc:	e018      	b.n	8007330 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc83 	bl	8007c0c <USBD_GetConfig>
          break;
 8007306:	e013      	b.n	8007330 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fcb4 	bl	8007c78 <USBD_GetStatus>
          break;
 8007310:	e00e      	b.n	8007330 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fce3 	bl	8007ce0 <USBD_SetFeature>
          break;
 800731a:	e009      	b.n	8007330 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fd07 	bl	8007d32 <USBD_ClrFeature>
          break;
 8007324:	e004      	b.n	8007330 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fd5e 	bl	8007dea <USBD_CtlError>
          break;
 800732e:	bf00      	nop
      }
      break;
 8007330:	e004      	b.n	800733c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fd58 	bl	8007dea <USBD_CtlError>
      break;
 800733a:	bf00      	nop
  }

  return ret;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800735e:	2b40      	cmp	r3, #64	@ 0x40
 8007360:	d005      	beq.n	800736e <USBD_StdItfReq+0x26>
 8007362:	2b40      	cmp	r3, #64	@ 0x40
 8007364:	d852      	bhi.n	800740c <USBD_StdItfReq+0xc4>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <USBD_StdItfReq+0x26>
 800736a:	2b20      	cmp	r3, #32
 800736c:	d14e      	bne.n	800740c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007374:	b2db      	uxtb	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	2b02      	cmp	r3, #2
 800737a:	d840      	bhi.n	80073fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	889b      	ldrh	r3, [r3, #4]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b01      	cmp	r3, #1
 8007384:	d836      	bhi.n	80073f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	889b      	ldrh	r3, [r3, #4]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff fedb 	bl	800714a <USBD_CoreFindIF>
 8007394:	4603      	mov	r3, r0
 8007396:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2bff      	cmp	r3, #255	@ 0xff
 800739c:	d01d      	beq.n	80073da <USBD_StdItfReq+0x92>
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11a      	bne.n	80073da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80073a4:	7bba      	ldrb	r2, [r7, #14]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	32ae      	adds	r2, #174	@ 0xae
 80073aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00f      	beq.n	80073d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80073b4:	7bba      	ldrb	r2, [r7, #14]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073bc:	7bba      	ldrb	r2, [r7, #14]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	32ae      	adds	r2, #174	@ 0xae
 80073c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073d2:	e004      	b.n	80073de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80073d4:	2303      	movs	r3, #3
 80073d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073d8:	e001      	b.n	80073de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	88db      	ldrh	r3, [r3, #6]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d110      	bne.n	8007408 <USBD_StdItfReq+0xc0>
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10d      	bne.n	8007408 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fdc7 	bl	8007f80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073f2:	e009      	b.n	8007408 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fcf7 	bl	8007dea <USBD_CtlError>
          break;
 80073fc:	e004      	b.n	8007408 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fcf2 	bl	8007dea <USBD_CtlError>
          break;
 8007406:	e000      	b.n	800740a <USBD_StdItfReq+0xc2>
          break;
 8007408:	bf00      	nop
      }
      break;
 800740a:	e004      	b.n	8007416 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fceb 	bl	8007dea <USBD_CtlError>
      break;
 8007414:	bf00      	nop
  }

  return ret;
 8007416:	7bfb      	ldrb	r3, [r7, #15]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	889b      	ldrh	r3, [r3, #4]
 8007432:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800743c:	2b40      	cmp	r3, #64	@ 0x40
 800743e:	d007      	beq.n	8007450 <USBD_StdEPReq+0x30>
 8007440:	2b40      	cmp	r3, #64	@ 0x40
 8007442:	f200 817f 	bhi.w	8007744 <USBD_StdEPReq+0x324>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d02a      	beq.n	80074a0 <USBD_StdEPReq+0x80>
 800744a:	2b20      	cmp	r3, #32
 800744c:	f040 817a 	bne.w	8007744 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fe85 	bl	8007164 <USBD_CoreFindEP>
 800745a:	4603      	mov	r3, r0
 800745c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800745e:	7b7b      	ldrb	r3, [r7, #13]
 8007460:	2bff      	cmp	r3, #255	@ 0xff
 8007462:	f000 8174 	beq.w	800774e <USBD_StdEPReq+0x32e>
 8007466:	7b7b      	ldrb	r3, [r7, #13]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f040 8170 	bne.w	800774e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800746e:	7b7a      	ldrb	r2, [r7, #13]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007476:	7b7a      	ldrb	r2, [r7, #13]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	32ae      	adds	r2, #174	@ 0xae
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8163 	beq.w	800774e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007488:	7b7a      	ldrb	r2, [r7, #13]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	32ae      	adds	r2, #174	@ 0xae
 800748e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800749e:	e156      	b.n	800774e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d008      	beq.n	80074ba <USBD_StdEPReq+0x9a>
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	f300 8145 	bgt.w	8007738 <USBD_StdEPReq+0x318>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 809b 	beq.w	80075ea <USBD_StdEPReq+0x1ca>
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d03c      	beq.n	8007532 <USBD_StdEPReq+0x112>
 80074b8:	e13e      	b.n	8007738 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d002      	beq.n	80074cc <USBD_StdEPReq+0xac>
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d016      	beq.n	80074f8 <USBD_StdEPReq+0xd8>
 80074ca:	e02c      	b.n	8007526 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00d      	beq.n	80074ee <USBD_StdEPReq+0xce>
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b80      	cmp	r3, #128	@ 0x80
 80074d6:	d00a      	beq.n	80074ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 f97b 	bl	80087d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074e2:	2180      	movs	r1, #128	@ 0x80
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 f977 	bl	80087d8 <USBD_LL_StallEP>
 80074ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074ec:	e020      	b.n	8007530 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fc7a 	bl	8007dea <USBD_CtlError>
              break;
 80074f6:	e01b      	b.n	8007530 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10e      	bne.n	800751e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <USBD_StdEPReq+0xfe>
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	2b80      	cmp	r3, #128	@ 0x80
 800750a:	d008      	beq.n	800751e <USBD_StdEPReq+0xfe>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	88db      	ldrh	r3, [r3, #6]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d104      	bne.n	800751e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 f95d 	bl	80087d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fd2e 	bl	8007f80 <USBD_CtlSendStatus>

              break;
 8007524:	e004      	b.n	8007530 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fc5e 	bl	8007dea <USBD_CtlError>
              break;
 800752e:	bf00      	nop
          }
          break;
 8007530:	e107      	b.n	8007742 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d002      	beq.n	8007544 <USBD_StdEPReq+0x124>
 800753e:	2b03      	cmp	r3, #3
 8007540:	d016      	beq.n	8007570 <USBD_StdEPReq+0x150>
 8007542:	e04b      	b.n	80075dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <USBD_StdEPReq+0x146>
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b80      	cmp	r3, #128	@ 0x80
 800754e:	d00a      	beq.n	8007566 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 f93f 	bl	80087d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800755a:	2180      	movs	r1, #128	@ 0x80
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 f93b 	bl	80087d8 <USBD_LL_StallEP>
 8007562:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007564:	e040      	b.n	80075e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fc3e 	bl	8007dea <USBD_CtlError>
              break;
 800756e:	e03b      	b.n	80075e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	885b      	ldrh	r3, [r3, #2]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d136      	bne.n	80075e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 f945 	bl	8008816 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fcf7 	bl	8007f80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff fde4 	bl	8007164 <USBD_CoreFindEP>
 800759c:	4603      	mov	r3, r0
 800759e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075a0:	7b7b      	ldrb	r3, [r7, #13]
 80075a2:	2bff      	cmp	r3, #255	@ 0xff
 80075a4:	d01f      	beq.n	80075e6 <USBD_StdEPReq+0x1c6>
 80075a6:	7b7b      	ldrb	r3, [r7, #13]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d11c      	bne.n	80075e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80075ac:	7b7a      	ldrb	r2, [r7, #13]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80075b4:	7b7a      	ldrb	r2, [r7, #13]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	32ae      	adds	r2, #174	@ 0xae
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d010      	beq.n	80075e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075c4:	7b7a      	ldrb	r2, [r7, #13]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	32ae      	adds	r2, #174	@ 0xae
 80075ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075da:	e004      	b.n	80075e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fc03 	bl	8007dea <USBD_CtlError>
              break;
 80075e4:	e000      	b.n	80075e8 <USBD_StdEPReq+0x1c8>
              break;
 80075e6:	bf00      	nop
          }
          break;
 80075e8:	e0ab      	b.n	8007742 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d002      	beq.n	80075fc <USBD_StdEPReq+0x1dc>
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d032      	beq.n	8007660 <USBD_StdEPReq+0x240>
 80075fa:	e097      	b.n	800772c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <USBD_StdEPReq+0x1f2>
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b80      	cmp	r3, #128	@ 0x80
 8007606:	d004      	beq.n	8007612 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fbed 	bl	8007dea <USBD_CtlError>
                break;
 8007610:	e091      	b.n	8007736 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007616:	2b00      	cmp	r3, #0
 8007618:	da0b      	bge.n	8007632 <USBD_StdEPReq+0x212>
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	3310      	adds	r3, #16
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	3304      	adds	r3, #4
 8007630:	e00b      	b.n	800764a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	3304      	adds	r3, #4
 800764a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2202      	movs	r2, #2
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fc37 	bl	8007ecc <USBD_CtlSendData>
              break;
 800765e:	e06a      	b.n	8007736 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007664:	2b00      	cmp	r3, #0
 8007666:	da11      	bge.n	800768c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	f003 020f 	and.w	r2, r3, #15
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	3324      	adds	r3, #36	@ 0x24
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d117      	bne.n	80076b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fbb0 	bl	8007dea <USBD_CtlError>
                  break;
 800768a:	e054      	b.n	8007736 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fb9d 	bl	8007dea <USBD_CtlError>
                  break;
 80076b0:	e041      	b.n	8007736 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da0b      	bge.n	80076d2 <USBD_StdEPReq+0x2b2>
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	3310      	adds	r3, #16
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	4413      	add	r3, r2
 80076ce:	3304      	adds	r3, #4
 80076d0:	e00b      	b.n	80076ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	4413      	add	r3, r2
 80076e8:	3304      	adds	r3, #4
 80076ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <USBD_StdEPReq+0x2d8>
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
 80076f4:	2b80      	cmp	r3, #128	@ 0x80
 80076f6:	d103      	bne.n	8007700 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e00e      	b.n	800771e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 f8a5 	bl	8008854 <USBD_LL_IsStallEP>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2201      	movs	r2, #1
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e002      	b.n	800771e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2202      	movs	r2, #2
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fbd1 	bl	8007ecc <USBD_CtlSendData>
              break;
 800772a:	e004      	b.n	8007736 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb5b 	bl	8007dea <USBD_CtlError>
              break;
 8007734:	bf00      	nop
          }
          break;
 8007736:	e004      	b.n	8007742 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fb55 	bl	8007dea <USBD_CtlError>
          break;
 8007740:	bf00      	nop
      }
      break;
 8007742:	e005      	b.n	8007750 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb4f 	bl	8007dea <USBD_CtlError>
      break;
 800774c:	e000      	b.n	8007750 <USBD_StdEPReq+0x330>
      break;
 800774e:	bf00      	nop
  }

  return ret;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	885b      	ldrh	r3, [r3, #2]
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	2b06      	cmp	r3, #6
 800777e:	f200 8128 	bhi.w	80079d2 <USBD_GetDescriptor+0x276>
 8007782:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <USBD_GetDescriptor+0x2c>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077a5 	.word	0x080077a5
 800778c:	080077bd 	.word	0x080077bd
 8007790:	080077fd 	.word	0x080077fd
 8007794:	080079d3 	.word	0x080079d3
 8007798:	080079d3 	.word	0x080079d3
 800779c:	08007973 	.word	0x08007973
 80077a0:	0800799f 	.word	0x0800799f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
      break;
 80077ba:	e112      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	7c1b      	ldrb	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10d      	bne.n	80077e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077cc:	f107 0208 	add.w	r2, r7, #8
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
 80077d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3301      	adds	r3, #1
 80077da:	2202      	movs	r2, #2
 80077dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077de:	e100      	b.n	80079e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e8:	f107 0208 	add.w	r2, r7, #8
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	2202      	movs	r2, #2
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e0f2      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	885b      	ldrh	r3, [r3, #2]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b05      	cmp	r3, #5
 8007804:	f200 80ac 	bhi.w	8007960 <USBD_GetDescriptor+0x204>
 8007808:	a201      	add	r2, pc, #4	@ (adr r2, 8007810 <USBD_GetDescriptor+0xb4>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007829 	.word	0x08007829
 8007814:	0800785d 	.word	0x0800785d
 8007818:	08007891 	.word	0x08007891
 800781c:	080078c5 	.word	0x080078c5
 8007820:	080078f9 	.word	0x080078f9
 8007824:	0800792d 	.word	0x0800792d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7c12      	ldrb	r2, [r2, #16]
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784a:	e091      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 facb 	bl	8007dea <USBD_CtlError>
            err++;
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	3301      	adds	r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
          break;
 800785a:	e089      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787e:	e077      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fab1 	bl	8007dea <USBD_CtlError>
            err++;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	3301      	adds	r3, #1
 800788c:	72fb      	strb	r3, [r7, #11]
          break;
 800788e:	e06f      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	7c12      	ldrb	r2, [r2, #16]
 80078a8:	f107 0108 	add.w	r1, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b2:	e05d      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa97 	bl	8007dea <USBD_CtlError>
            err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
          break;
 80078c2:	e055      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7c12      	ldrb	r2, [r2, #16]
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e6:	e043      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa7d 	bl	8007dea <USBD_CtlError>
            err++;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	3301      	adds	r3, #1
 80078f4:	72fb      	strb	r3, [r7, #11]
          break;
 80078f6:	e03b      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	7c12      	ldrb	r2, [r2, #16]
 8007910:	f107 0108 	add.w	r1, r7, #8
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800791a:	e029      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa63 	bl	8007dea <USBD_CtlError>
            err++;
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	3301      	adds	r3, #1
 8007928:	72fb      	strb	r3, [r7, #11]
          break;
 800792a:	e021      	b.n	8007970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	7c12      	ldrb	r2, [r2, #16]
 8007944:	f107 0108 	add.w	r1, r7, #8
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800794e:	e00f      	b.n	8007970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa49 	bl	8007dea <USBD_CtlError>
            err++;
 8007958:	7afb      	ldrb	r3, [r7, #11]
 800795a:	3301      	adds	r3, #1
 800795c:	72fb      	strb	r3, [r7, #11]
          break;
 800795e:	e007      	b.n	8007970 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa41 	bl	8007dea <USBD_CtlError>
          err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800796e:	bf00      	nop
      }
      break;
 8007970:	e037      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7c1b      	ldrb	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007982:	f107 0208 	add.w	r2, r7, #8
 8007986:	4610      	mov	r0, r2
 8007988:	4798      	blx	r3
 800798a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800798c:	e029      	b.n	80079e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fa2a 	bl	8007dea <USBD_CtlError>
        err++;
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	3301      	adds	r3, #1
 800799a:	72fb      	strb	r3, [r7, #11]
      break;
 800799c:	e021      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7c1b      	ldrb	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10d      	bne.n	80079c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ae:	f107 0208 	add.w	r2, r7, #8
 80079b2:	4610      	mov	r0, r2
 80079b4:	4798      	blx	r3
 80079b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	2207      	movs	r2, #7
 80079be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079c0:	e00f      	b.n	80079e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fa10 	bl	8007dea <USBD_CtlError>
        err++;
 80079ca:	7afb      	ldrb	r3, [r7, #11]
 80079cc:	3301      	adds	r3, #1
 80079ce:	72fb      	strb	r3, [r7, #11]
      break;
 80079d0:	e007      	b.n	80079e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fa08 	bl	8007dea <USBD_CtlError>
      err++;
 80079da:	7afb      	ldrb	r3, [r7, #11]
 80079dc:	3301      	adds	r3, #1
 80079de:	72fb      	strb	r3, [r7, #11]
      break;
 80079e0:	bf00      	nop
  }

  if (err != 0U)
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d11e      	bne.n	8007a26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	88db      	ldrh	r3, [r3, #6]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d016      	beq.n	8007a1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079f0:	893b      	ldrh	r3, [r7, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00e      	beq.n	8007a14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	88da      	ldrh	r2, [r3, #6]
 80079fa:	893b      	ldrh	r3, [r7, #8]
 80079fc:	4293      	cmp	r3, r2
 80079fe:	bf28      	it	cs
 8007a00:	4613      	movcs	r3, r2
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a06:	893b      	ldrh	r3, [r7, #8]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fa5d 	bl	8007ecc <USBD_CtlSendData>
 8007a12:	e009      	b.n	8007a28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9e7 	bl	8007dea <USBD_CtlError>
 8007a1c:	e004      	b.n	8007a28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 faae 	bl	8007f80 <USBD_CtlSendStatus>
 8007a24:	e000      	b.n	8007a28 <USBD_GetDescriptor+0x2cc>
    return;
 8007a26:	bf00      	nop
  }
}
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop

08007a30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	889b      	ldrh	r3, [r3, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d131      	bne.n	8007aa6 <USBD_SetAddress+0x76>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	88db      	ldrh	r3, [r3, #6]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d12d      	bne.n	8007aa6 <USBD_SetAddress+0x76>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	885b      	ldrh	r3, [r3, #2]
 8007a4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a50:	d829      	bhi.n	8007aa6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	885b      	ldrh	r3, [r3, #2]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d104      	bne.n	8007a74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9bc 	bl	8007dea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a72:	e01d      	b.n	8007ab0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7bfa      	ldrb	r2, [r7, #15]
 8007a78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 ff13 	bl	80088ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa7a 	bl	8007f80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2202      	movs	r2, #2
 8007a96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9a:	e009      	b.n	8007ab0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa4:	e004      	b.n	8007ab0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f99e 	bl	8007dea <USBD_CtlError>
  }
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	885b      	ldrh	r3, [r3, #2]
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	4b4e      	ldr	r3, [pc, #312]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007ace:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d905      	bls.n	8007ae4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f985 	bl	8007dea <USBD_CtlError>
    return USBD_FAIL;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e08c      	b.n	8007bfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d002      	beq.n	8007af6 <USBD_SetConfig+0x3e>
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d029      	beq.n	8007b48 <USBD_SetConfig+0x90>
 8007af4:	e075      	b.n	8007be2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007af6:	4b44      	ldr	r3, [pc, #272]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d020      	beq.n	8007b40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007afe:	4b42      	ldr	r3, [pc, #264]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b08:	4b3f      	ldr	r3, [pc, #252]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fe ffe3 	bl	8006ada <USBD_SetClassConfig>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d008      	beq.n	8007b30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f962 	bl	8007dea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b2e:	e065      	b.n	8007bfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fa25 	bl	8007f80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b3e:	e05d      	b.n	8007bfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fa1d 	bl	8007f80 <USBD_CtlSendStatus>
      break;
 8007b46:	e059      	b.n	8007bfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b48:	4b2f      	ldr	r3, [pc, #188]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d112      	bne.n	8007b76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007b58:	4b2b      	ldr	r3, [pc, #172]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b62:	4b29      	ldr	r3, [pc, #164]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fe ffd2 	bl	8006b12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa06 	bl	8007f80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b74:	e042      	b.n	8007bfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b76:	4b24      	ldr	r3, [pc, #144]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d02a      	beq.n	8007bda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fe ffc0 	bl	8006b12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b92:	4b1d      	ldr	r3, [pc, #116]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fe ff99 	bl	8006ada <USBD_SetClassConfig>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00f      	beq.n	8007bd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f918 	bl	8007dea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fe ffa5 	bl	8006b12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007bd0:	e014      	b.n	8007bfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f9d4 	bl	8007f80 <USBD_CtlSendStatus>
      break;
 8007bd8:	e010      	b.n	8007bfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9d0 	bl	8007f80 <USBD_CtlSendStatus>
      break;
 8007be0:	e00c      	b.n	8007bfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f900 	bl	8007dea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bea:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <USBD_SetConfig+0x150>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7fe ff8e 	bl	8006b12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfa:	bf00      	nop
  }

  return ret;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	200004bc 	.word	0x200004bc

08007c0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	88db      	ldrh	r3, [r3, #6]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d004      	beq.n	8007c28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f8e2 	bl	8007dea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c26:	e023      	b.n	8007c70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	dc02      	bgt.n	8007c3a <USBD_GetConfig+0x2e>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dc03      	bgt.n	8007c40 <USBD_GetConfig+0x34>
 8007c38:	e015      	b.n	8007c66 <USBD_GetConfig+0x5a>
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d00b      	beq.n	8007c56 <USBD_GetConfig+0x4a>
 8007c3e:	e012      	b.n	8007c66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f93c 	bl	8007ecc <USBD_CtlSendData>
        break;
 8007c54:	e00c      	b.n	8007c70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f934 	bl	8007ecc <USBD_CtlSendData>
        break;
 8007c64:	e004      	b.n	8007c70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8be 	bl	8007dea <USBD_CtlError>
        break;
 8007c6e:	bf00      	nop
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d81e      	bhi.n	8007cce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	88db      	ldrh	r3, [r3, #6]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d004      	beq.n	8007ca2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f8a5 	bl	8007dea <USBD_CtlError>
        break;
 8007ca0:	e01a      	b.n	8007cd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f043 0202 	orr.w	r2, r3, #2
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f900 	bl	8007ecc <USBD_CtlSendData>
      break;
 8007ccc:	e004      	b.n	8007cd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f88a 	bl	8007dea <USBD_CtlError>
      break;
 8007cd6:	bf00      	nop
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	885b      	ldrh	r3, [r3, #2]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d107      	bne.n	8007d02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f940 	bl	8007f80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d00:	e013      	b.n	8007d2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	885b      	ldrh	r3, [r3, #2]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d10b      	bne.n	8007d22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	889b      	ldrh	r3, [r3, #4]
 8007d0e:	0a1b      	lsrs	r3, r3, #8
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f930 	bl	8007f80 <USBD_CtlSendStatus>
}
 8007d20:	e003      	b.n	8007d2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f860 	bl	8007dea <USBD_CtlError>
}
 8007d2a:	bf00      	nop
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d80b      	bhi.n	8007d62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	885b      	ldrh	r3, [r3, #2]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d10c      	bne.n	8007d6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f910 	bl	8007f80 <USBD_CtlSendStatus>
      }
      break;
 8007d60:	e004      	b.n	8007d6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f840 	bl	8007dea <USBD_CtlError>
      break;
 8007d6a:	e000      	b.n	8007d6e <USBD_ClrFeature+0x3c>
      break;
 8007d6c:	bf00      	nop
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	781a      	ldrb	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	781a      	ldrb	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff fa40 	bl	8007226 <SWAPBYTE>
 8007da6:	4603      	mov	r3, r0
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f7ff fa33 	bl	8007226 <SWAPBYTE>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff fa26 	bl	8007226 <SWAPBYTE>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	461a      	mov	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	80da      	strh	r2, [r3, #6]
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007df4:	2180      	movs	r1, #128	@ 0x80
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fcee 	bl	80087d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fcea 	bl	80087d8 <USBD_LL_StallEP>
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d036      	beq.n	8007e90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e26:	6938      	ldr	r0, [r7, #16]
 8007e28:	f000 f836 	bl	8007e98 <USBD_GetLen>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	3301      	adds	r3, #1
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	4413      	add	r3, r2
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	4413      	add	r3, r2
 8007e52:	2203      	movs	r2, #3
 8007e54:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e5c:	e013      	b.n	8007e86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	4413      	add	r3, r2
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	613b      	str	r3, [r7, #16]
    idx++;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	3301      	adds	r3, #1
 8007e74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	3301      	adds	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e7      	bne.n	8007e5e <USBD_GetString+0x52>
 8007e8e:	e000      	b.n	8007e92 <USBD_GetString+0x86>
    return;
 8007e90:	bf00      	nop
  }
}
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ea8:	e005      	b.n	8007eb6 <USBD_GetLen+0x1e>
  {
    len++;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	3301      	adds	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1f5      	bne.n	8007eaa <USBD_GetLen+0x12>
  }

  return len;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 fcf9 	bl	80088ea <USBD_LL_Transmit>

  return USBD_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	2100      	movs	r1, #0
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fce8 	bl	80088ea <USBD_LL_Transmit>

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2203      	movs	r2, #3
 8007f34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 fcec 	bl	800892c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fcdb 	bl	800892c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2204      	movs	r2, #4
 8007f8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f90:	2300      	movs	r3, #0
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fca7 	bl	80088ea <USBD_LL_Transmit>

  return USBD_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2205      	movs	r2, #5
 8007fb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fcb5 	bl	800892c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4912      	ldr	r1, [pc, #72]	@ (800801c <MX_USB_DEVICE_Init+0x50>)
 8007fd4:	4812      	ldr	r0, [pc, #72]	@ (8008020 <MX_USB_DEVICE_Init+0x54>)
 8007fd6:	f7fe fd03 	bl	80069e0 <USBD_Init>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fe0:	f7f8 fc26 	bl	8000830 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fe4:	490f      	ldr	r1, [pc, #60]	@ (8008024 <MX_USB_DEVICE_Init+0x58>)
 8007fe6:	480e      	ldr	r0, [pc, #56]	@ (8008020 <MX_USB_DEVICE_Init+0x54>)
 8007fe8:	f7fe fd2a 	bl	8006a40 <USBD_RegisterClass>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ff2:	f7f8 fc1d 	bl	8000830 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007ff6:	490c      	ldr	r1, [pc, #48]	@ (8008028 <MX_USB_DEVICE_Init+0x5c>)
 8007ff8:	4809      	ldr	r0, [pc, #36]	@ (8008020 <MX_USB_DEVICE_Init+0x54>)
 8007ffa:	f7fe fc21 	bl	8006840 <USBD_CDC_RegisterInterface>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008004:	f7f8 fc14 	bl	8000830 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008008:	4805      	ldr	r0, [pc, #20]	@ (8008020 <MX_USB_DEVICE_Init+0x54>)
 800800a:	f7fe fd4f 	bl	8006aac <USBD_Start>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008014:	f7f8 fc0c 	bl	8000830 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008018:	bf00      	nop
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200000ac 	.word	0x200000ac
 8008020:	200004c0 	.word	0x200004c0
 8008024:	20000018 	.word	0x20000018
 8008028:	20000098 	.word	0x20000098

0800802c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008030:	2200      	movs	r2, #0
 8008032:	4905      	ldr	r1, [pc, #20]	@ (8008048 <CDC_Init_FS+0x1c>)
 8008034:	4805      	ldr	r0, [pc, #20]	@ (800804c <CDC_Init_FS+0x20>)
 8008036:	f7fe fc1d 	bl	8006874 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800803a:	4905      	ldr	r1, [pc, #20]	@ (8008050 <CDC_Init_FS+0x24>)
 800803c:	4803      	ldr	r0, [pc, #12]	@ (800804c <CDC_Init_FS+0x20>)
 800803e:	f7fe fc3b 	bl	80068b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008042:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008044:	4618      	mov	r0, r3
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000f9c 	.word	0x20000f9c
 800804c:	200004c0 	.word	0x200004c0
 8008050:	2000079c 	.word	0x2000079c

08008054 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008058:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800805a:	4618      	mov	r0, r3
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
 8008070:	4613      	mov	r3, r2
 8008072:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	2b23      	cmp	r3, #35	@ 0x23
 8008078:	d84a      	bhi.n	8008110 <CDC_Control_FS+0xac>
 800807a:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <CDC_Control_FS+0x1c>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	08008111 	.word	0x08008111
 8008084:	08008111 	.word	0x08008111
 8008088:	08008111 	.word	0x08008111
 800808c:	08008111 	.word	0x08008111
 8008090:	08008111 	.word	0x08008111
 8008094:	08008111 	.word	0x08008111
 8008098:	08008111 	.word	0x08008111
 800809c:	08008111 	.word	0x08008111
 80080a0:	08008111 	.word	0x08008111
 80080a4:	08008111 	.word	0x08008111
 80080a8:	08008111 	.word	0x08008111
 80080ac:	08008111 	.word	0x08008111
 80080b0:	08008111 	.word	0x08008111
 80080b4:	08008111 	.word	0x08008111
 80080b8:	08008111 	.word	0x08008111
 80080bc:	08008111 	.word	0x08008111
 80080c0:	08008111 	.word	0x08008111
 80080c4:	08008111 	.word	0x08008111
 80080c8:	08008111 	.word	0x08008111
 80080cc:	08008111 	.word	0x08008111
 80080d0:	08008111 	.word	0x08008111
 80080d4:	08008111 	.word	0x08008111
 80080d8:	08008111 	.word	0x08008111
 80080dc:	08008111 	.word	0x08008111
 80080e0:	08008111 	.word	0x08008111
 80080e4:	08008111 	.word	0x08008111
 80080e8:	08008111 	.word	0x08008111
 80080ec:	08008111 	.word	0x08008111
 80080f0:	08008111 	.word	0x08008111
 80080f4:	08008111 	.word	0x08008111
 80080f8:	08008111 	.word	0x08008111
 80080fc:	08008111 	.word	0x08008111
 8008100:	08008111 	.word	0x08008111
 8008104:	08008111 	.word	0x08008111
 8008108:	08008111 	.word	0x08008111
 800810c:	08008111 	.word	0x08008111
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008110:	bf00      	nop
  }

  return (USBD_OK);
 8008112:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008114:	4618      	mov	r0, r3
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4805      	ldr	r0, [pc, #20]	@ (8008144 <CDC_Receive_FS+0x24>)
 800812e:	f7fe fbc3 	bl	80068b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008132:	4804      	ldr	r0, [pc, #16]	@ (8008144 <CDC_Receive_FS+0x24>)
 8008134:	f7fe fc1e 	bl	8006974 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008138:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	200004c0 	.word	0x200004c0

08008148 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008158:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <CDC_Transmit_FS+0x48>)
 800815a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800815e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800816a:	2301      	movs	r3, #1
 800816c:	e00b      	b.n	8008186 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800816e:	887b      	ldrh	r3, [r7, #2]
 8008170:	461a      	mov	r2, r3
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	4806      	ldr	r0, [pc, #24]	@ (8008190 <CDC_Transmit_FS+0x48>)
 8008176:	f7fe fb7d 	bl	8006874 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800817a:	4805      	ldr	r0, [pc, #20]	@ (8008190 <CDC_Transmit_FS+0x48>)
 800817c:	f7fe fbba 	bl	80068f4 <USBD_CDC_TransmitPacket>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200004c0 	.word	0x200004c0

08008194 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008194:	b480      	push	{r7}
 8008196:	b087      	sub	sp, #28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
	...

080081b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2212      	movs	r2, #18
 80081c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081ca:	4b03      	ldr	r3, [pc, #12]	@ (80081d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	200000c8 	.word	0x200000c8

080081dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2204      	movs	r2, #4
 80081ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081ee:	4b03      	ldr	r3, [pc, #12]	@ (80081fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	200000dc 	.word	0x200000dc

08008200 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	6039      	str	r1, [r7, #0]
 800820a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d105      	bne.n	800821e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	4907      	ldr	r1, [pc, #28]	@ (8008234 <USBD_FS_ProductStrDescriptor+0x34>)
 8008216:	4808      	ldr	r0, [pc, #32]	@ (8008238 <USBD_FS_ProductStrDescriptor+0x38>)
 8008218:	f7ff fdf8 	bl	8007e0c <USBD_GetString>
 800821c:	e004      	b.n	8008228 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4904      	ldr	r1, [pc, #16]	@ (8008234 <USBD_FS_ProductStrDescriptor+0x34>)
 8008222:	4805      	ldr	r0, [pc, #20]	@ (8008238 <USBD_FS_ProductStrDescriptor+0x38>)
 8008224:	f7ff fdf2 	bl	8007e0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008228:	4b02      	ldr	r3, [pc, #8]	@ (8008234 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	2000179c 	.word	0x2000179c
 8008238:	08009388 	.word	0x08009388

0800823c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	4904      	ldr	r1, [pc, #16]	@ (800825c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800824c:	4804      	ldr	r0, [pc, #16]	@ (8008260 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800824e:	f7ff fddd 	bl	8007e0c <USBD_GetString>
  return USBD_StrDesc;
 8008252:	4b02      	ldr	r3, [pc, #8]	@ (800825c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	2000179c 	.word	0x2000179c
 8008260:	080093a0 	.word	0x080093a0

08008264 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	6039      	str	r1, [r7, #0]
 800826e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	221a      	movs	r2, #26
 8008274:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008276:	f000 f843 	bl	8008300 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800827a:	4b02      	ldr	r3, [pc, #8]	@ (8008284 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	200000e0 	.word	0x200000e0

08008288 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	6039      	str	r1, [r7, #0]
 8008292:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	4907      	ldr	r1, [pc, #28]	@ (80082bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800829e:	4808      	ldr	r0, [pc, #32]	@ (80082c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082a0:	f7ff fdb4 	bl	8007e0c <USBD_GetString>
 80082a4:	e004      	b.n	80082b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	4904      	ldr	r1, [pc, #16]	@ (80082bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80082aa:	4805      	ldr	r0, [pc, #20]	@ (80082c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082ac:	f7ff fdae 	bl	8007e0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80082b0:	4b02      	ldr	r3, [pc, #8]	@ (80082bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	2000179c 	.word	0x2000179c
 80082c0:	080093b4 	.word	0x080093b4

080082c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	6039      	str	r1, [r7, #0]
 80082ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d105      	bne.n	80082e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	4907      	ldr	r1, [pc, #28]	@ (80082f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082da:	4808      	ldr	r0, [pc, #32]	@ (80082fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082dc:	f7ff fd96 	bl	8007e0c <USBD_GetString>
 80082e0:	e004      	b.n	80082ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	4904      	ldr	r1, [pc, #16]	@ (80082f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082e6:	4805      	ldr	r0, [pc, #20]	@ (80082fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e8:	f7ff fd90 	bl	8007e0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80082ec:	4b02      	ldr	r3, [pc, #8]	@ (80082f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	2000179c 	.word	0x2000179c
 80082fc:	080093c0 	.word	0x080093c0

08008300 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008306:	4b0f      	ldr	r3, [pc, #60]	@ (8008344 <Get_SerialNum+0x44>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800830c:	4b0e      	ldr	r3, [pc, #56]	@ (8008348 <Get_SerialNum+0x48>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008312:	4b0e      	ldr	r3, [pc, #56]	@ (800834c <Get_SerialNum+0x4c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4413      	add	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008326:	2208      	movs	r2, #8
 8008328:	4909      	ldr	r1, [pc, #36]	@ (8008350 <Get_SerialNum+0x50>)
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 f814 	bl	8008358 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008330:	2204      	movs	r2, #4
 8008332:	4908      	ldr	r1, [pc, #32]	@ (8008354 <Get_SerialNum+0x54>)
 8008334:	68b8      	ldr	r0, [r7, #8]
 8008336:	f000 f80f 	bl	8008358 <IntToUnicode>
  }
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	1fff7a10 	.word	0x1fff7a10
 8008348:	1fff7a14 	.word	0x1fff7a14
 800834c:	1fff7a18 	.word	0x1fff7a18
 8008350:	200000e2 	.word	0x200000e2
 8008354:	200000f2 	.word	0x200000f2

08008358 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]
 800836e:	e027      	b.n	80083c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	0f1b      	lsrs	r3, r3, #28
 8008374:	2b09      	cmp	r3, #9
 8008376:	d80b      	bhi.n	8008390 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	0f1b      	lsrs	r3, r3, #28
 800837c:	b2da      	uxtb	r2, r3
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	4619      	mov	r1, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	440b      	add	r3, r1
 8008388:	3230      	adds	r2, #48	@ 0x30
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	e00a      	b.n	80083a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	0f1b      	lsrs	r3, r3, #28
 8008394:	b2da      	uxtb	r2, r3
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	4619      	mov	r1, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	440b      	add	r3, r1
 80083a0:	3237      	adds	r2, #55	@ 0x37
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	3301      	adds	r3, #1
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	4413      	add	r3, r2
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	3301      	adds	r3, #1
 80083be:	75fb      	strb	r3, [r7, #23]
 80083c0:	7dfa      	ldrb	r2, [r7, #23]
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d3d3      	bcc.n	8008370 <IntToUnicode+0x18>
  }
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	371c      	adds	r7, #28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
	...

080083d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	@ 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	605a      	str	r2, [r3, #4]
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	60da      	str	r2, [r3, #12]
 80083ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083f8:	d147      	bne.n	800848a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083fa:	2300      	movs	r3, #0
 80083fc:	613b      	str	r3, [r7, #16]
 80083fe:	4b25      	ldr	r3, [pc, #148]	@ (8008494 <HAL_PCD_MspInit+0xbc>)
 8008400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008402:	4a24      	ldr	r2, [pc, #144]	@ (8008494 <HAL_PCD_MspInit+0xbc>)
 8008404:	f043 0301 	orr.w	r3, r3, #1
 8008408:	6313      	str	r3, [r2, #48]	@ 0x30
 800840a:	4b22      	ldr	r3, [pc, #136]	@ (8008494 <HAL_PCD_MspInit+0xbc>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8008416:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800841a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800841c:	2302      	movs	r3, #2
 800841e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008420:	2300      	movs	r3, #0
 8008422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008424:	2303      	movs	r3, #3
 8008426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008428:	230a      	movs	r3, #10
 800842a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800842c:	f107 0314 	add.w	r3, r7, #20
 8008430:	4619      	mov	r1, r3
 8008432:	4819      	ldr	r0, [pc, #100]	@ (8008498 <HAL_PCD_MspInit+0xc0>)
 8008434:	f7f9 fa58 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800843c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008446:	f107 0314 	add.w	r3, r7, #20
 800844a:	4619      	mov	r1, r3
 800844c:	4812      	ldr	r0, [pc, #72]	@ (8008498 <HAL_PCD_MspInit+0xc0>)
 800844e:	f7f9 fa4b 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008452:	4b10      	ldr	r3, [pc, #64]	@ (8008494 <HAL_PCD_MspInit+0xbc>)
 8008454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008456:	4a0f      	ldr	r2, [pc, #60]	@ (8008494 <HAL_PCD_MspInit+0xbc>)
 8008458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800845c:	6353      	str	r3, [r2, #52]	@ 0x34
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	4b0c      	ldr	r3, [pc, #48]	@ (8008494 <HAL_PCD_MspInit+0xbc>)
 8008464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008466:	4a0b      	ldr	r2, [pc, #44]	@ (8008494 <HAL_PCD_MspInit+0xbc>)
 8008468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800846c:	6453      	str	r3, [r2, #68]	@ 0x44
 800846e:	4b09      	ldr	r3, [pc, #36]	@ (8008494 <HAL_PCD_MspInit+0xbc>)
 8008470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	2043      	movs	r0, #67	@ 0x43
 8008480:	f7f8 ff11 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008484:	2043      	movs	r0, #67	@ 0x43
 8008486:	f7f8 ff2a 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800848a:	bf00      	nop
 800848c:	3728      	adds	r7, #40	@ 0x28
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	40023800 	.word	0x40023800
 8008498:	40020000 	.word	0x40020000

0800849c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f7fe fb47 	bl	8006b46 <USBD_LL_SetupStage>
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	78fb      	ldrb	r3, [r7, #3]
 80084e8:	4619      	mov	r1, r3
 80084ea:	f7fe fb81 	bl	8006bf0 <USBD_LL_DataOutStage>
}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	3320      	adds	r3, #32
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	4619      	mov	r1, r3
 800851e:	f7fe fc1a 	bl	8006d56 <USBD_LL_DataInStage>
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fd54 	bl	8006fe6 <USBD_LL_SOF>
}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800854e:	2301      	movs	r3, #1
 8008550:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	79db      	ldrb	r3, [r3, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
 800855e:	e008      	b.n	8008572 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	79db      	ldrb	r3, [r3, #7]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d102      	bne.n	800856e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008568:	2301      	movs	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]
 800856c:	e001      	b.n	8008572 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800856e:	f7f8 f95f 	bl	8000830 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008578:	7bfa      	ldrb	r2, [r7, #15]
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fcee 	bl	8006f5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fc96 	bl	8006eba <USBD_LL_Reset>
}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fce9 	bl	8006f7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80085be:	f043 0301 	orr.w	r3, r3, #1
 80085c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	7adb      	ldrb	r3, [r3, #11]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085cc:	4b04      	ldr	r3, [pc, #16]	@ (80085e0 <HAL_PCD_SuspendCallback+0x48>)
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	4a03      	ldr	r2, [pc, #12]	@ (80085e0 <HAL_PCD_SuspendCallback+0x48>)
 80085d2:	f043 0306 	orr.w	r3, r3, #6
 80085d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	e000ed00 	.word	0xe000ed00

080085e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fcdf 	bl	8006fb6 <USBD_LL_Resume>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fd37 	bl	800708a <USBD_LL_IsoOUTIncomplete>
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fcf3 	bl	8007026 <USBD_LL_IsoINIncomplete>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fd49 	bl	80070ee <USBD_LL_DevConnected>
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fd46 	bl	8007104 <USBD_LL_DevDisconnected>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d13c      	bne.n	800870a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008690:	4a20      	ldr	r2, [pc, #128]	@ (8008714 <USBD_LL_Init+0x94>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a1e      	ldr	r2, [pc, #120]	@ (8008714 <USBD_LL_Init+0x94>)
 800869c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008714 <USBD_LL_Init+0x94>)
 80086a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80086a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80086a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008714 <USBD_LL_Init+0x94>)
 80086aa:	2204      	movs	r2, #4
 80086ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80086ae:	4b19      	ldr	r3, [pc, #100]	@ (8008714 <USBD_LL_Init+0x94>)
 80086b0:	2202      	movs	r2, #2
 80086b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086b4:	4b17      	ldr	r3, [pc, #92]	@ (8008714 <USBD_LL_Init+0x94>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086ba:	4b16      	ldr	r3, [pc, #88]	@ (8008714 <USBD_LL_Init+0x94>)
 80086bc:	2202      	movs	r2, #2
 80086be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80086c0:	4b14      	ldr	r3, [pc, #80]	@ (8008714 <USBD_LL_Init+0x94>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086c6:	4b13      	ldr	r3, [pc, #76]	@ (8008714 <USBD_LL_Init+0x94>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086cc:	4b11      	ldr	r3, [pc, #68]	@ (8008714 <USBD_LL_Init+0x94>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80086d2:	4b10      	ldr	r3, [pc, #64]	@ (8008714 <USBD_LL_Init+0x94>)
 80086d4:	2201      	movs	r2, #1
 80086d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008714 <USBD_LL_Init+0x94>)
 80086da:	2200      	movs	r2, #0
 80086dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086de:	480d      	ldr	r0, [pc, #52]	@ (8008714 <USBD_LL_Init+0x94>)
 80086e0:	f7f9 fae1 	bl	8001ca6 <HAL_PCD_Init>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086ea:	f7f8 f8a1 	bl	8000830 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086ee:	2180      	movs	r1, #128	@ 0x80
 80086f0:	4808      	ldr	r0, [pc, #32]	@ (8008714 <USBD_LL_Init+0x94>)
 80086f2:	f7fa fd0c 	bl	800310e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086f6:	2240      	movs	r2, #64	@ 0x40
 80086f8:	2100      	movs	r1, #0
 80086fa:	4806      	ldr	r0, [pc, #24]	@ (8008714 <USBD_LL_Init+0x94>)
 80086fc:	f7fa fcc0 	bl	8003080 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008700:	2280      	movs	r2, #128	@ 0x80
 8008702:	2101      	movs	r1, #1
 8008704:	4803      	ldr	r0, [pc, #12]	@ (8008714 <USBD_LL_Init+0x94>)
 8008706:	f7fa fcbb 	bl	8003080 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	2000199c 	.word	0x2000199c

08008718 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800872e:	4618      	mov	r0, r3
 8008730:	f7f9 fbc8 	bl	8001ec4 <HAL_PCD_Start>
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	4618      	mov	r0, r3
 800873c:	f000 f942 	bl	80089c4 <USBD_Get_USB_Status>
 8008740:	4603      	mov	r3, r0
 8008742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008744:	7bbb      	ldrb	r3, [r7, #14]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	461a      	mov	r2, r3
 800875c:	4603      	mov	r3, r0
 800875e:	70fb      	strb	r3, [r7, #3]
 8008760:	460b      	mov	r3, r1
 8008762:	70bb      	strb	r3, [r7, #2]
 8008764:	4613      	mov	r3, r2
 8008766:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008776:	78bb      	ldrb	r3, [r7, #2]
 8008778:	883a      	ldrh	r2, [r7, #0]
 800877a:	78f9      	ldrb	r1, [r7, #3]
 800877c:	f7fa f89c 	bl	80028b8 <HAL_PCD_EP_Open>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 f91c 	bl	80089c4 <USBD_Get_USB_Status>
 800878c:	4603      	mov	r3, r0
 800878e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008790:	7bbb      	ldrb	r3, [r7, #14]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087b4:	78fa      	ldrb	r2, [r7, #3]
 80087b6:	4611      	mov	r1, r2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fa f8e5 	bl	8002988 <HAL_PCD_EP_Close>
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f8fd 	bl	80089c4 <USBD_Get_USB_Status>
 80087ca:	4603      	mov	r3, r0
 80087cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	4611      	mov	r1, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fa f99d 	bl	8002b36 <HAL_PCD_EP_SetStall>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	4618      	mov	r0, r3
 8008804:	f000 f8de 	bl	80089c4 <USBD_Get_USB_Status>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800880c:	7bbb      	ldrb	r3, [r7, #14]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7fa f9e1 	bl	8002bfc <HAL_PCD_EP_ClrStall>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 f8bf 	bl	80089c4 <USBD_Get_USB_Status>
 8008846:	4603      	mov	r3, r0
 8008848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884a:	7bbb      	ldrb	r3, [r7, #14]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008866:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800886c:	2b00      	cmp	r3, #0
 800886e:	da0b      	bge.n	8008888 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008876:	68f9      	ldr	r1, [r7, #12]
 8008878:	4613      	mov	r3, r2
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	3316      	adds	r3, #22
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	e00b      	b.n	80088a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800888e:	68f9      	ldr	r1, [r7, #12]
 8008890:	4613      	mov	r3, r2
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800889e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f9 ffd0 	bl	8002870 <HAL_PCD_SetAddress>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f874 	bl	80089c4 <USBD_Get_USB_Status>
 80088dc:	4603      	mov	r3, r0
 80088de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	460b      	mov	r3, r1
 80088f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008908:	7af9      	ldrb	r1, [r7, #11]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f7fa f8d8 	bl	8002ac2 <HAL_PCD_EP_Transmit>
 8008912:	4603      	mov	r3, r0
 8008914:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f853 	bl	80089c4 <USBD_Get_USB_Status>
 800891e:	4603      	mov	r3, r0
 8008920:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008922:	7dbb      	ldrb	r3, [r7, #22]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	460b      	mov	r3, r1
 800893a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800894a:	7af9      	ldrb	r1, [r7, #11]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	f7fa f864 	bl	8002a1c <HAL_PCD_EP_Receive>
 8008954:	4603      	mov	r3, r0
 8008956:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f832 	bl	80089c4 <USBD_Get_USB_Status>
 8008960:	4603      	mov	r3, r0
 8008962:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008964:	7dbb      	ldrb	r3, [r7, #22]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	460b      	mov	r3, r1
 8008978:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f7fa f884 	bl	8002a92 <HAL_PCD_EP_GetRxCount>
 800898a:	4603      	mov	r3, r0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800899c:	4b03      	ldr	r3, [pc, #12]	@ (80089ac <USBD_static_malloc+0x18>)
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	20001e80 	.word	0x20001e80

080089b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]

}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d817      	bhi.n	8008a08 <USBD_Get_USB_Status+0x44>
 80089d8:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <USBD_Get_USB_Status+0x1c>)
 80089da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089de:	bf00      	nop
 80089e0:	080089f1 	.word	0x080089f1
 80089e4:	080089f7 	.word	0x080089f7
 80089e8:	080089fd 	.word	0x080089fd
 80089ec:	08008a03 	.word	0x08008a03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
    break;
 80089f4:	e00b      	b.n	8008a0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	73fb      	strb	r3, [r7, #15]
    break;
 80089fa:	e008      	b.n	8008a0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089fc:	2301      	movs	r3, #1
 80089fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008a00:	e005      	b.n	8008a0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a02:	2303      	movs	r3, #3
 8008a04:	73fb      	strb	r3, [r7, #15]
    break;
 8008a06:	e002      	b.n	8008a0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0c:	bf00      	nop
  }
  return usb_status;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <siprintf>:
 8008a1c:	b40e      	push	{r1, r2, r3}
 8008a1e:	b500      	push	{lr}
 8008a20:	b09c      	sub	sp, #112	@ 0x70
 8008a22:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a24:	9002      	str	r0, [sp, #8]
 8008a26:	9006      	str	r0, [sp, #24]
 8008a28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a2c:	4809      	ldr	r0, [pc, #36]	@ (8008a54 <siprintf+0x38>)
 8008a2e:	9107      	str	r1, [sp, #28]
 8008a30:	9104      	str	r1, [sp, #16]
 8008a32:	4909      	ldr	r1, [pc, #36]	@ (8008a58 <siprintf+0x3c>)
 8008a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a38:	9105      	str	r1, [sp, #20]
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	a902      	add	r1, sp, #8
 8008a40:	f000 f994 	bl	8008d6c <_svfiprintf_r>
 8008a44:	9b02      	ldr	r3, [sp, #8]
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	b01c      	add	sp, #112	@ 0x70
 8008a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a50:	b003      	add	sp, #12
 8008a52:	4770      	bx	lr
 8008a54:	200000fc 	.word	0x200000fc
 8008a58:	ffff0208 	.word	0xffff0208

08008a5c <memset>:
 8008a5c:	4402      	add	r2, r0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d100      	bne.n	8008a66 <memset+0xa>
 8008a64:	4770      	bx	lr
 8008a66:	f803 1b01 	strb.w	r1, [r3], #1
 8008a6a:	e7f9      	b.n	8008a60 <memset+0x4>

08008a6c <__errno>:
 8008a6c:	4b01      	ldr	r3, [pc, #4]	@ (8008a74 <__errno+0x8>)
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	200000fc 	.word	0x200000fc

08008a78 <__libc_init_array>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ab0 <__libc_init_array+0x38>)
 8008a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ab4 <__libc_init_array+0x3c>)
 8008a7e:	1b64      	subs	r4, r4, r5
 8008a80:	10a4      	asrs	r4, r4, #2
 8008a82:	2600      	movs	r6, #0
 8008a84:	42a6      	cmp	r6, r4
 8008a86:	d109      	bne.n	8008a9c <__libc_init_array+0x24>
 8008a88:	4d0b      	ldr	r5, [pc, #44]	@ (8008ab8 <__libc_init_array+0x40>)
 8008a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8008abc <__libc_init_array+0x44>)
 8008a8c:	f000 fc66 	bl	800935c <_init>
 8008a90:	1b64      	subs	r4, r4, r5
 8008a92:	10a4      	asrs	r4, r4, #2
 8008a94:	2600      	movs	r6, #0
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	d105      	bne.n	8008aa6 <__libc_init_array+0x2e>
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa0:	4798      	blx	r3
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	e7ee      	b.n	8008a84 <__libc_init_array+0xc>
 8008aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aaa:	4798      	blx	r3
 8008aac:	3601      	adds	r6, #1
 8008aae:	e7f2      	b.n	8008a96 <__libc_init_array+0x1e>
 8008ab0:	0800942c 	.word	0x0800942c
 8008ab4:	0800942c 	.word	0x0800942c
 8008ab8:	0800942c 	.word	0x0800942c
 8008abc:	08009430 	.word	0x08009430

08008ac0 <__retarget_lock_acquire_recursive>:
 8008ac0:	4770      	bx	lr

08008ac2 <__retarget_lock_release_recursive>:
 8008ac2:	4770      	bx	lr

08008ac4 <_free_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	d041      	beq.n	8008b50 <_free_r+0x8c>
 8008acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad0:	1f0c      	subs	r4, r1, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bfb8      	it	lt
 8008ad6:	18e4      	addlt	r4, r4, r3
 8008ad8:	f000 f8e0 	bl	8008c9c <__malloc_lock>
 8008adc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b54 <_free_r+0x90>)
 8008ade:	6813      	ldr	r3, [r2, #0]
 8008ae0:	b933      	cbnz	r3, 8008af0 <_free_r+0x2c>
 8008ae2:	6063      	str	r3, [r4, #4]
 8008ae4:	6014      	str	r4, [r2, #0]
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aec:	f000 b8dc 	b.w	8008ca8 <__malloc_unlock>
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	d908      	bls.n	8008b06 <_free_r+0x42>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	1821      	adds	r1, r4, r0
 8008af8:	428b      	cmp	r3, r1
 8008afa:	bf01      	itttt	eq
 8008afc:	6819      	ldreq	r1, [r3, #0]
 8008afe:	685b      	ldreq	r3, [r3, #4]
 8008b00:	1809      	addeq	r1, r1, r0
 8008b02:	6021      	streq	r1, [r4, #0]
 8008b04:	e7ed      	b.n	8008ae2 <_free_r+0x1e>
 8008b06:	461a      	mov	r2, r3
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	b10b      	cbz	r3, 8008b10 <_free_r+0x4c>
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	d9fa      	bls.n	8008b06 <_free_r+0x42>
 8008b10:	6811      	ldr	r1, [r2, #0]
 8008b12:	1850      	adds	r0, r2, r1
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	d10b      	bne.n	8008b30 <_free_r+0x6c>
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	4401      	add	r1, r0
 8008b1c:	1850      	adds	r0, r2, r1
 8008b1e:	4283      	cmp	r3, r0
 8008b20:	6011      	str	r1, [r2, #0]
 8008b22:	d1e0      	bne.n	8008ae6 <_free_r+0x22>
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	6053      	str	r3, [r2, #4]
 8008b2a:	4408      	add	r0, r1
 8008b2c:	6010      	str	r0, [r2, #0]
 8008b2e:	e7da      	b.n	8008ae6 <_free_r+0x22>
 8008b30:	d902      	bls.n	8008b38 <_free_r+0x74>
 8008b32:	230c      	movs	r3, #12
 8008b34:	602b      	str	r3, [r5, #0]
 8008b36:	e7d6      	b.n	8008ae6 <_free_r+0x22>
 8008b38:	6820      	ldr	r0, [r4, #0]
 8008b3a:	1821      	adds	r1, r4, r0
 8008b3c:	428b      	cmp	r3, r1
 8008b3e:	bf04      	itt	eq
 8008b40:	6819      	ldreq	r1, [r3, #0]
 8008b42:	685b      	ldreq	r3, [r3, #4]
 8008b44:	6063      	str	r3, [r4, #4]
 8008b46:	bf04      	itt	eq
 8008b48:	1809      	addeq	r1, r1, r0
 8008b4a:	6021      	streq	r1, [r4, #0]
 8008b4c:	6054      	str	r4, [r2, #4]
 8008b4e:	e7ca      	b.n	8008ae6 <_free_r+0x22>
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	bf00      	nop
 8008b54:	200021e4 	.word	0x200021e4

08008b58 <sbrk_aligned>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8008b98 <sbrk_aligned+0x40>)
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	6831      	ldr	r1, [r6, #0]
 8008b60:	4605      	mov	r5, r0
 8008b62:	b911      	cbnz	r1, 8008b6a <sbrk_aligned+0x12>
 8008b64:	f000 fba6 	bl	80092b4 <_sbrk_r>
 8008b68:	6030      	str	r0, [r6, #0]
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 fba1 	bl	80092b4 <_sbrk_r>
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	d103      	bne.n	8008b7e <sbrk_aligned+0x26>
 8008b76:	f04f 34ff 	mov.w	r4, #4294967295
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	1cc4      	adds	r4, r0, #3
 8008b80:	f024 0403 	bic.w	r4, r4, #3
 8008b84:	42a0      	cmp	r0, r4
 8008b86:	d0f8      	beq.n	8008b7a <sbrk_aligned+0x22>
 8008b88:	1a21      	subs	r1, r4, r0
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f000 fb92 	bl	80092b4 <_sbrk_r>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d1f2      	bne.n	8008b7a <sbrk_aligned+0x22>
 8008b94:	e7ef      	b.n	8008b76 <sbrk_aligned+0x1e>
 8008b96:	bf00      	nop
 8008b98:	200021e0 	.word	0x200021e0

08008b9c <_malloc_r>:
 8008b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba0:	1ccd      	adds	r5, r1, #3
 8008ba2:	f025 0503 	bic.w	r5, r5, #3
 8008ba6:	3508      	adds	r5, #8
 8008ba8:	2d0c      	cmp	r5, #12
 8008baa:	bf38      	it	cc
 8008bac:	250c      	movcc	r5, #12
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	db01      	blt.n	8008bb8 <_malloc_r+0x1c>
 8008bb4:	42a9      	cmp	r1, r5
 8008bb6:	d904      	bls.n	8008bc2 <_malloc_r+0x26>
 8008bb8:	230c      	movs	r3, #12
 8008bba:	6033      	str	r3, [r6, #0]
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c98 <_malloc_r+0xfc>
 8008bc6:	f000 f869 	bl	8008c9c <__malloc_lock>
 8008bca:	f8d8 3000 	ldr.w	r3, [r8]
 8008bce:	461c      	mov	r4, r3
 8008bd0:	bb44      	cbnz	r4, 8008c24 <_malloc_r+0x88>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7ff ffbf 	bl	8008b58 <sbrk_aligned>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	4604      	mov	r4, r0
 8008bde:	d158      	bne.n	8008c92 <_malloc_r+0xf6>
 8008be0:	f8d8 4000 	ldr.w	r4, [r8]
 8008be4:	4627      	mov	r7, r4
 8008be6:	2f00      	cmp	r7, #0
 8008be8:	d143      	bne.n	8008c72 <_malloc_r+0xd6>
 8008bea:	2c00      	cmp	r4, #0
 8008bec:	d04b      	beq.n	8008c86 <_malloc_r+0xea>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	eb04 0903 	add.w	r9, r4, r3
 8008bf8:	f000 fb5c 	bl	80092b4 <_sbrk_r>
 8008bfc:	4581      	cmp	r9, r0
 8008bfe:	d142      	bne.n	8008c86 <_malloc_r+0xea>
 8008c00:	6821      	ldr	r1, [r4, #0]
 8008c02:	1a6d      	subs	r5, r5, r1
 8008c04:	4629      	mov	r1, r5
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7ff ffa6 	bl	8008b58 <sbrk_aligned>
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d03a      	beq.n	8008c86 <_malloc_r+0xea>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	442b      	add	r3, r5
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	f8d8 3000 	ldr.w	r3, [r8]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	bb62      	cbnz	r2, 8008c78 <_malloc_r+0xdc>
 8008c1e:	f8c8 7000 	str.w	r7, [r8]
 8008c22:	e00f      	b.n	8008c44 <_malloc_r+0xa8>
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	1b52      	subs	r2, r2, r5
 8008c28:	d420      	bmi.n	8008c6c <_malloc_r+0xd0>
 8008c2a:	2a0b      	cmp	r2, #11
 8008c2c:	d917      	bls.n	8008c5e <_malloc_r+0xc2>
 8008c2e:	1961      	adds	r1, r4, r5
 8008c30:	42a3      	cmp	r3, r4
 8008c32:	6025      	str	r5, [r4, #0]
 8008c34:	bf18      	it	ne
 8008c36:	6059      	strne	r1, [r3, #4]
 8008c38:	6863      	ldr	r3, [r4, #4]
 8008c3a:	bf08      	it	eq
 8008c3c:	f8c8 1000 	streq.w	r1, [r8]
 8008c40:	5162      	str	r2, [r4, r5]
 8008c42:	604b      	str	r3, [r1, #4]
 8008c44:	4630      	mov	r0, r6
 8008c46:	f000 f82f 	bl	8008ca8 <__malloc_unlock>
 8008c4a:	f104 000b 	add.w	r0, r4, #11
 8008c4e:	1d23      	adds	r3, r4, #4
 8008c50:	f020 0007 	bic.w	r0, r0, #7
 8008c54:	1ac2      	subs	r2, r0, r3
 8008c56:	bf1c      	itt	ne
 8008c58:	1a1b      	subne	r3, r3, r0
 8008c5a:	50a3      	strne	r3, [r4, r2]
 8008c5c:	e7af      	b.n	8008bbe <_malloc_r+0x22>
 8008c5e:	6862      	ldr	r2, [r4, #4]
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	bf0c      	ite	eq
 8008c64:	f8c8 2000 	streq.w	r2, [r8]
 8008c68:	605a      	strne	r2, [r3, #4]
 8008c6a:	e7eb      	b.n	8008c44 <_malloc_r+0xa8>
 8008c6c:	4623      	mov	r3, r4
 8008c6e:	6864      	ldr	r4, [r4, #4]
 8008c70:	e7ae      	b.n	8008bd0 <_malloc_r+0x34>
 8008c72:	463c      	mov	r4, r7
 8008c74:	687f      	ldr	r7, [r7, #4]
 8008c76:	e7b6      	b.n	8008be6 <_malloc_r+0x4a>
 8008c78:	461a      	mov	r2, r3
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	d1fb      	bne.n	8008c78 <_malloc_r+0xdc>
 8008c80:	2300      	movs	r3, #0
 8008c82:	6053      	str	r3, [r2, #4]
 8008c84:	e7de      	b.n	8008c44 <_malloc_r+0xa8>
 8008c86:	230c      	movs	r3, #12
 8008c88:	6033      	str	r3, [r6, #0]
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f80c 	bl	8008ca8 <__malloc_unlock>
 8008c90:	e794      	b.n	8008bbc <_malloc_r+0x20>
 8008c92:	6005      	str	r5, [r0, #0]
 8008c94:	e7d6      	b.n	8008c44 <_malloc_r+0xa8>
 8008c96:	bf00      	nop
 8008c98:	200021e4 	.word	0x200021e4

08008c9c <__malloc_lock>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	@ (8008ca4 <__malloc_lock+0x8>)
 8008c9e:	f7ff bf0f 	b.w	8008ac0 <__retarget_lock_acquire_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	200021dc 	.word	0x200021dc

08008ca8 <__malloc_unlock>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	@ (8008cb0 <__malloc_unlock+0x8>)
 8008caa:	f7ff bf0a 	b.w	8008ac2 <__retarget_lock_release_recursive>
 8008cae:	bf00      	nop
 8008cb0:	200021dc 	.word	0x200021dc

08008cb4 <__ssputs_r>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	688e      	ldr	r6, [r1, #8]
 8008cba:	461f      	mov	r7, r3
 8008cbc:	42be      	cmp	r6, r7
 8008cbe:	680b      	ldr	r3, [r1, #0]
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	4690      	mov	r8, r2
 8008cc6:	d82d      	bhi.n	8008d24 <__ssputs_r+0x70>
 8008cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cd0:	d026      	beq.n	8008d20 <__ssputs_r+0x6c>
 8008cd2:	6965      	ldr	r5, [r4, #20]
 8008cd4:	6909      	ldr	r1, [r1, #16]
 8008cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cda:	eba3 0901 	sub.w	r9, r3, r1
 8008cde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ce2:	1c7b      	adds	r3, r7, #1
 8008ce4:	444b      	add	r3, r9
 8008ce6:	106d      	asrs	r5, r5, #1
 8008ce8:	429d      	cmp	r5, r3
 8008cea:	bf38      	it	cc
 8008cec:	461d      	movcc	r5, r3
 8008cee:	0553      	lsls	r3, r2, #21
 8008cf0:	d527      	bpl.n	8008d42 <__ssputs_r+0x8e>
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	f7ff ff52 	bl	8008b9c <_malloc_r>
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	b360      	cbz	r0, 8008d56 <__ssputs_r+0xa2>
 8008cfc:	6921      	ldr	r1, [r4, #16]
 8008cfe:	464a      	mov	r2, r9
 8008d00:	f000 fae8 	bl	80092d4 <memcpy>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	6126      	str	r6, [r4, #16]
 8008d12:	6165      	str	r5, [r4, #20]
 8008d14:	444e      	add	r6, r9
 8008d16:	eba5 0509 	sub.w	r5, r5, r9
 8008d1a:	6026      	str	r6, [r4, #0]
 8008d1c:	60a5      	str	r5, [r4, #8]
 8008d1e:	463e      	mov	r6, r7
 8008d20:	42be      	cmp	r6, r7
 8008d22:	d900      	bls.n	8008d26 <__ssputs_r+0x72>
 8008d24:	463e      	mov	r6, r7
 8008d26:	6820      	ldr	r0, [r4, #0]
 8008d28:	4632      	mov	r2, r6
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	f000 faa8 	bl	8009280 <memmove>
 8008d30:	68a3      	ldr	r3, [r4, #8]
 8008d32:	1b9b      	subs	r3, r3, r6
 8008d34:	60a3      	str	r3, [r4, #8]
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	4433      	add	r3, r6
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d42:	462a      	mov	r2, r5
 8008d44:	f000 fad4 	bl	80092f0 <_realloc_r>
 8008d48:	4606      	mov	r6, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d1e0      	bne.n	8008d10 <__ssputs_r+0x5c>
 8008d4e:	6921      	ldr	r1, [r4, #16]
 8008d50:	4650      	mov	r0, sl
 8008d52:	f7ff feb7 	bl	8008ac4 <_free_r>
 8008d56:	230c      	movs	r3, #12
 8008d58:	f8ca 3000 	str.w	r3, [sl]
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e7e9      	b.n	8008d3e <__ssputs_r+0x8a>
	...

08008d6c <_svfiprintf_r>:
 8008d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d70:	4698      	mov	r8, r3
 8008d72:	898b      	ldrh	r3, [r1, #12]
 8008d74:	061b      	lsls	r3, r3, #24
 8008d76:	b09d      	sub	sp, #116	@ 0x74
 8008d78:	4607      	mov	r7, r0
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	d510      	bpl.n	8008da2 <_svfiprintf_r+0x36>
 8008d80:	690b      	ldr	r3, [r1, #16]
 8008d82:	b973      	cbnz	r3, 8008da2 <_svfiprintf_r+0x36>
 8008d84:	2140      	movs	r1, #64	@ 0x40
 8008d86:	f7ff ff09 	bl	8008b9c <_malloc_r>
 8008d8a:	6028      	str	r0, [r5, #0]
 8008d8c:	6128      	str	r0, [r5, #16]
 8008d8e:	b930      	cbnz	r0, 8008d9e <_svfiprintf_r+0x32>
 8008d90:	230c      	movs	r3, #12
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	b01d      	add	sp, #116	@ 0x74
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	2340      	movs	r3, #64	@ 0x40
 8008da0:	616b      	str	r3, [r5, #20]
 8008da2:	2300      	movs	r3, #0
 8008da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008da6:	2320      	movs	r3, #32
 8008da8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8008db0:	2330      	movs	r3, #48	@ 0x30
 8008db2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f50 <_svfiprintf_r+0x1e4>
 8008db6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dba:	f04f 0901 	mov.w	r9, #1
 8008dbe:	4623      	mov	r3, r4
 8008dc0:	469a      	mov	sl, r3
 8008dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dc6:	b10a      	cbz	r2, 8008dcc <_svfiprintf_r+0x60>
 8008dc8:	2a25      	cmp	r2, #37	@ 0x25
 8008dca:	d1f9      	bne.n	8008dc0 <_svfiprintf_r+0x54>
 8008dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd0:	d00b      	beq.n	8008dea <_svfiprintf_r+0x7e>
 8008dd2:	465b      	mov	r3, fp
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f7ff ff6b 	bl	8008cb4 <__ssputs_r>
 8008dde:	3001      	adds	r0, #1
 8008de0:	f000 80a7 	beq.w	8008f32 <_svfiprintf_r+0x1c6>
 8008de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008de6:	445a      	add	r2, fp
 8008de8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dea:	f89a 3000 	ldrb.w	r3, [sl]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 809f 	beq.w	8008f32 <_svfiprintf_r+0x1c6>
 8008df4:	2300      	movs	r3, #0
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dfe:	f10a 0a01 	add.w	sl, sl, #1
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	9307      	str	r3, [sp, #28]
 8008e06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e0c:	4654      	mov	r4, sl
 8008e0e:	2205      	movs	r2, #5
 8008e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e14:	484e      	ldr	r0, [pc, #312]	@ (8008f50 <_svfiprintf_r+0x1e4>)
 8008e16:	f7f7 f9f3 	bl	8000200 <memchr>
 8008e1a:	9a04      	ldr	r2, [sp, #16]
 8008e1c:	b9d8      	cbnz	r0, 8008e56 <_svfiprintf_r+0xea>
 8008e1e:	06d0      	lsls	r0, r2, #27
 8008e20:	bf44      	itt	mi
 8008e22:	2320      	movmi	r3, #32
 8008e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e28:	0711      	lsls	r1, r2, #28
 8008e2a:	bf44      	itt	mi
 8008e2c:	232b      	movmi	r3, #43	@ 0x2b
 8008e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e32:	f89a 3000 	ldrb.w	r3, [sl]
 8008e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e38:	d015      	beq.n	8008e66 <_svfiprintf_r+0xfa>
 8008e3a:	9a07      	ldr	r2, [sp, #28]
 8008e3c:	4654      	mov	r4, sl
 8008e3e:	2000      	movs	r0, #0
 8008e40:	f04f 0c0a 	mov.w	ip, #10
 8008e44:	4621      	mov	r1, r4
 8008e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e4a:	3b30      	subs	r3, #48	@ 0x30
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	d94b      	bls.n	8008ee8 <_svfiprintf_r+0x17c>
 8008e50:	b1b0      	cbz	r0, 8008e80 <_svfiprintf_r+0x114>
 8008e52:	9207      	str	r2, [sp, #28]
 8008e54:	e014      	b.n	8008e80 <_svfiprintf_r+0x114>
 8008e56:	eba0 0308 	sub.w	r3, r0, r8
 8008e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	46a2      	mov	sl, r4
 8008e64:	e7d2      	b.n	8008e0c <_svfiprintf_r+0xa0>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	1d19      	adds	r1, r3, #4
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	9103      	str	r1, [sp, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bfbb      	ittet	lt
 8008e72:	425b      	neglt	r3, r3
 8008e74:	f042 0202 	orrlt.w	r2, r2, #2
 8008e78:	9307      	strge	r3, [sp, #28]
 8008e7a:	9307      	strlt	r3, [sp, #28]
 8008e7c:	bfb8      	it	lt
 8008e7e:	9204      	strlt	r2, [sp, #16]
 8008e80:	7823      	ldrb	r3, [r4, #0]
 8008e82:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e84:	d10a      	bne.n	8008e9c <_svfiprintf_r+0x130>
 8008e86:	7863      	ldrb	r3, [r4, #1]
 8008e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e8a:	d132      	bne.n	8008ef2 <_svfiprintf_r+0x186>
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	1d1a      	adds	r2, r3, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	9203      	str	r2, [sp, #12]
 8008e94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e98:	3402      	adds	r4, #2
 8008e9a:	9305      	str	r3, [sp, #20]
 8008e9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f60 <_svfiprintf_r+0x1f4>
 8008ea0:	7821      	ldrb	r1, [r4, #0]
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	f7f7 f9ab 	bl	8000200 <memchr>
 8008eaa:	b138      	cbz	r0, 8008ebc <_svfiprintf_r+0x150>
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	eba0 000a 	sub.w	r0, r0, sl
 8008eb2:	2240      	movs	r2, #64	@ 0x40
 8008eb4:	4082      	lsls	r2, r0
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	3401      	adds	r4, #1
 8008eba:	9304      	str	r3, [sp, #16]
 8008ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec0:	4824      	ldr	r0, [pc, #144]	@ (8008f54 <_svfiprintf_r+0x1e8>)
 8008ec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ec6:	2206      	movs	r2, #6
 8008ec8:	f7f7 f99a 	bl	8000200 <memchr>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d036      	beq.n	8008f3e <_svfiprintf_r+0x1d2>
 8008ed0:	4b21      	ldr	r3, [pc, #132]	@ (8008f58 <_svfiprintf_r+0x1ec>)
 8008ed2:	bb1b      	cbnz	r3, 8008f1c <_svfiprintf_r+0x1b0>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	3307      	adds	r3, #7
 8008ed8:	f023 0307 	bic.w	r3, r3, #7
 8008edc:	3308      	adds	r3, #8
 8008ede:	9303      	str	r3, [sp, #12]
 8008ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee2:	4433      	add	r3, r6
 8008ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee6:	e76a      	b.n	8008dbe <_svfiprintf_r+0x52>
 8008ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eec:	460c      	mov	r4, r1
 8008eee:	2001      	movs	r0, #1
 8008ef0:	e7a8      	b.n	8008e44 <_svfiprintf_r+0xd8>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	3401      	adds	r4, #1
 8008ef6:	9305      	str	r3, [sp, #20]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f04f 0c0a 	mov.w	ip, #10
 8008efe:	4620      	mov	r0, r4
 8008f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f04:	3a30      	subs	r2, #48	@ 0x30
 8008f06:	2a09      	cmp	r2, #9
 8008f08:	d903      	bls.n	8008f12 <_svfiprintf_r+0x1a6>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0c6      	beq.n	8008e9c <_svfiprintf_r+0x130>
 8008f0e:	9105      	str	r1, [sp, #20]
 8008f10:	e7c4      	b.n	8008e9c <_svfiprintf_r+0x130>
 8008f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f16:	4604      	mov	r4, r0
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e7f0      	b.n	8008efe <_svfiprintf_r+0x192>
 8008f1c:	ab03      	add	r3, sp, #12
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	462a      	mov	r2, r5
 8008f22:	4b0e      	ldr	r3, [pc, #56]	@ (8008f5c <_svfiprintf_r+0x1f0>)
 8008f24:	a904      	add	r1, sp, #16
 8008f26:	4638      	mov	r0, r7
 8008f28:	f3af 8000 	nop.w
 8008f2c:	1c42      	adds	r2, r0, #1
 8008f2e:	4606      	mov	r6, r0
 8008f30:	d1d6      	bne.n	8008ee0 <_svfiprintf_r+0x174>
 8008f32:	89ab      	ldrh	r3, [r5, #12]
 8008f34:	065b      	lsls	r3, r3, #25
 8008f36:	f53f af2d 	bmi.w	8008d94 <_svfiprintf_r+0x28>
 8008f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f3c:	e72c      	b.n	8008d98 <_svfiprintf_r+0x2c>
 8008f3e:	ab03      	add	r3, sp, #12
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	462a      	mov	r2, r5
 8008f44:	4b05      	ldr	r3, [pc, #20]	@ (8008f5c <_svfiprintf_r+0x1f0>)
 8008f46:	a904      	add	r1, sp, #16
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f000 f879 	bl	8009040 <_printf_i>
 8008f4e:	e7ed      	b.n	8008f2c <_svfiprintf_r+0x1c0>
 8008f50:	080093f0 	.word	0x080093f0
 8008f54:	080093fa 	.word	0x080093fa
 8008f58:	00000000 	.word	0x00000000
 8008f5c:	08008cb5 	.word	0x08008cb5
 8008f60:	080093f6 	.word	0x080093f6

08008f64 <_printf_common>:
 8008f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	4616      	mov	r6, r2
 8008f6a:	4698      	mov	r8, r3
 8008f6c:	688a      	ldr	r2, [r1, #8]
 8008f6e:	690b      	ldr	r3, [r1, #16]
 8008f70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f74:	4293      	cmp	r3, r2
 8008f76:	bfb8      	it	lt
 8008f78:	4613      	movlt	r3, r2
 8008f7a:	6033      	str	r3, [r6, #0]
 8008f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f80:	4607      	mov	r7, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	b10a      	cbz	r2, 8008f8a <_printf_common+0x26>
 8008f86:	3301      	adds	r3, #1
 8008f88:	6033      	str	r3, [r6, #0]
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	0699      	lsls	r1, r3, #26
 8008f8e:	bf42      	ittt	mi
 8008f90:	6833      	ldrmi	r3, [r6, #0]
 8008f92:	3302      	addmi	r3, #2
 8008f94:	6033      	strmi	r3, [r6, #0]
 8008f96:	6825      	ldr	r5, [r4, #0]
 8008f98:	f015 0506 	ands.w	r5, r5, #6
 8008f9c:	d106      	bne.n	8008fac <_printf_common+0x48>
 8008f9e:	f104 0a19 	add.w	sl, r4, #25
 8008fa2:	68e3      	ldr	r3, [r4, #12]
 8008fa4:	6832      	ldr	r2, [r6, #0]
 8008fa6:	1a9b      	subs	r3, r3, r2
 8008fa8:	42ab      	cmp	r3, r5
 8008faa:	dc26      	bgt.n	8008ffa <_printf_common+0x96>
 8008fac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fb0:	6822      	ldr	r2, [r4, #0]
 8008fb2:	3b00      	subs	r3, #0
 8008fb4:	bf18      	it	ne
 8008fb6:	2301      	movne	r3, #1
 8008fb8:	0692      	lsls	r2, r2, #26
 8008fba:	d42b      	bmi.n	8009014 <_printf_common+0xb0>
 8008fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fc0:	4641      	mov	r1, r8
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	47c8      	blx	r9
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d01e      	beq.n	8009008 <_printf_common+0xa4>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	6922      	ldr	r2, [r4, #16]
 8008fce:	f003 0306 	and.w	r3, r3, #6
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	bf02      	ittt	eq
 8008fd6:	68e5      	ldreq	r5, [r4, #12]
 8008fd8:	6833      	ldreq	r3, [r6, #0]
 8008fda:	1aed      	subeq	r5, r5, r3
 8008fdc:	68a3      	ldr	r3, [r4, #8]
 8008fde:	bf0c      	ite	eq
 8008fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fe4:	2500      	movne	r5, #0
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	bfc4      	itt	gt
 8008fea:	1a9b      	subgt	r3, r3, r2
 8008fec:	18ed      	addgt	r5, r5, r3
 8008fee:	2600      	movs	r6, #0
 8008ff0:	341a      	adds	r4, #26
 8008ff2:	42b5      	cmp	r5, r6
 8008ff4:	d11a      	bne.n	800902c <_printf_common+0xc8>
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	e008      	b.n	800900c <_printf_common+0xa8>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	4641      	mov	r1, r8
 8009000:	4638      	mov	r0, r7
 8009002:	47c8      	blx	r9
 8009004:	3001      	adds	r0, #1
 8009006:	d103      	bne.n	8009010 <_printf_common+0xac>
 8009008:	f04f 30ff 	mov.w	r0, #4294967295
 800900c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009010:	3501      	adds	r5, #1
 8009012:	e7c6      	b.n	8008fa2 <_printf_common+0x3e>
 8009014:	18e1      	adds	r1, r4, r3
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	2030      	movs	r0, #48	@ 0x30
 800901a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800901e:	4422      	add	r2, r4
 8009020:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009024:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009028:	3302      	adds	r3, #2
 800902a:	e7c7      	b.n	8008fbc <_printf_common+0x58>
 800902c:	2301      	movs	r3, #1
 800902e:	4622      	mov	r2, r4
 8009030:	4641      	mov	r1, r8
 8009032:	4638      	mov	r0, r7
 8009034:	47c8      	blx	r9
 8009036:	3001      	adds	r0, #1
 8009038:	d0e6      	beq.n	8009008 <_printf_common+0xa4>
 800903a:	3601      	adds	r6, #1
 800903c:	e7d9      	b.n	8008ff2 <_printf_common+0x8e>
	...

08009040 <_printf_i>:
 8009040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	7e0f      	ldrb	r7, [r1, #24]
 8009046:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009048:	2f78      	cmp	r7, #120	@ 0x78
 800904a:	4691      	mov	r9, r2
 800904c:	4680      	mov	r8, r0
 800904e:	460c      	mov	r4, r1
 8009050:	469a      	mov	sl, r3
 8009052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009056:	d807      	bhi.n	8009068 <_printf_i+0x28>
 8009058:	2f62      	cmp	r7, #98	@ 0x62
 800905a:	d80a      	bhi.n	8009072 <_printf_i+0x32>
 800905c:	2f00      	cmp	r7, #0
 800905e:	f000 80d2 	beq.w	8009206 <_printf_i+0x1c6>
 8009062:	2f58      	cmp	r7, #88	@ 0x58
 8009064:	f000 80b9 	beq.w	80091da <_printf_i+0x19a>
 8009068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800906c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009070:	e03a      	b.n	80090e8 <_printf_i+0xa8>
 8009072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009076:	2b15      	cmp	r3, #21
 8009078:	d8f6      	bhi.n	8009068 <_printf_i+0x28>
 800907a:	a101      	add	r1, pc, #4	@ (adr r1, 8009080 <_printf_i+0x40>)
 800907c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009080:	080090d9 	.word	0x080090d9
 8009084:	080090ed 	.word	0x080090ed
 8009088:	08009069 	.word	0x08009069
 800908c:	08009069 	.word	0x08009069
 8009090:	08009069 	.word	0x08009069
 8009094:	08009069 	.word	0x08009069
 8009098:	080090ed 	.word	0x080090ed
 800909c:	08009069 	.word	0x08009069
 80090a0:	08009069 	.word	0x08009069
 80090a4:	08009069 	.word	0x08009069
 80090a8:	08009069 	.word	0x08009069
 80090ac:	080091ed 	.word	0x080091ed
 80090b0:	08009117 	.word	0x08009117
 80090b4:	080091a7 	.word	0x080091a7
 80090b8:	08009069 	.word	0x08009069
 80090bc:	08009069 	.word	0x08009069
 80090c0:	0800920f 	.word	0x0800920f
 80090c4:	08009069 	.word	0x08009069
 80090c8:	08009117 	.word	0x08009117
 80090cc:	08009069 	.word	0x08009069
 80090d0:	08009069 	.word	0x08009069
 80090d4:	080091af 	.word	0x080091af
 80090d8:	6833      	ldr	r3, [r6, #0]
 80090da:	1d1a      	adds	r2, r3, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6032      	str	r2, [r6, #0]
 80090e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090e8:	2301      	movs	r3, #1
 80090ea:	e09d      	b.n	8009228 <_printf_i+0x1e8>
 80090ec:	6833      	ldr	r3, [r6, #0]
 80090ee:	6820      	ldr	r0, [r4, #0]
 80090f0:	1d19      	adds	r1, r3, #4
 80090f2:	6031      	str	r1, [r6, #0]
 80090f4:	0606      	lsls	r6, r0, #24
 80090f6:	d501      	bpl.n	80090fc <_printf_i+0xbc>
 80090f8:	681d      	ldr	r5, [r3, #0]
 80090fa:	e003      	b.n	8009104 <_printf_i+0xc4>
 80090fc:	0645      	lsls	r5, r0, #25
 80090fe:	d5fb      	bpl.n	80090f8 <_printf_i+0xb8>
 8009100:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009104:	2d00      	cmp	r5, #0
 8009106:	da03      	bge.n	8009110 <_printf_i+0xd0>
 8009108:	232d      	movs	r3, #45	@ 0x2d
 800910a:	426d      	negs	r5, r5
 800910c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009110:	4859      	ldr	r0, [pc, #356]	@ (8009278 <_printf_i+0x238>)
 8009112:	230a      	movs	r3, #10
 8009114:	e011      	b.n	800913a <_printf_i+0xfa>
 8009116:	6821      	ldr	r1, [r4, #0]
 8009118:	6833      	ldr	r3, [r6, #0]
 800911a:	0608      	lsls	r0, r1, #24
 800911c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009120:	d402      	bmi.n	8009128 <_printf_i+0xe8>
 8009122:	0649      	lsls	r1, r1, #25
 8009124:	bf48      	it	mi
 8009126:	b2ad      	uxthmi	r5, r5
 8009128:	2f6f      	cmp	r7, #111	@ 0x6f
 800912a:	4853      	ldr	r0, [pc, #332]	@ (8009278 <_printf_i+0x238>)
 800912c:	6033      	str	r3, [r6, #0]
 800912e:	bf14      	ite	ne
 8009130:	230a      	movne	r3, #10
 8009132:	2308      	moveq	r3, #8
 8009134:	2100      	movs	r1, #0
 8009136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800913a:	6866      	ldr	r6, [r4, #4]
 800913c:	60a6      	str	r6, [r4, #8]
 800913e:	2e00      	cmp	r6, #0
 8009140:	bfa2      	ittt	ge
 8009142:	6821      	ldrge	r1, [r4, #0]
 8009144:	f021 0104 	bicge.w	r1, r1, #4
 8009148:	6021      	strge	r1, [r4, #0]
 800914a:	b90d      	cbnz	r5, 8009150 <_printf_i+0x110>
 800914c:	2e00      	cmp	r6, #0
 800914e:	d04b      	beq.n	80091e8 <_printf_i+0x1a8>
 8009150:	4616      	mov	r6, r2
 8009152:	fbb5 f1f3 	udiv	r1, r5, r3
 8009156:	fb03 5711 	mls	r7, r3, r1, r5
 800915a:	5dc7      	ldrb	r7, [r0, r7]
 800915c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009160:	462f      	mov	r7, r5
 8009162:	42bb      	cmp	r3, r7
 8009164:	460d      	mov	r5, r1
 8009166:	d9f4      	bls.n	8009152 <_printf_i+0x112>
 8009168:	2b08      	cmp	r3, #8
 800916a:	d10b      	bne.n	8009184 <_printf_i+0x144>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	07df      	lsls	r7, r3, #31
 8009170:	d508      	bpl.n	8009184 <_printf_i+0x144>
 8009172:	6923      	ldr	r3, [r4, #16]
 8009174:	6861      	ldr	r1, [r4, #4]
 8009176:	4299      	cmp	r1, r3
 8009178:	bfde      	ittt	le
 800917a:	2330      	movle	r3, #48	@ 0x30
 800917c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009180:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009184:	1b92      	subs	r2, r2, r6
 8009186:	6122      	str	r2, [r4, #16]
 8009188:	f8cd a000 	str.w	sl, [sp]
 800918c:	464b      	mov	r3, r9
 800918e:	aa03      	add	r2, sp, #12
 8009190:	4621      	mov	r1, r4
 8009192:	4640      	mov	r0, r8
 8009194:	f7ff fee6 	bl	8008f64 <_printf_common>
 8009198:	3001      	adds	r0, #1
 800919a:	d14a      	bne.n	8009232 <_printf_i+0x1f2>
 800919c:	f04f 30ff 	mov.w	r0, #4294967295
 80091a0:	b004      	add	sp, #16
 80091a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	f043 0320 	orr.w	r3, r3, #32
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	4833      	ldr	r0, [pc, #204]	@ (800927c <_printf_i+0x23c>)
 80091b0:	2778      	movs	r7, #120	@ 0x78
 80091b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	6831      	ldr	r1, [r6, #0]
 80091ba:	061f      	lsls	r7, r3, #24
 80091bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80091c0:	d402      	bmi.n	80091c8 <_printf_i+0x188>
 80091c2:	065f      	lsls	r7, r3, #25
 80091c4:	bf48      	it	mi
 80091c6:	b2ad      	uxthmi	r5, r5
 80091c8:	6031      	str	r1, [r6, #0]
 80091ca:	07d9      	lsls	r1, r3, #31
 80091cc:	bf44      	itt	mi
 80091ce:	f043 0320 	orrmi.w	r3, r3, #32
 80091d2:	6023      	strmi	r3, [r4, #0]
 80091d4:	b11d      	cbz	r5, 80091de <_printf_i+0x19e>
 80091d6:	2310      	movs	r3, #16
 80091d8:	e7ac      	b.n	8009134 <_printf_i+0xf4>
 80091da:	4827      	ldr	r0, [pc, #156]	@ (8009278 <_printf_i+0x238>)
 80091dc:	e7e9      	b.n	80091b2 <_printf_i+0x172>
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	f023 0320 	bic.w	r3, r3, #32
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	e7f6      	b.n	80091d6 <_printf_i+0x196>
 80091e8:	4616      	mov	r6, r2
 80091ea:	e7bd      	b.n	8009168 <_printf_i+0x128>
 80091ec:	6833      	ldr	r3, [r6, #0]
 80091ee:	6825      	ldr	r5, [r4, #0]
 80091f0:	6961      	ldr	r1, [r4, #20]
 80091f2:	1d18      	adds	r0, r3, #4
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	062e      	lsls	r6, r5, #24
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	d501      	bpl.n	8009200 <_printf_i+0x1c0>
 80091fc:	6019      	str	r1, [r3, #0]
 80091fe:	e002      	b.n	8009206 <_printf_i+0x1c6>
 8009200:	0668      	lsls	r0, r5, #25
 8009202:	d5fb      	bpl.n	80091fc <_printf_i+0x1bc>
 8009204:	8019      	strh	r1, [r3, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	4616      	mov	r6, r2
 800920c:	e7bc      	b.n	8009188 <_printf_i+0x148>
 800920e:	6833      	ldr	r3, [r6, #0]
 8009210:	1d1a      	adds	r2, r3, #4
 8009212:	6032      	str	r2, [r6, #0]
 8009214:	681e      	ldr	r6, [r3, #0]
 8009216:	6862      	ldr	r2, [r4, #4]
 8009218:	2100      	movs	r1, #0
 800921a:	4630      	mov	r0, r6
 800921c:	f7f6 fff0 	bl	8000200 <memchr>
 8009220:	b108      	cbz	r0, 8009226 <_printf_i+0x1e6>
 8009222:	1b80      	subs	r0, r0, r6
 8009224:	6060      	str	r0, [r4, #4]
 8009226:	6863      	ldr	r3, [r4, #4]
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	2300      	movs	r3, #0
 800922c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009230:	e7aa      	b.n	8009188 <_printf_i+0x148>
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	4632      	mov	r2, r6
 8009236:	4649      	mov	r1, r9
 8009238:	4640      	mov	r0, r8
 800923a:	47d0      	blx	sl
 800923c:	3001      	adds	r0, #1
 800923e:	d0ad      	beq.n	800919c <_printf_i+0x15c>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	079b      	lsls	r3, r3, #30
 8009244:	d413      	bmi.n	800926e <_printf_i+0x22e>
 8009246:	68e0      	ldr	r0, [r4, #12]
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	4298      	cmp	r0, r3
 800924c:	bfb8      	it	lt
 800924e:	4618      	movlt	r0, r3
 8009250:	e7a6      	b.n	80091a0 <_printf_i+0x160>
 8009252:	2301      	movs	r3, #1
 8009254:	4632      	mov	r2, r6
 8009256:	4649      	mov	r1, r9
 8009258:	4640      	mov	r0, r8
 800925a:	47d0      	blx	sl
 800925c:	3001      	adds	r0, #1
 800925e:	d09d      	beq.n	800919c <_printf_i+0x15c>
 8009260:	3501      	adds	r5, #1
 8009262:	68e3      	ldr	r3, [r4, #12]
 8009264:	9903      	ldr	r1, [sp, #12]
 8009266:	1a5b      	subs	r3, r3, r1
 8009268:	42ab      	cmp	r3, r5
 800926a:	dcf2      	bgt.n	8009252 <_printf_i+0x212>
 800926c:	e7eb      	b.n	8009246 <_printf_i+0x206>
 800926e:	2500      	movs	r5, #0
 8009270:	f104 0619 	add.w	r6, r4, #25
 8009274:	e7f5      	b.n	8009262 <_printf_i+0x222>
 8009276:	bf00      	nop
 8009278:	08009401 	.word	0x08009401
 800927c:	08009412 	.word	0x08009412

08009280 <memmove>:
 8009280:	4288      	cmp	r0, r1
 8009282:	b510      	push	{r4, lr}
 8009284:	eb01 0402 	add.w	r4, r1, r2
 8009288:	d902      	bls.n	8009290 <memmove+0x10>
 800928a:	4284      	cmp	r4, r0
 800928c:	4623      	mov	r3, r4
 800928e:	d807      	bhi.n	80092a0 <memmove+0x20>
 8009290:	1e43      	subs	r3, r0, #1
 8009292:	42a1      	cmp	r1, r4
 8009294:	d008      	beq.n	80092a8 <memmove+0x28>
 8009296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800929a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800929e:	e7f8      	b.n	8009292 <memmove+0x12>
 80092a0:	4402      	add	r2, r0
 80092a2:	4601      	mov	r1, r0
 80092a4:	428a      	cmp	r2, r1
 80092a6:	d100      	bne.n	80092aa <memmove+0x2a>
 80092a8:	bd10      	pop	{r4, pc}
 80092aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092b2:	e7f7      	b.n	80092a4 <memmove+0x24>

080092b4 <_sbrk_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4d06      	ldr	r5, [pc, #24]	@ (80092d0 <_sbrk_r+0x1c>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	602b      	str	r3, [r5, #0]
 80092c0:	f7f7 fb5e 	bl	8000980 <_sbrk>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_sbrk_r+0x1a>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_sbrk_r+0x1a>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	200021d8 	.word	0x200021d8

080092d4 <memcpy>:
 80092d4:	440a      	add	r2, r1
 80092d6:	4291      	cmp	r1, r2
 80092d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092dc:	d100      	bne.n	80092e0 <memcpy+0xc>
 80092de:	4770      	bx	lr
 80092e0:	b510      	push	{r4, lr}
 80092e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ea:	4291      	cmp	r1, r2
 80092ec:	d1f9      	bne.n	80092e2 <memcpy+0xe>
 80092ee:	bd10      	pop	{r4, pc}

080092f0 <_realloc_r>:
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	4680      	mov	r8, r0
 80092f6:	4615      	mov	r5, r2
 80092f8:	460c      	mov	r4, r1
 80092fa:	b921      	cbnz	r1, 8009306 <_realloc_r+0x16>
 80092fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009300:	4611      	mov	r1, r2
 8009302:	f7ff bc4b 	b.w	8008b9c <_malloc_r>
 8009306:	b92a      	cbnz	r2, 8009314 <_realloc_r+0x24>
 8009308:	f7ff fbdc 	bl	8008ac4 <_free_r>
 800930c:	2400      	movs	r4, #0
 800930e:	4620      	mov	r0, r4
 8009310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009314:	f000 f81a 	bl	800934c <_malloc_usable_size_r>
 8009318:	4285      	cmp	r5, r0
 800931a:	4606      	mov	r6, r0
 800931c:	d802      	bhi.n	8009324 <_realloc_r+0x34>
 800931e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009322:	d8f4      	bhi.n	800930e <_realloc_r+0x1e>
 8009324:	4629      	mov	r1, r5
 8009326:	4640      	mov	r0, r8
 8009328:	f7ff fc38 	bl	8008b9c <_malloc_r>
 800932c:	4607      	mov	r7, r0
 800932e:	2800      	cmp	r0, #0
 8009330:	d0ec      	beq.n	800930c <_realloc_r+0x1c>
 8009332:	42b5      	cmp	r5, r6
 8009334:	462a      	mov	r2, r5
 8009336:	4621      	mov	r1, r4
 8009338:	bf28      	it	cs
 800933a:	4632      	movcs	r2, r6
 800933c:	f7ff ffca 	bl	80092d4 <memcpy>
 8009340:	4621      	mov	r1, r4
 8009342:	4640      	mov	r0, r8
 8009344:	f7ff fbbe 	bl	8008ac4 <_free_r>
 8009348:	463c      	mov	r4, r7
 800934a:	e7e0      	b.n	800930e <_realloc_r+0x1e>

0800934c <_malloc_usable_size_r>:
 800934c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009350:	1f18      	subs	r0, r3, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfbc      	itt	lt
 8009356:	580b      	ldrlt	r3, [r1, r0]
 8009358:	18c0      	addlt	r0, r0, r3
 800935a:	4770      	bx	lr

0800935c <_init>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	bf00      	nop
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr

08009368 <_fini>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	bf00      	nop
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr
