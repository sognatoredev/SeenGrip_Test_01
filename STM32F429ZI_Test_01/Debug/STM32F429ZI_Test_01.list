
STM32F429ZI_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b058  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800b208  0800b208  0000c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  0000d158  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b4  0800b4b4  0000c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4bc  0800b4bc  0000d158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4bc  0800b4bc  0000c4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4c0  0800b4c0  0000c4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800b4c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d158  2**0
                  CONTENTS
 10 .bss          00004100  20000158  20000158  0000d158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004258  20004258  0000d158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001970f  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000438b  00000000  00000000  00026897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0002ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104c  00000000  00000000  0002c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029512  00000000  00000000  0002d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ede8  00000000  00000000  000566ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0730  00000000  00000000  000754d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155c06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006044  00000000  00000000  00155c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0015bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000158 	.word	0x20000158
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b1f0 	.word	0x0800b1f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	0800b1f0 	.word	0x0800b1f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a0f      	ldr	r2, [pc, #60]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	200c      	movs	r0, #12
 80005b8:	f001 f901 	bl	80017be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005bc:	200c      	movs	r0, #12
 80005be:	f001 f91a 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2010      	movs	r0, #16
 80005c8:	f001 f8f9 	bl	80017be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005cc:	2010      	movs	r0, #16
 80005ce:	f001 f912 	bl	80017f6 <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b37      	ldr	r3, [pc, #220]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a36      	ldr	r2, [pc, #216]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b34      	ldr	r3, [pc, #208]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b30      	ldr	r3, [pc, #192]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a2f      	ldr	r2, [pc, #188]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a28      	ldr	r2, [pc, #160]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_GPIO_Init+0xf8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f244 0181 	movw	r1, #16513	@ 0x4081
 800066c:	481b      	ldr	r0, [pc, #108]	@ (80006dc <MX_GPIO_Init+0xfc>)
 800066e:	f001 fe8f 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000678:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4815      	ldr	r0, [pc, #84]	@ (80006e0 <MX_GPIO_Init+0x100>)
 800068a:	f001 fcd5 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800068e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_GPIO_Init+0xfc>)
 80006a8:	f001 fcc6 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_GPIO_Init+0x100>)
 80006ca:	f001 fcb5 	bl	8002038 <HAL_GPIO_Init>

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40020800 	.word	0x40020800

080006e4 <_write>:

/* USER CODE BEGIN PV */

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
    // CDC_Transmit_FS(ptr, len);
    User_CDC_Transmit_FS(ptr, len);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	4619      	mov	r1, r3
 80006f6:	68b8      	ldr	r0, [r7, #8]
 80006f8:	f000 fd94 	bl	8001224 <User_CDC_Transmit_FS>
    return (len);
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fed0 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f838 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f7ff ff64 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000718:	f7ff ff3a 	bl	8000590 <MX_DMA_Init>
  MX_TIM1_Init();
 800071c:	f000 fad8 	bl	8000cd0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000720:	f000 fb4e 	bl	8000dc0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000724:	f000 fb78 	bl	8000e18 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000728:	f008 ff12 	bl	8009550 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);
 800072c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000730:	f000 ff30 	bl	8001594 <HAL_Delay>
  BootMessagePrint();
 8000734:	f000 fc88 	bl	8001048 <BootMessagePrint>
  GetClockSourcePrint();
 8000738:	f000 fcf4 	bl	8001124 <GetClockSourcePrint>

  HAL_TIM_Base_Start_IT(&htim1);
 800073c:	480c      	ldr	r0, [pc, #48]	@ (8000770 <main+0x68>)
 800073e:	f003 fdfb 	bl	8004338 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *) uart2_rx_buf, UART_RXDATA_MAX);
 8000742:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000746:	490b      	ldr	r1, [pc, #44]	@ (8000774 <main+0x6c>)
 8000748:	480b      	ldr	r0, [pc, #44]	@ (8000778 <main+0x70>)
 800074a:	f004 faf6 	bl	8004d3a <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *) uart3_rx_buf, UART_RXDATA_MAX);
 800074e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000752:	490a      	ldr	r1, [pc, #40]	@ (800077c <main+0x74>)
 8000754:	480a      	ldr	r0, [pc, #40]	@ (8000780 <main+0x78>)
 8000756:	f004 faf0 	bl	8004d3a <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    GPIO_Proc();
 800075a:	f000 fd8d 	bl	8001278 <GPIO_Proc>
    USB_CDC_Proc();
 800075e:	f000 fdfb 	bl	8001358 <USB_CDC_Proc>
    USB_CDC_RX_Proc();
 8000762:	f000 fe0b 	bl	800137c <USB_CDC_RX_Proc>
    UART_RX_Proc();
 8000766:	f000 fd8d 	bl	8001284 <UART_RX_Proc>
  {
 800076a:	bf00      	nop
 800076c:	e7f5      	b.n	800075a <main+0x52>
 800076e:	bf00      	nop
 8000770:	20000178 	.word	0x20000178
 8000774:	2000051c 	.word	0x2000051c
 8000778:	200001c0 	.word	0x200001c0
 800077c:	2000151c 	.word	0x2000151c
 8000780:	20000208 	.word	0x20000208

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	@ 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	@ 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f009 fd39 	bl	800a20a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <SystemClock_Config+0xd8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	4a2a      	ldr	r2, [pc, #168]	@ (800085c <SystemClock_Config+0xd8>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b8:	4b28      	ldr	r3, [pc, #160]	@ (800085c <SystemClock_Config+0xd8>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <SystemClock_Config+0xdc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <SystemClock_Config+0xdc>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <SystemClock_Config+0xdc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f8:	23a8      	movs	r3, #168	@ 0xa8
 80007fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000800:	2307      	movs	r3, #7
 8000802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f003 f845 	bl	8003898 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000814:	f000 f826 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000824:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2105      	movs	r1, #5
 8000836:	4618      	mov	r0, r3
 8000838:	f003 faa6 	bl	8003d88 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000842:	f000 f80f 	bl	8000864 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 8000846:	2200      	movs	r2, #0
 8000848:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800084c:	2001      	movs	r0, #1
 800084e:	f003 fb81 	bl	8003f54 <HAL_RCC_MCOConfig>
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	@ 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000884:	6453      	str	r3, [r2, #68]	@ 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 fe1d 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <DMA1_Stream1_IRQHandler+0x10>)
 8000926:	f001 f91d 	bl	8001b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200002b0 	.word	0x200002b0

08000934 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <DMA1_Stream5_IRQHandler+0x10>)
 800093a:	f001 f913 	bl	8001b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000250 	.word	0x20000250

08000948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094e:	f003 fd63 	bl	8004418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000178 	.word	0x20000178

0800095c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <USART2_IRQHandler+0x10>)
 8000962:	f004 fa0f 	bl	8004d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001c0 	.word	0x200001c0

08000970 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <OTG_FS_IRQHandler+0x10>)
 8000976:	f001 fe82 	bl	800267e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20003a08 	.word	0x20003a08

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  TIM1_CNT_1++;
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000994:	6013      	str	r3, [r2, #0]
  TIM1_CNT_2++;
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	20000310 	.word	0x20000310
 80009b0:	20000314 	.word	0x20000314

080009b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (huart->Instance == USART2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ab8 <HAL_UART_RxCpltCallback+0x104>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d112      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x38>
  {
    uart2_rx_flag = 1;
 80009c6:	4b3d      	ldr	r3, [pc, #244]	@ (8000abc <HAL_UART_RxCpltCallback+0x108>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]

    uart2_rx_index = (UART_RXDATA_MAX - hdma_usart2_rx.Instance->NDTR);
 80009cc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x10c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b3a      	ldr	r3, [pc, #232]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x110>)
 80009dc:	801a      	strh	r2, [r3, #0]
    
    HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART_RXDATA_MAX);
 80009de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009e2:	4939      	ldr	r1, [pc, #228]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x114>)
 80009e4:	4839      	ldr	r0, [pc, #228]	@ (8000acc <HAL_UART_RxCpltCallback+0x118>)
 80009e6:	f004 f9a8 	bl	8004d3a <HAL_UART_Receive_DMA>
 80009ea:	e016      	b.n	8000a1a <HAL_UART_RxCpltCallback+0x66>
  }
  else if (huart->Instance == USART3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a37      	ldr	r2, [pc, #220]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x11c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d111      	bne.n	8000a1a <HAL_UART_RxCpltCallback+0x66>
  {
    uart3_rx_flag = 1;
 80009f6:	4b37      	ldr	r3, [pc, #220]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x120>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]

    uart3_rx_index = (UART_RXDATA_MAX - hdma_usart3_rx.Instance->NDTR);
 80009fc:	4b36      	ldr	r3, [pc, #216]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x124>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <HAL_UART_RxCpltCallback+0x128>)
 8000a0c:	801a      	strh	r2, [r3, #0]
    
    HAL_UART_Receive_DMA(&huart3, uart3_rx_buf, UART_RXDATA_MAX);
 8000a0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a12:	4933      	ldr	r1, [pc, #204]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x12c>)
 8000a14:	4833      	ldr	r0, [pc, #204]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x130>)
 8000a16:	f004 f990 	bl	8004d3a <HAL_UART_Receive_DMA>
  }
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE))
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000acc <HAL_UART_RxCpltCallback+0x118>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d10b      	bne.n	8000a40 <HAL_UART_RxCpltCallback+0x8c>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <HAL_UART_RxCpltCallback+0x118>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <HAL_UART_RxCpltCallback+0x118>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
  }
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
  {
    __HAL_UART_CLEAR_FEFLAG(&huart3);
  }
}
 8000a3e:	e037      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0xfc>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_ORE))
 8000a40:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x130>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	2b08      	cmp	r3, #8
 8000a4c:	d10b      	bne.n	8000a66 <HAL_UART_RxCpltCallback+0xb2>
    __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x130>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x130>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
}
 8000a64:	e024      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0xfc>
  else if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE))
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <HAL_UART_RxCpltCallback+0x118>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d10b      	bne.n	8000a8c <HAL_UART_RxCpltCallback+0xd8>
    __HAL_UART_CLEAR_FEFLAG(&huart2);
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_UART_RxCpltCallback+0x118>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_UART_RxCpltCallback+0x118>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
}
 8000a8a:	e011      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0xfc>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x130>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d10a      	bne.n	8000ab0 <HAL_UART_RxCpltCallback+0xfc>
    __HAL_UART_CLEAR_FEFLAG(&huart3);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x130>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x130>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	20002520 	.word	0x20002520
 8000ac0:	20000250 	.word	0x20000250
 8000ac4:	2000251c 	.word	0x2000251c
 8000ac8:	2000051c 	.word	0x2000051c
 8000acc:	200001c0 	.word	0x200001c0
 8000ad0:	40004800 	.word	0x40004800
 8000ad4:	20002521 	.word	0x20002521
 8000ad8:	200002b0 	.word	0x200002b0
 8000adc:	2000251e 	.word	0x2000251e
 8000ae0:	2000151c 	.word	0x2000151c
 8000ae4:	20000208 	.word	0x20000208

08000ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE))
 8000af0:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <HAL_UART_ErrorCallback+0xac>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	2b08      	cmp	r3, #8
 8000afc:	d10b      	bne.n	8000b16 <HAL_UART_ErrorCallback+0x2e>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <HAL_UART_ErrorCallback+0xac>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_UART_ErrorCallback+0xac>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697b      	ldr	r3, [r7, #20]
  }
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
  {
    __HAL_UART_CLEAR_FEFLAG(&huart3);
  }
}
 8000b14:	e037      	b.n	8000b86 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_ORE))
 8000b16:	4b20      	ldr	r3, [pc, #128]	@ (8000b98 <HAL_UART_ErrorCallback+0xb0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d10b      	bne.n	8000b3c <HAL_UART_ErrorCallback+0x54>
    __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <HAL_UART_ErrorCallback+0xb0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_UART_ErrorCallback+0xb0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
}
 8000b3a:	e024      	b.n	8000b86 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE))
 8000b3c:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <HAL_UART_ErrorCallback+0xac>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d10b      	bne.n	8000b62 <HAL_UART_ErrorCallback+0x7a>
    __HAL_UART_CLEAR_FEFLAG(&huart2);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_UART_ErrorCallback+0xac>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <HAL_UART_ErrorCallback+0xac>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	e011      	b.n	8000b86 <HAL_UART_ErrorCallback+0x9e>
  else if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_FE))
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_UART_ErrorCallback+0xb0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d10a      	bne.n	8000b86 <HAL_UART_ErrorCallback+0x9e>
    __HAL_UART_CLEAR_FEFLAG(&huart3);
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_UART_ErrorCallback+0xb0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_UART_ErrorCallback+0xb0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
}
 8000b86:	bf00      	nop
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200001c0 	.word	0x200001c0
 8000b98:	20000208 	.word	0x20000208

08000b9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e00a      	b.n	8000bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bae:	f3af 8000 	nop.w
 8000bb2:	4601      	mov	r1, r0
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	60ba      	str	r2, [r7, #8]
 8000bba:	b2ca      	uxtb	r2, r1
 8000bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf0      	blt.n	8000bae <_read+0x12>
  }

  return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_isatty>:

int _isatty(int file)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f009 fb3e 	bl	800a2f0 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20030000 	.word	0x20030000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	20000174 	.word	0x20000174
 8000ca8:	20004258 	.word	0x20004258

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000cee:	4a1f      	ldr	r2, [pc, #124]	@ (8000d6c <MX_TIM1_Init+0x9c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000cf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168-1;
 8000d00:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000d02:	22a7      	movs	r2, #167	@ 0xa7
 8000d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d18:	4813      	ldr	r0, [pc, #76]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000d1a:	f003 fabd 	bl	8004298 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d24:	f7ff fd9e 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000d36:	f003 fc5f 	bl	80045f8 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d40:	f7ff fd90 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_TIM1_Init+0x98>)
 8000d52:	f003 fe87 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d5c:	f7ff fd82 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000178 	.word	0x20000178
 8000d6c:	40010000 	.word	0x40010000

08000d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_TIM_Base_MspInit+0x48>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d115      	bne.n	8000dae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_TIM_Base_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <HAL_TIM_Base_MspInit+0x4c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_TIM_Base_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2019      	movs	r0, #25
 8000da4:	f000 fd0b 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000da8:	2019      	movs	r0, #25
 8000daa:	f000 fd24 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000dc6:	4a13      	ldr	r2, [pc, #76]	@ (8000e14 <MX_USART2_UART_Init+0x54>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000dcc:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000dd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dd8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dda:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000de2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_USART2_UART_Init+0x50>)
 8000dfc:	f003 fec2 	bl	8004b84 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f7ff fd2d 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200001c0 	.word	0x200001c0
 8000e14:	40004400 	.word	0x40004400

08000e18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e1e:	4a13      	ldr	r2, [pc, #76]	@ (8000e6c <MX_USART3_UART_Init+0x54>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e24:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e30:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e54:	f003 fe96 	bl	8004b84 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8000e5e:	f7ff fd01 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000208 	.word	0x20000208
 8000e6c:	40004800 	.word	0x40004800

08000e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	@ 0x30
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a65      	ldr	r2, [pc, #404]	@ (8001024 <HAL_UART_MspInit+0x1b4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d162      	bne.n	8000f58 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	4b64      	ldr	r3, [pc, #400]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a63      	ldr	r2, [pc, #396]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b61      	ldr	r3, [pc, #388]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4851      	ldr	r0, [pc, #324]	@ (800102c <HAL_UART_MspInit+0x1bc>)
 8000ee6:	f001 f8a7 	bl	8002038 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000eea:	4b51      	ldr	r3, [pc, #324]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000eec:	4a51      	ldr	r2, [pc, #324]	@ (8001034 <HAL_UART_MspInit+0x1c4>)
 8000eee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000ef2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ef6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efe:	4b4c      	ldr	r3, [pc, #304]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f04:	4b4a      	ldr	r3, [pc, #296]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0c:	4b48      	ldr	r3, [pc, #288]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f12:	4b47      	ldr	r3, [pc, #284]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f18:	4b45      	ldr	r3, [pc, #276]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1e:	4b44      	ldr	r3, [pc, #272]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f24:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f2a:	4841      	ldr	r0, [pc, #260]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f2c:	f000 fc82 	bl	8001834 <HAL_DMA_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000f36:	f7ff fc95 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f40:	4a3b      	ldr	r2, [pc, #236]	@ (8001030 <HAL_UART_MspInit+0x1c0>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2026      	movs	r0, #38	@ 0x26
 8000f4c:	f000 fc37 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f50:	2026      	movs	r0, #38	@ 0x26
 8000f52:	f000 fc50 	bl	80017f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f56:	e060      	b.n	800101a <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART3)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a36      	ldr	r2, [pc, #216]	@ (8001038 <HAL_UART_MspInit+0x1c8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d15b      	bne.n	800101a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b30      	ldr	r3, [pc, #192]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b29      	ldr	r3, [pc, #164]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a28      	ldr	r2, [pc, #160]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <HAL_UART_MspInit+0x1b8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f9a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fac:	2307      	movs	r3, #7
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4821      	ldr	r0, [pc, #132]	@ (800103c <HAL_UART_MspInit+0x1cc>)
 8000fb8:	f001 f83e 	bl	8002038 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000fbe:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <HAL_UART_MspInit+0x1d4>)
 8000fc0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000fc4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fc8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fdc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ff0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ffe:	4810      	ldr	r0, [pc, #64]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8001000:	f000 fc18 	bl	8001834 <HAL_DMA_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800100a:	f7ff fc2b 	bl	8000864 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8001012:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001014:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <HAL_UART_MspInit+0x1d0>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800101a:	bf00      	nop
 800101c:	3730      	adds	r7, #48	@ 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40004400 	.word	0x40004400
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	20000250 	.word	0x20000250
 8001034:	40026088 	.word	0x40026088
 8001038:	40004800 	.word	0x40004800
 800103c:	40020400 	.word	0x40020400
 8001040:	200002b0 	.word	0x200002b0
 8001044:	40026028 	.word	0x40026028

08001048 <BootMessagePrint>:
/*******************************************************************************
 * PUBLIC FUNCTION DEFINITIONS
 *******************************************************************************/
/* Display Boot Message */
void BootMessagePrint (void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 800104c:	492a      	ldr	r1, [pc, #168]	@ (80010f8 <BootMessagePrint+0xb0>)
 800104e:	482b      	ldr	r0, [pc, #172]	@ (80010fc <BootMessagePrint+0xb4>)
 8001050:	f009 f878 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001054:	4829      	ldr	r0, [pc, #164]	@ (80010fc <BootMessagePrint+0xb4>)
 8001056:	f7ff f8cb 	bl	80001f0 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	b29b      	uxth	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	4826      	ldr	r0, [pc, #152]	@ (80010fc <BootMessagePrint+0xb4>)
 8001062:	f000 f8df 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " Project Name        : %s\r\n", PROJECT_NAME );
 8001066:	4a26      	ldr	r2, [pc, #152]	@ (8001100 <BootMessagePrint+0xb8>)
 8001068:	4926      	ldr	r1, [pc, #152]	@ (8001104 <BootMessagePrint+0xbc>)
 800106a:	4824      	ldr	r0, [pc, #144]	@ (80010fc <BootMessagePrint+0xb4>)
 800106c:	f009 f86a 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001070:	4822      	ldr	r0, [pc, #136]	@ (80010fc <BootMessagePrint+0xb4>)
 8001072:	f7ff f8bd 	bl	80001f0 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29b      	uxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	481f      	ldr	r0, [pc, #124]	@ (80010fc <BootMessagePrint+0xb4>)
 800107e:	f000 f8d1 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HW VERSION        : %s\r\n", STR_HW_VER );
 8001082:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <BootMessagePrint+0xc0>)
 8001084:	4921      	ldr	r1, [pc, #132]	@ (800110c <BootMessagePrint+0xc4>)
 8001086:	481d      	ldr	r0, [pc, #116]	@ (80010fc <BootMessagePrint+0xb4>)
 8001088:	f009 f85c 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800108c:	481b      	ldr	r0, [pc, #108]	@ (80010fc <BootMessagePrint+0xb4>)
 800108e:	f7ff f8af 	bl	80001f0 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	b29b      	uxth	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	4818      	ldr	r0, [pc, #96]	@ (80010fc <BootMessagePrint+0xb4>)
 800109a:	f000 f8c3 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - FW VERSION        : %s\r\n", STR_FW_VER );
 800109e:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <BootMessagePrint+0xc8>)
 80010a0:	491c      	ldr	r1, [pc, #112]	@ (8001114 <BootMessagePrint+0xcc>)
 80010a2:	4816      	ldr	r0, [pc, #88]	@ (80010fc <BootMessagePrint+0xb4>)
 80010a4:	f009 f84e 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010a8:	4814      	ldr	r0, [pc, #80]	@ (80010fc <BootMessagePrint+0xb4>)
 80010aa:	f7ff f8a1 	bl	80001f0 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	4811      	ldr	r0, [pc, #68]	@ (80010fc <BootMessagePrint+0xb4>)
 80010b6:	f000 f8b5 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - BUILD TIME        : %s, %s\r\n", __DATE__, __TIME__ );
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <BootMessagePrint+0xd0>)
 80010bc:	4a17      	ldr	r2, [pc, #92]	@ (800111c <BootMessagePrint+0xd4>)
 80010be:	4918      	ldr	r1, [pc, #96]	@ (8001120 <BootMessagePrint+0xd8>)
 80010c0:	480e      	ldr	r0, [pc, #56]	@ (80010fc <BootMessagePrint+0xb4>)
 80010c2:	f009 f83f 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010c6:	480d      	ldr	r0, [pc, #52]	@ (80010fc <BootMessagePrint+0xb4>)
 80010c8:	f7ff f892 	bl	80001f0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	480a      	ldr	r0, [pc, #40]	@ (80010fc <BootMessagePrint+0xb4>)
 80010d4:	f000 f8a6 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <BootMessagePrint+0xb0>)
 80010da:	4808      	ldr	r0, [pc, #32]	@ (80010fc <BootMessagePrint+0xb4>)
 80010dc:	f009 f832 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <BootMessagePrint+0xb4>)
 80010e2:	f7ff f885 	bl	80001f0 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	4803      	ldr	r0, [pc, #12]	@ (80010fc <BootMessagePrint+0xb4>)
 80010ee:	f000 f899 	bl	8001224 <User_CDC_Transmit_FS>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	0800b208 	.word	0x0800b208
 80010fc:	20000418 	.word	0x20000418
 8001100:	0800b238 	.word	0x0800b238
 8001104:	0800b24c 	.word	0x0800b24c
 8001108:	0800b268 	.word	0x0800b268
 800110c:	0800b270 	.word	0x0800b270
 8001110:	0800b28c 	.word	0x0800b28c
 8001114:	0800b2a0 	.word	0x0800b2a0
 8001118:	0800b2bc 	.word	0x0800b2bc
 800111c:	0800b2c8 	.word	0x0800b2c8
 8001120:	0800b2d4 	.word	0x0800b2d4

08001124 <GetClockSourcePrint>:

/* Display Clcok Source Message */
void GetClockSourcePrint (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n");
 8001128:	4937      	ldr	r1, [pc, #220]	@ (8001208 <GetClockSourcePrint+0xe4>)
 800112a:	4838      	ldr	r0, [pc, #224]	@ (800120c <GetClockSourcePrint+0xe8>)
 800112c:	f009 f80a 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001130:	4836      	ldr	r0, [pc, #216]	@ (800120c <GetClockSourcePrint+0xe8>)
 8001132:	f7ff f85d 	bl	80001f0 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29b      	uxth	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	4833      	ldr	r0, [pc, #204]	@ (800120c <GetClockSourcePrint+0xe8>)
 800113e:	f000 f871 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - SYSTEM Clock Frequency        : %lu MHz\r\n", (HAL_RCC_GetSysClockFreq() /1000000));
 8001142:	f002 ff6f 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8001146:	4603      	mov	r3, r0
 8001148:	4a31      	ldr	r2, [pc, #196]	@ (8001210 <GetClockSourcePrint+0xec>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9b      	lsrs	r3, r3, #18
 8001150:	461a      	mov	r2, r3
 8001152:	4930      	ldr	r1, [pc, #192]	@ (8001214 <GetClockSourcePrint+0xf0>)
 8001154:	482d      	ldr	r0, [pc, #180]	@ (800120c <GetClockSourcePrint+0xe8>)
 8001156:	f008 fff5 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800115a:	482c      	ldr	r0, [pc, #176]	@ (800120c <GetClockSourcePrint+0xe8>)
 800115c:	f7ff f848 	bl	80001f0 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	b29b      	uxth	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	4829      	ldr	r0, [pc, #164]	@ (800120c <GetClockSourcePrint+0xe8>)
 8001168:	f000 f85c 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - HCLK Clock   Frequency        : %lu MHz\r\n", (HAL_RCC_GetHCLKFreq() / 1000000));
 800116c:	f003 f860 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8001170:	4603      	mov	r3, r0
 8001172:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <GetClockSourcePrint+0xec>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	0c9b      	lsrs	r3, r3, #18
 800117a:	461a      	mov	r2, r3
 800117c:	4926      	ldr	r1, [pc, #152]	@ (8001218 <GetClockSourcePrint+0xf4>)
 800117e:	4823      	ldr	r0, [pc, #140]	@ (800120c <GetClockSourcePrint+0xe8>)
 8001180:	f008 ffe0 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 8001184:	4821      	ldr	r0, [pc, #132]	@ (800120c <GetClockSourcePrint+0xe8>)
 8001186:	f7ff f833 	bl	80001f0 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29b      	uxth	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	481e      	ldr	r0, [pc, #120]	@ (800120c <GetClockSourcePrint+0xe8>)
 8001192:	f000 f847 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK1 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK1Freq() / 1000000));
 8001196:	f003 f857 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 800119a:	4603      	mov	r3, r0
 800119c:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <GetClockSourcePrint+0xec>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	461a      	mov	r2, r3
 80011a6:	491d      	ldr	r1, [pc, #116]	@ (800121c <GetClockSourcePrint+0xf8>)
 80011a8:	4818      	ldr	r0, [pc, #96]	@ (800120c <GetClockSourcePrint+0xe8>)
 80011aa:	f008 ffcb 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80011ae:	4817      	ldr	r0, [pc, #92]	@ (800120c <GetClockSourcePrint+0xe8>)
 80011b0:	f7ff f81e 	bl	80001f0 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <GetClockSourcePrint+0xe8>)
 80011bc:	f000 f832 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, " - PCLK2 Clock  Frequency        : %lu MHz\r\n", (HAL_RCC_GetPCLK2Freq() / 1000000));
 80011c0:	f003 f856 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <GetClockSourcePrint+0xec>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9b      	lsrs	r3, r3, #18
 80011ce:	461a      	mov	r2, r3
 80011d0:	4913      	ldr	r1, [pc, #76]	@ (8001220 <GetClockSourcePrint+0xfc>)
 80011d2:	480e      	ldr	r0, [pc, #56]	@ (800120c <GetClockSourcePrint+0xe8>)
 80011d4:	f008 ffb6 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80011d8:	480c      	ldr	r0, [pc, #48]	@ (800120c <GetClockSourcePrint+0xe8>)
 80011da:	f7ff f809 	bl	80001f0 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	4809      	ldr	r0, [pc, #36]	@ (800120c <GetClockSourcePrint+0xe8>)
 80011e6:	f000 f81d 	bl	8001224 <User_CDC_Transmit_FS>

    sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
 80011ea:	4907      	ldr	r1, [pc, #28]	@ (8001208 <GetClockSourcePrint+0xe4>)
 80011ec:	4807      	ldr	r0, [pc, #28]	@ (800120c <GetClockSourcePrint+0xe8>)
 80011ee:	f008 ffa9 	bl	800a144 <siprintf>
    User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <GetClockSourcePrint+0xe8>)
 80011f4:	f7fe fffc 	bl	80001f0 <strlen>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	4803      	ldr	r0, [pc, #12]	@ (800120c <GetClockSourcePrint+0xe8>)
 8001200:	f000 f810 	bl	8001224 <User_CDC_Transmit_FS>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	0800b208 	.word	0x0800b208
 800120c:	20000418 	.word	0x20000418
 8001210:	431bde83 	.word	0x431bde83
 8001214:	0800b2f4 	.word	0x0800b2f4
 8001218:	0800b324 	.word	0x0800b324
 800121c:	0800b354 	.word	0x0800b354
 8001220:	0800b384 	.word	0x0800b384

08001224 <User_CDC_Transmit_FS>:

void User_CDC_Transmit_FS(uint8_t * pdata, uint16_t datalength)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
    while(CDC_Transmit_FS((uint8_t *) pdata, datalength) == USBD_BUSY);
 8001230:	bf00      	nop
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	4619      	mov	r1, r3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f008 fa56 	bl	80096e8 <CDC_Transmit_FS>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d0f7      	beq.n	8001232 <User_CDC_Transmit_FS+0xe>
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <LED_Proc>:
    LED_RED_PIN         GPIO_PIN_14
    LED_GREEN_PIN       GPIO_PIN_0
    LED_BLUE_PIN        GPIO_PIN_7
*/
static void LED_Proc (void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    if(TIM1_CNT_1 >= 500)
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <LED_Proc+0x24>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001258:	d307      	bcc.n	800126a <LED_Proc+0x1e>
    {
        TIM1_CNT_1 = 0;
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <LED_Proc+0x24>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
        
        HAL_GPIO_TogglePin(LED_ALL_PORT, LED_ALL_PIN);
 8001260:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001264:	4803      	ldr	r0, [pc, #12]	@ (8001274 <LED_Proc+0x28>)
 8001266:	f001 f8ac 	bl	80023c2 <HAL_GPIO_TogglePin>
    }    
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000310 	.word	0x20000310
 8001274:	40020400 	.word	0x40020400

08001278 <GPIO_Proc>:

void GPIO_Proc (void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    LED_Proc();
 800127c:	f7ff ffe6 	bl	800124c <LED_Proc>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <UART_RX_Proc>:

extern DMA_HandleTypeDef hdma_usart2_rx;
extern DMA_HandleTypeDef hdma_usart3_rx;

void UART_RX_Proc (void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
    uint32_t i = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]

    if (uart2_rx_flag != 0)
 800128e:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <UART_RX_Proc+0xb8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d020      	beq.n	80012d8 <UART_RX_Proc+0x54>
    {
        uart2_rx_flag = 0;
 8001296:	4b29      	ldr	r3, [pc, #164]	@ (800133c <UART_RX_Proc+0xb8>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
        // {
        //     // printf(">%s", &uart2_rx_buf[i]);
        //     HAL_UART_Transmit(&huart3, (uint8_t *) uart2_rx_buf[])
        //     HAL_Delay(1);
        // }
        HAL_UART_Transmit(&huart3, (uint8_t *) uart2_rx_buf, UART_RXDATA_MAX, 1000);
 800129c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012a4:	4926      	ldr	r1, [pc, #152]	@ (8001340 <UART_RX_Proc+0xbc>)
 80012a6:	4827      	ldr	r0, [pc, #156]	@ (8001344 <UART_RX_Proc+0xc0>)
 80012a8:	f003 fcbc 	bl	8004c24 <HAL_UART_Transmit>
        //     HAL_Delay(1);

        //printf("UART2 RX Complete. print Data.");
        //HAL_Delay(1);

        __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80012ac:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <UART_RX_Proc+0xc4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <UART_RX_Proc+0xc4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Instance->NDTR = UART_RXDATA_MAX;
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <UART_RX_Proc+0xc4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c4:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart2_rx);
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <UART_RX_Proc+0xc4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <UART_RX_Proc+0xc4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0201 	orr.w	r2, r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        __HAL_DMA_DISABLE(&hdma_usart3_rx);
        hdma_usart3_rx.Instance->NDTR = UART_RXDATA_MAX;
        __HAL_DMA_ENABLE(&hdma_usart3_rx);
    }
}
 80012d6:	e02c      	b.n	8001332 <UART_RX_Proc+0xae>
    else if (uart3_rx_flag != NULL)
 80012d8:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <UART_RX_Proc+0xc8>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d028      	beq.n	8001332 <UART_RX_Proc+0xae>
        uart3_rx_flag = 0x00;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <UART_RX_Proc+0xc8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
        for ( i = 0; i < UART_RXDATA_MAX; i++ )
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e009      	b.n	8001300 <UART_RX_Proc+0x7c>
            printf(">%s", &uart2_rx_buf[i]);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <UART_RX_Proc+0xbc>)
 80012f0:	4413      	add	r3, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	4816      	ldr	r0, [pc, #88]	@ (8001350 <UART_RX_Proc+0xcc>)
 80012f6:	f008 ff13 	bl	800a120 <iprintf>
        for ( i = 0; i < UART_RXDATA_MAX; i++ )
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3301      	adds	r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001306:	d3f1      	bcc.n	80012ec <UART_RX_Proc+0x68>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <UART_RX_Proc+0xd0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <UART_RX_Proc+0xd0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
        hdma_usart3_rx.Instance->NDTR = UART_RXDATA_MAX;
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <UART_RX_Proc+0xd0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001320:	605a      	str	r2, [r3, #4]
        __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <UART_RX_Proc+0xd0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <UART_RX_Proc+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0201 	orr.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20002520 	.word	0x20002520
 8001340:	2000051c 	.word	0x2000051c
 8001344:	20000208 	.word	0x20000208
 8001348:	20000250 	.word	0x20000250
 800134c:	20002521 	.word	0x20002521
 8001350:	0800b3b4 	.word	0x0800b3b4
 8001354:	200002b0 	.word	0x200002b0

08001358 <USB_CDC_Proc>:
/*----------------------------------------------------------------------------*/
static uint16_t count = 0;

/* USER CODE BEGIN 1 */
void USB_CDC_Proc (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
    #if 1
    if (TIM1_CNT_2 >= 1000)
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <USB_CDC_Proc+0x20>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001364:	d302      	bcc.n	800136c <USB_CDC_Proc+0x14>
    {
        TIM1_CNT_2 = 0;
 8001366:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <USB_CDC_Proc+0x20>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        sprintf(USB_CdcTxBuffer_FS, "-------------------------------------------\r\n" );
        CDC_Transmit_FS(USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
    }
    #endif
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000314 	.word	0x20000314

0800137c <USB_CDC_RX_Proc>:

void USB_CDC_RX_Proc(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    if (USB_CdcRxBuffer_FS_cnt != NULL)
 8001380:	4b2d      	ldr	r3, [pc, #180]	@ (8001438 <USB_CDC_RX_Proc+0xbc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d055      	beq.n	8001434 <USB_CDC_RX_Proc+0xb8>
    {
        if (!strncmp("RXBUF ALL PRINT", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 8001388:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <USB_CDC_RX_Proc+0xbc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3b02      	subs	r3, #2
 800138e:	461a      	mov	r2, r3
 8001390:	492a      	ldr	r1, [pc, #168]	@ (800143c <USB_CDC_RX_Proc+0xc0>)
 8001392:	482b      	ldr	r0, [pc, #172]	@ (8001440 <USB_CDC_RX_Proc+0xc4>)
 8001394:	f008 ff41 	bl	800a21a <strncmp>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10d      	bne.n	80013ba <USB_CDC_RX_Proc+0x3e>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB ALL\r\n");
 800139e:	4929      	ldr	r1, [pc, #164]	@ (8001444 <USB_CDC_RX_Proc+0xc8>)
 80013a0:	4829      	ldr	r0, [pc, #164]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 80013a2:	f008 fecf 	bl	800a144 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80013a6:	4828      	ldr	r0, [pc, #160]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 80013a8:	f7fe ff22 	bl	80001f0 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4825      	ldr	r0, [pc, #148]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 80013b4:	f7ff ff36 	bl	8001224 <User_CDC_Transmit_FS>
 80013b8:	e032      	b.n	8001420 <USB_CDC_RX_Proc+0xa4>
        }
        else if (!strncmp("RXBUF CLEAR", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 80013ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <USB_CDC_RX_Proc+0xbc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3b02      	subs	r3, #2
 80013c0:	461a      	mov	r2, r3
 80013c2:	491e      	ldr	r1, [pc, #120]	@ (800143c <USB_CDC_RX_Proc+0xc0>)
 80013c4:	4821      	ldr	r0, [pc, #132]	@ (800144c <USB_CDC_RX_Proc+0xd0>)
 80013c6:	f008 ff28 	bl	800a21a <strncmp>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10d      	bne.n	80013ec <USB_CDC_RX_Proc+0x70>
        {
            sprintf(USB_CdcTxBuffer_FS, "USB RX Buffer Clear\r\n");
 80013d0:	491f      	ldr	r1, [pc, #124]	@ (8001450 <USB_CDC_RX_Proc+0xd4>)
 80013d2:	481d      	ldr	r0, [pc, #116]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 80013d4:	f008 feb6 	bl	800a144 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 80013d8:	481b      	ldr	r0, [pc, #108]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 80013da:	f7fe ff09 	bl	80001f0 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	4818      	ldr	r0, [pc, #96]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 80013e6:	f7ff ff1d 	bl	8001224 <User_CDC_Transmit_FS>
 80013ea:	e019      	b.n	8001420 <USB_CDC_RX_Proc+0xa4>
        }
        else if (!strncmp("SYSTEM RESET", USB_CdcRxBuffer_FS, USB_CDC_RX_CNT))
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <USB_CDC_RX_Proc+0xbc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b02      	subs	r3, #2
 80013f2:	461a      	mov	r2, r3
 80013f4:	4911      	ldr	r1, [pc, #68]	@ (800143c <USB_CDC_RX_Proc+0xc0>)
 80013f6:	4817      	ldr	r0, [pc, #92]	@ (8001454 <USB_CDC_RX_Proc+0xd8>)
 80013f8:	f008 ff0f 	bl	800a21a <strncmp>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10e      	bne.n	8001420 <USB_CDC_RX_Proc+0xa4>
        {
            sprintf(USB_CdcTxBuffer_FS, "SYSTEM RESET\r\n");
 8001402:	4915      	ldr	r1, [pc, #84]	@ (8001458 <USB_CDC_RX_Proc+0xdc>)
 8001404:	4810      	ldr	r0, [pc, #64]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 8001406:	f008 fe9d 	bl	800a144 <siprintf>
            User_CDC_Transmit_FS((uint8_t *) USB_CdcTxBuffer_FS, strlen(USB_CdcTxBuffer_FS));
 800140a:	480f      	ldr	r0, [pc, #60]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 800140c:	f7fe fef0 	bl	80001f0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29b      	uxth	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	480c      	ldr	r0, [pc, #48]	@ (8001448 <USB_CDC_RX_Proc+0xcc>)
 8001418:	f7ff ff04 	bl	8001224 <User_CDC_Transmit_FS>
            HAL_NVIC_SystemReset();
 800141c:	f000 f9f9 	bl	8001812 <HAL_NVIC_SystemReset>
        }

        memset(USB_CdcRxBuffer_FS, 0, USB_CdcRxBuffer_FS_cnt);
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <USB_CDC_RX_Proc+0xbc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <USB_CDC_RX_Proc+0xc0>)
 800142a:	f008 feee 	bl	800a20a <memset>
        USB_CdcRxBuffer_FS_cnt = 0;
 800142e:	4b02      	ldr	r3, [pc, #8]	@ (8001438 <USB_CDC_RX_Proc+0xbc>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    }
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000518 	.word	0x20000518
 800143c:	20000318 	.word	0x20000318
 8001440:	0800b3b8 	.word	0x0800b3b8
 8001444:	0800b3c8 	.word	0x0800b3c8
 8001448:	20000418 	.word	0x20000418
 800144c:	0800b3d4 	.word	0x0800b3d4
 8001450:	0800b3e0 	.word	0x0800b3e0
 8001454:	0800b3f8 	.word	0x0800b3f8
 8001458:	0800b408 	.word	0x0800b408

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001460:	f7ff fc24 	bl	8000cac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800148a:	f008 ff37 	bl	800a2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff f93b 	bl	8000708 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001494:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80014a0:	0800b4c4 	.word	0x0800b4c4
  ldr r2, =_sbss
 80014a4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80014a8:	20004258 	.word	0x20004258

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f965 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff f9c4 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f981 	bl	800181a <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f945 	bl	80017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	20002524 	.word	0x20002524

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20002524 	.word	0x20002524

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	@ (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	@ (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	@ (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	@ 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800173c:	f3bf 8f4f 	dsb	sy
}
 8001740:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <__NVIC_SystemReset+0x24>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800174a:	4904      	ldr	r1, [pc, #16]	@ (800175c <__NVIC_SystemReset+0x24>)
 800174c:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <__NVIC_SystemReset+0x28>)
 800174e:	4313      	orrs	r3, r2
 8001750:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001752:	f3bf 8f4f 	dsb	sy
}
 8001756:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <__NVIC_SystemReset+0x20>
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	05fa0004 	.word	0x05fa0004

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff78 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff13 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff28 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff78 	bl	80016d0 <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff47 	bl	800167c <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff1b 	bl	8001640 <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001816:	f7ff ff8f 	bl	8001738 <__NVIC_SystemReset>

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff9e 	bl	8001764 <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff fe9c 	bl	800157c <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e099      	b.n	8001984 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001870:	e00f      	b.n	8001892 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001872:	f7ff fe83 	bl	800157c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b05      	cmp	r3, #5
 800187e:	d908      	bls.n	8001892 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2220      	movs	r2, #32
 8001884:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2203      	movs	r2, #3
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e078      	b.n	8001984 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1e8      	bne.n	8001872 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4b38      	ldr	r3, [pc, #224]	@ (800198c <HAL_DMA_Init+0x158>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d107      	bne.n	80018fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	4313      	orrs	r3, r2
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f023 0307 	bic.w	r3, r3, #7
 8001912:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4313      	orrs	r3, r2
 800191c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	2b04      	cmp	r3, #4
 8001924:	d117      	bne.n	8001956 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00e      	beq.n	8001956 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fb01 	bl	8001f40 <DMA_CheckFifoParam>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2240      	movs	r2, #64	@ 0x40
 8001948:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001952:	2301      	movs	r3, #1
 8001954:	e016      	b.n	8001984 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fab8 	bl	8001ed4 <DMA_CalcBaseAndBitshift>
 8001964:	4603      	mov	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196c:	223f      	movs	r2, #63	@ 0x3f
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	f010803f 	.word	0xf010803f

08001990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_DMA_Start_IT+0x26>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e040      	b.n	8001a38 <HAL_DMA_Start_IT+0xa8>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d12f      	bne.n	8001a2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2202      	movs	r2, #2
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fa4a 	bl	8001e78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e8:	223f      	movs	r2, #63	@ 0x3f
 80019ea:	409a      	lsls	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0216 	orr.w	r2, r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0208 	orr.w	r2, r2, #8
 8001a16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e005      	b.n	8001a36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a32:	2302      	movs	r3, #2
 8001a34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a4e:	f7ff fd95 	bl	800157c <HAL_GetTick>
 8001a52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d008      	beq.n	8001a72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2280      	movs	r2, #128	@ 0x80
 8001a64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e052      	b.n	8001b18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0216 	bic.w	r2, r2, #22
 8001a80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d103      	bne.n	8001aa2 <HAL_DMA_Abort+0x62>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0208 	bic.w	r2, r2, #8
 8001ab0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac2:	e013      	b.n	8001aec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac4:	f7ff fd5a 	bl	800157c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d90c      	bls.n	8001aec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2203      	movs	r2, #3
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e015      	b.n	8001b18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1e4      	bne.n	8001ac4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afe:	223f      	movs	r2, #63	@ 0x3f
 8001b00:	409a      	lsls	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d004      	beq.n	8001b3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2280      	movs	r2, #128	@ 0x80
 8001b38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00c      	b.n	8001b58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2205      	movs	r2, #5
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b70:	4b8e      	ldr	r3, [pc, #568]	@ (8001dac <HAL_DMA_IRQHandler+0x248>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a8e      	ldr	r2, [pc, #568]	@ (8001db0 <HAL_DMA_IRQHandler+0x24c>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0a9b      	lsrs	r3, r3, #10
 8001b7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2208      	movs	r2, #8
 8001b90:	409a      	lsls	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01a      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0204 	bic.w	r2, r2, #4
 8001bb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfe:	f043 0202 	orr.w	r2, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d012      	beq.n	8001c3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	2204      	movs	r2, #4
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c40:	2210      	movs	r2, #16
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d043      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d03c      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5e:	2210      	movs	r2, #16
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d018      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d024      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
 8001c92:	e01f      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
 8001ca4:	e016      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0208 	bic.w	r2, r2, #8
 8001cc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd8:	2220      	movs	r2, #32
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 808f 	beq.w	8001e04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8087 	beq.w	8001e04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d136      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0216 	bic.w	r2, r2, #22
 8001d1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <HAL_DMA_IRQHandler+0x1da>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0208 	bic.w	r2, r2, #8
 8001d4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	223f      	movs	r2, #63	@ 0x3f
 8001d54:	409a      	lsls	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d07e      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
        }
        return;
 8001d7a:	e079      	b.n	8001e70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01d      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10d      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d031      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	4798      	blx	r3
 8001da8:	e02c      	b.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000
 8001db0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d023      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e01e      	b.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0210 	bic.w	r2, r2, #16
 8001de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d032      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d022      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2205      	movs	r2, #5
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d307      	bcc.n	8001e4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f2      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x2cc>
 8001e4a:	e000      	b.n	8001e4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
 8001e6e:	e000      	b.n	8001e72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e70:	bf00      	nop
    }
  }
}
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b40      	cmp	r3, #64	@ 0x40
 8001ea4:	d108      	bne.n	8001eb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eb6:	e007      	b.n	8001ec8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3b10      	subs	r3, #16
 8001ee4:	4a14      	ldr	r2, [pc, #80]	@ (8001f38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eee:	4a13      	ldr	r2, [pc, #76]	@ (8001f3c <DMA_CalcBaseAndBitshift+0x68>)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d909      	bls.n	8001f16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	1d1a      	adds	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f14:	e007      	b.n	8001f26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f1e:	f023 0303 	bic.w	r3, r3, #3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	aaaaaaab 	.word	0xaaaaaaab
 8001f3c:	0800b478 	.word	0x0800b478

08001f40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d11f      	bne.n	8001f9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d856      	bhi.n	800200e <DMA_CheckFifoParam+0xce>
 8001f60:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <DMA_CheckFifoParam+0x28>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	08001f8b 	.word	0x08001f8b
 8001f70:	08001f79 	.word	0x08001f79
 8001f74:	0800200f 	.word	0x0800200f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d046      	beq.n	8002012 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f88:	e043      	b.n	8002012 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f92:	d140      	bne.n	8002016 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f98:	e03d      	b.n	8002016 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fa2:	d121      	bne.n	8001fe8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d837      	bhi.n	800201a <DMA_CheckFifoParam+0xda>
 8001faa:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb0 <DMA_CheckFifoParam+0x70>)
 8001fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb0:	08001fc1 	.word	0x08001fc1
 8001fb4:	08001fc7 	.word	0x08001fc7
 8001fb8:	08001fc1 	.word	0x08001fc1
 8001fbc:	08001fd9 	.word	0x08001fd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc4:	e030      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d025      	beq.n	800201e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd6:	e022      	b.n	800201e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fdc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fe0:	d11f      	bne.n	8002022 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fe6:	e01c      	b.n	8002022 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d903      	bls.n	8001ff6 <DMA_CheckFifoParam+0xb6>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d003      	beq.n	8001ffc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ff4:	e018      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffa:	e015      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002000:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
      break;
 800200c:	e00b      	b.n	8002026 <DMA_CheckFifoParam+0xe6>
      break;
 800200e:	bf00      	nop
 8002010:	e00a      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e008      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 8002016:	bf00      	nop
 8002018:	e006      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
 800201c:	e004      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 800201e:	bf00      	nop
 8002020:	e002      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;   
 8002022:	bf00      	nop
 8002024:	e000      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
    }
  } 
  
  return status; 
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e177      	b.n	8002344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8166 	bne.w	800233e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80c0 	beq.w	800233e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b66      	ldr	r3, [pc, #408]	@ (800235c <HAL_GPIO_Init+0x324>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	4a65      	ldr	r2, [pc, #404]	@ (800235c <HAL_GPIO_Init+0x324>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ce:	4b63      	ldr	r3, [pc, #396]	@ (800235c <HAL_GPIO_Init+0x324>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a61      	ldr	r2, [pc, #388]	@ (8002360 <HAL_GPIO_Init+0x328>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <HAL_GPIO_Init+0x32c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d037      	beq.n	8002276 <HAL_GPIO_Init+0x23e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a57      	ldr	r2, [pc, #348]	@ (8002368 <HAL_GPIO_Init+0x330>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_GPIO_Init+0x23a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a56      	ldr	r2, [pc, #344]	@ (800236c <HAL_GPIO_Init+0x334>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02b      	beq.n	800226e <HAL_GPIO_Init+0x236>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a55      	ldr	r2, [pc, #340]	@ (8002370 <HAL_GPIO_Init+0x338>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d025      	beq.n	800226a <HAL_GPIO_Init+0x232>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a54      	ldr	r2, [pc, #336]	@ (8002374 <HAL_GPIO_Init+0x33c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x22e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a53      	ldr	r2, [pc, #332]	@ (8002378 <HAL_GPIO_Init+0x340>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x22a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a52      	ldr	r2, [pc, #328]	@ (800237c <HAL_GPIO_Init+0x344>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x226>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a51      	ldr	r2, [pc, #324]	@ (8002380 <HAL_GPIO_Init+0x348>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x222>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a50      	ldr	r2, [pc, #320]	@ (8002384 <HAL_GPIO_Init+0x34c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x21e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4f      	ldr	r2, [pc, #316]	@ (8002388 <HAL_GPIO_Init+0x350>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x21a>
 800224e:	2309      	movs	r3, #9
 8002250:	e012      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002252:	230a      	movs	r3, #10
 8002254:	e010      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002256:	2308      	movs	r3, #8
 8002258:	e00e      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800225a:	2307      	movs	r3, #7
 800225c:	e00c      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800225e:	2306      	movs	r3, #6
 8002260:	e00a      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002262:	2305      	movs	r3, #5
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002266:	2304      	movs	r3, #4
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	@ (8002360 <HAL_GPIO_Init+0x328>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <HAL_GPIO_Init+0x354>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a34      	ldr	r2, [pc, #208]	@ (800238c <HAL_GPIO_Init+0x354>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b32      	ldr	r3, [pc, #200]	@ (800238c <HAL_GPIO_Init+0x354>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a29      	ldr	r2, [pc, #164]	@ (800238c <HAL_GPIO_Init+0x354>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ea:	4b28      	ldr	r3, [pc, #160]	@ (800238c <HAL_GPIO_Init+0x354>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230e:	4a1f      	ldr	r2, [pc, #124]	@ (800238c <HAL_GPIO_Init+0x354>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002314:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <HAL_GPIO_Init+0x354>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002338:	4a14      	ldr	r2, [pc, #80]	@ (800238c <HAL_GPIO_Init+0x354>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f ae84 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40013800 	.word	0x40013800
 8002364:	40020000 	.word	0x40020000
 8002368:	40020400 	.word	0x40020400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40021400 	.word	0x40021400
 800237c:	40021800 	.word	0x40021800
 8002380:	40021c00 	.word	0x40021c00
 8002384:	40022000 	.word	0x40022000
 8002388:	40022400 	.word	0x40022400
 800238c:	40013c00 	.word	0x40013c00

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d4:	887a      	ldrh	r2, [r7, #2]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	041a      	lsls	r2, r3, #16
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43d9      	mvns	r1, r3
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	400b      	ands	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e101      	b.n	800260c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f007 faa6 	bl	8009974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2203      	movs	r2, #3
 800242c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002436:	d102      	bne.n	800243e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fe93 	bl	800616e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7c1a      	ldrb	r2, [r3, #16]
 8002450:	f88d 2000 	strb.w	r2, [sp]
 8002454:	3304      	adds	r3, #4
 8002456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002458:	f003 fd72 	bl	8005f40 <USB_CoreInit>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0ce      	b.n	800260c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fe8b 	bl	8006190 <USB_SetCurrentMode>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0bf      	b.n	800260c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e04a      	b.n	8002528 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	3315      	adds	r3, #21
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3314      	adds	r3, #20
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	b298      	uxth	r0, r3
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	332e      	adds	r3, #46	@ 0x2e
 80024ce:	4602      	mov	r2, r0
 80024d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3318      	adds	r3, #24
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	331c      	adds	r3, #28
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3320      	adds	r3, #32
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3324      	adds	r3, #36	@ 0x24
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3301      	adds	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3af      	bcc.n	8002492 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e044      	b.n	80025c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	3301      	adds	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	791b      	ldrb	r3, [r3, #4]
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d3b5      	bcc.n	8002538 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7c1a      	ldrb	r2, [r3, #16]
 80025d4:	f88d 2000 	strb.w	r2, [sp]
 80025d8:	3304      	adds	r3, #4
 80025da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025dc:	f003 fe24 	bl	8006228 <USB_DevInit>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00c      	b.n	800260c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f004 fe68 	bl	80072da <USB_DevDisconnect>

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_PCD_Start+0x1c>
 800262c:	2302      	movs	r3, #2
 800262e:	e022      	b.n	8002676 <HAL_PCD_Start+0x62>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fd75 	bl	800614c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f004 fe16 	bl	8007298 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800267e:	b590      	push	{r4, r7, lr}
 8002680:	b08d      	sub	sp, #52	@ 0x34
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fed4 	bl	8007442 <USB_GetMode>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 848c 	bne.w	8002fba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fe38 	bl	800731c <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8482 	beq.w	8002fb8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 fe25 	bl	800731c <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d107      	bne.n	80026ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f002 0202 	and.w	r2, r2, #2
 80026ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f004 fe13 	bl	800731c <USB_ReadInterrupts>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d161      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0210 	bic.w	r2, r2, #16
 800270e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	0c5b      	lsrs	r3, r3, #17
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	2b02      	cmp	r3, #2
 800273a:	d124      	bne.n	8002786 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d035      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	6a38      	ldr	r0, [r7, #32]
 800275c:	f004 fc4a 	bl	8006ff4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276c:	441a      	add	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277e:	441a      	add	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	e016      	b.n	80027b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	0c5b      	lsrs	r3, r3, #17
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	2b06      	cmp	r3, #6
 8002790:	d110      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002798:	2208      	movs	r2, #8
 800279a:	4619      	mov	r1, r3
 800279c:	6a38      	ldr	r0, [r7, #32]
 800279e:	f004 fc29 	bl	8006ff4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ae:	441a      	add	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0210 	orr.w	r2, r2, #16
 80027c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 fda7 	bl	800731c <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027d8:	f040 80a7 	bne.w	800292a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 fdac 	bl	8007342 <USB_ReadDevAllOutEpInterrupt>
 80027ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027ec:	e099      	b.n	8002922 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 808e 	beq.w	8002916 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f004 fdd0 	bl	80073aa <USB_ReadDevOutEPInterrupt>
 800280a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002822:	461a      	mov	r2, r3
 8002824:	2301      	movs	r3, #1
 8002826:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fea2 	bl	8003574 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002846:	461a      	mov	r2, r3
 8002848:	2308      	movs	r3, #8
 800284a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800284c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 ff78 	bl	8003744 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	2310      	movs	r3, #16
 800286e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d030      	beq.n	80028dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b80      	cmp	r3, #128	@ 0x80
 8002884:	d109      	bne.n	800289a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002894:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002898:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	78db      	ldrb	r3, [r3, #3]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d108      	bne.n	80028ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2200      	movs	r2, #0
 80028bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f007 f95b 	bl	8009b80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028d6:	461a      	mov	r2, r3
 80028d8:	2302      	movs	r3, #2
 80028da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f2:	461a      	mov	r2, r3
 80028f4:	2320      	movs	r3, #32
 80028f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800290e:	461a      	mov	r2, r3
 8002910:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002914:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	3301      	adds	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f af62 	bne.w	80027ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f004 fcf4 	bl	800731c <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800293a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800293e:	f040 80db 	bne.w	8002af8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f004 fd15 	bl	8007376 <USB_ReadDevAllInEpInterrupt>
 800294c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002952:	e0cd      	b.n	8002af0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80c2 	beq.w	8002ae4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f004 fd3b 	bl	80073e6 <USB_ReadDevInEPInterrupt>
 8002970:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d057      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	2201      	movs	r2, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43db      	mvns	r3, r3
 8002996:	69f9      	ldr	r1, [r7, #28]
 8002998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800299c:	4013      	ands	r3, r2
 800299e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ac:	461a      	mov	r2, r3
 80029ae:	2301      	movs	r3, #1
 80029b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	799b      	ldrb	r3, [r3, #6]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d132      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3320      	adds	r3, #32
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4403      	add	r3, r0
 80029da:	331c      	adds	r3, #28
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4419      	add	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4403      	add	r3, r0
 80029ee:	3320      	adds	r3, #32
 80029f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d113      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x3a2>
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3324      	adds	r3, #36	@ 0x24
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	f004 fd42 	bl	80074a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f007 f825 	bl	8009a76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a42:	461a      	mov	r2, r3
 8002a44:	2308      	movs	r3, #8
 8002a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2310      	movs	r3, #16
 8002a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2340      	movs	r3, #64	@ 0x40
 8002a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d023      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a8c:	6a38      	ldr	r0, [r7, #32]
 8002a8e:	f003 fd2f 	bl	80064f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	78db      	ldrb	r3, [r3, #3]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d108      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f007 f872 	bl	8009ba4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002acc:	461a      	mov	r2, r3
 8002ace:	2302      	movs	r3, #2
 8002ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fcbb 	bl	800345a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f47f af2e 	bne.w	8002954 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 fc0d 	bl	800731c <USB_ReadInterrupts>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b0c:	d122      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d108      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b34:	2100      	movs	r1, #0
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fea2 	bl	8003880 <HAL_PCDEx_LPM_Callback>
 8002b3c:	e002      	b.n	8002b44 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f007 f810 	bl	8009b64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 fbdf 	bl	800731c <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b68:	d112      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f006 ffcc 	bl	8009b18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b8e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 fbc1 	bl	800731c <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba4:	f040 80b7 	bne.w	8002d16 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 fc94 	bl	80064f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bcc:	e046      	b.n	8002c5c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002be0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bf2:	0151      	lsls	r1, r2, #5
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	440a      	add	r2, r1
 8002bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002bfc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c26:	0151      	lsls	r1, r2, #5
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	440a      	add	r2, r1
 8002c2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c46:	0151      	lsls	r1, r2, #5
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	440a      	add	r2, r1
 8002c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c58:	3301      	adds	r3, #1
 8002c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	791b      	ldrb	r3, [r3, #4]
 8002c60:	461a      	mov	r2, r3
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d3b2      	bcc.n	8002bce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c76:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7bdb      	ldrb	r3, [r3, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d016      	beq.n	8002cb2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c94:	f043 030b 	orr.w	r3, r3, #11
 8002c98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002caa:	f043 030b 	orr.w	r3, r3, #11
 8002cae:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb0:	e015      	b.n	8002cde <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cc4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002cc8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cd8:	f043 030b 	orr.w	r3, r3, #11
 8002cdc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002cf0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d00:	461a      	mov	r2, r3
 8002d02:	f004 fbcf 	bl	80074a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 fafe 	bl	800731c <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2a:	d123      	bne.n	8002d74 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fb94 	bl	800745e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 fc51 	bl	80065e2 <USB_GetDevSpeed>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681c      	ldr	r4, [r3, #0]
 8002d4c:	f001 fa70 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8002d50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d56:	461a      	mov	r2, r3
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f003 f955 	bl	8006008 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f006 feb1 	bl	8009ac6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 facf 	bl	800731c <USB_ReadInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d10a      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f006 fe8e 	bl	8009aaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f002 0208 	and.w	r2, r2, #8
 8002d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 faba 	bl	800731c <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dae:	2b80      	cmp	r3, #128	@ 0x80
 8002db0:	d123      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc2:	e014      	b.n	8002dee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fb08 	bl	80033f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	3301      	adds	r3, #1
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	791b      	ldrb	r3, [r3, #4]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d3e4      	bcc.n	8002dc4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 fa8c 	bl	800731c <USB_ReadInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e0e:	d13c      	bne.n	8002e8a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e10:	2301      	movs	r3, #1
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e14:	e02b      	b.n	8002e6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3318      	adds	r3, #24
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d115      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da12      	bge.n	8002e68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3317      	adds	r3, #23
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fac8 	bl	80033f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	791b      	ldrb	r3, [r3, #4]
 8002e72:	461a      	mov	r2, r3
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d3cd      	bcc.n	8002e16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 fa44 	bl	800731c <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e9e:	d156      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea4:	e045      	b.n	8002f32 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d12e      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ece:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	da2b      	bge.n	8002f2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ee0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f28:	6053      	str	r3, [r2, #4]
            break;
 8002f2a:	e008      	b.n	8002f3e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	3301      	adds	r3, #1
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	791b      	ldrb	r3, [r3, #4]
 8002f36:	461a      	mov	r2, r3
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d3b3      	bcc.n	8002ea6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 f9e2 	bl	800731c <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f62:	d10a      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f006 fe2f 	bl	8009bc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f004 f9cc 	bl	800731c <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d115      	bne.n	8002fba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f006 fe1f 	bl	8009be4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	e000      	b.n	8002fba <HAL_PCD_IRQHandler+0x93c>
      return;
 8002fb8:	bf00      	nop
    }
  }
}
 8002fba:	3734      	adds	r7, #52	@ 0x34
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd90      	pop	{r4, r7, pc}

08002fc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_PCD_SetAddress+0x1a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e012      	b.n	8003000 <HAL_PCD_SetAddress+0x40>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f004 f92b 	bl	800724c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4603      	mov	r3, r0
 8003018:	70fb      	strb	r3, [r7, #3]
 800301a:	460b      	mov	r3, r1
 800301c:	803b      	strh	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da0f      	bge.n	800304e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	f003 020f 	and.w	r2, r3, #15
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	3310      	adds	r3, #16
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	705a      	strb	r2, [r3, #1]
 800304c:	e00f      	b.n	800306e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800307a:	883a      	ldrh	r2, [r7, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	78ba      	ldrb	r2, [r7, #2]
 8003084:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003098:	78bb      	ldrb	r3, [r7, #2]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d102      	bne.n	80030a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_PCD_EP_Open+0xaa>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e00e      	b.n	80030d0 <HAL_PCD_EP_Open+0xc8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fab3 	bl	800662c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80030ce:	7afb      	ldrb	r3, [r7, #11]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da0f      	bge.n	800310c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 020f 	and.w	r2, r3, #15
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	3310      	adds	r3, #16
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	705a      	strb	r2, [r3, #1]
 800310a:	e00f      	b.n	800312c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_PCD_EP_Close+0x6e>
 8003142:	2302      	movs	r3, #2
 8003144:	e00e      	b.n	8003164 <HAL_PCD_EP_Close+0x8c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 faf1 	bl	800673c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	460b      	mov	r3, r1
 800317a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	f003 020f 	and.w	r2, r3, #15
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	3304      	adds	r3, #4
 8003194:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2200      	movs	r2, #0
 80031a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ae:	7afb      	ldrb	r3, [r7, #11]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	799b      	ldrb	r3, [r3, #6]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d102      	bne.n	80031c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	799b      	ldrb	r3, [r3, #6]
 80031d0:	461a      	mov	r2, r3
 80031d2:	6979      	ldr	r1, [r7, #20]
 80031d4:	f003 fb8e 	bl	80068f4 <USB_EPStartXfer>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003204:	681b      	ldr	r3, [r3, #0]
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	460b      	mov	r3, r1
 8003220:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	f003 020f 	and.w	r2, r3, #15
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	3310      	adds	r3, #16
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2201      	movs	r2, #1
 8003250:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	b2da      	uxtb	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	799b      	ldrb	r3, [r3, #6]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	799b      	ldrb	r3, [r3, #6]
 8003274:	461a      	mov	r2, r3
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	f003 fb3c 	bl	80068f4 <USB_EPStartXfer>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	7912      	ldrb	r2, [r2, #4]
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e04f      	b.n	8003344 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da0f      	bge.n	80032cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3310      	adds	r3, #16
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	705a      	strb	r2, [r3, #1]
 80032ca:	e00d      	b.n	80032e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_PCD_EP_SetStall+0x82>
 8003304:	2302      	movs	r3, #2
 8003306:	e01d      	b.n	8003344 <HAL_PCD_EP_SetStall+0xbe>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fec4 	bl	80070a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7999      	ldrb	r1, [r3, #6]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003334:	461a      	mov	r2, r3
 8003336:	f004 f8b5 	bl	80074a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	7912      	ldrb	r2, [r2, #4]
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e042      	b.n	80033f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800336a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800336e:	2b00      	cmp	r3, #0
 8003370:	da0f      	bge.n	8003392 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	3310      	adds	r3, #16
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	3304      	adds	r3, #4
 8003388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	705a      	strb	r2, [r3, #1]
 8003390:	e00f      	b.n	80033b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_PCD_EP_ClrStall+0x86>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e00e      	b.n	80033f0 <HAL_PCD_EP_ClrStall+0xa4>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fecd 	bl	8007180 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003408:	2b00      	cmp	r3, #0
 800340a:	da0c      	bge.n	8003426 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	3310      	adds	r3, #16
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	3304      	adds	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e00c      	b.n	8003440 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4413      	add	r3, r2
 800343c:	3304      	adds	r3, #4
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	4618      	mov	r0, r3
 8003448:	f003 fcec 	bl	8006e24 <USB_EPStopXfer>
 800344c:	4603      	mov	r3, r0
 800344e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003450:	7afb      	ldrb	r3, [r7, #11]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b08a      	sub	sp, #40	@ 0x28
 800345e:	af02      	add	r7, sp, #8
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	3310      	adds	r3, #16
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	3304      	adds	r3, #4
 8003480:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d901      	bls.n	8003492 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d902      	bls.n	80034ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3303      	adds	r3, #3
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034b6:	e02a      	b.n	800350e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d902      	bls.n	80034d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	3303      	adds	r3, #3
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68d9      	ldr	r1, [r3, #12]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4603      	mov	r3, r0
 80034f0:	6978      	ldr	r0, [r7, #20]
 80034f2:	f003 fd41 	bl	8006f78 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	441a      	add	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	441a      	add	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	429a      	cmp	r2, r3
 8003522:	d809      	bhi.n	8003538 <PCD_WriteEmptyTxFifo+0xde>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800352c:	429a      	cmp	r2, r3
 800352e:	d203      	bcs.n	8003538 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1bf      	bne.n	80034b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	429a      	cmp	r2, r3
 8003542:	d811      	bhi.n	8003568 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	2201      	movs	r2, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	43db      	mvns	r3, r3
 800355e:	6939      	ldr	r1, [r7, #16]
 8003560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003564:	4013      	ands	r3, r2
 8003566:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	333c      	adds	r3, #60	@ 0x3c
 800358c:	3304      	adds	r3, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	799b      	ldrb	r3, [r3, #6]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d17b      	bne.n	80036a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d015      	beq.n	80035e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	4a61      	ldr	r2, [pc, #388]	@ (800373c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	f240 80b9 	bls.w	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80b3 	beq.w	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035dc:	6093      	str	r3, [r2, #8]
 80035de:	e0a7      	b.n	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	2320      	movs	r3, #32
 80035fa:	6093      	str	r3, [r2, #8]
 80035fc:	e098      	b.n	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	f040 8093 	bne.w	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	4a4b      	ldr	r2, [pc, #300]	@ (800373c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d90f      	bls.n	8003632 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800362e:	6093      	str	r3, [r2, #8]
 8003630:	e07e      	b.n	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	3304      	adds	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	0159      	lsls	r1, r3, #5
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	440b      	add	r3, r1
 8003654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d114      	bne.n	8003694 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800367c:	461a      	mov	r2, r3
 800367e:	2101      	movs	r1, #1
 8003680:	f003 ff10 	bl	80074a4 <USB_EP0_OutStart>
 8003684:	e006      	b.n	8003694 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	441a      	add	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	4619      	mov	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f006 f9d0 	bl	8009a40 <HAL_PCD_DataOutStageCallback>
 80036a0:	e046      	b.n	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4a26      	ldr	r2, [pc, #152]	@ (8003740 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d124      	bne.n	80036f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c0:	461a      	mov	r2, r3
 80036c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036c6:	6093      	str	r3, [r2, #8]
 80036c8:	e032      	b.n	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e0:	461a      	mov	r2, r3
 80036e2:	2320      	movs	r3, #32
 80036e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4619      	mov	r1, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f006 f9a7 	bl	8009a40 <HAL_PCD_DataOutStageCallback>
 80036f2:	e01d      	b.n	8003730 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d114      	bne.n	8003724 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800371c:	461a      	mov	r2, r3
 800371e:	2100      	movs	r1, #0
 8003720:	f003 fec0 	bl	80074a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f006 f988 	bl	8009a40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	4f54300a 	.word	0x4f54300a
 8003740:	4f54310a 	.word	0x4f54310a

08003744 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	333c      	adds	r3, #60	@ 0x3c
 800375c:	3304      	adds	r3, #4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a15      	ldr	r2, [pc, #84]	@ (80037cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d90e      	bls.n	8003798 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003790:	461a      	mov	r2, r3
 8003792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003796:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f006 f93f 	bl	8009a1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <PCD_EP_OutSetupPacket_int+0x88>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d90c      	bls.n	80037c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	799b      	ldrb	r3, [r3, #6]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037b8:	461a      	mov	r2, r3
 80037ba:	2101      	movs	r1, #1
 80037bc:	f003 fe72 	bl	80074a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	4f54300a 	.word	0x4f54300a

080037d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
 80037dc:	4613      	mov	r3, r2
 80037de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037ee:	883b      	ldrh	r3, [r7, #0]
 80037f0:	0419      	lsls	r1, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80037fc:	e028      	b.n	8003850 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4413      	add	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800380c:	2300      	movs	r3, #0
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	e00d      	b.n	800382e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	3340      	adds	r3, #64	@ 0x40
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	4413      	add	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	3301      	adds	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	3b01      	subs	r3, #1
 8003834:	429a      	cmp	r2, r3
 8003836:	d3ec      	bcc.n	8003812 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003838:	883b      	ldrh	r3, [r7, #0]
 800383a:	0418      	lsls	r0, r3, #16
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	3b01      	subs	r3, #1
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	4302      	orrs	r2, r0
 8003848:	3340      	adds	r3, #64	@ 0x40
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e267      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d075      	beq.n	80039a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038b6:	4b88      	ldr	r3, [pc, #544]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d00c      	beq.n	80038dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c2:	4b85      	ldr	r3, [pc, #532]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d112      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ce:	4b82      	ldr	r3, [pc, #520]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038da:	d10b      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05b      	beq.n	80039a0 <HAL_RCC_OscConfig+0x108>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d157      	bne.n	80039a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e242      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d106      	bne.n	800390c <HAL_RCC_OscConfig+0x74>
 80038fe:	4b76      	ldr	r3, [pc, #472]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a75      	ldr	r2, [pc, #468]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e01d      	b.n	8003948 <HAL_RCC_OscConfig+0xb0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x98>
 8003916:	4b70      	ldr	r3, [pc, #448]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800391c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6c      	ldr	r2, [pc, #432]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0xb0>
 8003930:	4b69      	ldr	r3, [pc, #420]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a68      	ldr	r2, [pc, #416]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b66      	ldr	r3, [pc, #408]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a65      	ldr	r2, [pc, #404]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fd fe14 	bl	800157c <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003958:	f7fd fe10 	bl	800157c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e207      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0xc0>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fd fe00 	bl	800157c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003980:	f7fd fdfc 	bl	800157c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1f3      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	4b51      	ldr	r3, [pc, #324]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0xe8>
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d063      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ae:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ba:	4b47      	ldr	r3, [pc, #284]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d11c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b44      	ldr	r3, [pc, #272]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d116      	bne.n	8003a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d2:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x152>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e1c7      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4937      	ldr	r1, [pc, #220]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	e03a      	b.n	8003a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a08:	4b34      	ldr	r3, [pc, #208]	@ (8003adc <HAL_RCC_OscConfig+0x244>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fd fdb5 	bl	800157c <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a16:	f7fd fdb1 	bl	800157c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e1a8      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	4b28      	ldr	r3, [pc, #160]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4925      	ldr	r1, [pc, #148]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]
 8003a48:	e015      	b.n	8003a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a4a:	4b24      	ldr	r3, [pc, #144]	@ (8003adc <HAL_RCC_OscConfig+0x244>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fd fd94 	bl	800157c <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fd fd90 	bl	800157c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e187      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d036      	beq.n	8003af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d016      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ae0 <HAL_RCC_OscConfig+0x248>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd fd74 	bl	800157c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fd fd70 	bl	800157c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e167      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCC_OscConfig+0x240>)
 8003aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x200>
 8003ab6:	e01b      	b.n	8003af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <HAL_RCC_OscConfig+0x248>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fd fd5d 	bl	800157c <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac4:	e00e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac6:	f7fd fd59 	bl	800157c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d907      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e150      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	42470000 	.word	0x42470000
 8003ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	4b88      	ldr	r3, [pc, #544]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ea      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8097 	beq.w	8003c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b81      	ldr	r3, [pc, #516]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	4b7d      	ldr	r3, [pc, #500]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	4a7c      	ldr	r2, [pc, #496]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	4b77      	ldr	r3, [pc, #476]	@ (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d118      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b3a:	4b74      	ldr	r3, [pc, #464]	@ (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a73      	ldr	r2, [pc, #460]	@ (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b46:	f7fd fd19 	bl	800157c <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4e:	f7fd fd15 	bl	800157c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e10c      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	4b6a      	ldr	r3, [pc, #424]	@ (8003d0c <HAL_RCC_OscConfig+0x474>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x2ea>
 8003b74:	4b64      	ldr	r3, [pc, #400]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	4a63      	ldr	r2, [pc, #396]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b80:	e01c      	b.n	8003bbc <HAL_RCC_OscConfig+0x324>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x30c>
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b96:	4b5c      	ldr	r3, [pc, #368]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0x324>
 8003ba4:	4b58      	ldr	r3, [pc, #352]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	4a57      	ldr	r2, [pc, #348]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb0:	4b55      	ldr	r3, [pc, #340]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	4a54      	ldr	r2, [pc, #336]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 0304 	bic.w	r3, r3, #4
 8003bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d015      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd fcda 	bl	800157c <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bcc:	f7fd fcd6 	bl	800157c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e0cb      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be2:	4b49      	ldr	r3, [pc, #292]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0ee      	beq.n	8003bcc <HAL_RCC_OscConfig+0x334>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf0:	f7fd fcc4 	bl	800157c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fd fcc0 	bl	800157c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0b5      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1ee      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c20:	4b39      	ldr	r3, [pc, #228]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	4a38      	ldr	r2, [pc, #224]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80a1 	beq.w	8003d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c36:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d05c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d141      	bne.n	8003cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b31      	ldr	r3, [pc, #196]	@ (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fd fc94 	bl	800157c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fd fc90 	bl	800157c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e087      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	019b      	lsls	r3, r3, #6
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	491b      	ldr	r1, [pc, #108]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7fd fc69 	bl	800157c <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cae:	f7fd fc65 	bl	800157c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e05c      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc0:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x416>
 8003ccc:	e054      	b.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <HAL_RCC_OscConfig+0x478>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fc52 	bl	800157c <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd fc4e 	bl	800157c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e045      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x444>
 8003cfa:	e03d      	b.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e038      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x4ec>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d028      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d121      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d11a      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d44:	4013      	ands	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d111      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0cc      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b68      	ldr	r3, [pc, #416]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d90c      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b65      	ldr	r3, [pc, #404]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b63      	ldr	r3, [pc, #396]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0b8      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ddc:	4b59      	ldr	r3, [pc, #356]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a58      	ldr	r2, [pc, #352]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df4:	4b53      	ldr	r3, [pc, #332]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a52      	ldr	r2, [pc, #328]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e00:	4b50      	ldr	r3, [pc, #320]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	494d      	ldr	r1, [pc, #308]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d044      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b47      	ldr	r3, [pc, #284]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d119      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e07f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d003      	beq.n	8003e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b3f      	ldr	r3, [pc, #252]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e56:	4b3b      	ldr	r3, [pc, #236]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e067      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e66:	4b37      	ldr	r3, [pc, #220]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4934      	ldr	r1, [pc, #208]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e78:	f7fd fb80 	bl	800157c <HAL_GetTick>
 8003e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e80:	f7fd fb7c 	bl	800157c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e04f      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	4b2b      	ldr	r3, [pc, #172]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 020c 	and.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d1eb      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d20c      	bcs.n	8003ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b22      	ldr	r3, [pc, #136]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e032      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003edc:	4b19      	ldr	r3, [pc, #100]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4916      	ldr	r1, [pc, #88]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003efa:	4b12      	ldr	r3, [pc, #72]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	490e      	ldr	r1, [pc, #56]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f0e:	f000 f889 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003f12:	4602      	mov	r2, r0
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	490a      	ldr	r1, [pc, #40]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c0>)
 8003f20:	5ccb      	ldrb	r3, [r1, r3]
 8003f22:	fa22 f303 	lsr.w	r3, r2, r3
 8003f26:	4a09      	ldr	r2, [pc, #36]	@ (8003f4c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f2a:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd fae0 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023c00 	.word	0x40023c00
 8003f44:	40023800 	.word	0x40023800
 8003f48:	0800b460 	.word	0x0800b460
 8003f4c:	20000000 	.word	0x20000000
 8003f50:	20000004 	.word	0x20000004

08003f54 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	@ 0x30
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d129      	bne.n	8003fba <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f76:	4b28      	ldr	r3, [pc, #160]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003f82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003f98:	f107 031c 	add.w	r3, r7, #28
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	481f      	ldr	r0, [pc, #124]	@ (800401c <HAL_RCC_MCOConfig+0xc8>)
 8003fa0:	f7fe f84a 	bl	8002038 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	4919      	ldr	r1, [pc, #100]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003fb8:	e029      	b.n	800400e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	4a15      	ldr	r2, [pc, #84]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fca:	4b13      	ldr	r3, [pc, #76]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003fec:	f107 031c 	add.w	r3, r7, #28
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	480b      	ldr	r0, [pc, #44]	@ (8004020 <HAL_RCC_MCOConfig+0xcc>)
 8003ff4:	f7fe f820 	bl	8002038 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003ff8:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	00d9      	lsls	r1, r3, #3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	430b      	orrs	r3, r1
 8004008:	4903      	ldr	r1, [pc, #12]	@ (8004018 <HAL_RCC_MCOConfig+0xc4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
}
 800400e:	bf00      	nop
 8004010:	3730      	adds	r7, #48	@ 0x30
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	40020000 	.word	0x40020000
 8004020:	40020800 	.word	0x40020800

08004024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004028:	b094      	sub	sp, #80	@ 0x50
 800402a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004030:	2300      	movs	r3, #0
 8004032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004034:	2300      	movs	r3, #0
 8004036:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800403c:	4b79      	ldr	r3, [pc, #484]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x200>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b08      	cmp	r3, #8
 8004046:	d00d      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x40>
 8004048:	2b08      	cmp	r3, #8
 800404a:	f200 80e1 	bhi.w	8004210 <HAL_RCC_GetSysClockFreq+0x1ec>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x34>
 8004052:	2b04      	cmp	r3, #4
 8004054:	d003      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0x3a>
 8004056:	e0db      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b73      	ldr	r3, [pc, #460]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x204>)
 800405a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800405c:	e0db      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800405e:	4b73      	ldr	r3, [pc, #460]	@ (800422c <HAL_RCC_GetSysClockFreq+0x208>)
 8004060:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004062:	e0d8      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004064:	4b6f      	ldr	r3, [pc, #444]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x200>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800406c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800406e:	4b6d      	ldr	r3, [pc, #436]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x200>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407a:	4b6a      	ldr	r3, [pc, #424]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x200>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	2200      	movs	r2, #0
 8004082:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004084:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408c:	633b      	str	r3, [r7, #48]	@ 0x30
 800408e:	2300      	movs	r3, #0
 8004090:	637b      	str	r3, [r7, #52]	@ 0x34
 8004092:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004096:	4622      	mov	r2, r4
 8004098:	462b      	mov	r3, r5
 800409a:	f04f 0000 	mov.w	r0, #0
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	0159      	lsls	r1, r3, #5
 80040a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a8:	0150      	lsls	r0, r2, #5
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4621      	mov	r1, r4
 80040b0:	1a51      	subs	r1, r2, r1
 80040b2:	6139      	str	r1, [r7, #16]
 80040b4:	4629      	mov	r1, r5
 80040b6:	eb63 0301 	sbc.w	r3, r3, r1
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c8:	4659      	mov	r1, fp
 80040ca:	018b      	lsls	r3, r1, #6
 80040cc:	4651      	mov	r1, sl
 80040ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d2:	4651      	mov	r1, sl
 80040d4:	018a      	lsls	r2, r1, #6
 80040d6:	4651      	mov	r1, sl
 80040d8:	ebb2 0801 	subs.w	r8, r2, r1
 80040dc:	4659      	mov	r1, fp
 80040de:	eb63 0901 	sbc.w	r9, r3, r1
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040f6:	4690      	mov	r8, r2
 80040f8:	4699      	mov	r9, r3
 80040fa:	4623      	mov	r3, r4
 80040fc:	eb18 0303 	adds.w	r3, r8, r3
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	462b      	mov	r3, r5
 8004104:	eb49 0303 	adc.w	r3, r9, r3
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004116:	4629      	mov	r1, r5
 8004118:	024b      	lsls	r3, r1, #9
 800411a:	4621      	mov	r1, r4
 800411c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004120:	4621      	mov	r1, r4
 8004122:	024a      	lsls	r2, r1, #9
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412a:	2200      	movs	r2, #0
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800412e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004130:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004134:	f7fc f8b4 	bl	80002a0 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4613      	mov	r3, r2
 800413e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004140:	e058      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004142:	4b38      	ldr	r3, [pc, #224]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x200>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	099b      	lsrs	r3, r3, #6
 8004148:	2200      	movs	r2, #0
 800414a:	4618      	mov	r0, r3
 800414c:	4611      	mov	r1, r2
 800414e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004152:	623b      	str	r3, [r7, #32]
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
 8004158:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	f04f 0000 	mov.w	r0, #0
 8004164:	f04f 0100 	mov.w	r1, #0
 8004168:	0159      	lsls	r1, r3, #5
 800416a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416e:	0150      	lsls	r0, r2, #5
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4641      	mov	r1, r8
 8004176:	ebb2 0a01 	subs.w	sl, r2, r1
 800417a:	4649      	mov	r1, r9
 800417c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800418c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004190:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004194:	ebb2 040a 	subs.w	r4, r2, sl
 8004198:	eb63 050b 	sbc.w	r5, r3, fp
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	00eb      	lsls	r3, r5, #3
 80041a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041aa:	00e2      	lsls	r2, r4, #3
 80041ac:	4614      	mov	r4, r2
 80041ae:	461d      	mov	r5, r3
 80041b0:	4643      	mov	r3, r8
 80041b2:	18e3      	adds	r3, r4, r3
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	464b      	mov	r3, r9
 80041b8:	eb45 0303 	adc.w	r3, r5, r3
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ca:	4629      	mov	r1, r5
 80041cc:	028b      	lsls	r3, r1, #10
 80041ce:	4621      	mov	r1, r4
 80041d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d4:	4621      	mov	r1, r4
 80041d6:	028a      	lsls	r2, r1, #10
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041de:	2200      	movs	r2, #0
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	61fa      	str	r2, [r7, #28]
 80041e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e8:	f7fc f85a 	bl	80002a0 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4613      	mov	r3, r2
 80041f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004204:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800420e:	e002      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x204>)
 8004212:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004218:	4618      	mov	r0, r3
 800421a:	3750      	adds	r7, #80	@ 0x50
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200

08004230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	@ (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800424c:	f7ff fff0 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a9b      	lsrs	r3, r3, #10
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	@ (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	0800b470 	.word	0x0800b470

08004270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004274:	f7ff ffdc 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	0b5b      	lsrs	r3, r3, #13
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4903      	ldr	r1, [pc, #12]	@ (8004294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	0800b470 	.word	0x0800b470

08004298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e041      	b.n	800432e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fd56 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 fa7e 	bl	80047d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d001      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e04e      	b.n	80043ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a23      	ldr	r2, [pc, #140]	@ (80043fc <HAL_TIM_Base_Start_IT+0xc4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d022      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x80>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437a:	d01d      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x80>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <HAL_TIM_Base_Start_IT+0xc8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d018      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x80>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1e      	ldr	r2, [pc, #120]	@ (8004404 <HAL_TIM_Base_Start_IT+0xcc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x80>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1c      	ldr	r2, [pc, #112]	@ (8004408 <HAL_TIM_Base_Start_IT+0xd0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x80>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1b      	ldr	r2, [pc, #108]	@ (800440c <HAL_TIM_Base_Start_IT+0xd4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x80>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a19      	ldr	r2, [pc, #100]	@ (8004410 <HAL_TIM_Base_Start_IT+0xd8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x80>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <HAL_TIM_Base_Start_IT+0xdc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d111      	bne.n	80043dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d010      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043da:	e007      	b.n	80043ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40010400 	.word	0x40010400
 8004410:	40014000 	.word	0x40014000
 8004414:	40001800 	.word	0x40001800

08004418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d020      	beq.n	800447c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01b      	beq.n	800447c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0202 	mvn.w	r2, #2
 800444c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f999 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f98b 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f99c 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d020      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01b      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0204 	mvn.w	r2, #4
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f973 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f965 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f976 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d020      	beq.n	8004514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01b      	beq.n	8004514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0208 	mvn.w	r2, #8
 80044e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2204      	movs	r2, #4
 80044ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f94d 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f93f 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f950 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d020      	beq.n	8004560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01b      	beq.n	8004560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0210 	mvn.w	r2, #16
 8004530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2208      	movs	r2, #8
 8004536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f927 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 800454c:	e005      	b.n	800455a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f919 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f92a 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0201 	mvn.w	r2, #1
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fa00 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fae4 	bl	8004b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8fb 	bl	80047c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0220 	mvn.w	r2, #32
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fab6 	bl	8004b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIM_ConfigClockSource+0x1c>
 8004610:	2302      	movs	r3, #2
 8004612:	e0b4      	b.n	800477e <HAL_TIM_ConfigClockSource+0x186>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800463a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800464c:	d03e      	beq.n	80046cc <HAL_TIM_ConfigClockSource+0xd4>
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004652:	f200 8087 	bhi.w	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465a:	f000 8086 	beq.w	800476a <HAL_TIM_ConfigClockSource+0x172>
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004662:	d87f      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b70      	cmp	r3, #112	@ 0x70
 8004666:	d01a      	beq.n	800469e <HAL_TIM_ConfigClockSource+0xa6>
 8004668:	2b70      	cmp	r3, #112	@ 0x70
 800466a:	d87b      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b60      	cmp	r3, #96	@ 0x60
 800466e:	d050      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x11a>
 8004670:	2b60      	cmp	r3, #96	@ 0x60
 8004672:	d877      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b50      	cmp	r3, #80	@ 0x50
 8004676:	d03c      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004678:	2b50      	cmp	r3, #80	@ 0x50
 800467a:	d873      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b40      	cmp	r3, #64	@ 0x40
 800467e:	d058      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x13a>
 8004680:	2b40      	cmp	r3, #64	@ 0x40
 8004682:	d86f      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b30      	cmp	r3, #48	@ 0x30
 8004686:	d064      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	2b30      	cmp	r3, #48	@ 0x30
 800468a:	d86b      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b20      	cmp	r3, #32
 800468e:	d060      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d867      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05c      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15a>
 8004698:	2b10      	cmp	r3, #16
 800469a:	d05a      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	e062      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046ae:	f000 f9b9 	bl	8004a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	609a      	str	r2, [r3, #8]
      break;
 80046ca:	e04f      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046dc:	f000 f9a2 	bl	8004a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046ee:	609a      	str	r2, [r3, #8]
      break;
 80046f0:	e03c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	461a      	mov	r2, r3
 8004700:	f000 f916 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2150      	movs	r1, #80	@ 0x50
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f96f 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004710:	e02c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800471e:	461a      	mov	r2, r3
 8004720:	f000 f935 	bl	800498e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2160      	movs	r1, #96	@ 0x60
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f95f 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004730:	e01c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	461a      	mov	r2, r3
 8004740:	f000 f8f6 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2140      	movs	r1, #64	@ 0x40
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f94f 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004750:	e00c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f000 f946 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 8004762:	e003      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      break;
 8004768:	e000      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800476a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a46      	ldr	r2, [pc, #280]	@ (8004904 <TIM_Base_SetConfig+0x12c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d013      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f6:	d00f      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a43      	ldr	r2, [pc, #268]	@ (8004908 <TIM_Base_SetConfig+0x130>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00b      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a42      	ldr	r2, [pc, #264]	@ (800490c <TIM_Base_SetConfig+0x134>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a41      	ldr	r2, [pc, #260]	@ (8004910 <TIM_Base_SetConfig+0x138>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a40      	ldr	r2, [pc, #256]	@ (8004914 <TIM_Base_SetConfig+0x13c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a35      	ldr	r2, [pc, #212]	@ (8004904 <TIM_Base_SetConfig+0x12c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02b      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004838:	d027      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a32      	ldr	r2, [pc, #200]	@ (8004908 <TIM_Base_SetConfig+0x130>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d023      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a31      	ldr	r2, [pc, #196]	@ (800490c <TIM_Base_SetConfig+0x134>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01f      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a30      	ldr	r2, [pc, #192]	@ (8004910 <TIM_Base_SetConfig+0x138>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01b      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2f      	ldr	r2, [pc, #188]	@ (8004914 <TIM_Base_SetConfig+0x13c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d017      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2e      	ldr	r2, [pc, #184]	@ (8004918 <TIM_Base_SetConfig+0x140>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2d      	ldr	r2, [pc, #180]	@ (800491c <TIM_Base_SetConfig+0x144>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00f      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2c      	ldr	r2, [pc, #176]	@ (8004920 <TIM_Base_SetConfig+0x148>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00b      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2b      	ldr	r2, [pc, #172]	@ (8004924 <TIM_Base_SetConfig+0x14c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2a      	ldr	r2, [pc, #168]	@ (8004928 <TIM_Base_SetConfig+0x150>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a29      	ldr	r2, [pc, #164]	@ (800492c <TIM_Base_SetConfig+0x154>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d108      	bne.n	800489c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a10      	ldr	r2, [pc, #64]	@ (8004904 <TIM_Base_SetConfig+0x12c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0xf8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a12      	ldr	r2, [pc, #72]	@ (8004914 <TIM_Base_SetConfig+0x13c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d103      	bne.n	80048d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]
  }
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40010400 	.word	0x40010400
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800
 8004924:	40001800 	.word	0x40001800
 8004928:	40001c00 	.word	0x40001c00
 800492c:	40002000 	.word	0x40002000

08004930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f023 030a 	bic.w	r3, r3, #10
 800496c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800498e:	b480      	push	{r7}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f023 0210 	bic.w	r2, r3, #16
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	031b      	lsls	r3, r3, #12
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f043 0307 	orr.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e05a      	b.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a21      	ldr	r2, [pc, #132]	@ (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d022      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac8:	d01d      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d018      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a18      	ldr	r2, [pc, #96]	@ (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a17      	ldr	r2, [pc, #92]	@ (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a15      	ldr	r2, [pc, #84]	@ (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d10c      	bne.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40001800 	.word	0x40001800

08004b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e042      	b.n	8004c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc f960 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2224      	movs	r2, #36	@ 0x24
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 ff45 	bl	8005a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695a      	ldr	r2, [r3, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d175      	bne.n	8004d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Transmit+0x2c>
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e06e      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2221      	movs	r2, #33	@ 0x21
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c62:	f7fc fc8b 	bl	800157c <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d108      	bne.n	8004c90 <HAL_UART_Transmit+0x6c>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e003      	b.n	8004c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c98:	e02e      	b.n	8004cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2180      	movs	r1, #128	@ 0x80
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fc1d 	bl	80054e4 <UART_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e03a      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e007      	b.n	8004cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1cb      	bne.n	8004c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2140      	movs	r1, #64	@ 0x40
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fbe9 	bl	80054e4 <UART_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e006      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	4613      	mov	r3, r2
 8004d46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d112      	bne.n	8004d7a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_UART_Receive_DMA+0x26>
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e00b      	b.n	8004d7c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fc11 	bl	8005598 <UART_Start_Receive_DMA>
 8004d76:	4603      	mov	r3, r0
 8004d78:	e000      	b.n	8004d7c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b0ba      	sub	sp, #232	@ 0xe8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10f      	bne.n	8004dea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <HAL_UART_IRQHandler+0x66>
 8004dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fd79 	bl	80058da <UART_Receive_IT>
      return;
 8004de8:	e25b      	b.n	80052a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80de 	beq.w	8004fb0 <HAL_UART_IRQHandler+0x22c>
 8004df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80d1 	beq.w	8004fb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <HAL_UART_IRQHandler+0xae>
 8004e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f043 0201 	orr.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_UART_IRQHandler+0xd2>
 8004e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	f043 0202 	orr.w	r2, r3, #2
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_UART_IRQHandler+0xf6>
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d011      	beq.n	8004eaa <HAL_UART_IRQHandler+0x126>
 8004e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea2:	f043 0208 	orr.w	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 81f2 	beq.w	8005298 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x14e>
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fd04 	bl	80058da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004edc:	2b40      	cmp	r3, #64	@ 0x40
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <HAL_UART_IRQHandler+0x17a>
 8004ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d04f      	beq.n	8004f9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fc0c 	bl	800571c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0e:	2b40      	cmp	r3, #64	@ 0x40
 8004f10:	d141      	bne.n	8004f96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3314      	adds	r3, #20
 8004f18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1d9      	bne.n	8004f12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d013      	beq.n	8004f8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8005164 <HAL_UART_IRQHandler+0x3e0>)
 8004f6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fc fdd4 	bl	8001b20 <HAL_DMA_Abort_IT>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d016      	beq.n	8004fac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e00e      	b.n	8004fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fb fdaa 	bl	8000ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	e00a      	b.n	8004fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fb fda6 	bl	8000ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9c:	e006      	b.n	8004fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fb fda2 	bl	8000ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004faa:	e175      	b.n	8005298 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	bf00      	nop
    return;
 8004fae:	e173      	b.n	8005298 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	f040 814f 	bne.w	8005258 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8148 	beq.w	8005258 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8141 	beq.w	8005258 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff6:	2b40      	cmp	r3, #64	@ 0x40
 8004ff8:	f040 80b6 	bne.w	8005168 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8145 	beq.w	800529c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800501a:	429a      	cmp	r2, r3
 800501c:	f080 813e 	bcs.w	800529c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005026:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005032:	f000 8088 	beq.w	8005146 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800504c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005062:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800506e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800507a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1d9      	bne.n	8005036 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3314      	adds	r3, #20
 8005088:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3314      	adds	r3, #20
 80050a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e1      	bne.n	8005082 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3314      	adds	r3, #20
 80050de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e3      	bne.n	80050be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005116:	f023 0310 	bic.w	r3, r3, #16
 800511a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005128:	65ba      	str	r2, [r7, #88]	@ 0x58
 800512a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800512e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e3      	bne.n	8005104 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	4618      	mov	r0, r3
 8005142:	f7fc fc7d 	bl	8001a40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005154:	b29b      	uxth	r3, r3
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	b29b      	uxth	r3, r3
 800515a:	4619      	mov	r1, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8b7 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005162:	e09b      	b.n	800529c <HAL_UART_IRQHandler+0x518>
 8005164:	080057e3 	.word	0x080057e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005170:	b29b      	uxth	r3, r3
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 808e 	beq.w	80052a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8089 	beq.w	80052a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800519e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80051b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e3      	bne.n	800518e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3314      	adds	r3, #20
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	623b      	str	r3, [r7, #32]
   return(result);
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e3      	bne.n	80051c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	60fb      	str	r3, [r7, #12]
   return(result);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0310 	bic.w	r3, r3, #16
 8005222:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005230:	61fa      	str	r2, [r7, #28]
 8005232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	69b9      	ldr	r1, [r7, #24]
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	617b      	str	r3, [r7, #20]
   return(result);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e3      	bne.n	800520c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800524a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f83d 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005256:	e023      	b.n	80052a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005260:	2b00      	cmp	r3, #0
 8005262:	d009      	beq.n	8005278 <HAL_UART_IRQHandler+0x4f4>
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 faca 	bl	800580a <UART_Transmit_IT>
    return;
 8005276:	e014      	b.n	80052a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00e      	beq.n	80052a2 <HAL_UART_IRQHandler+0x51e>
 8005284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb0a 	bl	80058aa <UART_EndTransmit_IT>
    return;
 8005296:	e004      	b.n	80052a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005298:	bf00      	nop
 800529a:	e002      	b.n	80052a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800529c:	bf00      	nop
 800529e:	e000      	b.n	80052a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80052a0:	bf00      	nop
  }
}
 80052a2:	37e8      	adds	r7, #232	@ 0xe8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b09c      	sub	sp, #112	@ 0x70
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d172      	bne.n	80053ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005306:	2200      	movs	r2, #0
 8005308:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800530a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800531a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800531c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
 8005328:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800532a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800532c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005330:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3314      	adds	r3, #20
 8005344:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800534e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	667b      	str	r3, [r7, #100]	@ 0x64
 8005356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3314      	adds	r3, #20
 800535c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800535e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005360:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800536c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3314      	adds	r3, #20
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	623b      	str	r3, [r7, #32]
   return(result);
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005388:	663b      	str	r3, [r7, #96]	@ 0x60
 800538a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3314      	adds	r3, #20
 8005390:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005392:	633a      	str	r2, [r7, #48]	@ 0x30
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e5      	bne.n	8005372 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d119      	bne.n	80053ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f023 0310 	bic.w	r3, r3, #16
 80053cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053d6:	61fa      	str	r2, [r7, #28]
 80053d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	617b      	str	r3, [r7, #20]
   return(result);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e5      	bne.n	80053b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ec:	2200      	movs	r2, #0
 80053ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d106      	bne.n	8005406 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053fc:	4619      	mov	r1, r3
 80053fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005400:	f7ff ff66 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005404:	e002      	b.n	800540c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005406:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005408:	f7fb fad4 	bl	80009b4 <HAL_UART_RxCpltCallback>
}
 800540c:	bf00      	nop
 800540e:	3770      	adds	r7, #112	@ 0x70
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	d108      	bne.n	8005442 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	b29b      	uxth	r3, r3
 8005438:	4619      	mov	r1, r3
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff ff48 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005440:	e002      	b.n	8005448 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ff3a 	bl	80052bc <HAL_UART_RxHalfCpltCallback>
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005460:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	2b80      	cmp	r3, #128	@ 0x80
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b21      	cmp	r3, #33	@ 0x21
 8005482:	d108      	bne.n	8005496 <UART_DMAError+0x46>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2200      	movs	r2, #0
 800548e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005490:	68b8      	ldr	r0, [r7, #8]
 8005492:	f000 f91b 	bl	80056cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a0:	2b40      	cmp	r3, #64	@ 0x40
 80054a2:	bf0c      	ite	eq
 80054a4:	2301      	moveq	r3, #1
 80054a6:	2300      	movne	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b22      	cmp	r3, #34	@ 0x22
 80054b6:	d108      	bne.n	80054ca <UART_DMAError+0x7a>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80054c4:	68b8      	ldr	r0, [r7, #8]
 80054c6:	f000 f929 	bl	800571c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f043 0210 	orr.w	r2, r3, #16
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d6:	68b8      	ldr	r0, [r7, #8]
 80054d8:	f7fb fb06 	bl	8000ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f4:	e03b      	b.n	800556e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d037      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fe:	f7fc f83d 	bl	800157c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <UART_WaitOnFlagUntilTimeout+0x30>
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e03a      	b.n	800558e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d023      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b80      	cmp	r3, #128	@ 0x80
 800552a:	d020      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x8a>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b40      	cmp	r3, #64	@ 0x40
 8005530:	d01d      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b08      	cmp	r3, #8
 800553e:	d116      	bne.n	800556e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 f8e0 	bl	800571c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2208      	movs	r2, #8
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e00f      	b.n	800558e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4013      	ands	r3, r2
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	429a      	cmp	r2, r3
 800557c:	bf0c      	ite	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	2300      	movne	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	429a      	cmp	r2, r3
 800558a:	d0b4      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b098      	sub	sp, #96	@ 0x60
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	88fa      	ldrh	r2, [r7, #6]
 80055b0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2222      	movs	r2, #34	@ 0x22
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c4:	4a3e      	ldr	r2, [pc, #248]	@ (80056c0 <UART_Start_Receive_DMA+0x128>)
 80055c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	4a3d      	ldr	r2, [pc, #244]	@ (80056c4 <UART_Start_Receive_DMA+0x12c>)
 80055ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d4:	4a3c      	ldr	r2, [pc, #240]	@ (80056c8 <UART_Start_Receive_DMA+0x130>)
 80055d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055dc:	2200      	movs	r2, #0
 80055de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80055e0:	f107 0308 	add.w	r3, r7, #8
 80055e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	f7fc f9ca 	bl	8001990 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d019      	beq.n	800564e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800562a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005630:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800563a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800563c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005640:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e5      	bne.n	800561a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	657b      	str	r3, [r7, #84]	@ 0x54
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3314      	adds	r3, #20
 800566c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800566e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005670:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	617b      	str	r3, [r7, #20]
   return(result);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005698:	653b      	str	r3, [r7, #80]	@ 0x50
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80056a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6a39      	ldr	r1, [r7, #32]
 80056a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3760      	adds	r7, #96	@ 0x60
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	080052e9 	.word	0x080052e9
 80056c4:	08005415 	.word	0x08005415
 80056c8:	08005451 	.word	0x08005451

080056cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b089      	sub	sp, #36	@ 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	61ba      	str	r2, [r7, #24]
 80056f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6979      	ldr	r1, [r7, #20]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	613b      	str	r3, [r7, #16]
   return(result);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005710:	bf00      	nop
 8005712:	3724      	adds	r7, #36	@ 0x24
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571c:	b480      	push	{r7}
 800571e:	b095      	sub	sp, #84	@ 0x54
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800573a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005744:	643a      	str	r2, [r7, #64]	@ 0x40
 8005746:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800574a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e5      	bne.n	8005724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3314      	adds	r3, #20
 800575e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	61fb      	str	r3, [r7, #28]
   return(result);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3314      	adds	r3, #20
 8005776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800577a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800577e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e5      	bne.n	8005758 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005790:	2b01      	cmp	r3, #1
 8005792:	d119      	bne.n	80057c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 0310 	bic.w	r3, r3, #16
 80057aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b4:	61ba      	str	r2, [r7, #24]
 80057b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6979      	ldr	r1, [r7, #20]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	613b      	str	r3, [r7, #16]
   return(result);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057d6:	bf00      	nop
 80057d8:	3754      	adds	r7, #84	@ 0x54
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7fb f973 	bl	8000ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b21      	cmp	r3, #33	@ 0x21
 800581c:	d13e      	bne.n	800589c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005826:	d114      	bne.n	8005852 <UART_Transmit_IT+0x48>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d110      	bne.n	8005852 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005844:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]
 8005850:	e008      	b.n	8005864 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	1c59      	adds	r1, r3, #1
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6211      	str	r1, [r2, #32]
 800585c:	781a      	ldrb	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29b      	uxth	r3, r3
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4619      	mov	r1, r3
 8005872:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10f      	bne.n	8005898 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005886:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005896:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff fcec 	bl	80052a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b08c      	sub	sp, #48	@ 0x30
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b22      	cmp	r3, #34	@ 0x22
 80058ec:	f040 80ae 	bne.w	8005a4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f8:	d117      	bne.n	800592a <UART_Receive_IT+0x50>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d113      	bne.n	800592a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005918:	b29a      	uxth	r2, r3
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005922:	1c9a      	adds	r2, r3, #2
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	@ 0x28
 8005928:	e026      	b.n	8005978 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800593c:	d007      	beq.n	800594e <UART_Receive_IT+0x74>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <UART_Receive_IT+0x82>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	e008      	b.n	800596e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29b      	uxth	r3, r3
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4619      	mov	r1, r3
 8005986:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005988:	2b00      	cmp	r3, #0
 800598a:	d15d      	bne.n	8005a48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0220 	bic.w	r2, r2, #32
 800599a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0201 	bic.w	r2, r2, #1
 80059ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d135      	bne.n	8005a3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	613b      	str	r3, [r7, #16]
   return(result);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f023 0310 	bic.w	r3, r3, #16
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f8:	623a      	str	r2, [r7, #32]
 80059fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	69f9      	ldr	r1, [r7, #28]
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b10      	cmp	r3, #16
 8005a18:	d10a      	bne.n	8005a30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fc4a 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
 8005a3c:	e002      	b.n	8005a44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fa ffb8 	bl	80009b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	e002      	b.n	8005a4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e000      	b.n	8005a4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a4c:	2302      	movs	r3, #2
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3730      	adds	r7, #48	@ 0x30
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a5c:	b0c0      	sub	sp, #256	@ 0x100
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	68d9      	ldr	r1, [r3, #12]
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	ea40 0301 	orr.w	r3, r0, r1
 8005a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ab0:	f021 010c 	bic.w	r1, r1, #12
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad2:	6999      	ldr	r1, [r3, #24]
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	ea40 0301 	orr.w	r3, r0, r1
 8005ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b8f      	ldr	r3, [pc, #572]	@ (8005d24 <UART_SetConfig+0x2cc>)
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d005      	beq.n	8005af8 <UART_SetConfig+0xa0>
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b8d      	ldr	r3, [pc, #564]	@ (8005d28 <UART_SetConfig+0x2d0>)
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d104      	bne.n	8005b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7fe fbba 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 8005afc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b00:	e003      	b.n	8005b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b02:	f7fe fba1 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005b06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b14:	f040 810c 	bne.w	8005d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	1891      	adds	r1, r2, r2
 8005b30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b32:	415b      	adcs	r3, r3
 8005b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	eb12 0801 	adds.w	r8, r2, r1
 8005b40:	4629      	mov	r1, r5
 8005b42:	eb43 0901 	adc.w	r9, r3, r1
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b5a:	4690      	mov	r8, r2
 8005b5c:	4699      	mov	r9, r3
 8005b5e:	4623      	mov	r3, r4
 8005b60:	eb18 0303 	adds.w	r3, r8, r3
 8005b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b68:	462b      	mov	r3, r5
 8005b6a:	eb49 0303 	adc.w	r3, r9, r3
 8005b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b86:	460b      	mov	r3, r1
 8005b88:	18db      	adds	r3, r3, r3
 8005b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	eb42 0303 	adc.w	r3, r2, r3
 8005b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b9c:	f7fa fb80 	bl	80002a0 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4b61      	ldr	r3, [pc, #388]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	011c      	lsls	r4, r3, #4
 8005bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	1891      	adds	r1, r2, r2
 8005bc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf0:	4692      	mov	sl, r2
 8005bf2:	469b      	mov	fp, r3
 8005bf4:	4643      	mov	r3, r8
 8005bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8005bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	eb4b 0303 	adc.w	r3, fp, r3
 8005c04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	18db      	adds	r3, r3, r3
 8005c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c22:	4613      	mov	r3, r2
 8005c24:	eb42 0303 	adc.w	r3, r2, r3
 8005c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c32:	f7fa fb35 	bl	80002a0 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2264      	movs	r2, #100	@ 0x64
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	1acb      	subs	r3, r1, r3
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c52:	4b36      	ldr	r3, [pc, #216]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005c54:	fba3 2302 	umull	r2, r3, r3, r2
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c60:	441c      	add	r4, r3
 8005c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	1891      	adds	r1, r2, r2
 8005c7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c7c:	415b      	adcs	r3, r3
 8005c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c84:	4641      	mov	r1, r8
 8005c86:	1851      	adds	r1, r2, r1
 8005c88:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	414b      	adcs	r3, r1
 8005c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	00cb      	lsls	r3, r1, #3
 8005ca0:	4651      	mov	r1, sl
 8005ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ca6:	4651      	mov	r1, sl
 8005ca8:	00ca      	lsls	r2, r1, #3
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	189b      	adds	r3, r3, r2
 8005cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cb8:	464b      	mov	r3, r9
 8005cba:	460a      	mov	r2, r1
 8005cbc:	eb42 0303 	adc.w	r3, r2, r3
 8005cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005cd8:	460b      	mov	r3, r1
 8005cda:	18db      	adds	r3, r3, r3
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cde:	4613      	mov	r3, r2
 8005ce0:	eb42 0303 	adc.w	r3, r2, r3
 8005ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cee:	f7fa fad7 	bl	80002a0 <__aeabi_uldivmod>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	2164      	movs	r1, #100	@ 0x64
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	3332      	adds	r3, #50	@ 0x32
 8005d0a:	4a08      	ldr	r2, [pc, #32]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	f003 0207 	and.w	r2, r3, #7
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4422      	add	r2, r4
 8005d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d20:	e106      	b.n	8005f30 <UART_SetConfig+0x4d8>
 8005d22:	bf00      	nop
 8005d24:	40011000 	.word	0x40011000
 8005d28:	40011400 	.word	0x40011400
 8005d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d42:	4642      	mov	r2, r8
 8005d44:	464b      	mov	r3, r9
 8005d46:	1891      	adds	r1, r2, r2
 8005d48:	6239      	str	r1, [r7, #32]
 8005d4a:	415b      	adcs	r3, r3
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d52:	4641      	mov	r1, r8
 8005d54:	1854      	adds	r4, r2, r1
 8005d56:	4649      	mov	r1, r9
 8005d58:	eb43 0501 	adc.w	r5, r3, r1
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	00eb      	lsls	r3, r5, #3
 8005d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d6a:	00e2      	lsls	r2, r4, #3
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	461d      	mov	r5, r3
 8005d70:	4643      	mov	r3, r8
 8005d72:	18e3      	adds	r3, r4, r3
 8005d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d78:	464b      	mov	r3, r9
 8005d7a:	eb45 0303 	adc.w	r3, r5, r3
 8005d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d9e:	4629      	mov	r1, r5
 8005da0:	008b      	lsls	r3, r1, #2
 8005da2:	4621      	mov	r1, r4
 8005da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da8:	4621      	mov	r1, r4
 8005daa:	008a      	lsls	r2, r1, #2
 8005dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005db0:	f7fa fa76 	bl	80002a0 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4b60      	ldr	r3, [pc, #384]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005dba:	fba3 2302 	umull	r2, r3, r3, r2
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	011c      	lsls	r4, r3, #4
 8005dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005dcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	1891      	adds	r1, r2, r2
 8005dda:	61b9      	str	r1, [r7, #24]
 8005ddc:	415b      	adcs	r3, r3
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005de4:	4641      	mov	r1, r8
 8005de6:	1851      	adds	r1, r2, r1
 8005de8:	6139      	str	r1, [r7, #16]
 8005dea:	4649      	mov	r1, r9
 8005dec:	414b      	adcs	r3, r1
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	00cb      	lsls	r3, r1, #3
 8005e00:	4651      	mov	r1, sl
 8005e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e06:	4651      	mov	r1, sl
 8005e08:	00ca      	lsls	r2, r1, #3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	4642      	mov	r2, r8
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e18:	464b      	mov	r3, r9
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	eb42 0303 	adc.w	r3, r2, r3
 8005e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	008b      	lsls	r3, r1, #2
 8005e40:	4641      	mov	r1, r8
 8005e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e46:	4641      	mov	r1, r8
 8005e48:	008a      	lsls	r2, r1, #2
 8005e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e4e:	f7fa fa27 	bl	80002a0 <__aeabi_uldivmod>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	4b38      	ldr	r3, [pc, #224]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2264      	movs	r2, #100	@ 0x64
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	1acb      	subs	r3, r1, r3
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	3332      	adds	r3, #50	@ 0x32
 8005e6c:	4a33      	ldr	r2, [pc, #204]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e78:	441c      	add	r4, r3
 8005e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e7e:	2200      	movs	r2, #0
 8005e80:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e82:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e88:	4642      	mov	r2, r8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	1891      	adds	r1, r2, r2
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	415b      	adcs	r3, r3
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e98:	4641      	mov	r1, r8
 8005e9a:	1851      	adds	r1, r2, r1
 8005e9c:	6039      	str	r1, [r7, #0]
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	414b      	adcs	r3, r1
 8005ea2:	607b      	str	r3, [r7, #4]
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eb0:	4659      	mov	r1, fp
 8005eb2:	00cb      	lsls	r3, r1, #3
 8005eb4:	4651      	mov	r1, sl
 8005eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eba:	4651      	mov	r1, sl
 8005ebc:	00ca      	lsls	r2, r1, #3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	189b      	adds	r3, r3, r2
 8005ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eca:	464b      	mov	r3, r9
 8005ecc:	460a      	mov	r2, r1
 8005ece:	eb42 0303 	adc.w	r3, r2, r3
 8005ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ede:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005eec:	4649      	mov	r1, r9
 8005eee:	008b      	lsls	r3, r1, #2
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	008a      	lsls	r2, r1, #2
 8005efa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005efe:	f7fa f9cf 	bl	80002a0 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005f08:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2164      	movs	r1, #100	@ 0x64
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	3332      	adds	r3, #50	@ 0x32
 8005f1a:	4a08      	ldr	r2, [pc, #32]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f003 020f 	and.w	r2, r3, #15
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4422      	add	r2, r4
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3c:	51eb851f 	.word	0x51eb851f

08005f40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f40:	b084      	sub	sp, #16
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	f107 001c 	add.w	r0, r7, #28
 8005f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d123      	bne.n	8005fa2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d105      	bne.n	8005f96 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 fae2 	bl	8007560 <USB_CoreReset>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73fb      	strb	r3, [r7, #15]
 8005fa0:	e01b      	b.n	8005fda <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 fad6 	bl	8007560 <USB_CoreReset>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fcc:	e005      	b.n	8005fda <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fda:	7fbb      	ldrb	r3, [r7, #30]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d10b      	bne.n	8005ff8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f043 0206 	orr.w	r2, r3, #6
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f043 0220 	orr.w	r2, r3, #32
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006004:	b004      	add	sp, #16
 8006006:	4770      	bx	lr

08006008 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d165      	bne.n	80060e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a41      	ldr	r2, [pc, #260]	@ (8006124 <USB_SetTurnaroundTime+0x11c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d906      	bls.n	8006032 <USB_SetTurnaroundTime+0x2a>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4a40      	ldr	r2, [pc, #256]	@ (8006128 <USB_SetTurnaroundTime+0x120>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d202      	bcs.n	8006032 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800602c:	230f      	movs	r3, #15
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e062      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4a3c      	ldr	r2, [pc, #240]	@ (8006128 <USB_SetTurnaroundTime+0x120>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d306      	bcc.n	8006048 <USB_SetTurnaroundTime+0x40>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4a3b      	ldr	r2, [pc, #236]	@ (800612c <USB_SetTurnaroundTime+0x124>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d202      	bcs.n	8006048 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006042:	230e      	movs	r3, #14
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	e057      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a38      	ldr	r2, [pc, #224]	@ (800612c <USB_SetTurnaroundTime+0x124>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d306      	bcc.n	800605e <USB_SetTurnaroundTime+0x56>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a37      	ldr	r2, [pc, #220]	@ (8006130 <USB_SetTurnaroundTime+0x128>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d202      	bcs.n	800605e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006058:	230d      	movs	r3, #13
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	e04c      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a33      	ldr	r2, [pc, #204]	@ (8006130 <USB_SetTurnaroundTime+0x128>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d306      	bcc.n	8006074 <USB_SetTurnaroundTime+0x6c>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4a32      	ldr	r2, [pc, #200]	@ (8006134 <USB_SetTurnaroundTime+0x12c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d802      	bhi.n	8006074 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800606e:	230c      	movs	r3, #12
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	e041      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a2f      	ldr	r2, [pc, #188]	@ (8006134 <USB_SetTurnaroundTime+0x12c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d906      	bls.n	800608a <USB_SetTurnaroundTime+0x82>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4a2e      	ldr	r2, [pc, #184]	@ (8006138 <USB_SetTurnaroundTime+0x130>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d802      	bhi.n	800608a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006084:	230b      	movs	r3, #11
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e036      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4a2a      	ldr	r2, [pc, #168]	@ (8006138 <USB_SetTurnaroundTime+0x130>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d906      	bls.n	80060a0 <USB_SetTurnaroundTime+0x98>
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4a29      	ldr	r2, [pc, #164]	@ (800613c <USB_SetTurnaroundTime+0x134>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d802      	bhi.n	80060a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800609a:	230a      	movs	r3, #10
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e02b      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4a26      	ldr	r2, [pc, #152]	@ (800613c <USB_SetTurnaroundTime+0x134>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d906      	bls.n	80060b6 <USB_SetTurnaroundTime+0xae>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4a25      	ldr	r2, [pc, #148]	@ (8006140 <USB_SetTurnaroundTime+0x138>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d202      	bcs.n	80060b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060b0:	2309      	movs	r3, #9
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e020      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4a21      	ldr	r2, [pc, #132]	@ (8006140 <USB_SetTurnaroundTime+0x138>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d306      	bcc.n	80060cc <USB_SetTurnaroundTime+0xc4>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4a20      	ldr	r2, [pc, #128]	@ (8006144 <USB_SetTurnaroundTime+0x13c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d802      	bhi.n	80060cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060c6:	2308      	movs	r3, #8
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e015      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006144 <USB_SetTurnaroundTime+0x13c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d906      	bls.n	80060e2 <USB_SetTurnaroundTime+0xda>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006148 <USB_SetTurnaroundTime+0x140>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d202      	bcs.n	80060e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80060dc:	2307      	movs	r3, #7
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e00a      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80060e2:	2306      	movs	r3, #6
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	e007      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80060ee:	2309      	movs	r3, #9
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e001      	b.n	80060f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80060f4:	2309      	movs	r3, #9
 80060f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006110:	431a      	orrs	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	00d8acbf 	.word	0x00d8acbf
 8006128:	00e4e1c0 	.word	0x00e4e1c0
 800612c:	00f42400 	.word	0x00f42400
 8006130:	01067380 	.word	0x01067380
 8006134:	011a499f 	.word	0x011a499f
 8006138:	01312cff 	.word	0x01312cff
 800613c:	014ca43f 	.word	0x014ca43f
 8006140:	016e3600 	.word	0x016e3600
 8006144:	01a6ab1f 	.word	0x01a6ab1f
 8006148:	01e84800 	.word	0x01e84800

0800614c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f043 0201 	orr.w	r2, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f023 0201 	bic.w	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d115      	bne.n	80061de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061be:	200a      	movs	r0, #10
 80061c0:	f7fb f9e8 	bl	8001594 <HAL_Delay>
      ms += 10U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	330a      	adds	r3, #10
 80061c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 f939 	bl	8007442 <USB_GetMode>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d01e      	beq.n	8006214 <USB_SetCurrentMode+0x84>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80061da:	d9f0      	bls.n	80061be <USB_SetCurrentMode+0x2e>
 80061dc:	e01a      	b.n	8006214 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d115      	bne.n	8006210 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061f0:	200a      	movs	r0, #10
 80061f2:	f7fb f9cf 	bl	8001594 <HAL_Delay>
      ms += 10U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	330a      	adds	r3, #10
 80061fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 f920 	bl	8007442 <USB_GetMode>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <USB_SetCurrentMode+0x84>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2bc7      	cmp	r3, #199	@ 0xc7
 800620c:	d9f0      	bls.n	80061f0 <USB_SetCurrentMode+0x60>
 800620e:	e001      	b.n	8006214 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e005      	b.n	8006220 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2bc8      	cmp	r3, #200	@ 0xc8
 8006218:	d101      	bne.n	800621e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006228:	b084      	sub	sp, #16
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	e009      	b.n	800625c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3340      	adds	r3, #64	@ 0x40
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	2200      	movs	r2, #0
 8006254:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	3301      	adds	r3, #1
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b0e      	cmp	r3, #14
 8006260:	d9f2      	bls.n	8006248 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006262:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11c      	bne.n	80062a4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006278:	f043 0302 	orr.w	r3, r3, #2
 800627c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80062a2:	e00b      	b.n	80062bc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062c2:	461a      	mov	r2, r3
 80062c4:	2300      	movs	r3, #0
 80062c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d10d      	bne.n	80062ec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062d8:	2100      	movs	r1, #0
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f968 	bl	80065b0 <USB_SetDevSpeed>
 80062e0:	e008      	b.n	80062f4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062e2:	2101      	movs	r1, #1
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f963 	bl	80065b0 <USB_SetDevSpeed>
 80062ea:	e003      	b.n	80062f4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062ec:	2103      	movs	r1, #3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f95e 	bl	80065b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062f4:	2110      	movs	r1, #16
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f8fa 	bl	80064f0 <USB_FlushTxFifo>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f924 	bl	8006554 <USB_FlushRxFifo>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	461a      	mov	r2, r3
 800631e:	2300      	movs	r3, #0
 8006320:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006334:	461a      	mov	r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	e043      	b.n	80063c8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006352:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006356:	d118      	bne.n	800638a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636a:	461a      	mov	r2, r3
 800636c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e013      	b.n	800639c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006380:	461a      	mov	r2, r3
 8006382:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e008      	b.n	800639c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006396:	461a      	mov	r2, r3
 8006398:	2300      	movs	r3, #0
 800639a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a8:	461a      	mov	r2, r3
 80063aa:	2300      	movs	r3, #0
 80063ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ba:	461a      	mov	r2, r3
 80063bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3301      	adds	r3, #1
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063cc:	461a      	mov	r2, r3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d3b5      	bcc.n	8006340 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	e043      	b.n	8006462 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063f0:	d118      	bne.n	8006424 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006404:	461a      	mov	r2, r3
 8006406:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e013      	b.n	8006436 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800641a:	461a      	mov	r2, r3
 800641c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	e008      	b.n	8006436 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006430:	461a      	mov	r2, r3
 8006432:	2300      	movs	r3, #0
 8006434:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006442:	461a      	mov	r2, r3
 8006444:	2300      	movs	r3, #0
 8006446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006454:	461a      	mov	r2, r3
 8006456:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800645a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	3301      	adds	r3, #1
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006466:	461a      	mov	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4293      	cmp	r3, r2
 800646c:	d3b5      	bcc.n	80063da <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800647c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006480:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800648e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006490:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f043 0210 	orr.w	r2, r3, #16
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	4b10      	ldr	r3, [pc, #64]	@ (80064ec <USB_DevInit+0x2c4>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f043 0208 	orr.w	r2, r3, #8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d107      	bne.n	80064dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064d4:	f043 0304 	orr.w	r3, r3, #4
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064e8:	b004      	add	sp, #16
 80064ea:	4770      	bx	lr
 80064ec:	803c3800 	.word	0x803c3800

080064f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800650a:	d901      	bls.n	8006510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e01b      	b.n	8006548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	daf2      	bge.n	80064fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	019b      	lsls	r3, r3, #6
 8006520:	f043 0220 	orr.w	r2, r3, #32
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006534:	d901      	bls.n	800653a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e006      	b.n	8006548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b20      	cmp	r3, #32
 8006544:	d0f0      	beq.n	8006528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800656c:	d901      	bls.n	8006572 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e018      	b.n	80065a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	daf2      	bge.n	8006560 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2210      	movs	r2, #16
 8006582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006590:	d901      	bls.n	8006596 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e006      	b.n	80065a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0310 	and.w	r3, r3, #16
 800659e:	2b10      	cmp	r3, #16
 80065a0:	d0f0      	beq.n	8006584 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065d0:	4313      	orrs	r3, r2
 80065d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b087      	sub	sp, #28
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0306 	and.w	r3, r3, #6
 80065fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]
 8006606:	e00a      	b.n	800661e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b02      	cmp	r3, #2
 800660c:	d002      	beq.n	8006614 <USB_GetDevSpeed+0x32>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b06      	cmp	r3, #6
 8006612:	d102      	bne.n	800661a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006614:	2302      	movs	r3, #2
 8006616:	75fb      	strb	r3, [r7, #23]
 8006618:	e001      	b.n	800661e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800661a:	230f      	movs	r3, #15
 800661c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800661e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d13a      	bne.n	80066be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	2101      	movs	r1, #1
 800665a:	fa01 f303 	lsl.w	r3, r1, r3
 800665e:	b29b      	uxth	r3, r3
 8006660:	68f9      	ldr	r1, [r7, #12]
 8006662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006666:	4313      	orrs	r3, r2
 8006668:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d155      	bne.n	800672c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	791b      	ldrb	r3, [r3, #4]
 800669a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800669c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	059b      	lsls	r3, r3, #22
 80066a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066a4:	4313      	orrs	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e036      	b.n	800672c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c4:	69da      	ldr	r2, [r3, #28]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	2101      	movs	r1, #1
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	68f9      	ldr	r1, [r7, #12]
 80066d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066dc:	4313      	orrs	r3, r2
 80066de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d11a      	bne.n	800672c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	791b      	ldrb	r3, [r3, #4]
 8006710:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006712:	430b      	orrs	r3, r1
 8006714:	4313      	orrs	r3, r2
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d161      	bne.n	800681c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800676a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800676e:	d11f      	bne.n	80067b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800678a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800678e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	2101      	movs	r1, #1
 80067c2:	fa01 f303 	lsl.w	r3, r1, r3
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	43db      	mvns	r3, r3
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067d0:	4013      	ands	r3, r2
 80067d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	2101      	movs	r1, #1
 80067e6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	43db      	mvns	r3, r3
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067f4:	4013      	ands	r3, r2
 80067f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	0159      	lsls	r1, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	440b      	add	r3, r1
 800680e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006812:	4619      	mov	r1, r3
 8006814:	4b35      	ldr	r3, [pc, #212]	@ (80068ec <USB_DeactivateEndpoint+0x1b0>)
 8006816:	4013      	ands	r3, r2
 8006818:	600b      	str	r3, [r1, #0]
 800681a:	e060      	b.n	80068de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800682e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006832:	d11f      	bne.n	8006874 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800684e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006852:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800686e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006872:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800687a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	2101      	movs	r1, #1
 8006886:	fa01 f303 	lsl.w	r3, r1, r3
 800688a:	041b      	lsls	r3, r3, #16
 800688c:	43db      	mvns	r3, r3
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006894:	4013      	ands	r3, r2
 8006896:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800689e:	69da      	ldr	r2, [r3, #28]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f303 	lsl.w	r3, r1, r3
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	43db      	mvns	r3, r3
 80068b2:	68f9      	ldr	r1, [r7, #12]
 80068b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068b8:	4013      	ands	r3, r2
 80068ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	0159      	lsls	r1, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	440b      	add	r3, r1
 80068d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d6:	4619      	mov	r1, r3
 80068d8:	4b05      	ldr	r3, [pc, #20]	@ (80068f0 <USB_DeactivateEndpoint+0x1b4>)
 80068da:	4013      	ands	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	ec337800 	.word	0xec337800
 80068f0:	eff37800 	.word	0xeff37800

080068f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	@ 0x28
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b01      	cmp	r3, #1
 8006912:	f040 817a 	bne.w	8006c0a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d132      	bne.n	8006984 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006938:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800693c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800695c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006960:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800697c:	0cdb      	lsrs	r3, r3, #19
 800697e:	04db      	lsls	r3, r3, #19
 8006980:	6113      	str	r3, [r2, #16]
 8006982:	e092      	b.n	8006aaa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800699e:	0cdb      	lsrs	r3, r3, #19
 80069a0:	04db      	lsls	r3, r3, #19
 80069a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d11a      	bne.n	8006a04 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d903      	bls.n	80069e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	0151      	lsls	r1, r2, #5
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	440a      	add	r2, r1
 80069f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a00:	6113      	str	r3, [r2, #16]
 8006a02:	e01b      	b.n	8006a3c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a10:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6919      	ldr	r1, [r3, #16]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	440b      	add	r3, r1
 8006a1c:	1e59      	subs	r1, r3, #1
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a26:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a28:	4ba2      	ldr	r3, [pc, #648]	@ (8006cb4 <USB_EPStartXfer+0x3c0>)
 8006a2a:	400b      	ands	r3, r1
 8006a2c:	69b9      	ldr	r1, [r7, #24]
 8006a2e:	0148      	lsls	r0, r1, #5
 8006a30:	69f9      	ldr	r1, [r7, #28]
 8006a32:	4401      	add	r1, r0
 8006a34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a52:	69b9      	ldr	r1, [r7, #24]
 8006a54:	0148      	lsls	r0, r1, #5
 8006a56:	69f9      	ldr	r1, [r7, #28]
 8006a58:	4401      	add	r1, r0
 8006a5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	791b      	ldrb	r3, [r3, #4]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d11f      	bne.n	8006aaa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	0151      	lsls	r1, r2, #5
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	440a      	add	r2, r1
 8006a80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a84:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006a88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d14b      	bne.n	8006b48 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	791b      	ldrb	r3, [r3, #4]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d128      	bne.n	8006b26 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d110      	bne.n	8006b06 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006afe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	e00f      	b.n	8006b26 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e165      	b.n	8006e14 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	791b      	ldrb	r3, [r3, #4]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d015      	beq.n	8006b9c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 814d 	beq.w	8006e14 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b90:	69f9      	ldr	r1, [r7, #28]
 8006b92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b96:	4313      	orrs	r3, r2
 8006b98:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b9a:	e13b      	b.n	8006e14 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d110      	bne.n	8006bce <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	e00f      	b.n	8006bee <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	68d9      	ldr	r1, [r3, #12]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	b298      	uxth	r0, r3
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	4603      	mov	r3, r0
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f9b8 	bl	8006f78 <USB_WritePacket>
 8006c08:	e104      	b.n	8006e14 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c24:	0cdb      	lsrs	r3, r3, #19
 8006c26:	04db      	lsls	r3, r3, #19
 8006c28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	0151      	lsls	r1, r2, #5
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	440a      	add	r2, r1
 8006c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c4c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d131      	bne.n	8006cb8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c82:	69b9      	ldr	r1, [r7, #24]
 8006c84:	0148      	lsls	r0, r1, #5
 8006c86:	69f9      	ldr	r1, [r7, #28]
 8006c88:	4401      	add	r1, r0
 8006c8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cb0:	6113      	str	r3, [r2, #16]
 8006cb2:	e061      	b.n	8006d78 <USB_EPStartXfer+0x484>
 8006cb4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d123      	bne.n	8006d08 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd6:	69b9      	ldr	r1, [r7, #24]
 8006cd8:	0148      	lsls	r0, r1, #5
 8006cda:	69f9      	ldr	r1, [r7, #28]
 8006cdc:	4401      	add	r1, r0
 8006cde:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d04:	6113      	str	r3, [r2, #16]
 8006d06:	e037      	b.n	8006d78 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	1e5a      	subs	r2, r3, #1
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	8afa      	ldrh	r2, [r7, #22]
 8006d24:	fb03 f202 	mul.w	r2, r3, r2
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	8afb      	ldrh	r3, [r7, #22]
 8006d3c:	04d9      	lsls	r1, r3, #19
 8006d3e:	4b38      	ldr	r3, [pc, #224]	@ (8006e20 <USB_EPStartXfer+0x52c>)
 8006d40:	400b      	ands	r3, r1
 8006d42:	69b9      	ldr	r1, [r7, #24]
 8006d44:	0148      	lsls	r0, r1, #5
 8006d46:	69f9      	ldr	r1, [r7, #28]
 8006d48:	4401      	add	r1, r0
 8006d4a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d68:	69b9      	ldr	r1, [r7, #24]
 8006d6a:	0148      	lsls	r0, r1, #5
 8006d6c:	69f9      	ldr	r1, [r7, #28]
 8006d6e:	4401      	add	r1, r0
 8006d70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d74:	4313      	orrs	r3, r2
 8006d76:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d10d      	bne.n	8006d9a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	68d9      	ldr	r1, [r3, #12]
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d96:	460a      	mov	r2, r1
 8006d98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	791b      	ldrb	r3, [r3, #4]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d128      	bne.n	8006df4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d110      	bne.n	8006dd4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	e00f      	b.n	8006df4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006df2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e0e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	1ff80000 	.word	0x1ff80000

08006e24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d14a      	bne.n	8006ed8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e5a:	f040 8086 	bne.w	8006f6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	7812      	ldrb	r2, [r2, #0]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ea0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ea4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d902      	bls.n	8006ebc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eba:	e056      	b.n	8006f6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ed4:	d0e7      	beq.n	8006ea6 <USB_EPStopXfer+0x82>
 8006ed6:	e048      	b.n	8006f6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ef0:	d13b      	bne.n	8006f6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	7812      	ldrb	r2, [r2, #0]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	7812      	ldrb	r2, [r2, #0]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d902      	bls.n	8006f50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f4e:	e00c      	b.n	8006f6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f68:	d0e7      	beq.n	8006f3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b089      	sub	sp, #36	@ 0x24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4611      	mov	r1, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	460b      	mov	r3, r1
 8006f88:	71fb      	strb	r3, [r7, #7]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d123      	bne.n	8006fe6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f9e:	88bb      	ldrh	r3, [r7, #4]
 8006fa0:	3303      	adds	r3, #3
 8006fa2:	089b      	lsrs	r3, r3, #2
 8006fa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e018      	b.n	8006fde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	031a      	lsls	r2, r3, #12
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb8:	461a      	mov	r2, r3
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d3e2      	bcc.n	8006fac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3724      	adds	r7, #36	@ 0x24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b08b      	sub	sp, #44	@ 0x2c
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	089b      	lsrs	r3, r3, #2
 800700e:	b29b      	uxth	r3, r3
 8007010:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800701a:	2300      	movs	r3, #0
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	e014      	b.n	800704a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702a:	601a      	str	r2, [r3, #0]
    pDest++;
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	3301      	adds	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	3301      	adds	r3, #1
 8007036:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	3301      	adds	r3, #1
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	3301      	adds	r3, #1
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	3301      	adds	r3, #1
 8007048:	623b      	str	r3, [r7, #32]
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	429a      	cmp	r2, r3
 8007050:	d3e6      	bcc.n	8007020 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007052:	8bfb      	ldrh	r3, [r7, #30]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01e      	beq.n	8007096 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007062:	461a      	mov	r2, r3
 8007064:	f107 0310 	add.w	r3, r7, #16
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
 8007078:	b2da      	uxtb	r2, r3
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	701a      	strb	r2, [r3, #0]
      i++;
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	3301      	adds	r3, #1
 8007082:	623b      	str	r3, [r7, #32]
      pDest++;
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	3301      	adds	r3, #1
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800708a:	8bfb      	ldrh	r3, [r7, #30]
 800708c:	3b01      	subs	r3, #1
 800708e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007090:	8bfb      	ldrh	r3, [r7, #30]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1ea      	bne.n	800706c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007098:	4618      	mov	r0, r3
 800709a:	372c      	adds	r7, #44	@ 0x2c
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d12c      	bne.n	800711a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	db12      	blt.n	80070f8 <USB_EPSetStall+0x54>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00f      	beq.n	80070f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007112:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	e02b      	b.n	8007172 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	db12      	blt.n	8007152 <USB_EPSetStall+0xae>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00f      	beq.n	8007152 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	0151      	lsls	r1, r2, #5
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	440a      	add	r2, r1
 8007148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800714c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007150:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800716c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007170:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	785b      	ldrb	r3, [r3, #1]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d128      	bne.n	80071ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	791b      	ldrb	r3, [r3, #4]
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d003      	beq.n	80071cc <USB_EPClearStall+0x4c>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	791b      	ldrb	r3, [r3, #4]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d138      	bne.n	800723e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e027      	b.n	800723e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007208:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800720c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d003      	beq.n	800721e <USB_EPClearStall+0x9e>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	791b      	ldrb	r3, [r3, #4]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d10f      	bne.n	800723e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800723c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800726a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800726e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007280:	68f9      	ldr	r1, [r7, #12]
 8007282:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072c6:	f023 0302 	bic.w	r3, r3, #2
 80072ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072f4:	f023 0303 	bic.w	r3, r3, #3
 80072f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007308:	f043 0302 	orr.w	r3, r3, #2
 800730c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4013      	ands	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007334:	68fb      	ldr	r3, [r7, #12]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007342:	b480      	push	{r7}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	4013      	ands	r3, r2
 8007364:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	0c1b      	lsrs	r3, r3, #16
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	4013      	ands	r3, r2
 8007398:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	b29b      	uxth	r3, r3
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	4013      	ands	r3, r2
 80073d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073d8:	68bb      	ldr	r3, [r7, #8]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b087      	sub	sp, #28
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007408:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	fa22 f303 	lsr.w	r3, r2, r3
 8007416:	01db      	lsls	r3, r3, #7
 8007418:	b2db      	uxtb	r3, r3
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4013      	ands	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007434:	68bb      	ldr	r3, [r7, #8]
}
 8007436:	4618      	mov	r0, r3
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0301 	and.w	r3, r3, #1
}
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007478:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800747c:	f023 0307 	bic.w	r3, r3, #7
 8007480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	460b      	mov	r3, r1
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	333c      	adds	r3, #60	@ 0x3c
 80074ba:	3304      	adds	r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	4a26      	ldr	r2, [pc, #152]	@ (800755c <USB_EP0_OutStart+0xb8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d90a      	bls.n	80074de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074d8:	d101      	bne.n	80074de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	e037      	b.n	800754e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e4:	461a      	mov	r2, r3
 80074e6:	2300      	movs	r3, #0
 80074e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800750c:	f043 0318 	orr.w	r3, r3, #24
 8007510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007520:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007524:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007526:	7afb      	ldrb	r3, [r7, #11]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d10f      	bne.n	800754c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007546:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800754a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	4f54300a 	.word	0x4f54300a

08007560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3301      	adds	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007578:	d901      	bls.n	800757e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e01b      	b.n	80075b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	daf2      	bge.n	800756c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f043 0201 	orr.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075a2:	d901      	bls.n	80075a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e006      	b.n	80075b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d0f0      	beq.n	8007596 <USB_CoreReset+0x36>

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80075d4:	f002 fc9e 	bl	8009f14 <USBD_static_malloc>
 80075d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d109      	bne.n	80075f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32b0      	adds	r2, #176	@ 0xb0
 80075ea:	2100      	movs	r1, #0
 80075ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075f0:	2302      	movs	r3, #2
 80075f2:	e0d4      	b.n	800779e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80075f4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80075f8:	2100      	movs	r1, #0
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f002 fe05 	bl	800a20a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32b0      	adds	r2, #176	@ 0xb0
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32b0      	adds	r2, #176	@ 0xb0
 800761a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7c1b      	ldrb	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d138      	bne.n	800769e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800762c:	4b5e      	ldr	r3, [pc, #376]	@ (80077a8 <USBD_CDC_Init+0x1e4>)
 800762e:	7819      	ldrb	r1, [r3, #0]
 8007630:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007634:	2202      	movs	r2, #2
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f002 fb49 	bl	8009cce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800763c:	4b5a      	ldr	r3, [pc, #360]	@ (80077a8 <USBD_CDC_Init+0x1e4>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	3324      	adds	r3, #36	@ 0x24
 8007652:	2201      	movs	r2, #1
 8007654:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007656:	4b55      	ldr	r3, [pc, #340]	@ (80077ac <USBD_CDC_Init+0x1e8>)
 8007658:	7819      	ldrb	r1, [r3, #0]
 800765a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800765e:	2202      	movs	r2, #2
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f002 fb34 	bl	8009cce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007666:	4b51      	ldr	r3, [pc, #324]	@ (80077ac <USBD_CDC_Init+0x1e8>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f003 020f 	and.w	r2, r3, #15
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800767e:	2201      	movs	r2, #1
 8007680:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007682:	4b4b      	ldr	r3, [pc, #300]	@ (80077b0 <USBD_CDC_Init+0x1ec>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	f003 020f 	and.w	r2, r3, #15
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	3326      	adds	r3, #38	@ 0x26
 8007698:	2210      	movs	r2, #16
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	e035      	b.n	800770a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800769e:	4b42      	ldr	r3, [pc, #264]	@ (80077a8 <USBD_CDC_Init+0x1e4>)
 80076a0:	7819      	ldrb	r1, [r3, #0]
 80076a2:	2340      	movs	r3, #64	@ 0x40
 80076a4:	2202      	movs	r2, #2
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f002 fb11 	bl	8009cce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076ac:	4b3e      	ldr	r3, [pc, #248]	@ (80077a8 <USBD_CDC_Init+0x1e4>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	3324      	adds	r3, #36	@ 0x24
 80076c2:	2201      	movs	r2, #1
 80076c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076c6:	4b39      	ldr	r3, [pc, #228]	@ (80077ac <USBD_CDC_Init+0x1e8>)
 80076c8:	7819      	ldrb	r1, [r3, #0]
 80076ca:	2340      	movs	r3, #64	@ 0x40
 80076cc:	2202      	movs	r2, #2
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f002 fafd 	bl	8009cce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076d4:	4b35      	ldr	r3, [pc, #212]	@ (80077ac <USBD_CDC_Init+0x1e8>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	f003 020f 	and.w	r2, r3, #15
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80076ec:	2201      	movs	r2, #1
 80076ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076f0:	4b2f      	ldr	r3, [pc, #188]	@ (80077b0 <USBD_CDC_Init+0x1ec>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f003 020f 	and.w	r2, r3, #15
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	3326      	adds	r3, #38	@ 0x26
 8007706:	2210      	movs	r2, #16
 8007708:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800770a:	4b29      	ldr	r3, [pc, #164]	@ (80077b0 <USBD_CDC_Init+0x1ec>)
 800770c:	7819      	ldrb	r1, [r3, #0]
 800770e:	2308      	movs	r3, #8
 8007710:	2203      	movs	r2, #3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f002 fadb 	bl	8009cce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007718:	4b25      	ldr	r3, [pc, #148]	@ (80077b0 <USBD_CDC_Init+0x1ec>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 020f 	and.w	r2, r3, #15
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	3324      	adds	r3, #36	@ 0x24
 800772e:	2201      	movs	r2, #1
 8007730:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	33b0      	adds	r3, #176	@ 0xb0
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007768:	2302      	movs	r3, #2
 800776a:	e018      	b.n	800779e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7c1b      	ldrb	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007774:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <USBD_CDC_Init+0x1e8>)
 8007776:	7819      	ldrb	r1, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800777e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f002 fb92 	bl	8009eac <USBD_LL_PrepareReceive>
 8007788:	e008      	b.n	800779c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800778a:	4b08      	ldr	r3, [pc, #32]	@ (80077ac <USBD_CDC_Init+0x1e8>)
 800778c:	7819      	ldrb	r1, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007794:	2340      	movs	r3, #64	@ 0x40
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f002 fb88 	bl	8009eac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000093 	.word	0x20000093
 80077ac:	20000094 	.word	0x20000094
 80077b0:	20000095 	.word	0x20000095

080077b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80077c0:	4b3a      	ldr	r3, [pc, #232]	@ (80078ac <USBD_CDC_DeInit+0xf8>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f002 faa7 	bl	8009d1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80077cc:	4b37      	ldr	r3, [pc, #220]	@ (80078ac <USBD_CDC_DeInit+0xf8>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 020f 	and.w	r2, r3, #15
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	3324      	adds	r3, #36	@ 0x24
 80077e2:	2200      	movs	r2, #0
 80077e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80077e6:	4b32      	ldr	r3, [pc, #200]	@ (80078b0 <USBD_CDC_DeInit+0xfc>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f002 fa94 	bl	8009d1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80077f2:	4b2f      	ldr	r3, [pc, #188]	@ (80078b0 <USBD_CDC_DeInit+0xfc>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f003 020f 	and.w	r2, r3, #15
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800780a:	2200      	movs	r2, #0
 800780c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800780e:	4b29      	ldr	r3, [pc, #164]	@ (80078b4 <USBD_CDC_DeInit+0x100>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f002 fa80 	bl	8009d1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800781a:	4b26      	ldr	r3, [pc, #152]	@ (80078b4 <USBD_CDC_DeInit+0x100>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	f003 020f 	and.w	r2, r3, #15
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	3324      	adds	r3, #36	@ 0x24
 8007830:	2200      	movs	r2, #0
 8007832:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007834:	4b1f      	ldr	r3, [pc, #124]	@ (80078b4 <USBD_CDC_DeInit+0x100>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 020f 	and.w	r2, r3, #15
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	3326      	adds	r3, #38	@ 0x26
 800784a:	2200      	movs	r2, #0
 800784c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	32b0      	adds	r2, #176	@ 0xb0
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01f      	beq.n	80078a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	33b0      	adds	r3, #176	@ 0xb0
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32b0      	adds	r2, #176	@ 0xb0
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	4618      	mov	r0, r3
 8007884:	f002 fb54 	bl	8009f30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	32b0      	adds	r2, #176	@ 0xb0
 8007892:	2100      	movs	r1, #0
 8007894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000093 	.word	0x20000093
 80078b0:	20000094 	.word	0x20000094
 80078b4:	20000095 	.word	0x20000095

080078b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	32b0      	adds	r2, #176	@ 0xb0
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e0bf      	b.n	8007a68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d050      	beq.n	8007996 <USBD_CDC_Setup+0xde>
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	f040 80af 	bne.w	8007a58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d03a      	beq.n	8007978 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b25b      	sxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	da1b      	bge.n	8007944 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	33b0      	adds	r3, #176	@ 0xb0
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007922:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	88d2      	ldrh	r2, [r2, #6]
 8007928:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	88db      	ldrh	r3, [r3, #6]
 800792e:	2b07      	cmp	r3, #7
 8007930:	bf28      	it	cs
 8007932:	2307      	movcs	r3, #7
 8007934:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	89fa      	ldrh	r2, [r7, #14]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fd87 	bl	8009450 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007942:	e090      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	785a      	ldrb	r2, [r3, #1]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	88db      	ldrh	r3, [r3, #6]
 8007952:	2b3f      	cmp	r3, #63	@ 0x3f
 8007954:	d803      	bhi.n	800795e <USBD_CDC_Setup+0xa6>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	b2da      	uxtb	r2, r3
 800795c:	e000      	b.n	8007960 <USBD_CDC_Setup+0xa8>
 800795e:	2240      	movs	r2, #64	@ 0x40
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007966:	6939      	ldr	r1, [r7, #16]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800796e:	461a      	mov	r2, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fd99 	bl	80094a8 <USBD_CtlPrepareRx>
      break;
 8007976:	e076      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	33b0      	adds	r3, #176	@ 0xb0
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	7850      	ldrb	r0, [r2, #1]
 800798e:	2200      	movs	r2, #0
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	4798      	blx	r3
      break;
 8007994:	e067      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b0b      	cmp	r3, #11
 800799c:	d851      	bhi.n	8007a42 <USBD_CDC_Setup+0x18a>
 800799e:	a201      	add	r2, pc, #4	@ (adr r2, 80079a4 <USBD_CDC_Setup+0xec>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079d5 	.word	0x080079d5
 80079a8:	08007a51 	.word	0x08007a51
 80079ac:	08007a43 	.word	0x08007a43
 80079b0:	08007a43 	.word	0x08007a43
 80079b4:	08007a43 	.word	0x08007a43
 80079b8:	08007a43 	.word	0x08007a43
 80079bc:	08007a43 	.word	0x08007a43
 80079c0:	08007a43 	.word	0x08007a43
 80079c4:	08007a43 	.word	0x08007a43
 80079c8:	08007a43 	.word	0x08007a43
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	08007a29 	.word	0x08007a29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d107      	bne.n	80079f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079e0:	f107 030a 	add.w	r3, r7, #10
 80079e4:	2202      	movs	r2, #2
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fd31 	bl	8009450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079ee:	e032      	b.n	8007a56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fcbb 	bl	800936e <USBD_CtlError>
            ret = USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	75fb      	strb	r3, [r7, #23]
          break;
 80079fc:	e02b      	b.n	8007a56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d107      	bne.n	8007a1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a0a:	f107 030d 	add.w	r3, r7, #13
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fd1c 	bl	8009450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a18:	e01d      	b.n	8007a56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fca6 	bl	800936e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a22:	2303      	movs	r3, #3
 8007a24:	75fb      	strb	r3, [r7, #23]
          break;
 8007a26:	e016      	b.n	8007a56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d00f      	beq.n	8007a54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fc99 	bl	800936e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a40:	e008      	b.n	8007a54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fc92 	bl	800936e <USBD_CtlError>
          ret = USBD_FAIL;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a4e:	e002      	b.n	8007a56 <USBD_CDC_Setup+0x19e>
          break;
 8007a50:	bf00      	nop
 8007a52:	e008      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>
          break;
 8007a54:	bf00      	nop
      }
      break;
 8007a56:	e006      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fc87 	bl	800936e <USBD_CtlError>
      ret = USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	75fb      	strb	r3, [r7, #23]
      break;
 8007a64:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	32b0      	adds	r2, #176	@ 0xb0
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e065      	b.n	8007b66 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32b0      	adds	r2, #176	@ 0xb0
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	3318      	adds	r3, #24
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d02f      	beq.n	8007b24 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	f003 020f 	and.w	r2, r3, #15
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3318      	adds	r3, #24
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	f003 010f 	and.w	r1, r3, #15
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	440b      	add	r3, r1
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4403      	add	r3, r0
 8007aec:	331c      	adds	r3, #28
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d112      	bne.n	8007b24 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	3318      	adds	r3, #24
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b16:	78f9      	ldrb	r1, [r7, #3]
 8007b18:	2300      	movs	r3, #0
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f002 f9a4 	bl	8009e6a <USBD_LL_Transmit>
 8007b22:	e01f      	b.n	8007b64 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	33b0      	adds	r3, #176	@ 0xb0
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d010      	beq.n	8007b64 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	33b0      	adds	r3, #176	@ 0xb0
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	32b0      	adds	r2, #176	@ 0xb0
 8007b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	32b0      	adds	r2, #176	@ 0xb0
 8007b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e01a      	b.n	8007bd6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f002 f9a2 	bl	8009eee <USBD_LL_GetRxDataSize>
 8007baa:	4602      	mov	r2, r0
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	33b0      	adds	r3, #176	@ 0xb0
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	32b0      	adds	r2, #176	@ 0xb0
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e024      	b.n	8007c4a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	33b0      	adds	r3, #176	@ 0xb0
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d019      	beq.n	8007c48 <USBD_CDC_EP0_RxReady+0x6a>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007c1a:	2bff      	cmp	r3, #255	@ 0xff
 8007c1c:	d014      	beq.n	8007c48 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	33b0      	adds	r3, #176	@ 0xb0
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c36:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	22ff      	movs	r2, #255	@ 0xff
 8007c44:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c5c:	2182      	movs	r1, #130	@ 0x82
 8007c5e:	4818      	ldr	r0, [pc, #96]	@ (8007cc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c60:	f000 fd4f 	bl	8008702 <USBD_GetEpDesc>
 8007c64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c66:	2101      	movs	r1, #1
 8007c68:	4815      	ldr	r0, [pc, #84]	@ (8007cc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c6a:	f000 fd4a 	bl	8008702 <USBD_GetEpDesc>
 8007c6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c70:	2181      	movs	r1, #129	@ 0x81
 8007c72:	4813      	ldr	r0, [pc, #76]	@ (8007cc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c74:	f000 fd45 	bl	8008702 <USBD_GetEpDesc>
 8007c78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2210      	movs	r2, #16
 8007c84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d006      	beq.n	8007c9a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c94:	711a      	strb	r2, [r3, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ca8:	711a      	strb	r2, [r3, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2243      	movs	r2, #67	@ 0x43
 8007cb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	@ (8007cc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000050 	.word	0x20000050

08007cc4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ccc:	2182      	movs	r1, #130	@ 0x82
 8007cce:	4818      	ldr	r0, [pc, #96]	@ (8007d30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cd0:	f000 fd17 	bl	8008702 <USBD_GetEpDesc>
 8007cd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	4815      	ldr	r0, [pc, #84]	@ (8007d30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cda:	f000 fd12 	bl	8008702 <USBD_GetEpDesc>
 8007cde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ce0:	2181      	movs	r1, #129	@ 0x81
 8007ce2:	4813      	ldr	r0, [pc, #76]	@ (8007d30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ce4:	f000 fd0d 	bl	8008702 <USBD_GetEpDesc>
 8007ce8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d006      	beq.n	8007d0a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	711a      	strb	r2, [r3, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f042 0202 	orr.w	r2, r2, #2
 8007d08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d006      	beq.n	8007d1e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	711a      	strb	r2, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f042 0202 	orr.w	r2, r2, #2
 8007d1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2243      	movs	r2, #67	@ 0x43
 8007d22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d24:	4b02      	ldr	r3, [pc, #8]	@ (8007d30 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000050 	.word	0x20000050

08007d34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d3c:	2182      	movs	r1, #130	@ 0x82
 8007d3e:	4818      	ldr	r0, [pc, #96]	@ (8007da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d40:	f000 fcdf 	bl	8008702 <USBD_GetEpDesc>
 8007d44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d46:	2101      	movs	r1, #1
 8007d48:	4815      	ldr	r0, [pc, #84]	@ (8007da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d4a:	f000 fcda 	bl	8008702 <USBD_GetEpDesc>
 8007d4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d50:	2181      	movs	r1, #129	@ 0x81
 8007d52:	4813      	ldr	r0, [pc, #76]	@ (8007da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d54:	f000 fcd5 	bl	8008702 <USBD_GetEpDesc>
 8007d58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2210      	movs	r2, #16
 8007d64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d006      	beq.n	8007d7a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d74:	711a      	strb	r2, [r3, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d006      	beq.n	8007d8e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d88:	711a      	strb	r2, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2243      	movs	r2, #67	@ 0x43
 8007d92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d94:	4b02      	ldr	r3, [pc, #8]	@ (8007da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000050 	.word	0x20000050

08007da4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	220a      	movs	r2, #10
 8007db0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007db2:	4b03      	ldr	r3, [pc, #12]	@ (8007dc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	2000000c 	.word	0x2000000c

08007dc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e009      	b.n	8007dec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	33b0      	adds	r3, #176	@ 0xb0
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	32b0      	adds	r2, #176	@ 0xb0
 8007e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e12:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e008      	b.n	8007e30 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	32b0      	adds	r2, #176	@ 0xb0
 8007e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e004      	b.n	8007e6a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	32b0      	adds	r2, #176	@ 0xb0
 8007e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e025      	b.n	8007eea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11f      	bne.n	8007ee8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007eb0:	4b10      	ldr	r3, [pc, #64]	@ (8007ef4 <USBD_CDC_TransmitPacket+0x7c>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 020f 	and.w	r2, r3, #15
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4403      	add	r3, r0
 8007eca:	3318      	adds	r3, #24
 8007ecc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007ece:	4b09      	ldr	r3, [pc, #36]	@ (8007ef4 <USBD_CDC_TransmitPacket+0x7c>)
 8007ed0:	7819      	ldrb	r1, [r3, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 ffc3 	bl	8009e6a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000093 	.word	0x20000093

08007ef8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	32b0      	adds	r2, #176	@ 0xb0
 8007f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	32b0      	adds	r2, #176	@ 0xb0
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e018      	b.n	8007f58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7c1b      	ldrb	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10a      	bne.n	8007f44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f60 <USBD_CDC_ReceivePacket+0x68>)
 8007f30:	7819      	ldrb	r1, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 ffb5 	bl	8009eac <USBD_LL_PrepareReceive>
 8007f42:	e008      	b.n	8007f56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f44:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <USBD_CDC_ReceivePacket+0x68>)
 8007f46:	7819      	ldrb	r1, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f4e:	2340      	movs	r3, #64	@ 0x40
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 ffab 	bl	8009eac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000094 	.word	0x20000094

08007f64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e01f      	b.n	8007fbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	79fa      	ldrb	r2, [r7, #7]
 8007fae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f001 fe25 	bl	8009c00 <USBD_LL_Init>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e025      	b.n	8008028 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	32ae      	adds	r2, #174	@ 0xae
 8007fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00f      	beq.n	8008018 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	32ae      	adds	r2, #174	@ 0xae
 8008002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008008:	f107 020e 	add.w	r2, r7, #14
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	4602      	mov	r2, r0
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fe2d 	bl	8009c98 <USBD_LL_Start>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008050:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	78fa      	ldrb	r2, [r7, #3]
 8008082:	4611      	mov	r1, r2
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	78fa      	ldrb	r2, [r7, #3]
 80080b0:	4611      	mov	r1, r2
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 f90c 	bl	80092fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80080f0:	461a      	mov	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	2b02      	cmp	r3, #2
 8008104:	d01a      	beq.n	800813c <USBD_LL_SetupStage+0x72>
 8008106:	2b02      	cmp	r3, #2
 8008108:	d822      	bhi.n	8008150 <USBD_LL_SetupStage+0x86>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <USBD_LL_SetupStage+0x4a>
 800810e:	2b01      	cmp	r3, #1
 8008110:	d00a      	beq.n	8008128 <USBD_LL_SetupStage+0x5e>
 8008112:	e01d      	b.n	8008150 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fb63 	bl	80087e8 <USBD_StdDevReq>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
      break;
 8008126:	e020      	b.n	800816a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fbcb 	bl	80088cc <USBD_StdItfReq>
 8008136:	4603      	mov	r3, r0
 8008138:	73fb      	strb	r3, [r7, #15]
      break;
 800813a:	e016      	b.n	800816a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc2d 	bl	80089a4 <USBD_StdEPReq>
 800814a:	4603      	mov	r3, r0
 800814c:	73fb      	strb	r3, [r7, #15]
      break;
 800814e:	e00c      	b.n	800816a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008156:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800815a:	b2db      	uxtb	r3, r3
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fdfa 	bl	8009d58 <USBD_LL_StallEP>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
      break;
 8008168:	bf00      	nop
  }

  return ret;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	460b      	mov	r3, r1
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d16e      	bne.n	800826a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008192:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800819a:	2b03      	cmp	r3, #3
 800819c:	f040 8098 	bne.w	80082d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d913      	bls.n	80081d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4293      	cmp	r3, r2
 80081c4:	bf28      	it	cs
 80081c6:	4613      	movcs	r3, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f001 f988 	bl	80094e2 <USBD_CtlContinueRx>
 80081d2:	e07d      	b.n	80082d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d014      	beq.n	800820c <USBD_LL_DataOutStage+0x98>
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d81d      	bhi.n	8008222 <USBD_LL_DataOutStage+0xae>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <USBD_LL_DataOutStage+0x7c>
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d003      	beq.n	80081f6 <USBD_LL_DataOutStage+0x82>
 80081ee:	e018      	b.n	8008222 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75bb      	strb	r3, [r7, #22]
            break;
 80081f4:	e018      	b.n	8008228 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	4619      	mov	r1, r3
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fa64 	bl	80086ce <USBD_CoreFindIF>
 8008206:	4603      	mov	r3, r0
 8008208:	75bb      	strb	r3, [r7, #22]
            break;
 800820a:	e00d      	b.n	8008228 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008212:	b2db      	uxtb	r3, r3
 8008214:	4619      	mov	r1, r3
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fa66 	bl	80086e8 <USBD_CoreFindEP>
 800821c:	4603      	mov	r3, r0
 800821e:	75bb      	strb	r3, [r7, #22]
            break;
 8008220:	e002      	b.n	8008228 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	75bb      	strb	r3, [r7, #22]
            break;
 8008226:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008228:	7dbb      	ldrb	r3, [r7, #22]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d119      	bne.n	8008262 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b03      	cmp	r3, #3
 8008238:	d113      	bne.n	8008262 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800823a:	7dba      	ldrb	r2, [r7, #22]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	32ae      	adds	r2, #174	@ 0xae
 8008240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800824a:	7dba      	ldrb	r2, [r7, #22]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008252:	7dba      	ldrb	r2, [r7, #22]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	32ae      	adds	r2, #174	@ 0xae
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f001 f94e 	bl	8009504 <USBD_CtlSendStatus>
 8008268:	e032      	b.n	80082d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008270:	b2db      	uxtb	r3, r3
 8008272:	4619      	mov	r1, r3
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 fa37 	bl	80086e8 <USBD_CoreFindEP>
 800827a:	4603      	mov	r3, r0
 800827c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800827e:	7dbb      	ldrb	r3, [r7, #22]
 8008280:	2bff      	cmp	r3, #255	@ 0xff
 8008282:	d025      	beq.n	80082d0 <USBD_LL_DataOutStage+0x15c>
 8008284:	7dbb      	ldrb	r3, [r7, #22]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d122      	bne.n	80082d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b03      	cmp	r3, #3
 8008294:	d117      	bne.n	80082c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008296:	7dba      	ldrb	r2, [r7, #22]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	32ae      	adds	r2, #174	@ 0xae
 800829c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00f      	beq.n	80082c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80082a6:	7dba      	ldrb	r2, [r7, #22]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80082ae:	7dba      	ldrb	r2, [r7, #22]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	32ae      	adds	r2, #174	@ 0xae
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	7afa      	ldrb	r2, [r7, #11]
 80082bc:	4611      	mov	r1, r2
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	e000      	b.n	80082d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	460b      	mov	r3, r1
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d16f      	bne.n	80083ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3314      	adds	r3, #20
 80082f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d15a      	bne.n	80083b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	429a      	cmp	r2, r3
 8008308:	d914      	bls.n	8008334 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	1ad2      	subs	r2, r2, r3
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	461a      	mov	r2, r3
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f001 f8b0 	bl	8009486 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008326:	2300      	movs	r3, #0
 8008328:	2200      	movs	r2, #0
 800832a:	2100      	movs	r1, #0
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f001 fdbd 	bl	8009eac <USBD_LL_PrepareReceive>
 8008332:	e03f      	b.n	80083b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	429a      	cmp	r2, r3
 800833e:	d11c      	bne.n	800837a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008348:	429a      	cmp	r2, r3
 800834a:	d316      	bcc.n	800837a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008356:	429a      	cmp	r2, r3
 8008358:	d20f      	bcs.n	800837a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800835a:	2200      	movs	r2, #0
 800835c:	2100      	movs	r1, #0
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f001 f891 	bl	8009486 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800836c:	2300      	movs	r3, #0
 800836e:	2200      	movs	r2, #0
 8008370:	2100      	movs	r1, #0
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f001 fd9a 	bl	8009eac <USBD_LL_PrepareReceive>
 8008378:	e01c      	b.n	80083b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b03      	cmp	r3, #3
 8008384:	d10f      	bne.n	80083a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083a6:	2180      	movs	r1, #128	@ 0x80
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f001 fcd5 	bl	8009d58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f001 f8bb 	bl	800952a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d03a      	beq.n	8008434 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff fe42 	bl	8008048 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80083cc:	e032      	b.n	8008434 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80083ce:	7afb      	ldrb	r3, [r7, #11]
 80083d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f985 	bl	80086e8 <USBD_CoreFindEP>
 80083de:	4603      	mov	r3, r0
 80083e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	2bff      	cmp	r3, #255	@ 0xff
 80083e6:	d025      	beq.n	8008434 <USBD_LL_DataInStage+0x15a>
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d122      	bne.n	8008434 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d11c      	bne.n	8008434 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80083fa:	7dfa      	ldrb	r2, [r7, #23]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	32ae      	adds	r2, #174	@ 0xae
 8008400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d014      	beq.n	8008434 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800840a:	7dfa      	ldrb	r2, [r7, #23]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008412:	7dfa      	ldrb	r2, [r7, #23]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	32ae      	adds	r2, #174	@ 0xae
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	7afa      	ldrb	r2, [r7, #11]
 8008420:	4611      	mov	r1, r2
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	4798      	blx	r3
 8008426:	4603      	mov	r3, r0
 8008428:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800842a:	7dbb      	ldrb	r3, [r7, #22]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008430:	7dbb      	ldrb	r3, [r7, #22]
 8008432:	e000      	b.n	8008436 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d014      	beq.n	80084a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00e      	beq.n	80084a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6852      	ldr	r2, [r2, #4]
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	4611      	mov	r1, r2
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80084a0:	2303      	movs	r3, #3
 80084a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084a4:	2340      	movs	r3, #64	@ 0x40
 80084a6:	2200      	movs	r2, #0
 80084a8:	2100      	movs	r1, #0
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 fc0f 	bl	8009cce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2240      	movs	r2, #64	@ 0x40
 80084bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084c0:	2340      	movs	r3, #64	@ 0x40
 80084c2:	2200      	movs	r2, #0
 80084c4:	2180      	movs	r1, #128	@ 0x80
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fc01 	bl	8009cce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2240      	movs	r2, #64	@ 0x40
 80084d6:	621a      	str	r2, [r3, #32]

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b04      	cmp	r3, #4
 8008514:	d006      	beq.n	8008524 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800851c:	b2da      	uxtb	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2204      	movs	r2, #4
 8008528:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b04      	cmp	r3, #4
 800854c:	d106      	bne.n	800855c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008554:	b2da      	uxtb	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b03      	cmp	r3, #3
 800857c:	d110      	bne.n	80085a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	460b      	mov	r3, r1
 80085b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	32ae      	adds	r2, #174	@ 0xae
 80085c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e01c      	b.n	8008606 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d115      	bne.n	8008604 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	32ae      	adds	r2, #174	@ 0xae
 80085e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	32ae      	adds	r2, #174	@ 0xae
 80085f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	78fa      	ldrb	r2, [r7, #3]
 80085fe:	4611      	mov	r1, r2
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	32ae      	adds	r2, #174	@ 0xae
 8008624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800862c:	2303      	movs	r3, #3
 800862e:	e01c      	b.n	800866a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b03      	cmp	r3, #3
 800863a:	d115      	bne.n	8008668 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	32ae      	adds	r2, #174	@ 0xae
 8008646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	32ae      	adds	r2, #174	@ 0xae
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	4611      	mov	r1, r2
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00e      	beq.n	80086c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6852      	ldr	r2, [r2, #4]
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	4611      	mov	r1, r2
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	4798      	blx	r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80086c0:	2303      	movs	r3, #3
 80086c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b086      	sub	sp, #24
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	885b      	ldrh	r3, [r3, #2]
 800871e:	b29b      	uxth	r3, r3
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	4293      	cmp	r3, r2
 8008726:	d91f      	bls.n	8008768 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800872e:	e013      	b.n	8008758 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008730:	f107 030a 	add.w	r3, r7, #10
 8008734:	4619      	mov	r1, r3
 8008736:	6978      	ldr	r0, [r7, #20]
 8008738:	f000 f81b 	bl	8008772 <USBD_GetNextDesc>
 800873c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b05      	cmp	r3, #5
 8008744:	d108      	bne.n	8008758 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	789b      	ldrb	r3, [r3, #2]
 800874e:	78fa      	ldrb	r2, [r7, #3]
 8008750:	429a      	cmp	r2, r3
 8008752:	d008      	beq.n	8008766 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008754:	2300      	movs	r3, #0
 8008756:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	885b      	ldrh	r3, [r3, #2]
 800875c:	b29a      	uxth	r2, r3
 800875e:	897b      	ldrh	r3, [r7, #10]
 8008760:	429a      	cmp	r2, r3
 8008762:	d8e5      	bhi.n	8008730 <USBD_GetEpDesc+0x2e>
 8008764:	e000      	b.n	8008768 <USBD_GetEpDesc+0x66>
          break;
 8008766:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008768:	693b      	ldr	r3, [r7, #16]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	7812      	ldrb	r2, [r2, #0]
 8008788:	4413      	add	r3, r2
 800878a:	b29a      	uxth	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800879c:	68fb      	ldr	r3, [r7, #12]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b087      	sub	sp, #28
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3301      	adds	r3, #1
 80087c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087c8:	8a3b      	ldrh	r3, [r7, #16]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	b21a      	sxth	r2, r3
 80087ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	b21b      	sxth	r3, r3
 80087d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087d8:	89fb      	ldrh	r3, [r7, #14]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
	...

080087e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087fe:	2b40      	cmp	r3, #64	@ 0x40
 8008800:	d005      	beq.n	800880e <USBD_StdDevReq+0x26>
 8008802:	2b40      	cmp	r3, #64	@ 0x40
 8008804:	d857      	bhi.n	80088b6 <USBD_StdDevReq+0xce>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00f      	beq.n	800882a <USBD_StdDevReq+0x42>
 800880a:	2b20      	cmp	r3, #32
 800880c:	d153      	bne.n	80088b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	32ae      	adds	r2, #174	@ 0xae
 8008818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]
      break;
 8008828:	e04a      	b.n	80088c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	2b09      	cmp	r3, #9
 8008830:	d83b      	bhi.n	80088aa <USBD_StdDevReq+0xc2>
 8008832:	a201      	add	r2, pc, #4	@ (adr r2, 8008838 <USBD_StdDevReq+0x50>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	0800888d 	.word	0x0800888d
 800883c:	080088a1 	.word	0x080088a1
 8008840:	080088ab 	.word	0x080088ab
 8008844:	08008897 	.word	0x08008897
 8008848:	080088ab 	.word	0x080088ab
 800884c:	0800886b 	.word	0x0800886b
 8008850:	08008861 	.word	0x08008861
 8008854:	080088ab 	.word	0x080088ab
 8008858:	08008883 	.word	0x08008883
 800885c:	08008875 	.word	0x08008875
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa3c 	bl	8008ce0 <USBD_GetDescriptor>
          break;
 8008868:	e024      	b.n	80088b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fba1 	bl	8008fb4 <USBD_SetAddress>
          break;
 8008872:	e01f      	b.n	80088b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fbe0 	bl	800903c <USBD_SetConfig>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
          break;
 8008880:	e018      	b.n	80088b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fc83 	bl	8009190 <USBD_GetConfig>
          break;
 800888a:	e013      	b.n	80088b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fcb4 	bl	80091fc <USBD_GetStatus>
          break;
 8008894:	e00e      	b.n	80088b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fce3 	bl	8009264 <USBD_SetFeature>
          break;
 800889e:	e009      	b.n	80088b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fd07 	bl	80092b6 <USBD_ClrFeature>
          break;
 80088a8:	e004      	b.n	80088b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fd5e 	bl	800936e <USBD_CtlError>
          break;
 80088b2:	bf00      	nop
      }
      break;
 80088b4:	e004      	b.n	80088c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fd58 	bl	800936e <USBD_CtlError>
      break;
 80088be:	bf00      	nop
  }

  return ret;
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop

080088cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088e2:	2b40      	cmp	r3, #64	@ 0x40
 80088e4:	d005      	beq.n	80088f2 <USBD_StdItfReq+0x26>
 80088e6:	2b40      	cmp	r3, #64	@ 0x40
 80088e8:	d852      	bhi.n	8008990 <USBD_StdItfReq+0xc4>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <USBD_StdItfReq+0x26>
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d14e      	bne.n	8008990 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d840      	bhi.n	8008982 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	889b      	ldrh	r3, [r3, #4]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d836      	bhi.n	8008978 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	889b      	ldrh	r3, [r3, #4]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff fedb 	bl	80086ce <USBD_CoreFindIF>
 8008918:	4603      	mov	r3, r0
 800891a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2bff      	cmp	r3, #255	@ 0xff
 8008920:	d01d      	beq.n	800895e <USBD_StdItfReq+0x92>
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11a      	bne.n	800895e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008928:	7bba      	ldrb	r2, [r7, #14]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	32ae      	adds	r2, #174	@ 0xae
 800892e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00f      	beq.n	8008958 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008938:	7bba      	ldrb	r2, [r7, #14]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008940:	7bba      	ldrb	r2, [r7, #14]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32ae      	adds	r2, #174	@ 0xae
 8008946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	4798      	blx	r3
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008956:	e004      	b.n	8008962 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008958:	2303      	movs	r3, #3
 800895a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800895c:	e001      	b.n	8008962 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800895e:	2303      	movs	r3, #3
 8008960:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	88db      	ldrh	r3, [r3, #6]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d110      	bne.n	800898c <USBD_StdItfReq+0xc0>
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10d      	bne.n	800898c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fdc7 	bl	8009504 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008976:	e009      	b.n	800898c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fcf7 	bl	800936e <USBD_CtlError>
          break;
 8008980:	e004      	b.n	800898c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fcf2 	bl	800936e <USBD_CtlError>
          break;
 800898a:	e000      	b.n	800898e <USBD_StdItfReq+0xc2>
          break;
 800898c:	bf00      	nop
      }
      break;
 800898e:	e004      	b.n	800899a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fceb 	bl	800936e <USBD_CtlError>
      break;
 8008998:	bf00      	nop
  }

  return ret;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	889b      	ldrh	r3, [r3, #4]
 80089b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089c0:	2b40      	cmp	r3, #64	@ 0x40
 80089c2:	d007      	beq.n	80089d4 <USBD_StdEPReq+0x30>
 80089c4:	2b40      	cmp	r3, #64	@ 0x40
 80089c6:	f200 817f 	bhi.w	8008cc8 <USBD_StdEPReq+0x324>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d02a      	beq.n	8008a24 <USBD_StdEPReq+0x80>
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	f040 817a 	bne.w	8008cc8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff fe85 	bl	80086e8 <USBD_CoreFindEP>
 80089de:	4603      	mov	r3, r0
 80089e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089e2:	7b7b      	ldrb	r3, [r7, #13]
 80089e4:	2bff      	cmp	r3, #255	@ 0xff
 80089e6:	f000 8174 	beq.w	8008cd2 <USBD_StdEPReq+0x32e>
 80089ea:	7b7b      	ldrb	r3, [r7, #13]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 8170 	bne.w	8008cd2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80089f2:	7b7a      	ldrb	r2, [r7, #13]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80089fa:	7b7a      	ldrb	r2, [r7, #13]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	32ae      	adds	r2, #174	@ 0xae
 8008a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 8163 	beq.w	8008cd2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008a0c:	7b7a      	ldrb	r2, [r7, #13]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	32ae      	adds	r2, #174	@ 0xae
 8008a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a22:	e156      	b.n	8008cd2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d008      	beq.n	8008a3e <USBD_StdEPReq+0x9a>
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	f300 8145 	bgt.w	8008cbc <USBD_StdEPReq+0x318>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 809b 	beq.w	8008b6e <USBD_StdEPReq+0x1ca>
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d03c      	beq.n	8008ab6 <USBD_StdEPReq+0x112>
 8008a3c:	e13e      	b.n	8008cbc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d002      	beq.n	8008a50 <USBD_StdEPReq+0xac>
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d016      	beq.n	8008a7c <USBD_StdEPReq+0xd8>
 8008a4e:	e02c      	b.n	8008aaa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00d      	beq.n	8008a72 <USBD_StdEPReq+0xce>
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b80      	cmp	r3, #128	@ 0x80
 8008a5a:	d00a      	beq.n	8008a72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 f979 	bl	8009d58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a66:	2180      	movs	r1, #128	@ 0x80
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 f975 	bl	8009d58 <USBD_LL_StallEP>
 8008a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a70:	e020      	b.n	8008ab4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fc7a 	bl	800936e <USBD_CtlError>
              break;
 8008a7a:	e01b      	b.n	8008ab4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	885b      	ldrh	r3, [r3, #2]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10e      	bne.n	8008aa2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00b      	beq.n	8008aa2 <USBD_StdEPReq+0xfe>
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b80      	cmp	r3, #128	@ 0x80
 8008a8e:	d008      	beq.n	8008aa2 <USBD_StdEPReq+0xfe>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	88db      	ldrh	r3, [r3, #6]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d104      	bne.n	8008aa2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 f95b 	bl	8009d58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fd2e 	bl	8009504 <USBD_CtlSendStatus>

              break;
 8008aa8:	e004      	b.n	8008ab4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fc5e 	bl	800936e <USBD_CtlError>
              break;
 8008ab2:	bf00      	nop
          }
          break;
 8008ab4:	e107      	b.n	8008cc6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d002      	beq.n	8008ac8 <USBD_StdEPReq+0x124>
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d016      	beq.n	8008af4 <USBD_StdEPReq+0x150>
 8008ac6:	e04b      	b.n	8008b60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00d      	beq.n	8008aea <USBD_StdEPReq+0x146>
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b80      	cmp	r3, #128	@ 0x80
 8008ad2:	d00a      	beq.n	8008aea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 f93d 	bl	8009d58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ade:	2180      	movs	r1, #128	@ 0x80
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 f939 	bl	8009d58 <USBD_LL_StallEP>
 8008ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ae8:	e040      	b.n	8008b6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fc3e 	bl	800936e <USBD_CtlError>
              break;
 8008af2:	e03b      	b.n	8008b6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	885b      	ldrh	r3, [r3, #2]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d136      	bne.n	8008b6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 f943 	bl	8009d96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fcf7 	bl	8009504 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff fde4 	bl	80086e8 <USBD_CoreFindEP>
 8008b20:	4603      	mov	r3, r0
 8008b22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b24:	7b7b      	ldrb	r3, [r7, #13]
 8008b26:	2bff      	cmp	r3, #255	@ 0xff
 8008b28:	d01f      	beq.n	8008b6a <USBD_StdEPReq+0x1c6>
 8008b2a:	7b7b      	ldrb	r3, [r7, #13]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d11c      	bne.n	8008b6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008b30:	7b7a      	ldrb	r2, [r7, #13]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008b38:	7b7a      	ldrb	r2, [r7, #13]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	32ae      	adds	r2, #174	@ 0xae
 8008b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d010      	beq.n	8008b6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b48:	7b7a      	ldrb	r2, [r7, #13]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	32ae      	adds	r2, #174	@ 0xae
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008b5e:	e004      	b.n	8008b6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc03 	bl	800936e <USBD_CtlError>
              break;
 8008b68:	e000      	b.n	8008b6c <USBD_StdEPReq+0x1c8>
              break;
 8008b6a:	bf00      	nop
          }
          break;
 8008b6c:	e0ab      	b.n	8008cc6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d002      	beq.n	8008b80 <USBD_StdEPReq+0x1dc>
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d032      	beq.n	8008be4 <USBD_StdEPReq+0x240>
 8008b7e:	e097      	b.n	8008cb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <USBD_StdEPReq+0x1f2>
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	2b80      	cmp	r3, #128	@ 0x80
 8008b8a:	d004      	beq.n	8008b96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fbed 	bl	800936e <USBD_CtlError>
                break;
 8008b94:	e091      	b.n	8008cba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da0b      	bge.n	8008bb6 <USBD_StdEPReq+0x212>
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	3310      	adds	r3, #16
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	e00b      	b.n	8008bce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	3304      	adds	r3, #4
 8008bce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fc37 	bl	8009450 <USBD_CtlSendData>
              break;
 8008be2:	e06a      	b.n	8008cba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da11      	bge.n	8008c10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	f003 020f 	and.w	r2, r3, #15
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	3324      	adds	r3, #36	@ 0x24
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d117      	bne.n	8008c36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fbb0 	bl	800936e <USBD_CtlError>
                  break;
 8008c0e:	e054      	b.n	8008cba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	f003 020f 	and.w	r2, r3, #15
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fb9d 	bl	800936e <USBD_CtlError>
                  break;
 8008c34:	e041      	b.n	8008cba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	da0b      	bge.n	8008c56 <USBD_StdEPReq+0x2b2>
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	3310      	adds	r3, #16
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	4413      	add	r3, r2
 8008c52:	3304      	adds	r3, #4
 8008c54:	e00b      	b.n	8008c6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <USBD_StdEPReq+0x2d8>
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	2b80      	cmp	r3, #128	@ 0x80
 8008c7a:	d103      	bne.n	8008c84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	e00e      	b.n	8008ca2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 f8a3 	bl	8009dd4 <USBD_LL_IsStallEP>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2201      	movs	r2, #1
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e002      	b.n	8008ca2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fbd1 	bl	8009450 <USBD_CtlSendData>
              break;
 8008cae:	e004      	b.n	8008cba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fb5b 	bl	800936e <USBD_CtlError>
              break;
 8008cb8:	bf00      	nop
          }
          break;
 8008cba:	e004      	b.n	8008cc6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fb55 	bl	800936e <USBD_CtlError>
          break;
 8008cc4:	bf00      	nop
      }
      break;
 8008cc6:	e005      	b.n	8008cd4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fb4f 	bl	800936e <USBD_CtlError>
      break;
 8008cd0:	e000      	b.n	8008cd4 <USBD_StdEPReq+0x330>
      break;
 8008cd2:	bf00      	nop
  }

  return ret;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	885b      	ldrh	r3, [r3, #2]
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	2b06      	cmp	r3, #6
 8008d02:	f200 8128 	bhi.w	8008f56 <USBD_GetDescriptor+0x276>
 8008d06:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <USBD_GetDescriptor+0x2c>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	08008d41 	.word	0x08008d41
 8008d14:	08008d81 	.word	0x08008d81
 8008d18:	08008f57 	.word	0x08008f57
 8008d1c:	08008f57 	.word	0x08008f57
 8008d20:	08008ef7 	.word	0x08008ef7
 8008d24:	08008f23 	.word	0x08008f23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	7c12      	ldrb	r2, [r2, #16]
 8008d34:	f107 0108 	add.w	r1, r7, #8
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
 8008d3c:	60f8      	str	r0, [r7, #12]
      break;
 8008d3e:	e112      	b.n	8008f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	7c1b      	ldrb	r3, [r3, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10d      	bne.n	8008d64 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d50:	f107 0208 	add.w	r2, r7, #8
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	2202      	movs	r2, #2
 8008d60:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d62:	e100      	b.n	8008f66 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6c:	f107 0208 	add.w	r2, r7, #8
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
 8008d74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	701a      	strb	r2, [r3, #0]
      break;
 8008d7e:	e0f2      	b.n	8008f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	885b      	ldrh	r3, [r3, #2]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	f200 80ac 	bhi.w	8008ee4 <USBD_GetDescriptor+0x204>
 8008d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <USBD_GetDescriptor+0xb4>)
 8008d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d92:	bf00      	nop
 8008d94:	08008dad 	.word	0x08008dad
 8008d98:	08008de1 	.word	0x08008de1
 8008d9c:	08008e15 	.word	0x08008e15
 8008da0:	08008e49 	.word	0x08008e49
 8008da4:	08008e7d 	.word	0x08008e7d
 8008da8:	08008eb1 	.word	0x08008eb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	7c12      	ldrb	r2, [r2, #16]
 8008dc4:	f107 0108 	add.w	r1, r7, #8
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4798      	blx	r3
 8008dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dce:	e091      	b.n	8008ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 facb 	bl	800936e <USBD_CtlError>
            err++;
 8008dd8:	7afb      	ldrb	r3, [r7, #11]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dde:	e089      	b.n	8008ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00b      	beq.n	8008e04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	7c12      	ldrb	r2, [r2, #16]
 8008df8:	f107 0108 	add.w	r1, r7, #8
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4798      	blx	r3
 8008e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e02:	e077      	b.n	8008ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fab1 	bl	800936e <USBD_CtlError>
            err++;
 8008e0c:	7afb      	ldrb	r3, [r7, #11]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	72fb      	strb	r3, [r7, #11]
          break;
 8008e12:	e06f      	b.n	8008ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	7c12      	ldrb	r2, [r2, #16]
 8008e2c:	f107 0108 	add.w	r1, r7, #8
 8008e30:	4610      	mov	r0, r2
 8008e32:	4798      	blx	r3
 8008e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e36:	e05d      	b.n	8008ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa97 	bl	800936e <USBD_CtlError>
            err++;
 8008e40:	7afb      	ldrb	r3, [r7, #11]
 8008e42:	3301      	adds	r3, #1
 8008e44:	72fb      	strb	r3, [r7, #11]
          break;
 8008e46:	e055      	b.n	8008ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	7c12      	ldrb	r2, [r2, #16]
 8008e60:	f107 0108 	add.w	r1, r7, #8
 8008e64:	4610      	mov	r0, r2
 8008e66:	4798      	blx	r3
 8008e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e6a:	e043      	b.n	8008ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa7d 	bl	800936e <USBD_CtlError>
            err++;
 8008e74:	7afb      	ldrb	r3, [r7, #11]
 8008e76:	3301      	adds	r3, #1
 8008e78:	72fb      	strb	r3, [r7, #11]
          break;
 8008e7a:	e03b      	b.n	8008ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	7c12      	ldrb	r2, [r2, #16]
 8008e94:	f107 0108 	add.w	r1, r7, #8
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4798      	blx	r3
 8008e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e9e:	e029      	b.n	8008ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa63 	bl	800936e <USBD_CtlError>
            err++;
 8008ea8:	7afb      	ldrb	r3, [r7, #11]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	72fb      	strb	r3, [r7, #11]
          break;
 8008eae:	e021      	b.n	8008ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	7c12      	ldrb	r2, [r2, #16]
 8008ec8:	f107 0108 	add.w	r1, r7, #8
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ed2:	e00f      	b.n	8008ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa49 	bl	800936e <USBD_CtlError>
            err++;
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ee2:	e007      	b.n	8008ef4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa41 	bl	800936e <USBD_CtlError>
          err++;
 8008eec:	7afb      	ldrb	r3, [r7, #11]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ef2:	bf00      	nop
      }
      break;
 8008ef4:	e037      	b.n	8008f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7c1b      	ldrb	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f06:	f107 0208 	add.w	r2, r7, #8
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	4798      	blx	r3
 8008f0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f10:	e029      	b.n	8008f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa2a 	bl	800936e <USBD_CtlError>
        err++;
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f20:	e021      	b.n	8008f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	7c1b      	ldrb	r3, [r3, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10d      	bne.n	8008f46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f32:	f107 0208 	add.w	r2, r7, #8
 8008f36:	4610      	mov	r0, r2
 8008f38:	4798      	blx	r3
 8008f3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	2207      	movs	r2, #7
 8008f42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f44:	e00f      	b.n	8008f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fa10 	bl	800936e <USBD_CtlError>
        err++;
 8008f4e:	7afb      	ldrb	r3, [r7, #11]
 8008f50:	3301      	adds	r3, #1
 8008f52:	72fb      	strb	r3, [r7, #11]
      break;
 8008f54:	e007      	b.n	8008f66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa08 	bl	800936e <USBD_CtlError>
      err++;
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
 8008f60:	3301      	adds	r3, #1
 8008f62:	72fb      	strb	r3, [r7, #11]
      break;
 8008f64:	bf00      	nop
  }

  if (err != 0U)
 8008f66:	7afb      	ldrb	r3, [r7, #11]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d11e      	bne.n	8008faa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	88db      	ldrh	r3, [r3, #6]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d016      	beq.n	8008fa2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008f74:	893b      	ldrh	r3, [r7, #8]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00e      	beq.n	8008f98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	88da      	ldrh	r2, [r3, #6]
 8008f7e:	893b      	ldrh	r3, [r7, #8]
 8008f80:	4293      	cmp	r3, r2
 8008f82:	bf28      	it	cs
 8008f84:	4613      	movcs	r3, r2
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f8a:	893b      	ldrh	r3, [r7, #8]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	68f9      	ldr	r1, [r7, #12]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fa5d 	bl	8009450 <USBD_CtlSendData>
 8008f96:	e009      	b.n	8008fac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f9e7 	bl	800936e <USBD_CtlError>
 8008fa0:	e004      	b.n	8008fac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 faae 	bl	8009504 <USBD_CtlSendStatus>
 8008fa8:	e000      	b.n	8008fac <USBD_GetDescriptor+0x2cc>
    return;
 8008faa:	bf00      	nop
  }
}
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop

08008fb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	889b      	ldrh	r3, [r3, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d131      	bne.n	800902a <USBD_SetAddress+0x76>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	88db      	ldrh	r3, [r3, #6]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d12d      	bne.n	800902a <USBD_SetAddress+0x76>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	885b      	ldrh	r3, [r3, #2]
 8008fd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fd4:	d829      	bhi.n	800902a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	885b      	ldrh	r3, [r3, #2]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fe0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d104      	bne.n	8008ff8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f9bc 	bl	800936e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff6:	e01d      	b.n	8009034 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	7bfa      	ldrb	r2, [r7, #15]
 8008ffc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 ff11 	bl	8009e2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa7a 	bl	8009504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d004      	beq.n	8009020 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2202      	movs	r2, #2
 800901a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901e:	e009      	b.n	8009034 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009028:	e004      	b.n	8009034 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f99e 	bl	800936e <USBD_CtlError>
  }
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	885b      	ldrh	r3, [r3, #2]
 800904e:	b2da      	uxtb	r2, r3
 8009050:	4b4e      	ldr	r3, [pc, #312]	@ (800918c <USBD_SetConfig+0x150>)
 8009052:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009054:	4b4d      	ldr	r3, [pc, #308]	@ (800918c <USBD_SetConfig+0x150>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d905      	bls.n	8009068 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f985 	bl	800936e <USBD_CtlError>
    return USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	e08c      	b.n	8009182 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d002      	beq.n	800907a <USBD_SetConfig+0x3e>
 8009074:	2b03      	cmp	r3, #3
 8009076:	d029      	beq.n	80090cc <USBD_SetConfig+0x90>
 8009078:	e075      	b.n	8009166 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800907a:	4b44      	ldr	r3, [pc, #272]	@ (800918c <USBD_SetConfig+0x150>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d020      	beq.n	80090c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009082:	4b42      	ldr	r3, [pc, #264]	@ (800918c <USBD_SetConfig+0x150>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800908c:	4b3f      	ldr	r3, [pc, #252]	@ (800918c <USBD_SetConfig+0x150>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fe ffe3 	bl	800805e <USBD_SetClassConfig>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d008      	beq.n	80090b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f962 	bl	800936e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090b2:	e065      	b.n	8009180 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fa25 	bl	8009504 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2203      	movs	r2, #3
 80090be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80090c2:	e05d      	b.n	8009180 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fa1d 	bl	8009504 <USBD_CtlSendStatus>
      break;
 80090ca:	e059      	b.n	8009180 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80090cc:	4b2f      	ldr	r3, [pc, #188]	@ (800918c <USBD_SetConfig+0x150>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d112      	bne.n	80090fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80090dc:	4b2b      	ldr	r3, [pc, #172]	@ (800918c <USBD_SetConfig+0x150>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090e6:	4b29      	ldr	r3, [pc, #164]	@ (800918c <USBD_SetConfig+0x150>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7fe ffd2 	bl	8008096 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa06 	bl	8009504 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090f8:	e042      	b.n	8009180 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80090fa:	4b24      	ldr	r3, [pc, #144]	@ (800918c <USBD_SetConfig+0x150>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	429a      	cmp	r2, r3
 8009106:	d02a      	beq.n	800915e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7fe ffc0 	bl	8008096 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009116:	4b1d      	ldr	r3, [pc, #116]	@ (800918c <USBD_SetConfig+0x150>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009120:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <USBD_SetConfig+0x150>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7fe ff99 	bl	800805e <USBD_SetClassConfig>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00f      	beq.n	8009156 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f918 	bl	800936e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7fe ffa5 	bl	8008096 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2202      	movs	r2, #2
 8009150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009154:	e014      	b.n	8009180 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f9d4 	bl	8009504 <USBD_CtlSendStatus>
      break;
 800915c:	e010      	b.n	8009180 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f9d0 	bl	8009504 <USBD_CtlSendStatus>
      break;
 8009164:	e00c      	b.n	8009180 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f900 	bl	800936e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800916e:	4b07      	ldr	r3, [pc, #28]	@ (800918c <USBD_SetConfig+0x150>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7fe ff8e 	bl	8008096 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800917a:	2303      	movs	r3, #3
 800917c:	73fb      	strb	r3, [r7, #15]
      break;
 800917e:	bf00      	nop
  }

  return ret;
 8009180:	7bfb      	ldrb	r3, [r7, #15]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20002528 	.word	0x20002528

08009190 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	88db      	ldrh	r3, [r3, #6]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d004      	beq.n	80091ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f8e2 	bl	800936e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091aa:	e023      	b.n	80091f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	dc02      	bgt.n	80091be <USBD_GetConfig+0x2e>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dc03      	bgt.n	80091c4 <USBD_GetConfig+0x34>
 80091bc:	e015      	b.n	80091ea <USBD_GetConfig+0x5a>
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d00b      	beq.n	80091da <USBD_GetConfig+0x4a>
 80091c2:	e012      	b.n	80091ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3308      	adds	r3, #8
 80091ce:	2201      	movs	r2, #1
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f93c 	bl	8009450 <USBD_CtlSendData>
        break;
 80091d8:	e00c      	b.n	80091f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	3304      	adds	r3, #4
 80091de:	2201      	movs	r2, #1
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f934 	bl	8009450 <USBD_CtlSendData>
        break;
 80091e8:	e004      	b.n	80091f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f8be 	bl	800936e <USBD_CtlError>
        break;
 80091f2:	bf00      	nop
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800920c:	b2db      	uxtb	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	2b02      	cmp	r3, #2
 8009212:	d81e      	bhi.n	8009252 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	88db      	ldrh	r3, [r3, #6]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d004      	beq.n	8009226 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f8a5 	bl	800936e <USBD_CtlError>
        break;
 8009224:	e01a      	b.n	800925c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f043 0202 	orr.w	r2, r3, #2
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	330c      	adds	r3, #12
 8009246:	2202      	movs	r2, #2
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f900 	bl	8009450 <USBD_CtlSendData>
      break;
 8009250:	e004      	b.n	800925c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f88a 	bl	800936e <USBD_CtlError>
      break;
 800925a:	bf00      	nop
  }
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	885b      	ldrh	r3, [r3, #2]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d107      	bne.n	8009286 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f940 	bl	8009504 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009284:	e013      	b.n	80092ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	885b      	ldrh	r3, [r3, #2]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d10b      	bne.n	80092a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	889b      	ldrh	r3, [r3, #4]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	b29b      	uxth	r3, r3
 8009296:	b2da      	uxtb	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f930 	bl	8009504 <USBD_CtlSendStatus>
}
 80092a4:	e003      	b.n	80092ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f860 	bl	800936e <USBD_CtlError>
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d80b      	bhi.n	80092e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	885b      	ldrh	r3, [r3, #2]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d10c      	bne.n	80092f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f910 	bl	8009504 <USBD_CtlSendStatus>
      }
      break;
 80092e4:	e004      	b.n	80092f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f840 	bl	800936e <USBD_CtlError>
      break;
 80092ee:	e000      	b.n	80092f2 <USBD_ClrFeature+0x3c>
      break;
 80092f0:	bf00      	nop
  }
}
 80092f2:	bf00      	nop
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	781a      	ldrb	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3301      	adds	r3, #1
 8009314:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3301      	adds	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7ff fa40 	bl	80087aa <SWAPBYTE>
 800932a:	4603      	mov	r3, r0
 800932c:	461a      	mov	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3301      	adds	r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3301      	adds	r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff fa33 	bl	80087aa <SWAPBYTE>
 8009344:	4603      	mov	r3, r0
 8009346:	461a      	mov	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3301      	adds	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7ff fa26 	bl	80087aa <SWAPBYTE>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	80da      	strh	r2, [r3, #6]
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009378:	2180      	movs	r1, #128	@ 0x80
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fcec 	bl	8009d58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009380:	2100      	movs	r1, #0
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fce8 	bl	8009d58 <USBD_LL_StallEP>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d036      	beq.n	8009414 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093aa:	6938      	ldr	r0, [r7, #16]
 80093ac:	f000 f836 	bl	800941c <USBD_GetLen>
 80093b0:	4603      	mov	r3, r0
 80093b2:	3301      	adds	r3, #1
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	4413      	add	r3, r2
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	3301      	adds	r3, #1
 80093ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	4413      	add	r3, r2
 80093d6:	2203      	movs	r2, #3
 80093d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	3301      	adds	r3, #1
 80093de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093e0:	e013      	b.n	800940a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	4413      	add	r3, r2
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	7812      	ldrb	r2, [r2, #0]
 80093ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	3301      	adds	r3, #1
 80093f2:	613b      	str	r3, [r7, #16]
    idx++;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	3301      	adds	r3, #1
 80093f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4413      	add	r3, r2
 8009400:	2200      	movs	r2, #0
 8009402:	701a      	strb	r2, [r3, #0]
    idx++;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	3301      	adds	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e7      	bne.n	80093e2 <USBD_GetString+0x52>
 8009412:	e000      	b.n	8009416 <USBD_GetString+0x86>
    return;
 8009414:	bf00      	nop
  }
}
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800942c:	e005      	b.n	800943a <USBD_GetLen+0x1e>
  {
    len++;
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	3301      	adds	r3, #1
 8009432:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	3301      	adds	r3, #1
 8009438:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1f5      	bne.n	800942e <USBD_GetLen+0x12>
  }

  return len;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2202      	movs	r2, #2
 8009460:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	2100      	movs	r1, #0
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fcf7 	bl	8009e6a <USBD_LL_Transmit>

  return USBD_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	2100      	movs	r1, #0
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 fce6 	bl	8009e6a <USBD_LL_Transmit>

  return USBD_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2203      	movs	r2, #3
 80094b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	2100      	movs	r1, #0
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fcea 	bl	8009eac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	2100      	movs	r1, #0
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 fcd9 	bl	8009eac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2204      	movs	r2, #4
 8009510:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009514:	2300      	movs	r3, #0
 8009516:	2200      	movs	r2, #0
 8009518:	2100      	movs	r1, #0
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fca5 	bl	8009e6a <USBD_LL_Transmit>

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2205      	movs	r2, #5
 8009536:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800953a:	2300      	movs	r3, #0
 800953c:	2200      	movs	r2, #0
 800953e:	2100      	movs	r1, #0
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fcb3 	bl	8009eac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009554:	2200      	movs	r2, #0
 8009556:	4912      	ldr	r1, [pc, #72]	@ (80095a0 <MX_USB_DEVICE_Init+0x50>)
 8009558:	4812      	ldr	r0, [pc, #72]	@ (80095a4 <MX_USB_DEVICE_Init+0x54>)
 800955a:	f7fe fd03 	bl	8007f64 <USBD_Init>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009564:	f7f7 f97e 	bl	8000864 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009568:	490f      	ldr	r1, [pc, #60]	@ (80095a8 <MX_USB_DEVICE_Init+0x58>)
 800956a:	480e      	ldr	r0, [pc, #56]	@ (80095a4 <MX_USB_DEVICE_Init+0x54>)
 800956c:	f7fe fd2a 	bl	8007fc4 <USBD_RegisterClass>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009576:	f7f7 f975 	bl	8000864 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800957a:	490c      	ldr	r1, [pc, #48]	@ (80095ac <MX_USB_DEVICE_Init+0x5c>)
 800957c:	4809      	ldr	r0, [pc, #36]	@ (80095a4 <MX_USB_DEVICE_Init+0x54>)
 800957e:	f7fe fc21 	bl	8007dc4 <USBD_CDC_RegisterInterface>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009588:	f7f7 f96c 	bl	8000864 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800958c:	4805      	ldr	r0, [pc, #20]	@ (80095a4 <MX_USB_DEVICE_Init+0x54>)
 800958e:	f7fe fd4f 	bl	8008030 <USBD_Start>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009598:	f7f7 f964 	bl	8000864 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800959c:	bf00      	nop
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	200000ac 	.word	0x200000ac
 80095a4:	2000252c 	.word	0x2000252c
 80095a8:	20000018 	.word	0x20000018
 80095ac:	20000098 	.word	0x20000098

080095b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095b4:	2200      	movs	r2, #0
 80095b6:	4905      	ldr	r1, [pc, #20]	@ (80095cc <CDC_Init_FS+0x1c>)
 80095b8:	4805      	ldr	r0, [pc, #20]	@ (80095d0 <CDC_Init_FS+0x20>)
 80095ba:	f7fe fc1d 	bl	8007df8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095be:	4905      	ldr	r1, [pc, #20]	@ (80095d4 <CDC_Init_FS+0x24>)
 80095c0:	4803      	ldr	r0, [pc, #12]	@ (80095d0 <CDC_Init_FS+0x20>)
 80095c2:	f7fe fc3b 	bl	8007e3c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20003008 	.word	0x20003008
 80095d0:	2000252c 	.word	0x2000252c
 80095d4:	20002808 	.word	0x20002808

080095d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095d8:	b480      	push	{r7}
 80095da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095de:	4618      	mov	r0, r3
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
 80095f4:	4613      	mov	r3, r2
 80095f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	2b23      	cmp	r3, #35	@ 0x23
 80095fc:	d84a      	bhi.n	8009694 <CDC_Control_FS+0xac>
 80095fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <CDC_Control_FS+0x1c>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009695 	.word	0x08009695
 8009608:	08009695 	.word	0x08009695
 800960c:	08009695 	.word	0x08009695
 8009610:	08009695 	.word	0x08009695
 8009614:	08009695 	.word	0x08009695
 8009618:	08009695 	.word	0x08009695
 800961c:	08009695 	.word	0x08009695
 8009620:	08009695 	.word	0x08009695
 8009624:	08009695 	.word	0x08009695
 8009628:	08009695 	.word	0x08009695
 800962c:	08009695 	.word	0x08009695
 8009630:	08009695 	.word	0x08009695
 8009634:	08009695 	.word	0x08009695
 8009638:	08009695 	.word	0x08009695
 800963c:	08009695 	.word	0x08009695
 8009640:	08009695 	.word	0x08009695
 8009644:	08009695 	.word	0x08009695
 8009648:	08009695 	.word	0x08009695
 800964c:	08009695 	.word	0x08009695
 8009650:	08009695 	.word	0x08009695
 8009654:	08009695 	.word	0x08009695
 8009658:	08009695 	.word	0x08009695
 800965c:	08009695 	.word	0x08009695
 8009660:	08009695 	.word	0x08009695
 8009664:	08009695 	.word	0x08009695
 8009668:	08009695 	.word	0x08009695
 800966c:	08009695 	.word	0x08009695
 8009670:	08009695 	.word	0x08009695
 8009674:	08009695 	.word	0x08009695
 8009678:	08009695 	.word	0x08009695
 800967c:	08009695 	.word	0x08009695
 8009680:	08009695 	.word	0x08009695
 8009684:	08009695 	.word	0x08009695
 8009688:	08009695 	.word	0x08009695
 800968c:	08009695 	.word	0x08009695
 8009690:	08009695 	.word	0x08009695
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009694:	bf00      	nop
  }

  return (USBD_OK);
 8009696:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_CdcRxBuffer_FS_cnt = *Len;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a0a      	ldr	r2, [pc, #40]	@ (80096dc <CDC_Receive_FS+0x38>)
 80096b4:	6013      	str	r3, [r2, #0]
  strncpy(USB_CdcRxBuffer_FS, Buf, *Len);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	4808      	ldr	r0, [pc, #32]	@ (80096e0 <CDC_Receive_FS+0x3c>)
 80096c0:	f000 fdbd 	bl	800a23e <strncpy>

  // memcpy((uint8_t *) USB_CdcRxBuffer_FS, (uint8_t *) Buf, sizeof(*Len));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	4807      	ldr	r0, [pc, #28]	@ (80096e4 <CDC_Receive_FS+0x40>)
 80096c8:	f7fe fbb8 	bl	8007e3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096cc:	4805      	ldr	r0, [pc, #20]	@ (80096e4 <CDC_Receive_FS+0x40>)
 80096ce:	f7fe fc13 	bl	8007ef8 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 80096d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20000518 	.word	0x20000518
 80096e0:	20000318 	.word	0x20000318
 80096e4:	2000252c 	.word	0x2000252c

080096e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  uint32_t startTick = HAL_GetTick();
 80096f8:	f7f7 ff40 	bl	800157c <HAL_GetTick>
 80096fc:	6138      	str	r0, [r7, #16]
  uint32_t TIMEOUT_VALUE = 1U;
 80096fe:	2301      	movs	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009702:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <CDC_Transmit_FS+0x44>)
 8009704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009708:	60bb      	str	r3, [r7, #8]
  //   }
  // }
  #endif
  

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800970a:	887b      	ldrh	r3, [r7, #2]
 800970c:	461a      	mov	r2, r3
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	4806      	ldr	r0, [pc, #24]	@ (800972c <CDC_Transmit_FS+0x44>)
 8009712:	f7fe fb71 	bl	8007df8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009716:	4805      	ldr	r0, [pc, #20]	@ (800972c <CDC_Transmit_FS+0x44>)
 8009718:	f7fe fbae 	bl	8007e78 <USBD_CDC_TransmitPacket>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 7 */
  return result;
 8009720:	7dfb      	ldrb	r3, [r7, #23]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	2000252c 	.word	0x2000252c

08009730 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009742:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009746:	4618      	mov	r0, r3
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
	...

08009754 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2212      	movs	r2, #18
 8009764:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009766:	4b03      	ldr	r3, [pc, #12]	@ (8009774 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	200000c8 	.word	0x200000c8

08009778 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2204      	movs	r2, #4
 8009788:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800978a:	4b03      	ldr	r3, [pc, #12]	@ (8009798 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	200000dc 	.word	0x200000dc

0800979c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d105      	bne.n	80097ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4907      	ldr	r1, [pc, #28]	@ (80097d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80097b2:	4808      	ldr	r0, [pc, #32]	@ (80097d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80097b4:	f7ff fdec 	bl	8009390 <USBD_GetString>
 80097b8:	e004      	b.n	80097c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	4904      	ldr	r1, [pc, #16]	@ (80097d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80097be:	4805      	ldr	r0, [pc, #20]	@ (80097d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80097c0:	f7ff fde6 	bl	8009390 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097c4:	4b02      	ldr	r3, [pc, #8]	@ (80097d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20003808 	.word	0x20003808
 80097d4:	0800b418 	.word	0x0800b418

080097d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	6039      	str	r1, [r7, #0]
 80097e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	4904      	ldr	r1, [pc, #16]	@ (80097f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097e8:	4804      	ldr	r0, [pc, #16]	@ (80097fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097ea:	f7ff fdd1 	bl	8009390 <USBD_GetString>
  return USBD_StrDesc;
 80097ee:	4b02      	ldr	r3, [pc, #8]	@ (80097f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20003808 	.word	0x20003808
 80097fc:	0800b430 	.word	0x0800b430

08009800 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	221a      	movs	r2, #26
 8009810:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009812:	f000 f843 	bl	800989c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009816:	4b02      	ldr	r3, [pc, #8]	@ (8009820 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	200000e0 	.word	0x200000e0

08009824 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4907      	ldr	r1, [pc, #28]	@ (8009858 <USBD_FS_ConfigStrDescriptor+0x34>)
 800983a:	4808      	ldr	r0, [pc, #32]	@ (800985c <USBD_FS_ConfigStrDescriptor+0x38>)
 800983c:	f7ff fda8 	bl	8009390 <USBD_GetString>
 8009840:	e004      	b.n	800984c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4904      	ldr	r1, [pc, #16]	@ (8009858 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009846:	4805      	ldr	r0, [pc, #20]	@ (800985c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009848:	f7ff fda2 	bl	8009390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800984c:	4b02      	ldr	r3, [pc, #8]	@ (8009858 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20003808 	.word	0x20003808
 800985c:	0800b444 	.word	0x0800b444

08009860 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4907      	ldr	r1, [pc, #28]	@ (8009894 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009876:	4808      	ldr	r0, [pc, #32]	@ (8009898 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009878:	f7ff fd8a 	bl	8009390 <USBD_GetString>
 800987c:	e004      	b.n	8009888 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4904      	ldr	r1, [pc, #16]	@ (8009894 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009882:	4805      	ldr	r0, [pc, #20]	@ (8009898 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009884:	f7ff fd84 	bl	8009390 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009888:	4b02      	ldr	r3, [pc, #8]	@ (8009894 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20003808 	.word	0x20003808
 8009898:	0800b450 	.word	0x0800b450

0800989c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098a2:	4b0f      	ldr	r3, [pc, #60]	@ (80098e0 <Get_SerialNum+0x44>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098a8:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <Get_SerialNum+0x48>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098ae:	4b0e      	ldr	r3, [pc, #56]	@ (80098e8 <Get_SerialNum+0x4c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d009      	beq.n	80098d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098c2:	2208      	movs	r2, #8
 80098c4:	4909      	ldr	r1, [pc, #36]	@ (80098ec <Get_SerialNum+0x50>)
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f000 f814 	bl	80098f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098cc:	2204      	movs	r2, #4
 80098ce:	4908      	ldr	r1, [pc, #32]	@ (80098f0 <Get_SerialNum+0x54>)
 80098d0:	68b8      	ldr	r0, [r7, #8]
 80098d2:	f000 f80f 	bl	80098f4 <IntToUnicode>
  }
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	1fff7a10 	.word	0x1fff7a10
 80098e4:	1fff7a14 	.word	0x1fff7a14
 80098e8:	1fff7a18 	.word	0x1fff7a18
 80098ec:	200000e2 	.word	0x200000e2
 80098f0:	200000f2 	.word	0x200000f2

080098f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]
 800990a:	e027      	b.n	800995c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	0f1b      	lsrs	r3, r3, #28
 8009910:	2b09      	cmp	r3, #9
 8009912:	d80b      	bhi.n	800992c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	0f1b      	lsrs	r3, r3, #28
 8009918:	b2da      	uxtb	r2, r3
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4619      	mov	r1, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	440b      	add	r3, r1
 8009924:	3230      	adds	r2, #48	@ 0x30
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e00a      	b.n	8009942 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	0f1b      	lsrs	r3, r3, #28
 8009930:	b2da      	uxtb	r2, r3
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4619      	mov	r1, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	440b      	add	r3, r1
 800993c:	3237      	adds	r2, #55	@ 0x37
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	011b      	lsls	r3, r3, #4
 8009946:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	3301      	adds	r3, #1
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	3301      	adds	r3, #1
 800995a:	75fb      	strb	r3, [r7, #23]
 800995c:	7dfa      	ldrb	r2, [r7, #23]
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	429a      	cmp	r2, r3
 8009962:	d3d3      	bcc.n	800990c <IntToUnicode+0x18>
  }
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
	...

08009974 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	@ 0x28
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800997c:	f107 0314 	add.w	r3, r7, #20
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	605a      	str	r2, [r3, #4]
 8009986:	609a      	str	r2, [r3, #8]
 8009988:	60da      	str	r2, [r3, #12]
 800998a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009994:	d13a      	bne.n	8009a0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009996:	2300      	movs	r3, #0
 8009998:	613b      	str	r3, [r7, #16]
 800999a:	4b1e      	ldr	r3, [pc, #120]	@ (8009a14 <HAL_PCD_MspInit+0xa0>)
 800999c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999e:	4a1d      	ldr	r2, [pc, #116]	@ (8009a14 <HAL_PCD_MspInit+0xa0>)
 80099a0:	f043 0301 	orr.w	r3, r3, #1
 80099a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80099a6:	4b1b      	ldr	r3, [pc, #108]	@ (8009a14 <HAL_PCD_MspInit+0xa0>)
 80099a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80099b2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80099b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b8:	2302      	movs	r3, #2
 80099ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099c0:	2303      	movs	r3, #3
 80099c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099c4:	230a      	movs	r3, #10
 80099c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099c8:	f107 0314 	add.w	r3, r7, #20
 80099cc:	4619      	mov	r1, r3
 80099ce:	4812      	ldr	r0, [pc, #72]	@ (8009a18 <HAL_PCD_MspInit+0xa4>)
 80099d0:	f7f8 fb32 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009a14 <HAL_PCD_MspInit+0xa0>)
 80099d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009a14 <HAL_PCD_MspInit+0xa0>)
 80099da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099de:	6353      	str	r3, [r2, #52]	@ 0x34
 80099e0:	2300      	movs	r3, #0
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009a14 <HAL_PCD_MspInit+0xa0>)
 80099e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009a14 <HAL_PCD_MspInit+0xa0>)
 80099ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80099ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80099f0:	4b08      	ldr	r3, [pc, #32]	@ (8009a14 <HAL_PCD_MspInit+0xa0>)
 80099f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099f8:	60fb      	str	r3, [r7, #12]
 80099fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099fc:	2200      	movs	r2, #0
 80099fe:	2100      	movs	r1, #0
 8009a00:	2043      	movs	r0, #67	@ 0x43
 8009a02:	f7f7 fedc 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a06:	2043      	movs	r0, #67	@ 0x43
 8009a08:	f7f7 fef5 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a0c:	bf00      	nop
 8009a0e:	3728      	adds	r7, #40	@ 0x28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	40023800 	.word	0x40023800
 8009a18:	40020000 	.word	0x40020000

08009a1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7fe fb49 	bl	80080ca <USBD_LL_SetupStage>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a52:	78fa      	ldrb	r2, [r7, #3]
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4613      	mov	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	440b      	add	r3, r1
 8009a60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	78fb      	ldrb	r3, [r7, #3]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f7fe fb83 	bl	8008174 <USBD_LL_DataOutStage>
}
 8009a6e:	bf00      	nop
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009a88:	78fa      	ldrb	r2, [r7, #3]
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	440b      	add	r3, r1
 8009a96:	3320      	adds	r3, #32
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f7fe fc1c 	bl	80082da <USBD_LL_DataInStage>
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe fd56 	bl	800856a <USBD_LL_SOF>
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	79db      	ldrb	r3, [r3, #7]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d102      	bne.n	8009ae0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
 8009ade:	e008      	b.n	8009af2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	79db      	ldrb	r3, [r3, #7]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d102      	bne.n	8009aee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	73fb      	strb	r3, [r7, #15]
 8009aec:	e001      	b.n	8009af2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009aee:	f7f6 feb9 	bl	8000864 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009af8:	7bfa      	ldrb	r2, [r7, #15]
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fcf0 	bl	80084e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fc98 	bl	800843e <USBD_LL_Reset>
}
 8009b0e:	bf00      	nop
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fceb 	bl	8008502 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	6812      	ldr	r2, [r2, #0]
 8009b3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b3e:	f043 0301 	orr.w	r3, r3, #1
 8009b42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	7adb      	ldrb	r3, [r3, #11]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b4c:	4b04      	ldr	r3, [pc, #16]	@ (8009b60 <HAL_PCD_SuspendCallback+0x48>)
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	4a03      	ldr	r2, [pc, #12]	@ (8009b60 <HAL_PCD_SuspendCallback+0x48>)
 8009b52:	f043 0306 	orr.w	r3, r3, #6
 8009b56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	e000ed00 	.word	0xe000ed00

08009b64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe fce1 	bl	800853a <USBD_LL_Resume>
}
 8009b78:	bf00      	nop
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009b92:	78fa      	ldrb	r2, [r7, #3]
 8009b94:	4611      	mov	r1, r2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fd39 	bl	800860e <USBD_LL_IsoOUTIncomplete>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bb6:	78fa      	ldrb	r2, [r7, #3]
 8009bb8:	4611      	mov	r1, r2
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fcf5 	bl	80085aa <USBD_LL_IsoINIncomplete>
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe fd4b 	bl	8008672 <USBD_LL_DevConnected>
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fd48 	bl	8008688 <USBD_LL_DevDisconnected>
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d13c      	bne.n	8009c8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c10:	4a20      	ldr	r2, [pc, #128]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c20:	4b1c      	ldr	r3, [pc, #112]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009c26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009c28:	4b1a      	ldr	r3, [pc, #104]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c2e:	4b19      	ldr	r3, [pc, #100]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c30:	2202      	movs	r2, #2
 8009c32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c34:	4b17      	ldr	r3, [pc, #92]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c3a:	4b16      	ldr	r3, [pc, #88]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009c40:	4b14      	ldr	r3, [pc, #80]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c46:	4b13      	ldr	r3, [pc, #76]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c4c:	4b11      	ldr	r3, [pc, #68]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009c52:	4b10      	ldr	r3, [pc, #64]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c58:	4b0e      	ldr	r3, [pc, #56]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c5e:	480d      	ldr	r0, [pc, #52]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c60:	f7f8 fbc9 	bl	80023f6 <HAL_PCD_Init>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c6a:	f7f6 fdfb 	bl	8000864 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c6e:	2180      	movs	r1, #128	@ 0x80
 8009c70:	4808      	ldr	r0, [pc, #32]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c72:	f7f9 fdf4 	bl	800385e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c76:	2240      	movs	r2, #64	@ 0x40
 8009c78:	2100      	movs	r1, #0
 8009c7a:	4806      	ldr	r0, [pc, #24]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c7c:	f7f9 fda8 	bl	80037d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c80:	2280      	movs	r2, #128	@ 0x80
 8009c82:	2101      	movs	r1, #1
 8009c84:	4803      	ldr	r0, [pc, #12]	@ (8009c94 <USBD_LL_Init+0x94>)
 8009c86:	f7f9 fda3 	bl	80037d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20003a08 	.word	0x20003a08

08009c98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7f8 fcb0 	bl	8002614 <HAL_PCD_Start>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f942 	bl	8009f44 <USBD_Get_USB_Status>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4611      	mov	r1, r2
 8009cda:	461a      	mov	r2, r3
 8009cdc:	4603      	mov	r3, r0
 8009cde:	70fb      	strb	r3, [r7, #3]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70bb      	strb	r3, [r7, #2]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009cf6:	78bb      	ldrb	r3, [r7, #2]
 8009cf8:	883a      	ldrh	r2, [r7, #0]
 8009cfa:	78f9      	ldrb	r1, [r7, #3]
 8009cfc:	f7f9 f984 	bl	8003008 <HAL_PCD_EP_Open>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f91c 	bl	8009f44 <USBD_Get_USB_Status>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d34:	78fa      	ldrb	r2, [r7, #3]
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7f9 f9cd 	bl	80030d8 <HAL_PCD_EP_Close>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f8fd 	bl	8009f44 <USBD_Get_USB_Status>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f9 fa85 	bl	8003286 <HAL_PCD_EP_SetStall>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 f8de 	bl	8009f44 <USBD_Get_USB_Status>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009db0:	78fa      	ldrb	r2, [r7, #3]
 8009db2:	4611      	mov	r1, r2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f9 fac9 	bl	800334c <HAL_PCD_EP_ClrStall>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f8bf 	bl	8009f44 <USBD_Get_USB_Status>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009de6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da0b      	bge.n	8009e08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009df6:	68f9      	ldr	r1, [r7, #12]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	3316      	adds	r3, #22
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	e00b      	b.n	8009e20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	4613      	mov	r3, r2
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009e1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e46:	78fa      	ldrb	r2, [r7, #3]
 8009e48:	4611      	mov	r1, r2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7f9 f8b8 	bl	8002fc0 <HAL_PCD_SetAddress>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 f874 	bl	8009f44 <USBD_Get_USB_Status>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
 8009e76:	460b      	mov	r3, r1
 8009e78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e88:	7af9      	ldrb	r1, [r7, #11]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	f7f9 f9c0 	bl	8003212 <HAL_PCD_EP_Transmit>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 f853 	bl	8009f44 <USBD_Get_USB_Status>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ea2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	607a      	str	r2, [r7, #4]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009eca:	7af9      	ldrb	r1, [r7, #11]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	f7f9 f94c 	bl	800316c <HAL_PCD_EP_Receive>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 f832 	bl	8009f44 <USBD_Get_USB_Status>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ee4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f00:	78fa      	ldrb	r2, [r7, #3]
 8009f02:	4611      	mov	r1, r2
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7f9 f96c 	bl	80031e2 <HAL_PCD_EP_GetRxCount>
 8009f0a:	4603      	mov	r3, r0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f1c:	4b03      	ldr	r3, [pc, #12]	@ (8009f2c <USBD_static_malloc+0x18>)
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20003eec 	.word	0x20003eec

08009f30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]

}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d817      	bhi.n	8009f88 <USBD_Get_USB_Status+0x44>
 8009f58:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <USBD_Get_USB_Status+0x1c>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009f77 	.word	0x08009f77
 8009f68:	08009f7d 	.word	0x08009f7d
 8009f6c:	08009f83 	.word	0x08009f83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
    break;
 8009f74:	e00b      	b.n	8009f8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f76:	2303      	movs	r3, #3
 8009f78:	73fb      	strb	r3, [r7, #15]
    break;
 8009f7a:	e008      	b.n	8009f8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f80:	e005      	b.n	8009f8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f82:	2303      	movs	r3, #3
 8009f84:	73fb      	strb	r3, [r7, #15]
    break;
 8009f86:	e002      	b.n	8009f8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8c:	bf00      	nop
  }
  return usb_status;
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <std>:
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009faa:	6083      	str	r3, [r0, #8]
 8009fac:	8181      	strh	r1, [r0, #12]
 8009fae:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fb0:	81c2      	strh	r2, [r0, #14]
 8009fb2:	6183      	str	r3, [r0, #24]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	305c      	adds	r0, #92	@ 0x5c
 8009fba:	f000 f926 	bl	800a20a <memset>
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <std+0x58>)
 8009fc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8009fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff8 <std+0x5c>)
 8009fc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009ffc <std+0x60>)
 8009fc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009fca:	4b0d      	ldr	r3, [pc, #52]	@ (800a000 <std+0x64>)
 8009fcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8009fce:	4b0d      	ldr	r3, [pc, #52]	@ (800a004 <std+0x68>)
 8009fd0:	6224      	str	r4, [r4, #32]
 8009fd2:	429c      	cmp	r4, r3
 8009fd4:	d006      	beq.n	8009fe4 <std+0x48>
 8009fd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009fda:	4294      	cmp	r4, r2
 8009fdc:	d002      	beq.n	8009fe4 <std+0x48>
 8009fde:	33d0      	adds	r3, #208	@ 0xd0
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	d105      	bne.n	8009ff0 <std+0x54>
 8009fe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fec:	f000 b9aa 	b.w	800a344 <__retarget_lock_init_recursive>
 8009ff0:	bd10      	pop	{r4, pc}
 8009ff2:	bf00      	nop
 8009ff4:	0800a185 	.word	0x0800a185
 8009ff8:	0800a1a7 	.word	0x0800a1a7
 8009ffc:	0800a1df 	.word	0x0800a1df
 800a000:	0800a203 	.word	0x0800a203
 800a004:	2000410c 	.word	0x2000410c

0800a008 <stdio_exit_handler>:
 800a008:	4a02      	ldr	r2, [pc, #8]	@ (800a014 <stdio_exit_handler+0xc>)
 800a00a:	4903      	ldr	r1, [pc, #12]	@ (800a018 <stdio_exit_handler+0x10>)
 800a00c:	4803      	ldr	r0, [pc, #12]	@ (800a01c <stdio_exit_handler+0x14>)
 800a00e:	f000 b869 	b.w	800a0e4 <_fwalk_sglue>
 800a012:	bf00      	nop
 800a014:	200000fc 	.word	0x200000fc
 800a018:	0800ae95 	.word	0x0800ae95
 800a01c:	2000010c 	.word	0x2000010c

0800a020 <cleanup_stdio>:
 800a020:	6841      	ldr	r1, [r0, #4]
 800a022:	4b0c      	ldr	r3, [pc, #48]	@ (800a054 <cleanup_stdio+0x34>)
 800a024:	4299      	cmp	r1, r3
 800a026:	b510      	push	{r4, lr}
 800a028:	4604      	mov	r4, r0
 800a02a:	d001      	beq.n	800a030 <cleanup_stdio+0x10>
 800a02c:	f000 ff32 	bl	800ae94 <_fflush_r>
 800a030:	68a1      	ldr	r1, [r4, #8]
 800a032:	4b09      	ldr	r3, [pc, #36]	@ (800a058 <cleanup_stdio+0x38>)
 800a034:	4299      	cmp	r1, r3
 800a036:	d002      	beq.n	800a03e <cleanup_stdio+0x1e>
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 ff2b 	bl	800ae94 <_fflush_r>
 800a03e:	68e1      	ldr	r1, [r4, #12]
 800a040:	4b06      	ldr	r3, [pc, #24]	@ (800a05c <cleanup_stdio+0x3c>)
 800a042:	4299      	cmp	r1, r3
 800a044:	d004      	beq.n	800a050 <cleanup_stdio+0x30>
 800a046:	4620      	mov	r0, r4
 800a048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a04c:	f000 bf22 	b.w	800ae94 <_fflush_r>
 800a050:	bd10      	pop	{r4, pc}
 800a052:	bf00      	nop
 800a054:	2000410c 	.word	0x2000410c
 800a058:	20004174 	.word	0x20004174
 800a05c:	200041dc 	.word	0x200041dc

0800a060 <global_stdio_init.part.0>:
 800a060:	b510      	push	{r4, lr}
 800a062:	4b0b      	ldr	r3, [pc, #44]	@ (800a090 <global_stdio_init.part.0+0x30>)
 800a064:	4c0b      	ldr	r4, [pc, #44]	@ (800a094 <global_stdio_init.part.0+0x34>)
 800a066:	4a0c      	ldr	r2, [pc, #48]	@ (800a098 <global_stdio_init.part.0+0x38>)
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	4620      	mov	r0, r4
 800a06c:	2200      	movs	r2, #0
 800a06e:	2104      	movs	r1, #4
 800a070:	f7ff ff94 	bl	8009f9c <std>
 800a074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a078:	2201      	movs	r2, #1
 800a07a:	2109      	movs	r1, #9
 800a07c:	f7ff ff8e 	bl	8009f9c <std>
 800a080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a084:	2202      	movs	r2, #2
 800a086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a08a:	2112      	movs	r1, #18
 800a08c:	f7ff bf86 	b.w	8009f9c <std>
 800a090:	20004244 	.word	0x20004244
 800a094:	2000410c 	.word	0x2000410c
 800a098:	0800a009 	.word	0x0800a009

0800a09c <__sfp_lock_acquire>:
 800a09c:	4801      	ldr	r0, [pc, #4]	@ (800a0a4 <__sfp_lock_acquire+0x8>)
 800a09e:	f000 b952 	b.w	800a346 <__retarget_lock_acquire_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	2000424d 	.word	0x2000424d

0800a0a8 <__sfp_lock_release>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	@ (800a0b0 <__sfp_lock_release+0x8>)
 800a0aa:	f000 b94d 	b.w	800a348 <__retarget_lock_release_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	2000424d 	.word	0x2000424d

0800a0b4 <__sinit>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	f7ff fff0 	bl	800a09c <__sfp_lock_acquire>
 800a0bc:	6a23      	ldr	r3, [r4, #32]
 800a0be:	b11b      	cbz	r3, 800a0c8 <__sinit+0x14>
 800a0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c4:	f7ff bff0 	b.w	800a0a8 <__sfp_lock_release>
 800a0c8:	4b04      	ldr	r3, [pc, #16]	@ (800a0dc <__sinit+0x28>)
 800a0ca:	6223      	str	r3, [r4, #32]
 800a0cc:	4b04      	ldr	r3, [pc, #16]	@ (800a0e0 <__sinit+0x2c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1f5      	bne.n	800a0c0 <__sinit+0xc>
 800a0d4:	f7ff ffc4 	bl	800a060 <global_stdio_init.part.0>
 800a0d8:	e7f2      	b.n	800a0c0 <__sinit+0xc>
 800a0da:	bf00      	nop
 800a0dc:	0800a021 	.word	0x0800a021
 800a0e0:	20004244 	.word	0x20004244

0800a0e4 <_fwalk_sglue>:
 800a0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	4688      	mov	r8, r1
 800a0ec:	4614      	mov	r4, r2
 800a0ee:	2600      	movs	r6, #0
 800a0f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a0f8:	d505      	bpl.n	800a106 <_fwalk_sglue+0x22>
 800a0fa:	6824      	ldr	r4, [r4, #0]
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d1f7      	bne.n	800a0f0 <_fwalk_sglue+0xc>
 800a100:	4630      	mov	r0, r6
 800a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d907      	bls.n	800a11c <_fwalk_sglue+0x38>
 800a10c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a110:	3301      	adds	r3, #1
 800a112:	d003      	beq.n	800a11c <_fwalk_sglue+0x38>
 800a114:	4629      	mov	r1, r5
 800a116:	4638      	mov	r0, r7
 800a118:	47c0      	blx	r8
 800a11a:	4306      	orrs	r6, r0
 800a11c:	3568      	adds	r5, #104	@ 0x68
 800a11e:	e7e9      	b.n	800a0f4 <_fwalk_sglue+0x10>

0800a120 <iprintf>:
 800a120:	b40f      	push	{r0, r1, r2, r3}
 800a122:	b507      	push	{r0, r1, r2, lr}
 800a124:	4906      	ldr	r1, [pc, #24]	@ (800a140 <iprintf+0x20>)
 800a126:	ab04      	add	r3, sp, #16
 800a128:	6808      	ldr	r0, [r1, #0]
 800a12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a12e:	6881      	ldr	r1, [r0, #8]
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	f000 fb85 	bl	800a840 <_vfiprintf_r>
 800a136:	b003      	add	sp, #12
 800a138:	f85d eb04 	ldr.w	lr, [sp], #4
 800a13c:	b004      	add	sp, #16
 800a13e:	4770      	bx	lr
 800a140:	20000108 	.word	0x20000108

0800a144 <siprintf>:
 800a144:	b40e      	push	{r1, r2, r3}
 800a146:	b500      	push	{lr}
 800a148:	b09c      	sub	sp, #112	@ 0x70
 800a14a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a14c:	9002      	str	r0, [sp, #8]
 800a14e:	9006      	str	r0, [sp, #24]
 800a150:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a154:	4809      	ldr	r0, [pc, #36]	@ (800a17c <siprintf+0x38>)
 800a156:	9107      	str	r1, [sp, #28]
 800a158:	9104      	str	r1, [sp, #16]
 800a15a:	4909      	ldr	r1, [pc, #36]	@ (800a180 <siprintf+0x3c>)
 800a15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a160:	9105      	str	r1, [sp, #20]
 800a162:	6800      	ldr	r0, [r0, #0]
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	a902      	add	r1, sp, #8
 800a168:	f000 fa44 	bl	800a5f4 <_svfiprintf_r>
 800a16c:	9b02      	ldr	r3, [sp, #8]
 800a16e:	2200      	movs	r2, #0
 800a170:	701a      	strb	r2, [r3, #0]
 800a172:	b01c      	add	sp, #112	@ 0x70
 800a174:	f85d eb04 	ldr.w	lr, [sp], #4
 800a178:	b003      	add	sp, #12
 800a17a:	4770      	bx	lr
 800a17c:	20000108 	.word	0x20000108
 800a180:	ffff0208 	.word	0xffff0208

0800a184 <__sread>:
 800a184:	b510      	push	{r4, lr}
 800a186:	460c      	mov	r4, r1
 800a188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18c:	f000 f88c 	bl	800a2a8 <_read_r>
 800a190:	2800      	cmp	r0, #0
 800a192:	bfab      	itete	ge
 800a194:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a196:	89a3      	ldrhlt	r3, [r4, #12]
 800a198:	181b      	addge	r3, r3, r0
 800a19a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a19e:	bfac      	ite	ge
 800a1a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1a2:	81a3      	strhlt	r3, [r4, #12]
 800a1a4:	bd10      	pop	{r4, pc}

0800a1a6 <__swrite>:
 800a1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	461f      	mov	r7, r3
 800a1ac:	898b      	ldrh	r3, [r1, #12]
 800a1ae:	05db      	lsls	r3, r3, #23
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	d505      	bpl.n	800a1c4 <__swrite+0x1e>
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	2302      	movs	r3, #2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f000 f860 	bl	800a284 <_lseek_r>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1ce:	81a3      	strh	r3, [r4, #12]
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	463b      	mov	r3, r7
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	f000 b877 	b.w	800a2cc <_write_r>

0800a1de <__sseek>:
 800a1de:	b510      	push	{r4, lr}
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e6:	f000 f84d 	bl	800a284 <_lseek_r>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	bf15      	itete	ne
 800a1f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1fa:	81a3      	strheq	r3, [r4, #12]
 800a1fc:	bf18      	it	ne
 800a1fe:	81a3      	strhne	r3, [r4, #12]
 800a200:	bd10      	pop	{r4, pc}

0800a202 <__sclose>:
 800a202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a206:	f000 b82d 	b.w	800a264 <_close_r>

0800a20a <memset>:
 800a20a:	4402      	add	r2, r0
 800a20c:	4603      	mov	r3, r0
 800a20e:	4293      	cmp	r3, r2
 800a210:	d100      	bne.n	800a214 <memset+0xa>
 800a212:	4770      	bx	lr
 800a214:	f803 1b01 	strb.w	r1, [r3], #1
 800a218:	e7f9      	b.n	800a20e <memset+0x4>

0800a21a <strncmp>:
 800a21a:	b510      	push	{r4, lr}
 800a21c:	b16a      	cbz	r2, 800a23a <strncmp+0x20>
 800a21e:	3901      	subs	r1, #1
 800a220:	1884      	adds	r4, r0, r2
 800a222:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a226:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d103      	bne.n	800a236 <strncmp+0x1c>
 800a22e:	42a0      	cmp	r0, r4
 800a230:	d001      	beq.n	800a236 <strncmp+0x1c>
 800a232:	2a00      	cmp	r2, #0
 800a234:	d1f5      	bne.n	800a222 <strncmp+0x8>
 800a236:	1ad0      	subs	r0, r2, r3
 800a238:	bd10      	pop	{r4, pc}
 800a23a:	4610      	mov	r0, r2
 800a23c:	e7fc      	b.n	800a238 <strncmp+0x1e>

0800a23e <strncpy>:
 800a23e:	b510      	push	{r4, lr}
 800a240:	3901      	subs	r1, #1
 800a242:	4603      	mov	r3, r0
 800a244:	b132      	cbz	r2, 800a254 <strncpy+0x16>
 800a246:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a24a:	f803 4b01 	strb.w	r4, [r3], #1
 800a24e:	3a01      	subs	r2, #1
 800a250:	2c00      	cmp	r4, #0
 800a252:	d1f7      	bne.n	800a244 <strncpy+0x6>
 800a254:	441a      	add	r2, r3
 800a256:	2100      	movs	r1, #0
 800a258:	4293      	cmp	r3, r2
 800a25a:	d100      	bne.n	800a25e <strncpy+0x20>
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	f803 1b01 	strb.w	r1, [r3], #1
 800a262:	e7f9      	b.n	800a258 <strncpy+0x1a>

0800a264 <_close_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4d06      	ldr	r5, [pc, #24]	@ (800a280 <_close_r+0x1c>)
 800a268:	2300      	movs	r3, #0
 800a26a:	4604      	mov	r4, r0
 800a26c:	4608      	mov	r0, r1
 800a26e:	602b      	str	r3, [r5, #0]
 800a270:	f7f6 fcb1 	bl	8000bd6 <_close>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d102      	bne.n	800a27e <_close_r+0x1a>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	b103      	cbz	r3, 800a27e <_close_r+0x1a>
 800a27c:	6023      	str	r3, [r4, #0]
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	20004248 	.word	0x20004248

0800a284 <_lseek_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d07      	ldr	r5, [pc, #28]	@ (800a2a4 <_lseek_r+0x20>)
 800a288:	4604      	mov	r4, r0
 800a28a:	4608      	mov	r0, r1
 800a28c:	4611      	mov	r1, r2
 800a28e:	2200      	movs	r2, #0
 800a290:	602a      	str	r2, [r5, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	f7f6 fcc6 	bl	8000c24 <_lseek>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_lseek_r+0x1e>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_lseek_r+0x1e>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20004248 	.word	0x20004248

0800a2a8 <_read_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d07      	ldr	r5, [pc, #28]	@ (800a2c8 <_read_r+0x20>)
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	4608      	mov	r0, r1
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	602a      	str	r2, [r5, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f7f6 fc70 	bl	8000b9c <_read>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_read_r+0x1e>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_read_r+0x1e>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20004248 	.word	0x20004248

0800a2cc <_write_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4d07      	ldr	r5, [pc, #28]	@ (800a2ec <_write_r+0x20>)
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	602a      	str	r2, [r5, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f7f6 fa02 	bl	80006e4 <_write>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_write_r+0x1e>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_write_r+0x1e>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	20004248 	.word	0x20004248

0800a2f0 <__errno>:
 800a2f0:	4b01      	ldr	r3, [pc, #4]	@ (800a2f8 <__errno+0x8>)
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	20000108 	.word	0x20000108

0800a2fc <__libc_init_array>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a334 <__libc_init_array+0x38>)
 800a300:	4c0d      	ldr	r4, [pc, #52]	@ (800a338 <__libc_init_array+0x3c>)
 800a302:	1b64      	subs	r4, r4, r5
 800a304:	10a4      	asrs	r4, r4, #2
 800a306:	2600      	movs	r6, #0
 800a308:	42a6      	cmp	r6, r4
 800a30a:	d109      	bne.n	800a320 <__libc_init_array+0x24>
 800a30c:	4d0b      	ldr	r5, [pc, #44]	@ (800a33c <__libc_init_array+0x40>)
 800a30e:	4c0c      	ldr	r4, [pc, #48]	@ (800a340 <__libc_init_array+0x44>)
 800a310:	f000 ff6e 	bl	800b1f0 <_init>
 800a314:	1b64      	subs	r4, r4, r5
 800a316:	10a4      	asrs	r4, r4, #2
 800a318:	2600      	movs	r6, #0
 800a31a:	42a6      	cmp	r6, r4
 800a31c:	d105      	bne.n	800a32a <__libc_init_array+0x2e>
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
 800a320:	f855 3b04 	ldr.w	r3, [r5], #4
 800a324:	4798      	blx	r3
 800a326:	3601      	adds	r6, #1
 800a328:	e7ee      	b.n	800a308 <__libc_init_array+0xc>
 800a32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32e:	4798      	blx	r3
 800a330:	3601      	adds	r6, #1
 800a332:	e7f2      	b.n	800a31a <__libc_init_array+0x1e>
 800a334:	0800b4bc 	.word	0x0800b4bc
 800a338:	0800b4bc 	.word	0x0800b4bc
 800a33c:	0800b4bc 	.word	0x0800b4bc
 800a340:	0800b4c0 	.word	0x0800b4c0

0800a344 <__retarget_lock_init_recursive>:
 800a344:	4770      	bx	lr

0800a346 <__retarget_lock_acquire_recursive>:
 800a346:	4770      	bx	lr

0800a348 <__retarget_lock_release_recursive>:
 800a348:	4770      	bx	lr
	...

0800a34c <_free_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4605      	mov	r5, r0
 800a350:	2900      	cmp	r1, #0
 800a352:	d041      	beq.n	800a3d8 <_free_r+0x8c>
 800a354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a358:	1f0c      	subs	r4, r1, #4
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	bfb8      	it	lt
 800a35e:	18e4      	addlt	r4, r4, r3
 800a360:	f000 f8e0 	bl	800a524 <__malloc_lock>
 800a364:	4a1d      	ldr	r2, [pc, #116]	@ (800a3dc <_free_r+0x90>)
 800a366:	6813      	ldr	r3, [r2, #0]
 800a368:	b933      	cbnz	r3, 800a378 <_free_r+0x2c>
 800a36a:	6063      	str	r3, [r4, #4]
 800a36c:	6014      	str	r4, [r2, #0]
 800a36e:	4628      	mov	r0, r5
 800a370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a374:	f000 b8dc 	b.w	800a530 <__malloc_unlock>
 800a378:	42a3      	cmp	r3, r4
 800a37a:	d908      	bls.n	800a38e <_free_r+0x42>
 800a37c:	6820      	ldr	r0, [r4, #0]
 800a37e:	1821      	adds	r1, r4, r0
 800a380:	428b      	cmp	r3, r1
 800a382:	bf01      	itttt	eq
 800a384:	6819      	ldreq	r1, [r3, #0]
 800a386:	685b      	ldreq	r3, [r3, #4]
 800a388:	1809      	addeq	r1, r1, r0
 800a38a:	6021      	streq	r1, [r4, #0]
 800a38c:	e7ed      	b.n	800a36a <_free_r+0x1e>
 800a38e:	461a      	mov	r2, r3
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	b10b      	cbz	r3, 800a398 <_free_r+0x4c>
 800a394:	42a3      	cmp	r3, r4
 800a396:	d9fa      	bls.n	800a38e <_free_r+0x42>
 800a398:	6811      	ldr	r1, [r2, #0]
 800a39a:	1850      	adds	r0, r2, r1
 800a39c:	42a0      	cmp	r0, r4
 800a39e:	d10b      	bne.n	800a3b8 <_free_r+0x6c>
 800a3a0:	6820      	ldr	r0, [r4, #0]
 800a3a2:	4401      	add	r1, r0
 800a3a4:	1850      	adds	r0, r2, r1
 800a3a6:	4283      	cmp	r3, r0
 800a3a8:	6011      	str	r1, [r2, #0]
 800a3aa:	d1e0      	bne.n	800a36e <_free_r+0x22>
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	6053      	str	r3, [r2, #4]
 800a3b2:	4408      	add	r0, r1
 800a3b4:	6010      	str	r0, [r2, #0]
 800a3b6:	e7da      	b.n	800a36e <_free_r+0x22>
 800a3b8:	d902      	bls.n	800a3c0 <_free_r+0x74>
 800a3ba:	230c      	movs	r3, #12
 800a3bc:	602b      	str	r3, [r5, #0]
 800a3be:	e7d6      	b.n	800a36e <_free_r+0x22>
 800a3c0:	6820      	ldr	r0, [r4, #0]
 800a3c2:	1821      	adds	r1, r4, r0
 800a3c4:	428b      	cmp	r3, r1
 800a3c6:	bf04      	itt	eq
 800a3c8:	6819      	ldreq	r1, [r3, #0]
 800a3ca:	685b      	ldreq	r3, [r3, #4]
 800a3cc:	6063      	str	r3, [r4, #4]
 800a3ce:	bf04      	itt	eq
 800a3d0:	1809      	addeq	r1, r1, r0
 800a3d2:	6021      	streq	r1, [r4, #0]
 800a3d4:	6054      	str	r4, [r2, #4]
 800a3d6:	e7ca      	b.n	800a36e <_free_r+0x22>
 800a3d8:	bd38      	pop	{r3, r4, r5, pc}
 800a3da:	bf00      	nop
 800a3dc:	20004254 	.word	0x20004254

0800a3e0 <sbrk_aligned>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	4e0f      	ldr	r6, [pc, #60]	@ (800a420 <sbrk_aligned+0x40>)
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	6831      	ldr	r1, [r6, #0]
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	b911      	cbnz	r1, 800a3f2 <sbrk_aligned+0x12>
 800a3ec:	f000 fe28 	bl	800b040 <_sbrk_r>
 800a3f0:	6030      	str	r0, [r6, #0]
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	f000 fe23 	bl	800b040 <_sbrk_r>
 800a3fa:	1c43      	adds	r3, r0, #1
 800a3fc:	d103      	bne.n	800a406 <sbrk_aligned+0x26>
 800a3fe:	f04f 34ff 	mov.w	r4, #4294967295
 800a402:	4620      	mov	r0, r4
 800a404:	bd70      	pop	{r4, r5, r6, pc}
 800a406:	1cc4      	adds	r4, r0, #3
 800a408:	f024 0403 	bic.w	r4, r4, #3
 800a40c:	42a0      	cmp	r0, r4
 800a40e:	d0f8      	beq.n	800a402 <sbrk_aligned+0x22>
 800a410:	1a21      	subs	r1, r4, r0
 800a412:	4628      	mov	r0, r5
 800a414:	f000 fe14 	bl	800b040 <_sbrk_r>
 800a418:	3001      	adds	r0, #1
 800a41a:	d1f2      	bne.n	800a402 <sbrk_aligned+0x22>
 800a41c:	e7ef      	b.n	800a3fe <sbrk_aligned+0x1e>
 800a41e:	bf00      	nop
 800a420:	20004250 	.word	0x20004250

0800a424 <_malloc_r>:
 800a424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a428:	1ccd      	adds	r5, r1, #3
 800a42a:	f025 0503 	bic.w	r5, r5, #3
 800a42e:	3508      	adds	r5, #8
 800a430:	2d0c      	cmp	r5, #12
 800a432:	bf38      	it	cc
 800a434:	250c      	movcc	r5, #12
 800a436:	2d00      	cmp	r5, #0
 800a438:	4606      	mov	r6, r0
 800a43a:	db01      	blt.n	800a440 <_malloc_r+0x1c>
 800a43c:	42a9      	cmp	r1, r5
 800a43e:	d904      	bls.n	800a44a <_malloc_r+0x26>
 800a440:	230c      	movs	r3, #12
 800a442:	6033      	str	r3, [r6, #0]
 800a444:	2000      	movs	r0, #0
 800a446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a520 <_malloc_r+0xfc>
 800a44e:	f000 f869 	bl	800a524 <__malloc_lock>
 800a452:	f8d8 3000 	ldr.w	r3, [r8]
 800a456:	461c      	mov	r4, r3
 800a458:	bb44      	cbnz	r4, 800a4ac <_malloc_r+0x88>
 800a45a:	4629      	mov	r1, r5
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7ff ffbf 	bl	800a3e0 <sbrk_aligned>
 800a462:	1c43      	adds	r3, r0, #1
 800a464:	4604      	mov	r4, r0
 800a466:	d158      	bne.n	800a51a <_malloc_r+0xf6>
 800a468:	f8d8 4000 	ldr.w	r4, [r8]
 800a46c:	4627      	mov	r7, r4
 800a46e:	2f00      	cmp	r7, #0
 800a470:	d143      	bne.n	800a4fa <_malloc_r+0xd6>
 800a472:	2c00      	cmp	r4, #0
 800a474:	d04b      	beq.n	800a50e <_malloc_r+0xea>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	4639      	mov	r1, r7
 800a47a:	4630      	mov	r0, r6
 800a47c:	eb04 0903 	add.w	r9, r4, r3
 800a480:	f000 fdde 	bl	800b040 <_sbrk_r>
 800a484:	4581      	cmp	r9, r0
 800a486:	d142      	bne.n	800a50e <_malloc_r+0xea>
 800a488:	6821      	ldr	r1, [r4, #0]
 800a48a:	1a6d      	subs	r5, r5, r1
 800a48c:	4629      	mov	r1, r5
 800a48e:	4630      	mov	r0, r6
 800a490:	f7ff ffa6 	bl	800a3e0 <sbrk_aligned>
 800a494:	3001      	adds	r0, #1
 800a496:	d03a      	beq.n	800a50e <_malloc_r+0xea>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	442b      	add	r3, r5
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	bb62      	cbnz	r2, 800a500 <_malloc_r+0xdc>
 800a4a6:	f8c8 7000 	str.w	r7, [r8]
 800a4aa:	e00f      	b.n	800a4cc <_malloc_r+0xa8>
 800a4ac:	6822      	ldr	r2, [r4, #0]
 800a4ae:	1b52      	subs	r2, r2, r5
 800a4b0:	d420      	bmi.n	800a4f4 <_malloc_r+0xd0>
 800a4b2:	2a0b      	cmp	r2, #11
 800a4b4:	d917      	bls.n	800a4e6 <_malloc_r+0xc2>
 800a4b6:	1961      	adds	r1, r4, r5
 800a4b8:	42a3      	cmp	r3, r4
 800a4ba:	6025      	str	r5, [r4, #0]
 800a4bc:	bf18      	it	ne
 800a4be:	6059      	strne	r1, [r3, #4]
 800a4c0:	6863      	ldr	r3, [r4, #4]
 800a4c2:	bf08      	it	eq
 800a4c4:	f8c8 1000 	streq.w	r1, [r8]
 800a4c8:	5162      	str	r2, [r4, r5]
 800a4ca:	604b      	str	r3, [r1, #4]
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f000 f82f 	bl	800a530 <__malloc_unlock>
 800a4d2:	f104 000b 	add.w	r0, r4, #11
 800a4d6:	1d23      	adds	r3, r4, #4
 800a4d8:	f020 0007 	bic.w	r0, r0, #7
 800a4dc:	1ac2      	subs	r2, r0, r3
 800a4de:	bf1c      	itt	ne
 800a4e0:	1a1b      	subne	r3, r3, r0
 800a4e2:	50a3      	strne	r3, [r4, r2]
 800a4e4:	e7af      	b.n	800a446 <_malloc_r+0x22>
 800a4e6:	6862      	ldr	r2, [r4, #4]
 800a4e8:	42a3      	cmp	r3, r4
 800a4ea:	bf0c      	ite	eq
 800a4ec:	f8c8 2000 	streq.w	r2, [r8]
 800a4f0:	605a      	strne	r2, [r3, #4]
 800a4f2:	e7eb      	b.n	800a4cc <_malloc_r+0xa8>
 800a4f4:	4623      	mov	r3, r4
 800a4f6:	6864      	ldr	r4, [r4, #4]
 800a4f8:	e7ae      	b.n	800a458 <_malloc_r+0x34>
 800a4fa:	463c      	mov	r4, r7
 800a4fc:	687f      	ldr	r7, [r7, #4]
 800a4fe:	e7b6      	b.n	800a46e <_malloc_r+0x4a>
 800a500:	461a      	mov	r2, r3
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	42a3      	cmp	r3, r4
 800a506:	d1fb      	bne.n	800a500 <_malloc_r+0xdc>
 800a508:	2300      	movs	r3, #0
 800a50a:	6053      	str	r3, [r2, #4]
 800a50c:	e7de      	b.n	800a4cc <_malloc_r+0xa8>
 800a50e:	230c      	movs	r3, #12
 800a510:	6033      	str	r3, [r6, #0]
 800a512:	4630      	mov	r0, r6
 800a514:	f000 f80c 	bl	800a530 <__malloc_unlock>
 800a518:	e794      	b.n	800a444 <_malloc_r+0x20>
 800a51a:	6005      	str	r5, [r0, #0]
 800a51c:	e7d6      	b.n	800a4cc <_malloc_r+0xa8>
 800a51e:	bf00      	nop
 800a520:	20004254 	.word	0x20004254

0800a524 <__malloc_lock>:
 800a524:	4801      	ldr	r0, [pc, #4]	@ (800a52c <__malloc_lock+0x8>)
 800a526:	f7ff bf0e 	b.w	800a346 <__retarget_lock_acquire_recursive>
 800a52a:	bf00      	nop
 800a52c:	2000424c 	.word	0x2000424c

0800a530 <__malloc_unlock>:
 800a530:	4801      	ldr	r0, [pc, #4]	@ (800a538 <__malloc_unlock+0x8>)
 800a532:	f7ff bf09 	b.w	800a348 <__retarget_lock_release_recursive>
 800a536:	bf00      	nop
 800a538:	2000424c 	.word	0x2000424c

0800a53c <__ssputs_r>:
 800a53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a540:	688e      	ldr	r6, [r1, #8]
 800a542:	461f      	mov	r7, r3
 800a544:	42be      	cmp	r6, r7
 800a546:	680b      	ldr	r3, [r1, #0]
 800a548:	4682      	mov	sl, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	4690      	mov	r8, r2
 800a54e:	d82d      	bhi.n	800a5ac <__ssputs_r+0x70>
 800a550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a554:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a558:	d026      	beq.n	800a5a8 <__ssputs_r+0x6c>
 800a55a:	6965      	ldr	r5, [r4, #20]
 800a55c:	6909      	ldr	r1, [r1, #16]
 800a55e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a562:	eba3 0901 	sub.w	r9, r3, r1
 800a566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a56a:	1c7b      	adds	r3, r7, #1
 800a56c:	444b      	add	r3, r9
 800a56e:	106d      	asrs	r5, r5, #1
 800a570:	429d      	cmp	r5, r3
 800a572:	bf38      	it	cc
 800a574:	461d      	movcc	r5, r3
 800a576:	0553      	lsls	r3, r2, #21
 800a578:	d527      	bpl.n	800a5ca <__ssputs_r+0x8e>
 800a57a:	4629      	mov	r1, r5
 800a57c:	f7ff ff52 	bl	800a424 <_malloc_r>
 800a580:	4606      	mov	r6, r0
 800a582:	b360      	cbz	r0, 800a5de <__ssputs_r+0xa2>
 800a584:	6921      	ldr	r1, [r4, #16]
 800a586:	464a      	mov	r2, r9
 800a588:	f000 fd6a 	bl	800b060 <memcpy>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a596:	81a3      	strh	r3, [r4, #12]
 800a598:	6126      	str	r6, [r4, #16]
 800a59a:	6165      	str	r5, [r4, #20]
 800a59c:	444e      	add	r6, r9
 800a59e:	eba5 0509 	sub.w	r5, r5, r9
 800a5a2:	6026      	str	r6, [r4, #0]
 800a5a4:	60a5      	str	r5, [r4, #8]
 800a5a6:	463e      	mov	r6, r7
 800a5a8:	42be      	cmp	r6, r7
 800a5aa:	d900      	bls.n	800a5ae <__ssputs_r+0x72>
 800a5ac:	463e      	mov	r6, r7
 800a5ae:	6820      	ldr	r0, [r4, #0]
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	4641      	mov	r1, r8
 800a5b4:	f000 fd2a 	bl	800b00c <memmove>
 800a5b8:	68a3      	ldr	r3, [r4, #8]
 800a5ba:	1b9b      	subs	r3, r3, r6
 800a5bc:	60a3      	str	r3, [r4, #8]
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	4433      	add	r3, r6
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	f000 fd56 	bl	800b07c <_realloc_r>
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d1e0      	bne.n	800a598 <__ssputs_r+0x5c>
 800a5d6:	6921      	ldr	r1, [r4, #16]
 800a5d8:	4650      	mov	r0, sl
 800a5da:	f7ff feb7 	bl	800a34c <_free_r>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	f8ca 3000 	str.w	r3, [sl]
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5ea:	81a3      	strh	r3, [r4, #12]
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f0:	e7e9      	b.n	800a5c6 <__ssputs_r+0x8a>
	...

0800a5f4 <_svfiprintf_r>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	4698      	mov	r8, r3
 800a5fa:	898b      	ldrh	r3, [r1, #12]
 800a5fc:	061b      	lsls	r3, r3, #24
 800a5fe:	b09d      	sub	sp, #116	@ 0x74
 800a600:	4607      	mov	r7, r0
 800a602:	460d      	mov	r5, r1
 800a604:	4614      	mov	r4, r2
 800a606:	d510      	bpl.n	800a62a <_svfiprintf_r+0x36>
 800a608:	690b      	ldr	r3, [r1, #16]
 800a60a:	b973      	cbnz	r3, 800a62a <_svfiprintf_r+0x36>
 800a60c:	2140      	movs	r1, #64	@ 0x40
 800a60e:	f7ff ff09 	bl	800a424 <_malloc_r>
 800a612:	6028      	str	r0, [r5, #0]
 800a614:	6128      	str	r0, [r5, #16]
 800a616:	b930      	cbnz	r0, 800a626 <_svfiprintf_r+0x32>
 800a618:	230c      	movs	r3, #12
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295
 800a620:	b01d      	add	sp, #116	@ 0x74
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	2340      	movs	r3, #64	@ 0x40
 800a628:	616b      	str	r3, [r5, #20]
 800a62a:	2300      	movs	r3, #0
 800a62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a62e:	2320      	movs	r3, #32
 800a630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a634:	f8cd 800c 	str.w	r8, [sp, #12]
 800a638:	2330      	movs	r3, #48	@ 0x30
 800a63a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7d8 <_svfiprintf_r+0x1e4>
 800a63e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a642:	f04f 0901 	mov.w	r9, #1
 800a646:	4623      	mov	r3, r4
 800a648:	469a      	mov	sl, r3
 800a64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64e:	b10a      	cbz	r2, 800a654 <_svfiprintf_r+0x60>
 800a650:	2a25      	cmp	r2, #37	@ 0x25
 800a652:	d1f9      	bne.n	800a648 <_svfiprintf_r+0x54>
 800a654:	ebba 0b04 	subs.w	fp, sl, r4
 800a658:	d00b      	beq.n	800a672 <_svfiprintf_r+0x7e>
 800a65a:	465b      	mov	r3, fp
 800a65c:	4622      	mov	r2, r4
 800a65e:	4629      	mov	r1, r5
 800a660:	4638      	mov	r0, r7
 800a662:	f7ff ff6b 	bl	800a53c <__ssputs_r>
 800a666:	3001      	adds	r0, #1
 800a668:	f000 80a7 	beq.w	800a7ba <_svfiprintf_r+0x1c6>
 800a66c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a66e:	445a      	add	r2, fp
 800a670:	9209      	str	r2, [sp, #36]	@ 0x24
 800a672:	f89a 3000 	ldrb.w	r3, [sl]
 800a676:	2b00      	cmp	r3, #0
 800a678:	f000 809f 	beq.w	800a7ba <_svfiprintf_r+0x1c6>
 800a67c:	2300      	movs	r3, #0
 800a67e:	f04f 32ff 	mov.w	r2, #4294967295
 800a682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a686:	f10a 0a01 	add.w	sl, sl, #1
 800a68a:	9304      	str	r3, [sp, #16]
 800a68c:	9307      	str	r3, [sp, #28]
 800a68e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a692:	931a      	str	r3, [sp, #104]	@ 0x68
 800a694:	4654      	mov	r4, sl
 800a696:	2205      	movs	r2, #5
 800a698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69c:	484e      	ldr	r0, [pc, #312]	@ (800a7d8 <_svfiprintf_r+0x1e4>)
 800a69e:	f7f5 fdaf 	bl	8000200 <memchr>
 800a6a2:	9a04      	ldr	r2, [sp, #16]
 800a6a4:	b9d8      	cbnz	r0, 800a6de <_svfiprintf_r+0xea>
 800a6a6:	06d0      	lsls	r0, r2, #27
 800a6a8:	bf44      	itt	mi
 800a6aa:	2320      	movmi	r3, #32
 800a6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6b0:	0711      	lsls	r1, r2, #28
 800a6b2:	bf44      	itt	mi
 800a6b4:	232b      	movmi	r3, #43	@ 0x2b
 800a6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a6be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6c0:	d015      	beq.n	800a6ee <_svfiprintf_r+0xfa>
 800a6c2:	9a07      	ldr	r2, [sp, #28]
 800a6c4:	4654      	mov	r4, sl
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	f04f 0c0a 	mov.w	ip, #10
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d2:	3b30      	subs	r3, #48	@ 0x30
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	d94b      	bls.n	800a770 <_svfiprintf_r+0x17c>
 800a6d8:	b1b0      	cbz	r0, 800a708 <_svfiprintf_r+0x114>
 800a6da:	9207      	str	r2, [sp, #28]
 800a6dc:	e014      	b.n	800a708 <_svfiprintf_r+0x114>
 800a6de:	eba0 0308 	sub.w	r3, r0, r8
 800a6e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	9304      	str	r3, [sp, #16]
 800a6ea:	46a2      	mov	sl, r4
 800a6ec:	e7d2      	b.n	800a694 <_svfiprintf_r+0xa0>
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	1d19      	adds	r1, r3, #4
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	9103      	str	r1, [sp, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bfbb      	ittet	lt
 800a6fa:	425b      	neglt	r3, r3
 800a6fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a700:	9307      	strge	r3, [sp, #28]
 800a702:	9307      	strlt	r3, [sp, #28]
 800a704:	bfb8      	it	lt
 800a706:	9204      	strlt	r2, [sp, #16]
 800a708:	7823      	ldrb	r3, [r4, #0]
 800a70a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a70c:	d10a      	bne.n	800a724 <_svfiprintf_r+0x130>
 800a70e:	7863      	ldrb	r3, [r4, #1]
 800a710:	2b2a      	cmp	r3, #42	@ 0x2a
 800a712:	d132      	bne.n	800a77a <_svfiprintf_r+0x186>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	1d1a      	adds	r2, r3, #4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	9203      	str	r2, [sp, #12]
 800a71c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a720:	3402      	adds	r4, #2
 800a722:	9305      	str	r3, [sp, #20]
 800a724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7e8 <_svfiprintf_r+0x1f4>
 800a728:	7821      	ldrb	r1, [r4, #0]
 800a72a:	2203      	movs	r2, #3
 800a72c:	4650      	mov	r0, sl
 800a72e:	f7f5 fd67 	bl	8000200 <memchr>
 800a732:	b138      	cbz	r0, 800a744 <_svfiprintf_r+0x150>
 800a734:	9b04      	ldr	r3, [sp, #16]
 800a736:	eba0 000a 	sub.w	r0, r0, sl
 800a73a:	2240      	movs	r2, #64	@ 0x40
 800a73c:	4082      	lsls	r2, r0
 800a73e:	4313      	orrs	r3, r2
 800a740:	3401      	adds	r4, #1
 800a742:	9304      	str	r3, [sp, #16]
 800a744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a748:	4824      	ldr	r0, [pc, #144]	@ (800a7dc <_svfiprintf_r+0x1e8>)
 800a74a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a74e:	2206      	movs	r2, #6
 800a750:	f7f5 fd56 	bl	8000200 <memchr>
 800a754:	2800      	cmp	r0, #0
 800a756:	d036      	beq.n	800a7c6 <_svfiprintf_r+0x1d2>
 800a758:	4b21      	ldr	r3, [pc, #132]	@ (800a7e0 <_svfiprintf_r+0x1ec>)
 800a75a:	bb1b      	cbnz	r3, 800a7a4 <_svfiprintf_r+0x1b0>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	3307      	adds	r3, #7
 800a760:	f023 0307 	bic.w	r3, r3, #7
 800a764:	3308      	adds	r3, #8
 800a766:	9303      	str	r3, [sp, #12]
 800a768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a76a:	4433      	add	r3, r6
 800a76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a76e:	e76a      	b.n	800a646 <_svfiprintf_r+0x52>
 800a770:	fb0c 3202 	mla	r2, ip, r2, r3
 800a774:	460c      	mov	r4, r1
 800a776:	2001      	movs	r0, #1
 800a778:	e7a8      	b.n	800a6cc <_svfiprintf_r+0xd8>
 800a77a:	2300      	movs	r3, #0
 800a77c:	3401      	adds	r4, #1
 800a77e:	9305      	str	r3, [sp, #20]
 800a780:	4619      	mov	r1, r3
 800a782:	f04f 0c0a 	mov.w	ip, #10
 800a786:	4620      	mov	r0, r4
 800a788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78c:	3a30      	subs	r2, #48	@ 0x30
 800a78e:	2a09      	cmp	r2, #9
 800a790:	d903      	bls.n	800a79a <_svfiprintf_r+0x1a6>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0c6      	beq.n	800a724 <_svfiprintf_r+0x130>
 800a796:	9105      	str	r1, [sp, #20]
 800a798:	e7c4      	b.n	800a724 <_svfiprintf_r+0x130>
 800a79a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a79e:	4604      	mov	r4, r0
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e7f0      	b.n	800a786 <_svfiprintf_r+0x192>
 800a7a4:	ab03      	add	r3, sp, #12
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	462a      	mov	r2, r5
 800a7aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e4 <_svfiprintf_r+0x1f0>)
 800a7ac:	a904      	add	r1, sp, #16
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f3af 8000 	nop.w
 800a7b4:	1c42      	adds	r2, r0, #1
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	d1d6      	bne.n	800a768 <_svfiprintf_r+0x174>
 800a7ba:	89ab      	ldrh	r3, [r5, #12]
 800a7bc:	065b      	lsls	r3, r3, #25
 800a7be:	f53f af2d 	bmi.w	800a61c <_svfiprintf_r+0x28>
 800a7c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7c4:	e72c      	b.n	800a620 <_svfiprintf_r+0x2c>
 800a7c6:	ab03      	add	r3, sp, #12
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	462a      	mov	r2, r5
 800a7cc:	4b05      	ldr	r3, [pc, #20]	@ (800a7e4 <_svfiprintf_r+0x1f0>)
 800a7ce:	a904      	add	r1, sp, #16
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f000 f9bb 	bl	800ab4c <_printf_i>
 800a7d6:	e7ed      	b.n	800a7b4 <_svfiprintf_r+0x1c0>
 800a7d8:	0800b480 	.word	0x0800b480
 800a7dc:	0800b48a 	.word	0x0800b48a
 800a7e0:	00000000 	.word	0x00000000
 800a7e4:	0800a53d 	.word	0x0800a53d
 800a7e8:	0800b486 	.word	0x0800b486

0800a7ec <__sfputc_r>:
 800a7ec:	6893      	ldr	r3, [r2, #8]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	b410      	push	{r4}
 800a7f4:	6093      	str	r3, [r2, #8]
 800a7f6:	da08      	bge.n	800a80a <__sfputc_r+0x1e>
 800a7f8:	6994      	ldr	r4, [r2, #24]
 800a7fa:	42a3      	cmp	r3, r4
 800a7fc:	db01      	blt.n	800a802 <__sfputc_r+0x16>
 800a7fe:	290a      	cmp	r1, #10
 800a800:	d103      	bne.n	800a80a <__sfputc_r+0x1e>
 800a802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a806:	f000 bb6d 	b.w	800aee4 <__swbuf_r>
 800a80a:	6813      	ldr	r3, [r2, #0]
 800a80c:	1c58      	adds	r0, r3, #1
 800a80e:	6010      	str	r0, [r2, #0]
 800a810:	7019      	strb	r1, [r3, #0]
 800a812:	4608      	mov	r0, r1
 800a814:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <__sfputs_r>:
 800a81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81c:	4606      	mov	r6, r0
 800a81e:	460f      	mov	r7, r1
 800a820:	4614      	mov	r4, r2
 800a822:	18d5      	adds	r5, r2, r3
 800a824:	42ac      	cmp	r4, r5
 800a826:	d101      	bne.n	800a82c <__sfputs_r+0x12>
 800a828:	2000      	movs	r0, #0
 800a82a:	e007      	b.n	800a83c <__sfputs_r+0x22>
 800a82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a830:	463a      	mov	r2, r7
 800a832:	4630      	mov	r0, r6
 800a834:	f7ff ffda 	bl	800a7ec <__sfputc_r>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d1f3      	bne.n	800a824 <__sfputs_r+0xa>
 800a83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a840 <_vfiprintf_r>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	460d      	mov	r5, r1
 800a846:	b09d      	sub	sp, #116	@ 0x74
 800a848:	4614      	mov	r4, r2
 800a84a:	4698      	mov	r8, r3
 800a84c:	4606      	mov	r6, r0
 800a84e:	b118      	cbz	r0, 800a858 <_vfiprintf_r+0x18>
 800a850:	6a03      	ldr	r3, [r0, #32]
 800a852:	b90b      	cbnz	r3, 800a858 <_vfiprintf_r+0x18>
 800a854:	f7ff fc2e 	bl	800a0b4 <__sinit>
 800a858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a85a:	07d9      	lsls	r1, r3, #31
 800a85c:	d405      	bmi.n	800a86a <_vfiprintf_r+0x2a>
 800a85e:	89ab      	ldrh	r3, [r5, #12]
 800a860:	059a      	lsls	r2, r3, #22
 800a862:	d402      	bmi.n	800a86a <_vfiprintf_r+0x2a>
 800a864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a866:	f7ff fd6e 	bl	800a346 <__retarget_lock_acquire_recursive>
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	071b      	lsls	r3, r3, #28
 800a86e:	d501      	bpl.n	800a874 <_vfiprintf_r+0x34>
 800a870:	692b      	ldr	r3, [r5, #16]
 800a872:	b99b      	cbnz	r3, 800a89c <_vfiprintf_r+0x5c>
 800a874:	4629      	mov	r1, r5
 800a876:	4630      	mov	r0, r6
 800a878:	f000 fb72 	bl	800af60 <__swsetup_r>
 800a87c:	b170      	cbz	r0, 800a89c <_vfiprintf_r+0x5c>
 800a87e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a880:	07dc      	lsls	r4, r3, #31
 800a882:	d504      	bpl.n	800a88e <_vfiprintf_r+0x4e>
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	b01d      	add	sp, #116	@ 0x74
 800a88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88e:	89ab      	ldrh	r3, [r5, #12]
 800a890:	0598      	lsls	r0, r3, #22
 800a892:	d4f7      	bmi.n	800a884 <_vfiprintf_r+0x44>
 800a894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a896:	f7ff fd57 	bl	800a348 <__retarget_lock_release_recursive>
 800a89a:	e7f3      	b.n	800a884 <_vfiprintf_r+0x44>
 800a89c:	2300      	movs	r3, #0
 800a89e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8a0:	2320      	movs	r3, #32
 800a8a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8aa:	2330      	movs	r3, #48	@ 0x30
 800a8ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa5c <_vfiprintf_r+0x21c>
 800a8b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8b4:	f04f 0901 	mov.w	r9, #1
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	469a      	mov	sl, r3
 800a8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c0:	b10a      	cbz	r2, 800a8c6 <_vfiprintf_r+0x86>
 800a8c2:	2a25      	cmp	r2, #37	@ 0x25
 800a8c4:	d1f9      	bne.n	800a8ba <_vfiprintf_r+0x7a>
 800a8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ca:	d00b      	beq.n	800a8e4 <_vfiprintf_r+0xa4>
 800a8cc:	465b      	mov	r3, fp
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f7ff ffa1 	bl	800a81a <__sfputs_r>
 800a8d8:	3001      	adds	r0, #1
 800a8da:	f000 80a7 	beq.w	800aa2c <_vfiprintf_r+0x1ec>
 800a8de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8e0:	445a      	add	r2, fp
 800a8e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 809f 	beq.w	800aa2c <_vfiprintf_r+0x1ec>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8f8:	f10a 0a01 	add.w	sl, sl, #1
 800a8fc:	9304      	str	r3, [sp, #16]
 800a8fe:	9307      	str	r3, [sp, #28]
 800a900:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a904:	931a      	str	r3, [sp, #104]	@ 0x68
 800a906:	4654      	mov	r4, sl
 800a908:	2205      	movs	r2, #5
 800a90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90e:	4853      	ldr	r0, [pc, #332]	@ (800aa5c <_vfiprintf_r+0x21c>)
 800a910:	f7f5 fc76 	bl	8000200 <memchr>
 800a914:	9a04      	ldr	r2, [sp, #16]
 800a916:	b9d8      	cbnz	r0, 800a950 <_vfiprintf_r+0x110>
 800a918:	06d1      	lsls	r1, r2, #27
 800a91a:	bf44      	itt	mi
 800a91c:	2320      	movmi	r3, #32
 800a91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a922:	0713      	lsls	r3, r2, #28
 800a924:	bf44      	itt	mi
 800a926:	232b      	movmi	r3, #43	@ 0x2b
 800a928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a92c:	f89a 3000 	ldrb.w	r3, [sl]
 800a930:	2b2a      	cmp	r3, #42	@ 0x2a
 800a932:	d015      	beq.n	800a960 <_vfiprintf_r+0x120>
 800a934:	9a07      	ldr	r2, [sp, #28]
 800a936:	4654      	mov	r4, sl
 800a938:	2000      	movs	r0, #0
 800a93a:	f04f 0c0a 	mov.w	ip, #10
 800a93e:	4621      	mov	r1, r4
 800a940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a944:	3b30      	subs	r3, #48	@ 0x30
 800a946:	2b09      	cmp	r3, #9
 800a948:	d94b      	bls.n	800a9e2 <_vfiprintf_r+0x1a2>
 800a94a:	b1b0      	cbz	r0, 800a97a <_vfiprintf_r+0x13a>
 800a94c:	9207      	str	r2, [sp, #28]
 800a94e:	e014      	b.n	800a97a <_vfiprintf_r+0x13a>
 800a950:	eba0 0308 	sub.w	r3, r0, r8
 800a954:	fa09 f303 	lsl.w	r3, r9, r3
 800a958:	4313      	orrs	r3, r2
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	46a2      	mov	sl, r4
 800a95e:	e7d2      	b.n	800a906 <_vfiprintf_r+0xc6>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	1d19      	adds	r1, r3, #4
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	9103      	str	r1, [sp, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bfbb      	ittet	lt
 800a96c:	425b      	neglt	r3, r3
 800a96e:	f042 0202 	orrlt.w	r2, r2, #2
 800a972:	9307      	strge	r3, [sp, #28]
 800a974:	9307      	strlt	r3, [sp, #28]
 800a976:	bfb8      	it	lt
 800a978:	9204      	strlt	r2, [sp, #16]
 800a97a:	7823      	ldrb	r3, [r4, #0]
 800a97c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a97e:	d10a      	bne.n	800a996 <_vfiprintf_r+0x156>
 800a980:	7863      	ldrb	r3, [r4, #1]
 800a982:	2b2a      	cmp	r3, #42	@ 0x2a
 800a984:	d132      	bne.n	800a9ec <_vfiprintf_r+0x1ac>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	1d1a      	adds	r2, r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	9203      	str	r2, [sp, #12]
 800a98e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a992:	3402      	adds	r4, #2
 800a994:	9305      	str	r3, [sp, #20]
 800a996:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa6c <_vfiprintf_r+0x22c>
 800a99a:	7821      	ldrb	r1, [r4, #0]
 800a99c:	2203      	movs	r2, #3
 800a99e:	4650      	mov	r0, sl
 800a9a0:	f7f5 fc2e 	bl	8000200 <memchr>
 800a9a4:	b138      	cbz	r0, 800a9b6 <_vfiprintf_r+0x176>
 800a9a6:	9b04      	ldr	r3, [sp, #16]
 800a9a8:	eba0 000a 	sub.w	r0, r0, sl
 800a9ac:	2240      	movs	r2, #64	@ 0x40
 800a9ae:	4082      	lsls	r2, r0
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	3401      	adds	r4, #1
 800a9b4:	9304      	str	r3, [sp, #16]
 800a9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ba:	4829      	ldr	r0, [pc, #164]	@ (800aa60 <_vfiprintf_r+0x220>)
 800a9bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9c0:	2206      	movs	r2, #6
 800a9c2:	f7f5 fc1d 	bl	8000200 <memchr>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d03f      	beq.n	800aa4a <_vfiprintf_r+0x20a>
 800a9ca:	4b26      	ldr	r3, [pc, #152]	@ (800aa64 <_vfiprintf_r+0x224>)
 800a9cc:	bb1b      	cbnz	r3, 800aa16 <_vfiprintf_r+0x1d6>
 800a9ce:	9b03      	ldr	r3, [sp, #12]
 800a9d0:	3307      	adds	r3, #7
 800a9d2:	f023 0307 	bic.w	r3, r3, #7
 800a9d6:	3308      	adds	r3, #8
 800a9d8:	9303      	str	r3, [sp, #12]
 800a9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9dc:	443b      	add	r3, r7
 800a9de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e0:	e76a      	b.n	800a8b8 <_vfiprintf_r+0x78>
 800a9e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	e7a8      	b.n	800a93e <_vfiprintf_r+0xfe>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	3401      	adds	r4, #1
 800a9f0:	9305      	str	r3, [sp, #20]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	f04f 0c0a 	mov.w	ip, #10
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9fe:	3a30      	subs	r2, #48	@ 0x30
 800aa00:	2a09      	cmp	r2, #9
 800aa02:	d903      	bls.n	800aa0c <_vfiprintf_r+0x1cc>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0c6      	beq.n	800a996 <_vfiprintf_r+0x156>
 800aa08:	9105      	str	r1, [sp, #20]
 800aa0a:	e7c4      	b.n	800a996 <_vfiprintf_r+0x156>
 800aa0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa10:	4604      	mov	r4, r0
 800aa12:	2301      	movs	r3, #1
 800aa14:	e7f0      	b.n	800a9f8 <_vfiprintf_r+0x1b8>
 800aa16:	ab03      	add	r3, sp, #12
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	4b12      	ldr	r3, [pc, #72]	@ (800aa68 <_vfiprintf_r+0x228>)
 800aa1e:	a904      	add	r1, sp, #16
 800aa20:	4630      	mov	r0, r6
 800aa22:	f3af 8000 	nop.w
 800aa26:	4607      	mov	r7, r0
 800aa28:	1c78      	adds	r0, r7, #1
 800aa2a:	d1d6      	bne.n	800a9da <_vfiprintf_r+0x19a>
 800aa2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa2e:	07d9      	lsls	r1, r3, #31
 800aa30:	d405      	bmi.n	800aa3e <_vfiprintf_r+0x1fe>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	059a      	lsls	r2, r3, #22
 800aa36:	d402      	bmi.n	800aa3e <_vfiprintf_r+0x1fe>
 800aa38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa3a:	f7ff fc85 	bl	800a348 <__retarget_lock_release_recursive>
 800aa3e:	89ab      	ldrh	r3, [r5, #12]
 800aa40:	065b      	lsls	r3, r3, #25
 800aa42:	f53f af1f 	bmi.w	800a884 <_vfiprintf_r+0x44>
 800aa46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa48:	e71e      	b.n	800a888 <_vfiprintf_r+0x48>
 800aa4a:	ab03      	add	r3, sp, #12
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	462a      	mov	r2, r5
 800aa50:	4b05      	ldr	r3, [pc, #20]	@ (800aa68 <_vfiprintf_r+0x228>)
 800aa52:	a904      	add	r1, sp, #16
 800aa54:	4630      	mov	r0, r6
 800aa56:	f000 f879 	bl	800ab4c <_printf_i>
 800aa5a:	e7e4      	b.n	800aa26 <_vfiprintf_r+0x1e6>
 800aa5c:	0800b480 	.word	0x0800b480
 800aa60:	0800b48a 	.word	0x0800b48a
 800aa64:	00000000 	.word	0x00000000
 800aa68:	0800a81b 	.word	0x0800a81b
 800aa6c:	0800b486 	.word	0x0800b486

0800aa70 <_printf_common>:
 800aa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	4616      	mov	r6, r2
 800aa76:	4698      	mov	r8, r3
 800aa78:	688a      	ldr	r2, [r1, #8]
 800aa7a:	690b      	ldr	r3, [r1, #16]
 800aa7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa80:	4293      	cmp	r3, r2
 800aa82:	bfb8      	it	lt
 800aa84:	4613      	movlt	r3, r2
 800aa86:	6033      	str	r3, [r6, #0]
 800aa88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	460c      	mov	r4, r1
 800aa90:	b10a      	cbz	r2, 800aa96 <_printf_common+0x26>
 800aa92:	3301      	adds	r3, #1
 800aa94:	6033      	str	r3, [r6, #0]
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	0699      	lsls	r1, r3, #26
 800aa9a:	bf42      	ittt	mi
 800aa9c:	6833      	ldrmi	r3, [r6, #0]
 800aa9e:	3302      	addmi	r3, #2
 800aaa0:	6033      	strmi	r3, [r6, #0]
 800aaa2:	6825      	ldr	r5, [r4, #0]
 800aaa4:	f015 0506 	ands.w	r5, r5, #6
 800aaa8:	d106      	bne.n	800aab8 <_printf_common+0x48>
 800aaaa:	f104 0a19 	add.w	sl, r4, #25
 800aaae:	68e3      	ldr	r3, [r4, #12]
 800aab0:	6832      	ldr	r2, [r6, #0]
 800aab2:	1a9b      	subs	r3, r3, r2
 800aab4:	42ab      	cmp	r3, r5
 800aab6:	dc26      	bgt.n	800ab06 <_printf_common+0x96>
 800aab8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	3b00      	subs	r3, #0
 800aac0:	bf18      	it	ne
 800aac2:	2301      	movne	r3, #1
 800aac4:	0692      	lsls	r2, r2, #26
 800aac6:	d42b      	bmi.n	800ab20 <_printf_common+0xb0>
 800aac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aacc:	4641      	mov	r1, r8
 800aace:	4638      	mov	r0, r7
 800aad0:	47c8      	blx	r9
 800aad2:	3001      	adds	r0, #1
 800aad4:	d01e      	beq.n	800ab14 <_printf_common+0xa4>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	6922      	ldr	r2, [r4, #16]
 800aada:	f003 0306 	and.w	r3, r3, #6
 800aade:	2b04      	cmp	r3, #4
 800aae0:	bf02      	ittt	eq
 800aae2:	68e5      	ldreq	r5, [r4, #12]
 800aae4:	6833      	ldreq	r3, [r6, #0]
 800aae6:	1aed      	subeq	r5, r5, r3
 800aae8:	68a3      	ldr	r3, [r4, #8]
 800aaea:	bf0c      	ite	eq
 800aaec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaf0:	2500      	movne	r5, #0
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	bfc4      	itt	gt
 800aaf6:	1a9b      	subgt	r3, r3, r2
 800aaf8:	18ed      	addgt	r5, r5, r3
 800aafa:	2600      	movs	r6, #0
 800aafc:	341a      	adds	r4, #26
 800aafe:	42b5      	cmp	r5, r6
 800ab00:	d11a      	bne.n	800ab38 <_printf_common+0xc8>
 800ab02:	2000      	movs	r0, #0
 800ab04:	e008      	b.n	800ab18 <_printf_common+0xa8>
 800ab06:	2301      	movs	r3, #1
 800ab08:	4652      	mov	r2, sl
 800ab0a:	4641      	mov	r1, r8
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	47c8      	blx	r9
 800ab10:	3001      	adds	r0, #1
 800ab12:	d103      	bne.n	800ab1c <_printf_common+0xac>
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1c:	3501      	adds	r5, #1
 800ab1e:	e7c6      	b.n	800aaae <_printf_common+0x3e>
 800ab20:	18e1      	adds	r1, r4, r3
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	2030      	movs	r0, #48	@ 0x30
 800ab26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab2a:	4422      	add	r2, r4
 800ab2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab34:	3302      	adds	r3, #2
 800ab36:	e7c7      	b.n	800aac8 <_printf_common+0x58>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	4622      	mov	r2, r4
 800ab3c:	4641      	mov	r1, r8
 800ab3e:	4638      	mov	r0, r7
 800ab40:	47c8      	blx	r9
 800ab42:	3001      	adds	r0, #1
 800ab44:	d0e6      	beq.n	800ab14 <_printf_common+0xa4>
 800ab46:	3601      	adds	r6, #1
 800ab48:	e7d9      	b.n	800aafe <_printf_common+0x8e>
	...

0800ab4c <_printf_i>:
 800ab4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab50:	7e0f      	ldrb	r7, [r1, #24]
 800ab52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab54:	2f78      	cmp	r7, #120	@ 0x78
 800ab56:	4691      	mov	r9, r2
 800ab58:	4680      	mov	r8, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	469a      	mov	sl, r3
 800ab5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab62:	d807      	bhi.n	800ab74 <_printf_i+0x28>
 800ab64:	2f62      	cmp	r7, #98	@ 0x62
 800ab66:	d80a      	bhi.n	800ab7e <_printf_i+0x32>
 800ab68:	2f00      	cmp	r7, #0
 800ab6a:	f000 80d2 	beq.w	800ad12 <_printf_i+0x1c6>
 800ab6e:	2f58      	cmp	r7, #88	@ 0x58
 800ab70:	f000 80b9 	beq.w	800ace6 <_printf_i+0x19a>
 800ab74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab7c:	e03a      	b.n	800abf4 <_printf_i+0xa8>
 800ab7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab82:	2b15      	cmp	r3, #21
 800ab84:	d8f6      	bhi.n	800ab74 <_printf_i+0x28>
 800ab86:	a101      	add	r1, pc, #4	@ (adr r1, 800ab8c <_printf_i+0x40>)
 800ab88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab8c:	0800abe5 	.word	0x0800abe5
 800ab90:	0800abf9 	.word	0x0800abf9
 800ab94:	0800ab75 	.word	0x0800ab75
 800ab98:	0800ab75 	.word	0x0800ab75
 800ab9c:	0800ab75 	.word	0x0800ab75
 800aba0:	0800ab75 	.word	0x0800ab75
 800aba4:	0800abf9 	.word	0x0800abf9
 800aba8:	0800ab75 	.word	0x0800ab75
 800abac:	0800ab75 	.word	0x0800ab75
 800abb0:	0800ab75 	.word	0x0800ab75
 800abb4:	0800ab75 	.word	0x0800ab75
 800abb8:	0800acf9 	.word	0x0800acf9
 800abbc:	0800ac23 	.word	0x0800ac23
 800abc0:	0800acb3 	.word	0x0800acb3
 800abc4:	0800ab75 	.word	0x0800ab75
 800abc8:	0800ab75 	.word	0x0800ab75
 800abcc:	0800ad1b 	.word	0x0800ad1b
 800abd0:	0800ab75 	.word	0x0800ab75
 800abd4:	0800ac23 	.word	0x0800ac23
 800abd8:	0800ab75 	.word	0x0800ab75
 800abdc:	0800ab75 	.word	0x0800ab75
 800abe0:	0800acbb 	.word	0x0800acbb
 800abe4:	6833      	ldr	r3, [r6, #0]
 800abe6:	1d1a      	adds	r2, r3, #4
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6032      	str	r2, [r6, #0]
 800abec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abf4:	2301      	movs	r3, #1
 800abf6:	e09d      	b.n	800ad34 <_printf_i+0x1e8>
 800abf8:	6833      	ldr	r3, [r6, #0]
 800abfa:	6820      	ldr	r0, [r4, #0]
 800abfc:	1d19      	adds	r1, r3, #4
 800abfe:	6031      	str	r1, [r6, #0]
 800ac00:	0606      	lsls	r6, r0, #24
 800ac02:	d501      	bpl.n	800ac08 <_printf_i+0xbc>
 800ac04:	681d      	ldr	r5, [r3, #0]
 800ac06:	e003      	b.n	800ac10 <_printf_i+0xc4>
 800ac08:	0645      	lsls	r5, r0, #25
 800ac0a:	d5fb      	bpl.n	800ac04 <_printf_i+0xb8>
 800ac0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	da03      	bge.n	800ac1c <_printf_i+0xd0>
 800ac14:	232d      	movs	r3, #45	@ 0x2d
 800ac16:	426d      	negs	r5, r5
 800ac18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac1c:	4859      	ldr	r0, [pc, #356]	@ (800ad84 <_printf_i+0x238>)
 800ac1e:	230a      	movs	r3, #10
 800ac20:	e011      	b.n	800ac46 <_printf_i+0xfa>
 800ac22:	6821      	ldr	r1, [r4, #0]
 800ac24:	6833      	ldr	r3, [r6, #0]
 800ac26:	0608      	lsls	r0, r1, #24
 800ac28:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac2c:	d402      	bmi.n	800ac34 <_printf_i+0xe8>
 800ac2e:	0649      	lsls	r1, r1, #25
 800ac30:	bf48      	it	mi
 800ac32:	b2ad      	uxthmi	r5, r5
 800ac34:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac36:	4853      	ldr	r0, [pc, #332]	@ (800ad84 <_printf_i+0x238>)
 800ac38:	6033      	str	r3, [r6, #0]
 800ac3a:	bf14      	ite	ne
 800ac3c:	230a      	movne	r3, #10
 800ac3e:	2308      	moveq	r3, #8
 800ac40:	2100      	movs	r1, #0
 800ac42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac46:	6866      	ldr	r6, [r4, #4]
 800ac48:	60a6      	str	r6, [r4, #8]
 800ac4a:	2e00      	cmp	r6, #0
 800ac4c:	bfa2      	ittt	ge
 800ac4e:	6821      	ldrge	r1, [r4, #0]
 800ac50:	f021 0104 	bicge.w	r1, r1, #4
 800ac54:	6021      	strge	r1, [r4, #0]
 800ac56:	b90d      	cbnz	r5, 800ac5c <_printf_i+0x110>
 800ac58:	2e00      	cmp	r6, #0
 800ac5a:	d04b      	beq.n	800acf4 <_printf_i+0x1a8>
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac62:	fb03 5711 	mls	r7, r3, r1, r5
 800ac66:	5dc7      	ldrb	r7, [r0, r7]
 800ac68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac6c:	462f      	mov	r7, r5
 800ac6e:	42bb      	cmp	r3, r7
 800ac70:	460d      	mov	r5, r1
 800ac72:	d9f4      	bls.n	800ac5e <_printf_i+0x112>
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d10b      	bne.n	800ac90 <_printf_i+0x144>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	07df      	lsls	r7, r3, #31
 800ac7c:	d508      	bpl.n	800ac90 <_printf_i+0x144>
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	6861      	ldr	r1, [r4, #4]
 800ac82:	4299      	cmp	r1, r3
 800ac84:	bfde      	ittt	le
 800ac86:	2330      	movle	r3, #48	@ 0x30
 800ac88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac90:	1b92      	subs	r2, r2, r6
 800ac92:	6122      	str	r2, [r4, #16]
 800ac94:	f8cd a000 	str.w	sl, [sp]
 800ac98:	464b      	mov	r3, r9
 800ac9a:	aa03      	add	r2, sp, #12
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4640      	mov	r0, r8
 800aca0:	f7ff fee6 	bl	800aa70 <_printf_common>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d14a      	bne.n	800ad3e <_printf_i+0x1f2>
 800aca8:	f04f 30ff 	mov.w	r0, #4294967295
 800acac:	b004      	add	sp, #16
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	f043 0320 	orr.w	r3, r3, #32
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	4833      	ldr	r0, [pc, #204]	@ (800ad88 <_printf_i+0x23c>)
 800acbc:	2778      	movs	r7, #120	@ 0x78
 800acbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	6831      	ldr	r1, [r6, #0]
 800acc6:	061f      	lsls	r7, r3, #24
 800acc8:	f851 5b04 	ldr.w	r5, [r1], #4
 800accc:	d402      	bmi.n	800acd4 <_printf_i+0x188>
 800acce:	065f      	lsls	r7, r3, #25
 800acd0:	bf48      	it	mi
 800acd2:	b2ad      	uxthmi	r5, r5
 800acd4:	6031      	str	r1, [r6, #0]
 800acd6:	07d9      	lsls	r1, r3, #31
 800acd8:	bf44      	itt	mi
 800acda:	f043 0320 	orrmi.w	r3, r3, #32
 800acde:	6023      	strmi	r3, [r4, #0]
 800ace0:	b11d      	cbz	r5, 800acea <_printf_i+0x19e>
 800ace2:	2310      	movs	r3, #16
 800ace4:	e7ac      	b.n	800ac40 <_printf_i+0xf4>
 800ace6:	4827      	ldr	r0, [pc, #156]	@ (800ad84 <_printf_i+0x238>)
 800ace8:	e7e9      	b.n	800acbe <_printf_i+0x172>
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	f023 0320 	bic.w	r3, r3, #32
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	e7f6      	b.n	800ace2 <_printf_i+0x196>
 800acf4:	4616      	mov	r6, r2
 800acf6:	e7bd      	b.n	800ac74 <_printf_i+0x128>
 800acf8:	6833      	ldr	r3, [r6, #0]
 800acfa:	6825      	ldr	r5, [r4, #0]
 800acfc:	6961      	ldr	r1, [r4, #20]
 800acfe:	1d18      	adds	r0, r3, #4
 800ad00:	6030      	str	r0, [r6, #0]
 800ad02:	062e      	lsls	r6, r5, #24
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	d501      	bpl.n	800ad0c <_printf_i+0x1c0>
 800ad08:	6019      	str	r1, [r3, #0]
 800ad0a:	e002      	b.n	800ad12 <_printf_i+0x1c6>
 800ad0c:	0668      	lsls	r0, r5, #25
 800ad0e:	d5fb      	bpl.n	800ad08 <_printf_i+0x1bc>
 800ad10:	8019      	strh	r1, [r3, #0]
 800ad12:	2300      	movs	r3, #0
 800ad14:	6123      	str	r3, [r4, #16]
 800ad16:	4616      	mov	r6, r2
 800ad18:	e7bc      	b.n	800ac94 <_printf_i+0x148>
 800ad1a:	6833      	ldr	r3, [r6, #0]
 800ad1c:	1d1a      	adds	r2, r3, #4
 800ad1e:	6032      	str	r2, [r6, #0]
 800ad20:	681e      	ldr	r6, [r3, #0]
 800ad22:	6862      	ldr	r2, [r4, #4]
 800ad24:	2100      	movs	r1, #0
 800ad26:	4630      	mov	r0, r6
 800ad28:	f7f5 fa6a 	bl	8000200 <memchr>
 800ad2c:	b108      	cbz	r0, 800ad32 <_printf_i+0x1e6>
 800ad2e:	1b80      	subs	r0, r0, r6
 800ad30:	6060      	str	r0, [r4, #4]
 800ad32:	6863      	ldr	r3, [r4, #4]
 800ad34:	6123      	str	r3, [r4, #16]
 800ad36:	2300      	movs	r3, #0
 800ad38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad3c:	e7aa      	b.n	800ac94 <_printf_i+0x148>
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	4632      	mov	r2, r6
 800ad42:	4649      	mov	r1, r9
 800ad44:	4640      	mov	r0, r8
 800ad46:	47d0      	blx	sl
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d0ad      	beq.n	800aca8 <_printf_i+0x15c>
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	079b      	lsls	r3, r3, #30
 800ad50:	d413      	bmi.n	800ad7a <_printf_i+0x22e>
 800ad52:	68e0      	ldr	r0, [r4, #12]
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	4298      	cmp	r0, r3
 800ad58:	bfb8      	it	lt
 800ad5a:	4618      	movlt	r0, r3
 800ad5c:	e7a6      	b.n	800acac <_printf_i+0x160>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	4632      	mov	r2, r6
 800ad62:	4649      	mov	r1, r9
 800ad64:	4640      	mov	r0, r8
 800ad66:	47d0      	blx	sl
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d09d      	beq.n	800aca8 <_printf_i+0x15c>
 800ad6c:	3501      	adds	r5, #1
 800ad6e:	68e3      	ldr	r3, [r4, #12]
 800ad70:	9903      	ldr	r1, [sp, #12]
 800ad72:	1a5b      	subs	r3, r3, r1
 800ad74:	42ab      	cmp	r3, r5
 800ad76:	dcf2      	bgt.n	800ad5e <_printf_i+0x212>
 800ad78:	e7eb      	b.n	800ad52 <_printf_i+0x206>
 800ad7a:	2500      	movs	r5, #0
 800ad7c:	f104 0619 	add.w	r6, r4, #25
 800ad80:	e7f5      	b.n	800ad6e <_printf_i+0x222>
 800ad82:	bf00      	nop
 800ad84:	0800b491 	.word	0x0800b491
 800ad88:	0800b4a2 	.word	0x0800b4a2

0800ad8c <__sflush_r>:
 800ad8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad94:	0716      	lsls	r6, r2, #28
 800ad96:	4605      	mov	r5, r0
 800ad98:	460c      	mov	r4, r1
 800ad9a:	d454      	bmi.n	800ae46 <__sflush_r+0xba>
 800ad9c:	684b      	ldr	r3, [r1, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dc02      	bgt.n	800ada8 <__sflush_r+0x1c>
 800ada2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd48      	ble.n	800ae3a <__sflush_r+0xae>
 800ada8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adaa:	2e00      	cmp	r6, #0
 800adac:	d045      	beq.n	800ae3a <__sflush_r+0xae>
 800adae:	2300      	movs	r3, #0
 800adb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800adb4:	682f      	ldr	r7, [r5, #0]
 800adb6:	6a21      	ldr	r1, [r4, #32]
 800adb8:	602b      	str	r3, [r5, #0]
 800adba:	d030      	beq.n	800ae1e <__sflush_r+0x92>
 800adbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	0759      	lsls	r1, r3, #29
 800adc2:	d505      	bpl.n	800add0 <__sflush_r+0x44>
 800adc4:	6863      	ldr	r3, [r4, #4]
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adca:	b10b      	cbz	r3, 800add0 <__sflush_r+0x44>
 800adcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adce:	1ad2      	subs	r2, r2, r3
 800add0:	2300      	movs	r3, #0
 800add2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800add4:	6a21      	ldr	r1, [r4, #32]
 800add6:	4628      	mov	r0, r5
 800add8:	47b0      	blx	r6
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	d106      	bne.n	800adee <__sflush_r+0x62>
 800ade0:	6829      	ldr	r1, [r5, #0]
 800ade2:	291d      	cmp	r1, #29
 800ade4:	d82b      	bhi.n	800ae3e <__sflush_r+0xb2>
 800ade6:	4a2a      	ldr	r2, [pc, #168]	@ (800ae90 <__sflush_r+0x104>)
 800ade8:	410a      	asrs	r2, r1
 800adea:	07d6      	lsls	r6, r2, #31
 800adec:	d427      	bmi.n	800ae3e <__sflush_r+0xb2>
 800adee:	2200      	movs	r2, #0
 800adf0:	6062      	str	r2, [r4, #4]
 800adf2:	04d9      	lsls	r1, r3, #19
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	6022      	str	r2, [r4, #0]
 800adf8:	d504      	bpl.n	800ae04 <__sflush_r+0x78>
 800adfa:	1c42      	adds	r2, r0, #1
 800adfc:	d101      	bne.n	800ae02 <__sflush_r+0x76>
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	b903      	cbnz	r3, 800ae04 <__sflush_r+0x78>
 800ae02:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae06:	602f      	str	r7, [r5, #0]
 800ae08:	b1b9      	cbz	r1, 800ae3a <__sflush_r+0xae>
 800ae0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae0e:	4299      	cmp	r1, r3
 800ae10:	d002      	beq.n	800ae18 <__sflush_r+0x8c>
 800ae12:	4628      	mov	r0, r5
 800ae14:	f7ff fa9a 	bl	800a34c <_free_r>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae1c:	e00d      	b.n	800ae3a <__sflush_r+0xae>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4628      	mov	r0, r5
 800ae22:	47b0      	blx	r6
 800ae24:	4602      	mov	r2, r0
 800ae26:	1c50      	adds	r0, r2, #1
 800ae28:	d1c9      	bne.n	800adbe <__sflush_r+0x32>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0c6      	beq.n	800adbe <__sflush_r+0x32>
 800ae30:	2b1d      	cmp	r3, #29
 800ae32:	d001      	beq.n	800ae38 <__sflush_r+0xac>
 800ae34:	2b16      	cmp	r3, #22
 800ae36:	d11e      	bne.n	800ae76 <__sflush_r+0xea>
 800ae38:	602f      	str	r7, [r5, #0]
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	e022      	b.n	800ae84 <__sflush_r+0xf8>
 800ae3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae42:	b21b      	sxth	r3, r3
 800ae44:	e01b      	b.n	800ae7e <__sflush_r+0xf2>
 800ae46:	690f      	ldr	r7, [r1, #16]
 800ae48:	2f00      	cmp	r7, #0
 800ae4a:	d0f6      	beq.n	800ae3a <__sflush_r+0xae>
 800ae4c:	0793      	lsls	r3, r2, #30
 800ae4e:	680e      	ldr	r6, [r1, #0]
 800ae50:	bf08      	it	eq
 800ae52:	694b      	ldreq	r3, [r1, #20]
 800ae54:	600f      	str	r7, [r1, #0]
 800ae56:	bf18      	it	ne
 800ae58:	2300      	movne	r3, #0
 800ae5a:	eba6 0807 	sub.w	r8, r6, r7
 800ae5e:	608b      	str	r3, [r1, #8]
 800ae60:	f1b8 0f00 	cmp.w	r8, #0
 800ae64:	dde9      	ble.n	800ae3a <__sflush_r+0xae>
 800ae66:	6a21      	ldr	r1, [r4, #32]
 800ae68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae6a:	4643      	mov	r3, r8
 800ae6c:	463a      	mov	r2, r7
 800ae6e:	4628      	mov	r0, r5
 800ae70:	47b0      	blx	r6
 800ae72:	2800      	cmp	r0, #0
 800ae74:	dc08      	bgt.n	800ae88 <__sflush_r+0xfc>
 800ae76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae7e:	81a3      	strh	r3, [r4, #12]
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295
 800ae84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae88:	4407      	add	r7, r0
 800ae8a:	eba8 0800 	sub.w	r8, r8, r0
 800ae8e:	e7e7      	b.n	800ae60 <__sflush_r+0xd4>
 800ae90:	dfbffffe 	.word	0xdfbffffe

0800ae94 <_fflush_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	690b      	ldr	r3, [r1, #16]
 800ae98:	4605      	mov	r5, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b913      	cbnz	r3, 800aea4 <_fflush_r+0x10>
 800ae9e:	2500      	movs	r5, #0
 800aea0:	4628      	mov	r0, r5
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	b118      	cbz	r0, 800aeae <_fflush_r+0x1a>
 800aea6:	6a03      	ldr	r3, [r0, #32]
 800aea8:	b90b      	cbnz	r3, 800aeae <_fflush_r+0x1a>
 800aeaa:	f7ff f903 	bl	800a0b4 <__sinit>
 800aeae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0f3      	beq.n	800ae9e <_fflush_r+0xa>
 800aeb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aeb8:	07d0      	lsls	r0, r2, #31
 800aeba:	d404      	bmi.n	800aec6 <_fflush_r+0x32>
 800aebc:	0599      	lsls	r1, r3, #22
 800aebe:	d402      	bmi.n	800aec6 <_fflush_r+0x32>
 800aec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aec2:	f7ff fa40 	bl	800a346 <__retarget_lock_acquire_recursive>
 800aec6:	4628      	mov	r0, r5
 800aec8:	4621      	mov	r1, r4
 800aeca:	f7ff ff5f 	bl	800ad8c <__sflush_r>
 800aece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aed0:	07da      	lsls	r2, r3, #31
 800aed2:	4605      	mov	r5, r0
 800aed4:	d4e4      	bmi.n	800aea0 <_fflush_r+0xc>
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	059b      	lsls	r3, r3, #22
 800aeda:	d4e1      	bmi.n	800aea0 <_fflush_r+0xc>
 800aedc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aede:	f7ff fa33 	bl	800a348 <__retarget_lock_release_recursive>
 800aee2:	e7dd      	b.n	800aea0 <_fflush_r+0xc>

0800aee4 <__swbuf_r>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	460e      	mov	r6, r1
 800aee8:	4614      	mov	r4, r2
 800aeea:	4605      	mov	r5, r0
 800aeec:	b118      	cbz	r0, 800aef6 <__swbuf_r+0x12>
 800aeee:	6a03      	ldr	r3, [r0, #32]
 800aef0:	b90b      	cbnz	r3, 800aef6 <__swbuf_r+0x12>
 800aef2:	f7ff f8df 	bl	800a0b4 <__sinit>
 800aef6:	69a3      	ldr	r3, [r4, #24]
 800aef8:	60a3      	str	r3, [r4, #8]
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	071a      	lsls	r2, r3, #28
 800aefe:	d501      	bpl.n	800af04 <__swbuf_r+0x20>
 800af00:	6923      	ldr	r3, [r4, #16]
 800af02:	b943      	cbnz	r3, 800af16 <__swbuf_r+0x32>
 800af04:	4621      	mov	r1, r4
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f82a 	bl	800af60 <__swsetup_r>
 800af0c:	b118      	cbz	r0, 800af16 <__swbuf_r+0x32>
 800af0e:	f04f 37ff 	mov.w	r7, #4294967295
 800af12:	4638      	mov	r0, r7
 800af14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	6922      	ldr	r2, [r4, #16]
 800af1a:	1a98      	subs	r0, r3, r2
 800af1c:	6963      	ldr	r3, [r4, #20]
 800af1e:	b2f6      	uxtb	r6, r6
 800af20:	4283      	cmp	r3, r0
 800af22:	4637      	mov	r7, r6
 800af24:	dc05      	bgt.n	800af32 <__swbuf_r+0x4e>
 800af26:	4621      	mov	r1, r4
 800af28:	4628      	mov	r0, r5
 800af2a:	f7ff ffb3 	bl	800ae94 <_fflush_r>
 800af2e:	2800      	cmp	r0, #0
 800af30:	d1ed      	bne.n	800af0e <__swbuf_r+0x2a>
 800af32:	68a3      	ldr	r3, [r4, #8]
 800af34:	3b01      	subs	r3, #1
 800af36:	60a3      	str	r3, [r4, #8]
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	1c5a      	adds	r2, r3, #1
 800af3c:	6022      	str	r2, [r4, #0]
 800af3e:	701e      	strb	r6, [r3, #0]
 800af40:	6962      	ldr	r2, [r4, #20]
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	429a      	cmp	r2, r3
 800af46:	d004      	beq.n	800af52 <__swbuf_r+0x6e>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	07db      	lsls	r3, r3, #31
 800af4c:	d5e1      	bpl.n	800af12 <__swbuf_r+0x2e>
 800af4e:	2e0a      	cmp	r6, #10
 800af50:	d1df      	bne.n	800af12 <__swbuf_r+0x2e>
 800af52:	4621      	mov	r1, r4
 800af54:	4628      	mov	r0, r5
 800af56:	f7ff ff9d 	bl	800ae94 <_fflush_r>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d0d9      	beq.n	800af12 <__swbuf_r+0x2e>
 800af5e:	e7d6      	b.n	800af0e <__swbuf_r+0x2a>

0800af60 <__swsetup_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4b29      	ldr	r3, [pc, #164]	@ (800b008 <__swsetup_r+0xa8>)
 800af64:	4605      	mov	r5, r0
 800af66:	6818      	ldr	r0, [r3, #0]
 800af68:	460c      	mov	r4, r1
 800af6a:	b118      	cbz	r0, 800af74 <__swsetup_r+0x14>
 800af6c:	6a03      	ldr	r3, [r0, #32]
 800af6e:	b90b      	cbnz	r3, 800af74 <__swsetup_r+0x14>
 800af70:	f7ff f8a0 	bl	800a0b4 <__sinit>
 800af74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af78:	0719      	lsls	r1, r3, #28
 800af7a:	d422      	bmi.n	800afc2 <__swsetup_r+0x62>
 800af7c:	06da      	lsls	r2, r3, #27
 800af7e:	d407      	bmi.n	800af90 <__swsetup_r+0x30>
 800af80:	2209      	movs	r2, #9
 800af82:	602a      	str	r2, [r5, #0]
 800af84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	f04f 30ff 	mov.w	r0, #4294967295
 800af8e:	e033      	b.n	800aff8 <__swsetup_r+0x98>
 800af90:	0758      	lsls	r0, r3, #29
 800af92:	d512      	bpl.n	800afba <__swsetup_r+0x5a>
 800af94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af96:	b141      	cbz	r1, 800afaa <__swsetup_r+0x4a>
 800af98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af9c:	4299      	cmp	r1, r3
 800af9e:	d002      	beq.n	800afa6 <__swsetup_r+0x46>
 800afa0:	4628      	mov	r0, r5
 800afa2:	f7ff f9d3 	bl	800a34c <_free_r>
 800afa6:	2300      	movs	r3, #0
 800afa8:	6363      	str	r3, [r4, #52]	@ 0x34
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	2300      	movs	r3, #0
 800afb4:	6063      	str	r3, [r4, #4]
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	f043 0308 	orr.w	r3, r3, #8
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	b94b      	cbnz	r3, 800afda <__swsetup_r+0x7a>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afd0:	d003      	beq.n	800afda <__swsetup_r+0x7a>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	f000 f8a5 	bl	800b124 <__smakebuf_r>
 800afda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afde:	f013 0201 	ands.w	r2, r3, #1
 800afe2:	d00a      	beq.n	800affa <__swsetup_r+0x9a>
 800afe4:	2200      	movs	r2, #0
 800afe6:	60a2      	str	r2, [r4, #8]
 800afe8:	6962      	ldr	r2, [r4, #20]
 800afea:	4252      	negs	r2, r2
 800afec:	61a2      	str	r2, [r4, #24]
 800afee:	6922      	ldr	r2, [r4, #16]
 800aff0:	b942      	cbnz	r2, 800b004 <__swsetup_r+0xa4>
 800aff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aff6:	d1c5      	bne.n	800af84 <__swsetup_r+0x24>
 800aff8:	bd38      	pop	{r3, r4, r5, pc}
 800affa:	0799      	lsls	r1, r3, #30
 800affc:	bf58      	it	pl
 800affe:	6962      	ldrpl	r2, [r4, #20]
 800b000:	60a2      	str	r2, [r4, #8]
 800b002:	e7f4      	b.n	800afee <__swsetup_r+0x8e>
 800b004:	2000      	movs	r0, #0
 800b006:	e7f7      	b.n	800aff8 <__swsetup_r+0x98>
 800b008:	20000108 	.word	0x20000108

0800b00c <memmove>:
 800b00c:	4288      	cmp	r0, r1
 800b00e:	b510      	push	{r4, lr}
 800b010:	eb01 0402 	add.w	r4, r1, r2
 800b014:	d902      	bls.n	800b01c <memmove+0x10>
 800b016:	4284      	cmp	r4, r0
 800b018:	4623      	mov	r3, r4
 800b01a:	d807      	bhi.n	800b02c <memmove+0x20>
 800b01c:	1e43      	subs	r3, r0, #1
 800b01e:	42a1      	cmp	r1, r4
 800b020:	d008      	beq.n	800b034 <memmove+0x28>
 800b022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b02a:	e7f8      	b.n	800b01e <memmove+0x12>
 800b02c:	4402      	add	r2, r0
 800b02e:	4601      	mov	r1, r0
 800b030:	428a      	cmp	r2, r1
 800b032:	d100      	bne.n	800b036 <memmove+0x2a>
 800b034:	bd10      	pop	{r4, pc}
 800b036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b03e:	e7f7      	b.n	800b030 <memmove+0x24>

0800b040 <_sbrk_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	4d06      	ldr	r5, [pc, #24]	@ (800b05c <_sbrk_r+0x1c>)
 800b044:	2300      	movs	r3, #0
 800b046:	4604      	mov	r4, r0
 800b048:	4608      	mov	r0, r1
 800b04a:	602b      	str	r3, [r5, #0]
 800b04c:	f7f5 fdf8 	bl	8000c40 <_sbrk>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d102      	bne.n	800b05a <_sbrk_r+0x1a>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	b103      	cbz	r3, 800b05a <_sbrk_r+0x1a>
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	20004248 	.word	0x20004248

0800b060 <memcpy>:
 800b060:	440a      	add	r2, r1
 800b062:	4291      	cmp	r1, r2
 800b064:	f100 33ff 	add.w	r3, r0, #4294967295
 800b068:	d100      	bne.n	800b06c <memcpy+0xc>
 800b06a:	4770      	bx	lr
 800b06c:	b510      	push	{r4, lr}
 800b06e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b072:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b076:	4291      	cmp	r1, r2
 800b078:	d1f9      	bne.n	800b06e <memcpy+0xe>
 800b07a:	bd10      	pop	{r4, pc}

0800b07c <_realloc_r>:
 800b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	4680      	mov	r8, r0
 800b082:	4615      	mov	r5, r2
 800b084:	460c      	mov	r4, r1
 800b086:	b921      	cbnz	r1, 800b092 <_realloc_r+0x16>
 800b088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b08c:	4611      	mov	r1, r2
 800b08e:	f7ff b9c9 	b.w	800a424 <_malloc_r>
 800b092:	b92a      	cbnz	r2, 800b0a0 <_realloc_r+0x24>
 800b094:	f7ff f95a 	bl	800a34c <_free_r>
 800b098:	2400      	movs	r4, #0
 800b09a:	4620      	mov	r0, r4
 800b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a0:	f000 f89e 	bl	800b1e0 <_malloc_usable_size_r>
 800b0a4:	4285      	cmp	r5, r0
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	d802      	bhi.n	800b0b0 <_realloc_r+0x34>
 800b0aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0ae:	d8f4      	bhi.n	800b09a <_realloc_r+0x1e>
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	f7ff f9b6 	bl	800a424 <_malloc_r>
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d0ec      	beq.n	800b098 <_realloc_r+0x1c>
 800b0be:	42b5      	cmp	r5, r6
 800b0c0:	462a      	mov	r2, r5
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	bf28      	it	cs
 800b0c6:	4632      	movcs	r2, r6
 800b0c8:	f7ff ffca 	bl	800b060 <memcpy>
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	f7ff f93c 	bl	800a34c <_free_r>
 800b0d4:	463c      	mov	r4, r7
 800b0d6:	e7e0      	b.n	800b09a <_realloc_r+0x1e>

0800b0d8 <__swhatbuf_r>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e0:	2900      	cmp	r1, #0
 800b0e2:	b096      	sub	sp, #88	@ 0x58
 800b0e4:	4615      	mov	r5, r2
 800b0e6:	461e      	mov	r6, r3
 800b0e8:	da0d      	bge.n	800b106 <__swhatbuf_r+0x2e>
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0f0:	f04f 0100 	mov.w	r1, #0
 800b0f4:	bf14      	ite	ne
 800b0f6:	2340      	movne	r3, #64	@ 0x40
 800b0f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	6031      	str	r1, [r6, #0]
 800b100:	602b      	str	r3, [r5, #0]
 800b102:	b016      	add	sp, #88	@ 0x58
 800b104:	bd70      	pop	{r4, r5, r6, pc}
 800b106:	466a      	mov	r2, sp
 800b108:	f000 f848 	bl	800b19c <_fstat_r>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	dbec      	blt.n	800b0ea <__swhatbuf_r+0x12>
 800b110:	9901      	ldr	r1, [sp, #4]
 800b112:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b116:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b11a:	4259      	negs	r1, r3
 800b11c:	4159      	adcs	r1, r3
 800b11e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b122:	e7eb      	b.n	800b0fc <__swhatbuf_r+0x24>

0800b124 <__smakebuf_r>:
 800b124:	898b      	ldrh	r3, [r1, #12]
 800b126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b128:	079d      	lsls	r5, r3, #30
 800b12a:	4606      	mov	r6, r0
 800b12c:	460c      	mov	r4, r1
 800b12e:	d507      	bpl.n	800b140 <__smakebuf_r+0x1c>
 800b130:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	6123      	str	r3, [r4, #16]
 800b138:	2301      	movs	r3, #1
 800b13a:	6163      	str	r3, [r4, #20]
 800b13c:	b003      	add	sp, #12
 800b13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b140:	ab01      	add	r3, sp, #4
 800b142:	466a      	mov	r2, sp
 800b144:	f7ff ffc8 	bl	800b0d8 <__swhatbuf_r>
 800b148:	9f00      	ldr	r7, [sp, #0]
 800b14a:	4605      	mov	r5, r0
 800b14c:	4639      	mov	r1, r7
 800b14e:	4630      	mov	r0, r6
 800b150:	f7ff f968 	bl	800a424 <_malloc_r>
 800b154:	b948      	cbnz	r0, 800b16a <__smakebuf_r+0x46>
 800b156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b15a:	059a      	lsls	r2, r3, #22
 800b15c:	d4ee      	bmi.n	800b13c <__smakebuf_r+0x18>
 800b15e:	f023 0303 	bic.w	r3, r3, #3
 800b162:	f043 0302 	orr.w	r3, r3, #2
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	e7e2      	b.n	800b130 <__smakebuf_r+0xc>
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	6020      	str	r0, [r4, #0]
 800b16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b17a:	b15b      	cbz	r3, 800b194 <__smakebuf_r+0x70>
 800b17c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b180:	4630      	mov	r0, r6
 800b182:	f000 f81d 	bl	800b1c0 <_isatty_r>
 800b186:	b128      	cbz	r0, 800b194 <__smakebuf_r+0x70>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	f023 0303 	bic.w	r3, r3, #3
 800b18e:	f043 0301 	orr.w	r3, r3, #1
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	431d      	orrs	r5, r3
 800b198:	81a5      	strh	r5, [r4, #12]
 800b19a:	e7cf      	b.n	800b13c <__smakebuf_r+0x18>

0800b19c <_fstat_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d07      	ldr	r5, [pc, #28]	@ (800b1bc <_fstat_r+0x20>)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	f7f5 fd20 	bl	8000bee <_fstat>
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	d102      	bne.n	800b1b8 <_fstat_r+0x1c>
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	b103      	cbz	r3, 800b1b8 <_fstat_r+0x1c>
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20004248 	.word	0x20004248

0800b1c0 <_isatty_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d06      	ldr	r5, [pc, #24]	@ (800b1dc <_isatty_r+0x1c>)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f5 fd1f 	bl	8000c0e <_isatty>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_isatty_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_isatty_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	20004248 	.word	0x20004248

0800b1e0 <_malloc_usable_size_r>:
 800b1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1e4:	1f18      	subs	r0, r3, #4
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	bfbc      	itt	lt
 800b1ea:	580b      	ldrlt	r3, [r1, r0]
 800b1ec:	18c0      	addlt	r0, r0, r3
 800b1ee:	4770      	bx	lr

0800b1f0 <_init>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	bf00      	nop
 800b1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f6:	bc08      	pop	{r3}
 800b1f8:	469e      	mov	lr, r3
 800b1fa:	4770      	bx	lr

0800b1fc <_fini>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	bf00      	nop
 800b200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b202:	bc08      	pop	{r3}
 800b204:	469e      	mov	lr, r3
 800b206:	4770      	bx	lr
